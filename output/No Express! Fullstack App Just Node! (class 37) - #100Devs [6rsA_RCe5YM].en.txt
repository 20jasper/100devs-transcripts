
00:00
good morning good afternoon good evening
hope you all are doing well welcome back hey yeah let's go i played the music
and i got so into it i almost forgot the first yeah i was like yeah
yeah what's going on everybody hope you all are doing well welcome back
out we're we got a good night tonight a little different we always like to mix
it up every once in a while tonight we're going to review the node
code from last class step through it kind of almost line by line make sure we
feel comfortable making changes to it and then we're jumping into a project
night that means no check-in we don't want any new riffraff coming in just

00:01
want to be true 100 devs in the house so we're going to get in we're going to
answer some questions we're going to jump into some code and then project
night it is folks i want you to build a full stack app
using core modules some real nerd stuff and then next week we bring in a
sweet sweet express oh can't wait for next week but tonight we do it bare
bones when you're in an interview you say ah express express
i've done it with the core modules on the block by myself let's go
are we riff-raff gatekeepers though uh no it's just because new folks joining
at this point it's always a little weird cause they show up day one and it's
project night and they're like oh what is this so we don't like to do

00:02
tweets on on project nights just so that new folks aren't confused like why we
aren't live on stream anymore why we're on this thing called remo and discord
yeah alrighty folks let's get into it as you
know always like to start off with some questions if you got some questions i
got some answers let's give folks that are running home from work a chance to
get in no new friends exactly no new friends uh not on project nights just too
confusing for folks that are joining all right folks you got questions i got
answers let's get a few questions in as folks join us we're gonna go through the
code and then bump into project night what does ketchup crew do about all
these project nights well when you get to the project boom post on the catch-up
crew hey i'm getting ready to work through this project you'll have tons of
folks that want to join you on that project so if you're going through the
ketchup crew feel free to do the projects at your own pace post in the
ketchup crew folks will join you is our project going to be due for

00:03
homework of course of course we're going to start it tonight it's due for
homework on tuesday i went i went to a job fair now people
are contacting me i'm still not ready what do i do you say hey i'm not
currently looking for new opportunities but i will be in around three months
oh you tell a recruiter that they're like oh you don't wanna you don't wanna
interview right now why why not oh you're you're elusive you're hard to get
maybe i want you more now and i will talk to you in three months and so
always get a time on the calendar and say hey right now i'm not looking for
new opportunities would love to catch up in three months can we put something on
the calendar today for three months away right and the beauty of that is that in
three months time when you are more ready you already have that calendar invite
ready to rock and roll you're ready to meet with those folks and so you're

00:04
gonna start if you're doing things correctly right
if you're doing all the things we've been talking about when it comes to your
resume your linkedin your twitter's all that stuff you're going to start having
recruiters reach out to you and part of the process is managing that
and not not putting all your hopes into each outreach right like having a
dedicated process realizing that you're going to be working with 60 companies
right you got it you got to take it in stride and you got to make sure it's on
your terms and so you got to get comfortable saying hey i'm not really
looking for new opportunities right now but i will be in three months let's
connect then and get the time on the books for then
don't don't run into the slaughter if you're not ready yet that's all i'll say
i have my first chat with a recruiter from ibm tomorrow i had lots of coffee
chats where the end goal was to get a referral from a person what kind of

00:05
questions should i be asking so on the bank
there is a list of questions you can ask other folks so if you just use the bank
exclamation point bank there are questions at the end right
there are questions at the end that you can use to ask during
interviews so make sure you use those questions uh when it's a when it's an
informational interview with a recruiter you want to just kind of talk about the
company what type of what they're looking for in engineers uh what
exciting things that they have that they're working on currently you should
do your research before you go into those calls know about the company know
about new initiatives projects things like that know about their core values
make sure you're peppering that in while you're talking to the recruiter but
a lot of times these first calls are informational asking questions that are

00:06
on the bank and you'll be in a good spot alrighty
got some good questions coming in here what if i'm asked a tech question in an
interview and i still don't know the answer for it that's okay
take a pause think about what you do know and answer in that i'm a big fan of
never saying i don't know right i feel that's that's some somewhat of a
contrarian viewpoint but instead it's like i have no idea you go well here's
what i do know and i know it's in the same realm is that close to what you
were looking for right so even if it's not on the nose with an answer you kind
of give them some background some other things that are close to your experience
the things that you do know and and try to get close to it but remember when
we're interviewing when we're interviewing
it's 160. so sometimes interviews don't go our way that's okay we dust our
shoulders off we move on to the next one

00:07
and we we make sure we never forget that question ever again
should we be getting interviews now no we are not ready to interview yet we are
not ready to interview yet we still have to go through uh the patented 50-day
system to be ready to interview we have a lot of fun stuff a lot of a lot of
things that we have to learn to be really really leaning interviewing
machines so we're not there yet we're getting close we're starting we're
starting to hunt soon we uh we have tonight to get into some node
next week we get into express by the end of next week we just get
by the end of next week you can build your own apis
let's just think about that for a second you'll be able to build your own api
next week any api you want to build you'll be able to do it
by the end of next week you'll be able to build basic crud apps
basic crud apps build your own apis by the end of just next week all right
and then we take the next few weeks to ramp that up

00:08
right we'll take some time actually for you to have time to build projects using
those technologies right so we will have
a little bit of a break coming up that's not really a break it's really just you
having extended project time to put the stuff that we learned into practice
right but we're close folks i know this when we get to know people
like to freak out a little bit but i just got to tell you that you're getting
closer the nectar is getting sweeter you're you're you're almost there in
terms of being able to build whatever you want to build and so tonight we're
seeing the old school the bare bones we're we're pulling on our nerd pants so
we can do it from scratch with with the core modules but next week when we hit
express express makes our lives so much easier
we have to build our own apis and be able to build our own crud apps and then
it's just a matter of what do i want to build and putting in the hours to get it
done so you give me one more week you're gonna be feeling good about the things
that you can build and then that's when the world kind of opens up

00:09
after next week the world opens up you can do the things you want to do you can
build the things that you want to build and companies will start to see the
quality of your projects start to increase and once we're feeling
comfortable building that's when we start the hunt and we lock down these jobs
cool all right speaking of such when we get to node when we get to the
back end there is a moment right there is a moment there's like a little a
little a little little thing that happens in your brain that just goes
right it's kind of it's kind of like jumping into a cold shower
right i don't know if you ever jumped into a cold shower you jump into the
cold shower and it feels horrible at first your heart rate is racing you all
the only thing you want in that moment is to get out of that cold shower but if
you just stick it out just for a few seconds
just for if you if you let the initial shock

00:10
of being in that cold shower dissipate it's not too bad
right it's not too bad once the initial shock goes away
and you realize all right it's just it's just cold water i'm still alive
i'm gonna make it right i'm still here we still in line we still outside right
it was just the shock right that shock that that that that that that
if you just get through that that initial shock that initial panic you
start to realize it's not too bad some folks might even say it feels real good
i think it feels good and i think node can be something similar we look at it
and that that panic reflex happens and just like if you're in a cold shower
you freeze up you panic just a little bit but if you can get just over that just
that little hump of panic that little hump of

00:11
like the brain glitching for a second and you just get to the other side
you start to see the benefits of it right you start to see oh it's not so bad
i can use this to build real stuff i can use this to like make my dreams
come true like this is wonderful and so when we look at this node code tonight
give yourself a second for the to happen and then realize you know what it's not
so bad when we look at node there's a lot of little things
and i don't need you to understand everything
i just need you to know how the lego pieces come together
when we're writing back end code we're sitting on the shoulders of giants
that have done all the heavy lifting for us and so i don't need you to know the
nitty-gritty of how create server works i just know you need to use it when
you're creating a server i don't need you to know the read the

00:12
nitty-gritty of how read file works i just need you to know when you're trying
to send a file that's what you use right and so when we look at this code
tonight give yourself that breathing room that that that a a little bit of trust
that it's gonna be okay and realize that you don't have to know everything it's
right now we are picking up blocks and learning how to put these blocks in
convenient orders that's all it is and eventually we'll have other tools
and systems that make rearranging these blocks easier right making sure that
you have systems to arrange these blocks but at first we're just picking them up
and going all right this does this this does that but i guarantee you when we
look at some of the code tonight i couldn't do it from scratch i wouldn't
want to know how to do it from scratch i
would just look at my past examples grab some snippets put them together i know
how it all comes together but you don't have to stress out about knowing all the

00:13
nitty gritty details so let that moment dissipate
and we're going to get into some node we're gonna we're gonna see it we're
gonna talk through it tonight and then we're gonna get into
remo or discord and practice building tonight i want you to build your first
full stack app something that's going to go on your portfolio that says you know
what i've done it from scratch i've done it with the basic core modules express
was just another tool in my tool belt but i've done it from the beginning so
let's take a moment let's look through this code that we saw last class let's
talk through it kind of go through it line by line and then we're going to stop
we're going to move into a project night
we're going to work on projects together uh as a as a wonderful 100 devs
community and then no next week we add express on top and our life gets

00:14
easier we're building apis we're building the apps of our dreams you're close
up close cool all right folks my roommate where i was studying apis
and objects last night and i was nervous going into it he told me everything
you're saying right now just give it a bit the stress and moment of terrible
past and everything gets so much easier it's true all right folks
let's go ahead and jump jump in i'm going to go ahead little leon here
all right if you need the materials tonight there's no slides there's no
checking because tonight's a project night so we're going to stream just for
a little bit to walk through this code one more time let's panic together
exactly and then once we are done walking through it you're going to jump
into teams to build a full stack app of your choice
i'm excited for you all to be true full stack developers building full stack

00:15
apps with the core modules in the muck let's go all right so
when we look at this code if you don't have the code you can join our discord
exclamation point discord agree to the rules in the follow along materials
channel is this code the node backend simple json if you were here last class
you already have it you can download a fresh copy if you want to but that's
what i'm looking through right now cool all right if we look at it at the top
we have our what what do we have up here chat we have our modules right
and our modules do all the heavy lifting for us if we were to peek into these
modules we would see a bunch of functions that have been written for us

00:16
right that do all the heavy lifting the http module comes with everything we
need to start a server to listen to network requests to respond to network
requests the fs module comes with everything we need to access the disk remember
when we are creating servers right when we when we were talking about
like how the internet's work right we're talking about how the internets work
we have client-side devices and servers and these clients are making requests to
the server and the server's responding at first with files right with files
and those files have to exist somewhere and they're existing on a hard drive or
a solid state drive on the server right they exist on the server and so we need

00:17
something that enables us to grab those files the html file the javascript file
the css file off of the hard drive or off of the ssd we need something that
can actually do that and the fs module is what handles that for us
then we want to be able to look at the different requests that are coming in
when we're talking about this very very basic
back end code here and we're talking about this very very basic full stack app
how are users making requests there's really two types of requests that we see
in this project you know how we're making those two requests
remember from from tuesday there's only two ways that we've been able to make
requests with this app that we've built here what are two ways that they're able
to make requests from the client yeah changing the url was one right so
if they typed in a url and hit enter that was a request

00:18
and the cool thing is we're able to look at that url to see what they were
requesting right that's what the url module's going to help us with here is
going to be able to look and see alright what were you requesting
then we also had one other way that we saw that people were doing and that's
right it was the fetch so in our client-side javascript we had
this lovely fetch here and this fetch was making a request
but if we look on this request in the fetch it has a what
what did this fetch have on it remember when we were doing our apis
has a civic name yeah query parameter exactly we can see
in our fetch that our fetch has a query parameter called student
right it's called student that's the query parameter so if we look
at our modules we have some that's going to help us set up the server

00:19
listen to those requests respond to those requests based on
that's going to enable us to look at the disk grab those files off of our drive
we have some that's going to enable us to look at the url that's be coming in
as part of that request and be able to look at the query
parameters that are part of the request and then last we have figlet
what did figlet do yeah it gave us a lovely ascii art 404
well thickly just takes any string and turns it into ascii art we just used
it for the 404 so it looked good right now is figlet like a core module like

00:20
does that just like come when you use node no how did we get figlit
yeah we had to use npm we used npm install
npm install figlet and we got access to figlet i loved some i said mayan told me
exactly my wolf told you exactly all right so
we have our modules that are doing all the heavy lifting for us
and then we have our actual server code here and you feel the right if you
look right when we look at this there's a lot going on here
the only thing that this is doing all this code that i have highlighted
all this is doing getting close with it looking at what's being asked
and if it understands what you're asking for it gives you a response

00:21
that's all it's doing all the code that i just highlighted all it is is it's
saying all right what did you just ask for from the client
do i know how to respond to what you just asked for
and if it doesn't if i don't know what you're asking for what do i do
if i don't know what you're asking for what am i going to give you
i'm going to give you a 404. so if we go back and look look look
let's go back and take a look you're just asking the server for stuff
and here's me just trying to handle everything you're asking for but
if i don't know what you're asking for this is what i do i respond with a 404
that's it all i'm gonna do is i'm gonna send you i'm gonna send you

00:22
the 404 that's it that's all i'm gonna do if you ask for something and i don't
know what you're asking for you're getting the 404 back all right now
there are a lot of things that you could ask me for let me get back here for a
second right there are a lot of things you could be asking me for right
but when we're talking about web applications we're using a specific interface
what's the interface that we're using when it comes to web applications
i'm in the browser like if i'm if i'm in my clients and i'm in the browser but
i'm using a specific interface a lot of times
yeah i see some folks thrown in there the url is our interface the url is the

00:23
buttons on our remote control so when we run this server
the server is listening for different urls that's it
those are the only buttons on our controller the only buttons on our interface
right it's just the urls so when a user types in a url they are making a request
right they are making a request to our server
and that is the buttons on the on the remote control just like you can hit the
power button remote control and that request goes to the tv and the tv turns on
well the way this server is working is that it's listening for those button
presses but instead of it as being buttons on remote control it's just
different urls that you're asking for right different urls so

00:24
let's go to a normal website let's just go to a normal website
all right normal website let's just go to it
leononwell.com boom beautiful website when i hit enter
what that when i hit enter on leoniewell.com what did i just do i made a request
i made a request to my server my server heard that request
and respond it with html right that's why you're able to see
something in the browser you typed in leonov.com you hit enter you made a
request just like when you press the power button on your remote control
you're making a request to your tv when you type in a url you are making

00:25
requests to servers so now let's look at our server our server is set up to hear
different requests a request on the main page the main
route the the just the normal page that you're on
the default the index the root whatever you want to call it the main page
it's also set up to hear any url that has other page it's set up to hear any
url that has other other page it's set up to listen for urls that have api in it
it's set up to here urls that have this style sheet in it
urls that have this js file in it and if
it doesn't have any of those urls that i just showed you it serves up a 404.

00:26
that's it that's all we're doing it's the only thing that we set up our
server to do right we set up our server to listen for specific things
right we set up our server to listen for specific things
and when it hears those specific things we get to decide what happens
so right now the way most websites work is that you are
typing in urls and when you hit enter on your url
right you expect some stuff back when you go to dominos.com
you expect some html to be sent to you right you expect some stuff to be sent
back to you this is the way the web has always worked

00:27
this is what you do whenever you go to any website
you type in a url you make a request to a server
the server hears the request and it knows what to do because somebody coded
it in the way that it's supposed to respond you get to control
what happens when somebody makes that request when somebody goes to that url
you get to decide what happens and so what we're saying here is if somebody
goes to our main page send them this file if somebody goes to this page
send them this file if somebody goes to this page send them this file if
somebody makes this request do this crap right here if somebody asks for this
send them this file if somebody asks for that send them this file all it is
is someone that's listening and then responding

00:28
we get to code what happens when we hear that request right same exact thing
as a click event if you know how a click event works you
understand how the back end works think about it
right we said when you click on this thing i want you to do all this code
they're just the smurfs are back in town right the smurfs are back in town
right they're just fancy smurfs they got a fancy hat on that's all it is right
when you clicked on something some code ran now instead of it being a click
we're listening for a request and the most simple request you do every

00:29
single day when you're using the internet is just typing in a url
when you type in a url the smurf with the fancy hat hears that request and
then it goes all right so i just heard this request what am i supposed to do
again oh i'm going to send them this file or the other smurf here's this request
and goes what am i going to do again oh i'm going to send them this file
that's all that's happening that's all that's happening the front end someone's
typing in a url on the back end someone hears that request and knows what to do
to respond that's it that's how that everything we do going forward is just that
it really is you make a request we know how to respond that's it
now our responses will get more and more complex

00:30
but the idea of hearing the request and responding it stays the same
eventually when we hear a request we're going to do a bunch of fancy stuff we're
going to go to a database we're going to get data we're going to we're going to
do something with that data we're gonna we're gonna make a really really fancy
response and then respond with it but all it is
is a request and we get to control how we respond so
we have our code here i'm gonna go ahead and open up my terminal
and i want to run this code how can i run this code
i've already done my mpm install biglit right because we didn't have
figlet i already did my mpm install figlit if you don't have figlet
installed you're gonna have to do mpm install
biglit right just so you have it if i wanna start this server i'm gonna do node

00:31
server.js beautiful how do i know that my server is running
yeah no reply i don't have the ability to type out my next command
so something's happening here right something's happening here
i can't actually type another command so i know that my server is running
if we look all the way at the end my mouse died in my mouth
my mouth just died i'll use my other i have my backup mouse all right so
i got i got a backup though all right so if we look over at the end
we can see that my server is running on port 8000. so we
can tell that my server's running because i don't have my reply back and
i can tell that it's on port 8000 so i'm going to go to my browser
and i'm going to go to localhost 8000 and boom

00:32
as soon as i typed in localhost 8000 what did i really do
i typed in locos 8000 i hit enter from my browser what did i do i made a request
beautiful my server which is running is set up to hear that request
and when it heard the request it did something specific let's go look at what
it did so here we go here's the page that was requested
right the main page that was requested when i heard that request what did i
respond with i heard that request what did i respond with i responded exactly

00:33
i responded with my index.html that's it this whole block of text line
12 through 16 right 12 through 16. all of that code was just
so that i could respond with my html file that's it
do i need to know how each of these lines works no
i don't i will never see these again express is going to handle all this for
me in the future i don't need to but i can kind of
decipher what's happening here when you are
there are codes that the browser used to kind of understand if the request you

00:34
made and the response you sent was successful so we're telling it hey
everything went okay that's what 200 means everything went okay and we're
going to send you some html then we're kind of pulling in the html
that we're going to send and then we like we send it that's it
that's it that's what's happening here but do i need to know it no
will express handle it yes right but when folks see this they get
they get freaked out they're like leon do i need to like be able to code this
from scratch hell no you need to understand what's happening yes
you need to understand that when somebody made this request
this is what we wrote to respond with that's it
and we got to control how we responded in the future
if i needed to respond with a different file what could i do

00:35
if i knew that on a different request i was going to respond with a different
file what could i do i could copy it come down here and paste it
and change the file then i'm going to send oh and look what happens here
here's another request that we're set up to handle
all right so somebody request the other page here
is what i'm going to respond with all right let's test it out slash other
page hit enter three two one all right as soon as i hit enter on localhost 8000

00:36
other page what did i do what did i just make i made another request
and guess what my server was set up to hear that
request it was listening for other page when it heard the other page request it
knew what to do it sent this h it sent this html file right cool
let's try other other page three two one boom
as soon as i hit enter what did i do i made a request and guess what my server

00:37
is set up to hear that request it's kind of getting boring right like
we're like ah i thought i thought the background was gonna be so hard all it
is is listening for requests and writing what the heck happens when that request
comes in [Music] oh sleepy why is it what is this back and why is it so hard
cool now something interesting happens though let's go back to our main page
hey welcome leo let's go back to the main page let's hit enter what do we know
what do we know just happened here we made a request

00:38
we heard the request we served up our html file but then something else happened
oh i see y'all the html file asks for some other stuff the html file
made some requests itself right we went to localhost 8000 we made a request for
the html file and if we look at that html file you can see that it requests
a style sheet and it requests a javascript file
right the html file is asking for those stuff with the script and the link so
because we loaded that page we asked for
that html file once it loaded it it made those requests and guess what
our server set up to hear those requests oh you're asking for the style sheet

00:39
boom i got you i'm gonna send you the style sheet oh
you want the javascript file boom i got you i will send you a javascript file
that's it would all images need to be set up this way too
ducati amazing question yes right now every single request would need
to be here in our conditional if you wanted another style sheet you wanted an
image you wanted a javascript file you would need to have it be part of this
conditional doesn't that sound like an absolute nightmare
for every single thing that you would ever think about think about think about
like instagram could you imagine being like oh

00:40
i can't think of like any instagrammers up kim kardashian just posted again and
there's somebody like at instagram like like just trying to update the
conditional before other folks see it so that the image can be sent to everyone
right could you imagine that like they're like oh
they just posted again and they're in there like trying to update the
conditional right no that's not that's not how it can work right so eventually
express aka the stuff that we'll be learning
next week makes it really easy so that any of our static files our h sorry any
of our static files like our css our javascript our images if they're in a
special folder it handles all the routes for us
right now when we're using the core modules anything that we want
needs a route we want a stylesheet needs the route when a javascript file needs
the route images needs the route every single thing

00:41
we need to hard code right now but next week on tuesday
express gives us a magic folder and if we put anything in that magic folder it
handles the routes for us but we ain't there yet we're still on
the block by ourselves building it from scratch
all right we handled each request but what happens if we make a request that's
not part of our conditional let's take a look
so let's go ahead and do log host 8 000 pokemon
we know that there's nothing there we get a 404
let's let's see let's see what happened here right let's try it out we
made a request and it went through this conditional did you just request
the main page no did you request other page no did you

00:42
request other other page no did you request api no did you request the style
sheet no did you request the javascript file no
so there's no other elses to check so the else automatically runs and we send
the 404. that's it somebody asked an interesting question
what's the difference between doing localhost 8000
and just trying to open the html file right like we can we can do this

00:43
right we can do that it opened up the html file it didn't load what though
it didn't load it didn't load the css it didn't load the javascript right
because there's a difference between opening a regular file
and making a request to a server when you're just opening files on your
computer they're not making requests to a server
right when we are doing localhost 8000 we're making a request to a server
the only thing that's a little weird here is that the server exists on our
own computer but eventually the server won't be
running on our computer next week our servers will be running on heroku or
somebody else's computer right and so the difference here is that we are
making requests to a server and that server could be located anywhere
right now it's running on our machine which is a little weird but next week it

00:44
won't be running on our machine and so if we want to make requests and
get stuff back right we need to make requests to a
server that is coded to handle all those responses now our server
is sending us back html right that's what a server does the
server is sending us back html so if i go to localhost 8000 i made a
request for html and it sent it to me and that's we have loaded here
if i somehow magically had the html file i could try opening it and it would
still work but all we did is we asked for that html file right like if if
domino's rolls out an update to their website
what up writer if dominoes rolls out an update to their website
do you have that html file before you request it

00:45
like is there any way that you have that that new html file for domino's new
website uh-oh y'all hear the door open in the background
we can't talk about it hold on chill chill cool cool dom apis yeah
we're learning javascripts node yup connect internets cool all right so if we
we went to domino's website right when we go to domino's website we request
those files there is no way that we have access to
those files until we request them right until we request them

00:46
the only thing that's weird here is that we already have the files right
so that's why it can be a little weird but we're building servers so that anyone
can request these files and get them right now our servers running on our
machine but next week it'll be running on somebody else's computer out there on
the internet and anyone will be able to make requests to it
and when they make requests we're going to send them the html we're going to
send them the javascript we're gonna send them everything
don't get kind of in a weird spot because we're doing everything locally
that's just so that we can do it quicker and faster but there's a difference
between just opening an html file and making a request to a server
is this what netlify is doing then yes netlify takes all of your stuff
and puts it on a server and then when you request it it sends

00:47
you that stuff that's all netlify's doing you gave netlify all of your code
you gave netlify all your html all your css all your javascript and what they
did is they took all that code and put it on a server for you
and then as you request those files they send them to you that's it so
our server right now is running i don't have my repo back so i can still

00:48
see that it's running it is set up right it is set up to here requests
set up to hear requests when it hears those requests
we are responding with different things right we are responding
with different things we get to control what we respond with
right this is where the back end development comes into play
our users can make requests and we get to control what we respond with
and so so far we've just seen right we've just seen all right they
make a request we send an html file they make a request we send a css file
they make a request we send a javascript file right

00:49
but we have all made other types of requests expecting different kind of
data to come back what type of request have we made where
we expected a different kind of data to come back yeah
when we made our api request we expected json back right we expected json back
and so guess what i coded this server to do this server responds
with json as well not only can it respond with html and i'm going to
respond to css javascript it can also respond with some json data oh look at us
right so this is the ability right the ability to respond and build

00:50
right here is a template to build your own api
right right here is a template to build your own api it's a very simple one next
week it'll be a lot easier the parts are
a lot easier to work with but right here is the basics of building your own api
let me show you so if we go back to our site and we type in john bob's evil twin
we get unknown unknown unknown but we type in leon we get leon boss man baller
right and so when i actually clicked click me what happened
wha what happened when i clicked click me what happened i made an api request
to my server i made an api request to my own server let's take a look at it

00:51
where would that request come from where would that api request come from
where's the only place that we've made api requests so far
javascript is correct but give me give me something that comes before that
because we got two kinds of javascript now what kind of javascript
client-side javascript exactly client-side javascript the javascript
that's running in the browser are our main js our main.js is the javascript
that's running in our browser right that enables us to make the
requests to the javascript that's running on our server so we gotta get
comfortable with this idea of client-side javascript versus server-side
client-side is the stuff that we're used to the main.js file that has our api
request that's all running in our browser and it makes requests

00:52
to our servers let's take a look at our main.js and if we look
we have the event listener and that event listener fires our lovely
async function our async function is doing a few things it's getting a value
out of the input and it's plugging that value
into a url that we are then making a fetch with in this fetch is the request
to our what this fetch is a request to our what to our server exactly
this fetch right here this request leaves the browser goes to our server

00:53
and guess what our server is set up to hear that request all right was the url
api let's take a peek was the url api it was all right the base url was api cool
so we we're inside the if now was the word student in the query parameters
what is the word student inside the query parameters let's take a look yes
the word student was in the query parameter beautiful
it was in the query parameters all right so student was in the query parameters
was whatever was student equal to was it equal to leon let's go and take a look

00:54
we passed leon in leon was pulled out of the input
we passed that value as a template string into the url
student equaled leon so when we go to the server we look all right
was the url api it was what student in the query parameters it was
was the student query parameter equal to leon it was so what do we do
we respond with this information we respond with this information
and what are we responding with we're responding with a little bit of
jason look at this go all right with a little bit of json a little jason

00:55
derulo you know what i'm saying right we respond with that json and if we look
the main js is waiting for that json data right it it takes whatever we
respond with puts it in res it makes sure that we're dealing with
that lovely json data and then we can use that response
to plug stuff back into the dom so it was a different kind of request
but our server was still set up to handle it right now what if
student wasn't a part of the query parameters right right would this have ran no

00:56
what if the student query parameter wasn't leon
well then we have an elsif here where we respond with a different set of json
and so with just this very kind of basic if else if we built an api
and the cool thing is we could have responded with anything
we could have done anything we wanted inside of this
lovely bit of code so when we come back you know what not only we're going to
respond with leon boss man baller but we're going to respond with a coin flip
true or false heads or tails right we're going to show how we can make this api
do more and more stuff so we're at the top of the hour
we'll take a little bit of a break if you're new around here we only take five
minute breaks at the top of the hour if you're able to please get up move around
hydrate when we come back we're gonna show you

00:57
how we have full control we can do whatever the heck we want with that response
we're going to see that put it into practice we'll talk about
some of the other stuff that's happening up here
uh and somebody keeps people asking leon why why two equal signs
why not three why what two a lot of weird stuff what was your homework
what's your homework what's the homework here improve the code make it better
make it easier more readable better right so lots of little wins here for you to
improve the code as part of your homework but before we get there let's
go ahead and take a break let's hydrate we're doing a seven minute
break because uh i'm sorry i forget the person that redeemed it uh but they

00:58
redeemed a two minute extension last class and i promised we'd tack it on ah
it was clockwork right yep so we'll we'll attach the two minutes on here and
when we come back we're going to take a little bit deeper into how we can
respond whatever the heck we want to respond with and then once we feel a bit
more comfortable we'll look for the rest and then boom we're moving into project
night so thank you for being here thank you for for hanging tough getting
through the initial as we jump into the cold shower that is
node five minutes on the clock and then sorry seven minutes one o'clock and
we'll be ready let's take a look at these last little pieces and we're
moving on to project night let's go let's work together all right so
we saw that our server is set up to handle a couple different kinds of requests
we saw that it set up to handle requests from like a url being entered
we saw that it can handle the request coming from when say the html file loads
and we saw that it's able to handle the requests that are coming from our

00:59
client-side javascript there's one other little thing here that
we have to understand and that's like how does it know what request is coming in
and that's where these two modules can help us
that are definitely what we consider deprecated now like there are like other
ways to do this now going into the future but uh for the old school way this is
how we did it we were able to use the url module to
actually look at the path name of the url right the path name
right and so the cool thing is with the path name you can
just see what the path was right and so when we go to localhost 8000 the path is
just the forward slash when we go to other page it's slash other page when we

01:00
go to slash other other page the path is slash other other page right and so
we're able to use this bit of code to see what the path was
and then once we know what the path was that's when our conditionals start oh
was it just the main the main page was it other page was it other other
page and that's it so that's how we're able to see the different requests that
are coming in we just look at the path name on the url cool
the other thing here is that sometimes we want to look at the query parameters
that came in with the url right and so here is how we would look at the query
parameters that came in with the url does it matter what this string is
does it matter what this string is like like how it's done

01:01
it doesn't matter the syntax or the the the different combinations that
came in does it matter that there's parse or there's a new way to get rid of
parse does it matter that there's wrecked out your it just doesn't matter
this is how you get the path name and this is how you get the query parameters
i don't need to know how it's working underneath the hood or
what it's doing i just know that if i want the path i can use this
and if i want the query string i can use this right
just like queries yeah just like queries like query selector it does a lot of
stuff for us to be able to grab pieces of the dom
right do we do we lose sleep over how query parameter like query selector
query selector all is actually doing it no we just trust that that bit of code
is what grabs the dom element right people are saying like yes i do

01:02
you're messing up if you let those things bother you it's gonna be really
really hard to keep progressing in your career because there's gonna be so much
stuff you just have to trust right as a software engineer you you have to get
used to the idea that we could spend our whole career on this one slither of
stuff that enables us to like get really really really better at like that one
thing or we can trust the people that spent years on those things
we can just use it and move on right and so you definitely have to keep like an
inquisitive mind you definitely have to know like all right when something is no
longer useful or when it is useful but there's so much stuff that if you keep
going like super super super super narrow focused
on all these little things you'll never be able to kind of continue and to build
bigger and bigger stuff remember the goal right the goal is to like accomplish
our goals right our goal is to to build products our

01:03
goal is to provide value right and so we could nerd out about what
exactly is happening like right here or we could just know
that this is how we get the path off the url
we could nerd out like what's happening here or we could just know this is how i
get the query parameters off of url and you gotta get comfortable
with some level of magic right because as we keep adding more and
more stuff on top there's more and more magic and once you're once you're in the
job right once you're in the job once you're getting paid
once you are building real products if there's something that you were like
you know what i really do want to understand
how it's parsing the url you can go back
and nerd out spend three weekends really trying to understand it there's so many
things that i have gone back and done that but we're here to get jobs

01:04
right we're here to get jobs we spent a long period of time talking
about one really important thing which is called abstraction
exactly and now we're putting that abstraction into play
right we're putting that abstraction into play we're gonna trust that the
engineers that we're working on the boiler and the steam one have done their
job and we're just gonna use it to build our espresso machine right cool
all right so that's everything that's happening in here
we have the ability to kind of listen to all the different requests
and generate all of the responses and i just wanted to do
something cool like let's say they let's
say they made the api request maybe that fetch came in
we saw that student was in the query parameters we saw that leon was there we
can do whatever we want here like i i could do something like this i could do

01:05
like math.random right math.random um times two all right let's put that into a
math.seal right we do that and we could do like uh math.random times two equals
one heads whales what the heck did i just do boom coin flip exactly

01:06
so i just generated i said all right let's make a a coin flip right
math.random times 2 is going to give me when i round it one or two
right so if it was one i'm gonna say that was heads
and if it wasn't one then i'll say it was tails
cool then we can just come down here and say flip
and pass in let's put this in a variable let uh res uh flip result equal
and then we just plug in click clip-rest here right so we generated a coin flip
and then we're just gonna pass that back along with our response
so very very quickly we can start to do whatever the heck we want we can do
whatever the heck we want server side right i'm glad mine right

01:07
we can do whatever the flip flip we do whatever the heck we want server side
and then send it back with that response so we go back to our main js
um let's just let let's let's look at the console log of data
i'm going to restart my server just to make sure because it's been running
cool all right i made changes i restarted my server
let's come back here let's refresh let's make sure that the inspector is open
console's open type in leon boom and we can see not only do we have the current
occupation of baller now we also have a flip of heads
all right we also have a flip of heads and so very quickly we took what was
just a very simple api and now we decide you know what instead
of it instead of it just being a normal api

01:08
we're also going to determine whether or not a coin flip was heads or tails and
we respond with that data so now that you have the template
you can start to build the app of your dreams that responds
with whatever you want we just did a coin flip together but you
could very easily do rock paper scissors right you could start to build out very
simple applications or very simple apis using this template
i didn't change anything in the main.js the main.js always had that that console
log and so i was just looking at in at that console log here that's all
questions while we're here questions before we move on to project night

01:09
questions while we're here everybody wants to gamble what's our project
the project is up to you the project is up to you
i want you to think about something as a group that you can do right
that you can do and make it happen so we just did coin flip
a lot of you will probably do like rock paper scissors
right that's pretty common for for this project if you if you can't think of
something original go with rock paper scissors right
but i typically think i think most groups come up with something fun that
they can build right and they use this bare bones
template here to start building out that
application now some of you might have a lot of questions you might not still
feel comfortable with this code that's the beauty of getting into a group

01:10
remember tonight is a night for folks to work together
of all different skill sets and experiences
don't be the [&nbsp;__&nbsp;] [&nbsp;__&nbsp;] that's a
little bit further ahead and doesn't want to support folks that are a little
bit further behind don't be that person there's no room for
you in this community right no room for you in this community get
the [&nbsp;__&nbsp;] out if that's who you want to
be get the [&nbsp;__&nbsp;] out i don't want you here right so be kind
be helpful and that is the first priority getting the project done
right getting that project done is the secondary thing i want everyone in these
groups to understand what's happening in this code
i want everyone in the groups to come together to build something fun
and if you can't work together if you
want to be a flex asaurus get the [&nbsp;__&nbsp;]
out i really don't want you a part of this community anymore
we're gonna have some folks that they're very very new to coding we're not some

01:11
folks that might not even been to the last few classes it doesn't matter the
goal is to start working together remember when we start applying to these
jobs there's two questions can you code and do i want to work with
you for the next two years some of you are really good at the coding part but
you got a lot of work when it comes to i want to work with you for the next two
years because you're going to come across folks of all different skill sets
and experiences on the job and so you need to work on that too so please
we are going to jump into remo uh you can use remo to work for some
folks remo doesn't work that well so we'll be on discord as well i want you
to find a group maybe in your study community on discord uh maybe in one of
the voice channels on discord or on remo definitely try remember because it's
smaller groups you can see each other come together with a project idea
and then work on that project for the rest of this evening i'm gonna ask for
your project submissions on tuesday remember everyone has the fresh start

01:12
these projects matter if you want my help at the end of program you need to
do these projects i need to be able to talk to a hiring partner and say yes
this person has worked with several engineers to build real projects don't
be the person that comes to class and then runs away and doesn't do the
projects i can't vouch for you if you're not working with other engineers
right so please come hang out on remo hang out on
discord ask questions we're going to be kind we're going to be helpful first the
finishing the project figuring out the project is secondary
we got to get used to working in groups we got to get used to working with other
engineers and tonight is how it starts all right folks

01:13
let's go ahead um i'm going to paste the the the lovely remo links in chat
if you don't have them i'm going to spam them for you right here they were in
discord both in the follow along materials and the learn with leon live channel
so if you need them they're on discord but i'm also going to span them here in
chat remember if remo doesn't work too well for you try
remo first please if remo doesn't work for you feel free to use discord
i want to see the cool stuff that you're able to build
i want to see the cool stuff that you're able to build remember kind first
understand the code second build a project third
we're trying to build the best place for folks to learn how to code online
kindness always matters most all right folks have a wonderful rest of your
night good luck getting into your groups i'm going to be popping in on remo
seeing how folks are doing trying to help a little bit

01:14
and i will see you all on sunday for an amazing office hours and then
next week we get to express we're building apis from scratch we're
building crud apps from scratch can't wait to see you then all right good luck
getting into your groups good luck working on your projects uh if you come
up with something cool share it on discord or tweet me i would love to see
the projects that you work tweet me tweet the projects out that you finish
uh tonight i want to see the cool stuff coming in projects are gonna be due
tuesday all right folks good luck getting on remo good luck getting on
discord and i'll see you on remo in just a few seconds peace
