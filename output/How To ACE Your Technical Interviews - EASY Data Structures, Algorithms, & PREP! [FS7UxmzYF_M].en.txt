
00:00
the magic of technical interviewing comes down to prep
parameters returns examples pseudo code but there's a few things that we have to
do before we even get to the point where we're using prep and we're solving a
technical coding challenge when you're in the interview process
no part of that process should ever be a mystery
you should know everything that's coming up in that interview if you ever sit
down in an interview or you log into the
call with your interviewer and you don't know what's about to happen you have
[&nbsp;__&nbsp;] up say that one more time you should never ever go into an
interview having no idea about what's about to happen

00:01
so how do we know what's about to happen we ask
we asked the recruiter we asked any person that we've been put in contact
with we say hey I have an interview scheduled for Friday what should I
expect in that interview uh you should expect some behavioral
questions and a technical question great
when you say behavioral questions do you mean kind of just like the normal hey
tell me about a time you had this experience type question okay and for
the technical question which should I prepare to be successful in that
technical interview well actually we don't want to tell you
what to be prepared for well that I don't want to waste your time and I
don't want you to waste my time either right like I want to make sure that if
if you're going to test a very specific thing then I'm I'm up to date on that's
a very specific thing that way we're able to get right into the interview and
I'm able to save you all some time and and make it better on my end as well so
are there any topics I should cover are there any specific things that I should

00:02
know about for that technical interview uh and if you don't if you can't hear
the topic will it be like a coding challenge will I be doing something
that's more like a elite code style question or will it be more of a code
along what should I be expecting in that interview right
and nine times out of ten not only will they tell you what to expect they'll
give you like hints for That interview and what you have to realize is that if
you just ask if you just ask they're going to tell you most of the time and
sometimes sometimes they give you way more than they should
sometimes they give you way more than they should I've had recruiters tell my
students the exact questions they were going to be asked during the interview

00:03
like the exact question so you ask first then once you've asked and you have a
rough idea of what you're getting into the next thing you should do is Google
the company like someone's going to give
you a lot of money if you find something out about them
right this is the one time in your life where a Google search connects you
high five six figures even because a lot of times the interview
process is clearly online a lot of times the companies will have blog posts on
what it's like to interview at that company
like with the actual questions uh and so if you haven't done your research with
like what you should be like if you haven't looked up the company you
haven't Googled what their process is like they're gonna hold that against you
we have a blog post on exactly what this interview is going to be heck we even
put one of the questions in that blog post so not only were you not prepared
you didn't do any research on the company right so you want to make sure

00:04
that you Google the crap out of them because a lot of times they'll share
details about the interview process directly from them
then you take it another level you will go ahead and look on Glassdoor
you will go ahead and look on GitHub and you're going to try and find anything
you can find about that company and what
the interview process is like so you not only have you asked and got it directly
from the source but a lot of times on Glassdoor you can find
not only like what the process is like but probably the actual questions same
thing with GitHub a lot of people push their solutions to GitHub and so you can
find sometimes the exact question you're going to be asked on GitHub now
like I said I'm going to show you how to
play the game it's up to you if you want to play it but
putting in that extra step helps you so that you're not going into these

00:05
interviews right going into these interviews
without knowing what you're going to get yourself into that relieves some of the
anxiety it relieves some of the stress and it makes sure that you are prepared
yeah like I showed you the Spotify once before I'm curious let's see let's do
GitHub we said SoundCloud I don't even know if they like interview like
is it one word I don't want to do it inside of my it just shows you my interview
right like and this is not like a like it's not like a hard search like I
didn't really like go searching for it I'm not using like the way back machine
or anything like that like there we could right like these are older but like we

00:06
didn't even try right we didn't even try right we'd even try so imagine if you
gave it a good 15-20 minutes of trying like you're really getting in there
right maybe you found like a type of question on Glassdoor and then you threw
that and get like you're we're not even trying and we're already seeing stuff
come up uh you will also you will also realize that a lot of
companies don't change their interviews foreign I'll leave it at this
one of the top startups in Boston that pays the most
has not changed their interview question in four years

00:07
and I bluntly asked them why [Laughter] I'm keeping it like come on now I'm
keeping it I'm keeping it uh keeping it on under wrapped so that we don't put
them on blast and people are just like throwing company names in there uh
hasn't changed it in four years and so I I asked them why
and I know one of the engineering managers that actually is in charge of
hiring for one of their teams and they said the reason is why do we
need to change it the whole team knows how to look at that code the whole team
knows um how long it should take somebody to solve it the whole team knows that
intimately and most candidates don't know how to solve it
it is an amazing filter for them right it is an amazing filter from them
because it's not a trivial problem but they actually they say like if you
can't do the research you can't look up the things that we do

00:08
at the company that's a huge like that's just like a huge misstep like they
haven't changed in four years it's kind of easy to figure out what you're about
to be asked and then they don't actually care about the code at the end of the
day they care about your communication and collaboration during the coding
challenge they expect anybody that would
work with them would already know how to solve the problem so why does it matter
if they know how to solve the problem like because they look like it it just
doesn't matter it's not what they're testing
right it's not what they're testing and so it actually is an even better filter
for them if you can't solve it because they knew that you should have already
seen it seven minutes said I was asked the same
interview question at a company out of New York City that was identical to what
I found someone on Glassdoor had written
three years ago I just did a test run of the question itself figured it out it

00:09
was surprised to see the technical interview was the exact question I had
already solved when practice prepping for the company that's it
right because we have to realize that the technical coding challenge isn't
like the make or break if your company is hiring and that's the make or break
and you're not looking at all these other things that's your fault so
make sure you're doing the bare minimum to know what you're doing going into
these interviews now we talked about prep before prep stands for parameters
returns examples and pseudo code it's a checklist of things that we're working
through when we're interacting with our interviewer during a technical interview
when I say technical interview I mean a coding challenge a lot of times these
coding challenges were done on whiteboards and you're writing stuff out
more often than not nowadays especially with the pandemic everything is online
and you're doing a coding challenge digitally either through a platform they

00:10
share with you or you're sharing your screen during the interview
and so this prep this parameter returns example pseudocode which we're about to
break down really does three key things for you
it helps you to better understand the problem that's being asked
it gives you about 15 minutes to figure out how you're going to solve the
problem and it enables you to build a rapport with your interviewer
and this is the key thing technical interviews test two things one
can you code and two do I want to work with this person for the next two years
you're playing both games at the same time and so by working through prep
parameters returns example pseudo code you can take that time to build the
rapport with your interviewer so at the end they go this is a great person I

00:11
really like talking with them I would definitely want to work with them for
the next two years so I'm going to vote that we hire them
uh do we tell them that we've seen it or
something similar when they give you the question uh I wish
I'm looking to copy and paste my notes so I always have my notes on my side for
for my lecture notes here here is my lecture I'm just going
to paste them right into chat so you can see that this is literally in in the
red that was literally my notes so the notes said don't type out prep
don't get excited be cool you want me to build a palindrome what's a palindrome
can you clarify what a pound drum is and don't snitch on yourself uh

00:12
we are lean mean interviewing machines we've been prepping for months
you've been doing a code Wars every day for months
now you're taking the interview process even more seriously you're doing a a
challenge with me every day you're doing leak codes now
you are prepping through each of these you're adding them to your enki there is
a really big chance that the question you get asked is a
question that you have already seen that's the [&nbsp;__&nbsp;] point
of doing all this work that's the point that's why we do it all
so when we're in the interview we've already done it or something at least
very close to it and so one of the things you have to do

00:13
in that interview is and I see it all the time when I enter when I interview
folks I I can I can pick it up right but when somebody says all right tonight
we're going to do a palindrome I want you to tell me whether or not a word
passed into a function is a palindrome some people this is what they do
when I tell them a problem that I know they know how to solve their eyes get
real wide they're like oh my gosh yes they're like punching the screen and
stuff like like I can see in their face that they know exactly how to solve the
problem that that's the code Wars they did yesterday that they just they they
might as if I handed them the basketball
they'd be slam dunking over top of their monitor right don't do that keep cool
be chill don't get excited repeat the question back to your

00:14
interviewer right make sure you understand take your time
and then walk through the challenges though you've never heard a word of what
they're saying take the dub don't snitch on yourself cool so
what we're going to do is we are going to use prep
to solve a very simple coding challenge I need you to use prep
for every single coding challenge you you use going forward whether it's with
me whether it's on your own whether it is uh a a coding challenge that you are
doing I I don't care you will now use prep every day of your life for the rest
of your life whenever you solve a coding challenge you should be prepping at the

00:15
mall at the studio at your mama's house just be prepping okay now
there are three types of questions that we're going to run into
I forgot I wasn't on the slides there were slides for this be prepping
at the mall at the studio at your mama's house now anybody know where this comes
from if people know where that comes from I'll be impressed I'll make you VIP
if you know where that comes from nah we ain't hip it was a reach it was a
reach uh this is from Montana 300 Chiraq
Remix They strapped at the mall straight to the studios they strapped at your
mama's house so I keep that in my mind we're gonna be prepping at the mall
at the studio at your mama's house you do not solve a coding challenge for the

00:16
rest of your life without doing prep are we clear are we good okay can can
can I just get a just get a yes we're signing this this this pact this oath
that we will be using prep for the rest of our days okay cool now
there are three types of problems that you're gonna run into during an interview
they're going to be methods problems which are problems that you can probably
knock out the park just with the methods that I've asked you to study so for the
past couple of weeks I've asked you to study some very specific things I ask
you to study string Methods and array methods specifically I even gave you a
list of the string Methods I wanted you to have memorized I need you to have
them memorized I need you to have them in your Anki because you will be

00:17
surprised the number of interviews with just prep and really knowing your
methods right you can get through a huge portion of interviews
I want people to realize like you can get through a huge portion of technical
interviews without knowing any advanced data structures or algorithms just if
you know your methods really well and you know how to use prep
the reason why this can work is because a lot of these coding
challenges right A lot of these coding challenges
we'll give you about 45 minutes to solve
you're gonna take at least 15 minutes of the 45 to prep meaning you're walking
through the parameters the returns the examples the pseudo code you burned at
least 15 minutes doing the prep the reason why we do that is because

00:18
prep make sure you build a rapport with your interviewer but it also Burns time
because we're going to slam dunk solving the problem
but we might not get to the more optimal solution
only you will know as you're going through prep if you have a reasonable
chance of making it to an optimal solution what most of you will see very
clearly is a way to solve it with methods and for problems that you can't solve
with the methods you're gonna do something called Brute forcing
brute forcing is where you just use the big four you're using your variables
your conditionals your Loops right and your functions to solve a problem you're

00:19
not adding anything extra it'll be ugly it'll be bad code but it would work
today I learned brute force is my default it should be your default you
should always brute force your Solutions first
and then as you have time come up with the optimal solution
right we are we Brute Force first and then come up with the optimal solution
so you are going to look at the problem and by the time you are done your prep
you will know how to solve it with the methods or by brute forcing it
that will be most of the problems that you encounter
the last step is having detailed knowledge on data structures and
algorithms that help you come up with a more optimal solution than the Brute
Force solution that you just came up with but here's the thing that will work
like 85 percent of the time remember you're going to get got but you're going
to get yours more than you get got you got to keep Marshawn Lynch in our brains

00:20
right he spent 15 minutes on prep you spent the next 25 minutes 20 minutes
let's say 20 minutes solving the problem with methods or
solving the problem just by brute forcing it nested for Loops ugly code
right bad code but it solves the problem so you're 15 on prep 20 on actually
solving it you got five to ten minutes left hey
we got it working I know this is not an optimal solution
we have about 10 minutes left and unfortunately I do have a hard stop
right 45 minutes I do have another interview I have to get to I would love
to talk about how I might attempt this optimal solution uh but if we don't have
enough time that's okay what I what I can do is I can just follow up after
this interview with the optimal solution so I know we got something working I

00:21
feel like I can do it slightly better do you agree okay what I'll do is I will
follow up after this interview uh with the optimal solution and I'll take a
little bit more time to to to to to to get it all the way across the line
as long as you're not interviewing at Fang there's a good chance that that might
work does it work all the time no but there's a good chance that it'll work
the best offer I ever got the best offer I've ever had anywhere to
work or learn to sorry to work was an interview where I brute forced it
I did not come up with the optimal solution I went into the parking lot I
pulled out my laptop I Googled it I figured out the optimal solution I sent

00:22
them an email saying here's how I would do it optimally
best offer I've ever seen in my life all right now the interesting thing
about folks are like Lee and I do want to go to Fang I do want to go to the
Super top tier tier companies here's the beautiful thing I've literally gone to
Google I've met with the in the person in charge of interviewing like at Google
Boston's campus I met the people that like on the committee to decide whether
or not you get hired directly from them they gave my students a learning plan
and they said directly in their here's how I want your interviews to go I want
you to prep I want you to brute force it and then we expect our Engineers from
The Brute Force to get to a more optimal
solution so even if you want to do these super high Echelon companies you still
have to do the same freaking process you just need a little bit more data

00:23
structures and algorithms on top right so it's still the same process
depending on how far you want to go but for most of us we can get away with
the methods we can get away with the brute force and then
we're going to see both of those tonight and then on Thursday we're going to add
data structures and algorithm so we can also do things optimally
I'm going to give you the full the full range here but tonight we're going to
start off with methods so I'm going to go ahead and open up a replet
uh the most important thing I can tell you about going into a technical
interview is to have your environment already set up
right if you know you're going into a technical interview please For the Love
of All That is Holy have your environment sent up I don't want to see
you fumbling with vs code or opening some windows or trying to get stuff

00:24
going I I want you to be able to sit down and start coding right away
um it it it's just something small that shows the interviewer that you're ready
that you're prepared uh so I use replit for any time I'm allowed to use my own
editor or I'm allowed to like type my own code somewhere I just use replit
it's really easy to have um either like templates already set up
to have node environments already set up to have JavaScript already set up it's
just easy to to have it up and running I don't have to worry about like having
Windows where it runs or anything like that so I use replit if I can use my own
environment and then a lot of companies will give you their own like they'll be
giving you like a coder pad or something like that um
anything that you're used to using will work inside of repl as well but if you
already have right if you already have some other system that just works well

00:25
for you and your your vs code is already suited out your your vimasaurus I I it
doesn't matter it's just whatever you know you're going to use become really
good at it have it already set up and use it for whenever you are practicing
right so I use replit for interviews that means all my code Wars all my leak
code everything is done inside of this replit so whenever you're doing your
coding challenges going forward you're going to use the same thing uh to make
sure that you're doing it well so I am now going to pretend that I am
going through a technical coding challenge all right I am going to pretend that
someone is interviewing me and for every single coding challenge going forward
you need to do the same thing get yourself a duck get yourself

00:26
a a bob whoever you're going to talk to throughout your entire interview you
need to have someone it could be your your Gatorade bottle I I don't care
but when you're practicing your technical interviews
right when you're practicing your technical interviews you should always always
imagine yourself in the interview talking to an actual interviewer
no more just quiet typing to yourself you want to be verbalizing everything
that you are doing what you are going to notice is the
entire time that I am doing this coding challenge I will not stop talking
your technical challenges are testing two things can you code and do I want to

00:27
work with you for the next two years the communication and collaboration is key
so Bob my interviewer has just given me a problem and their problem is Leon
I would like for you to create a function for me that takes in a word and
the function should tell us whether or not that word is a palindrome
thank you Bob I appreciate the question just to make sure I heard it correctly
and do you mind if I take a few notes as we go through the the process no I'm
going to take some it was wonderful thank you so uh what I heard you just
say is that you want me to go ahead and create a function and that function
should take in a word and that word uh should be taken in and we should say
whether or not whether or not that that word is a palindrome cool

00:28
what I will do now is not freak out I've done this palindrome question a
bazillion times it's been on code Wars It's been on League code I when you do
hunt Tober we're gonna do it together too so when you see this and you say oh
my gosh I know how to solve it we don't we don't do the bugging out and like oh
like no no like fist pumping the very first question is we say great
thank you so much for the question now just to make sure
a palindrome and I'm just going to clarify with you here a palindrome is a
word that is spelled the same forwards and backwards correct
and Bob will go yes a palindrome is uh the word a word that is spelled the same
four words and backwards wonderful thank you so much always
clarify even if you think you know what they are talking about right
clarify because they might be talking nonsense

00:29
so now we're on the same page we both know what a palindrome is we both know
that we're going to create a function that is taking in a word and we're going
to say whether or not it's a palindrome great The Next Step
is I'm going to start walking through my prep and where a lot of folks make a
mistake is they do this I see this all the time don't type out prep
let this be the internal system that you're using that makes you look like a
badass but you don't need to let them know that you're like using a system
all right so I even see people do it they'll like type the p and they'll say
no no no we're just going to say all right
so I would love just to ask you a series of questions just to make sure I
understand the problem is that okay Bob yes now notice what I'm doing here I am

00:30
asking a lot of questions to Bob and I am getting them talking immediately and
one of the oldest sales tricks in the book is to get your person saying yes as
early and as often as possible so I'm I'm giving questions that I know
Bob is going to say yes to all right Bob just to confirm a palindrome is a word
that is the same forwards and backwards is that correct yes wonderful I'm going
to ask a series of questions just to make sure I understand the problem
we are taking in a word so this is going to be my parameters parameters are the
things that are coming into the problem all right Bob so I know I'm going to be
taking in a word now for this word there is a few things I I want to clarify
will a word always be passed in like well I always have will it be a string
and will it always be a string yes I can always assume that I will be

00:31
getting a string passed in great will this string ever be empty
no so no empty strings okay so no empty strings beautiful will this
string ever have any special characters like a like a period uh a a bang or
anything in it that would be not just a normal like a normal string or like a
normal word sorry wonderful all right so I know that
there'll be no special characters I'm just gonna say no bang and another thing
here will there ever be numbers mixed in with this word no numbers
cool no nums so it seems pretty straightforward it'll be a string it
won't ever be an empty string there'll be no special characters there'll be no
numbers uh no funny business right no funny business no extra things that
like would make the string not a word okay nothing that would make this string

00:32
no funny business and the last thing that I want to just
clarify here is will this word be case sensitive will there ever be capital
letters will there be ever uh anything that I have to keep in mind about this
word okay uh no no uh no funny business and I I spelled it
funny there we go uh no funny business and I don't have to worry about
capitalization thank you so no caps and I guess when I think will there ever
be will that will the string ever be multiple words or will always be a
singular word I would always be one word all right so one word
great so I feel pretty comfortable knowing that this function will be
taking in a word it'll be a string it will not ever be empty it won't have
any special characters it won't have any numbs really no funny business about
this string at all there's no capital letters I have to worry about so it

00:33
won't ever I won't ever have anything coming in that has a capital letter and
it will only ever be one word no spaces or anything funny like that
is there anything I'm missing Bob about this word or this string that might
cause me some headache down the line no all right great so now I have a good
idea of the word that is coming in what I'm returning to you I just want to
clarify what's what I'm bringing back to you uh you said that you want me to say
whether or not it is a palindrome so a couple points of clarifications here
will this word when you say it say it's a palindrome do
you want me to literally say palindrome or not a palindrome would you like it to
be like a Boolean like true or false would you like it to be um something unique
okay just a Boolean true or false so I'm gonna return to you uh a a Boolean of

00:34
true or false so we're just going to say true or false wonderful so I don't need
to do anything else other than from this function just say true or false and you
want me to return that wonderful great so I am taking in a word
that's a string empty no no funny business No capitalizations One Singular
word I'm returning true or false do you mind if I give you some examples just to
make sure we're on the same page yes all right thank you Bob I'm going to write
out some examples here and we're just going to make sure that we both are at
the same agreement as to what this palindrome Checker would do so I'm going
to say something like the word race car uh that would return true
right race cars spelled the same forwards and backwards that would be true
is that does that work great I'm gonna do another another string here let's go
ahead and do um Bob like your name and we'll go ahead

00:35
and know that that returns true and then let's do one that would be false so we
can do like I don't know let's I'm hungry right now so I'll say tacos right
so tacos would be false beautiful all right do we agree that race car
would be true Bob would be true and Tacos would be false is there any
is there any example that you're thinking of that
might trip me up with the current understanding I have of the problem
no this seems straightforward all right so what I want to do very briefly before
we get into solving the problem is I actually want to turn these into some
test cases for the running of the problem so I'm going to go ahead and
just create my function real quick and we're just going to call this is
palindrome because we just know it's going to check to see if it's a
palindrome I know that I'm passing a word into this palindrome which will be
the string that we talked about but what I actually want to do is I want to call

00:36
this is palindrome and I want to pass in everything that we just declarified
above in our examples so I'm going to pass in race car and I would expect that
this would return true and so I'm going to copy this real quick I'm going to
pass in our other two things that we agreed on which was Bob which would be true
and Tacos which you know would be false and what I'm actually going to wind up
doing is just console logging these so I'm going to go ahead and create my my
repo here and um see if uh Ripple is not let me do it all
at the same time so it's going to do console.log
and I'm going to wrap each of these in a console log just so that I can see the
the result over here in the console so each of these will be console logged and
the cool thing inside this console log I'm going to actually put the result as

00:37
well so I'm going to do a comma here and we'll just say true which I know is a
string here I just want to be able to when I run it I want to be able to see
like true true in the console false false just so I know that I got the
right answer and that my code is actually working so if this was to work
what would wind up happening is I would call my
I would call my function is palindrome and I would pass in race car and I would
expect this function to return true so this is working in my console I should
see true true true and false false and then I would know
everything is working if all these cases worked would you agree that I have
solved the challenge that you've given me today
yes okay so if these work you would agree that I have solved right I will

00:38
solve the challenge now let's take a pause here for a second why am I doing this
why am I building out these like test cases underneath my head
people keep using the word stalling I am
not stalling this is part of the process I am showing this engineer that I can
think through a complicated problem so many folks think that this is bad
like I I don't I I guess I get where it comes from but folks think that I'm like
trying to trick the interviewer
interviewers love this [&nbsp;__&nbsp;] because I am
thinking through the problem I am engaging with them nothing sucks
more than on your fifth interview of the
day having an interviewer that goes like this

00:39
and do the two and then I think I did the one and um I think this might work I
don't know if the carries over and then I do the oh and then I did that oh
lunch tomorrow and then like three hours later they
come back and they're like I think I solved it and you're like no you're not
even close like this is this is this is not even I didn't say I didn't say
Fibonacci I said palindrome you built the Fibonacci sequence not a palindrome
right like I can't tell you like when you're an interviewer
you're not doing one interview a day you're often doing like five a day and
they suck because it's just it's just it's just draining but if you have
someone that's like actually keeping you engaged that's actually asking you
questions that makes it so that you're not actually falling asleep that you
might actually get the chance to like them you might actually get a chance to

00:40
to laugh to share something to to to to to like bring them into that process
right if you're just somebody just like Wham right into it like no question like
it it it just it it's just not good like
you're not building that connection with the person and that person's gonna zone
out it's their fifth interview of the day they don't want to be there anyway
right and so they want to see that you can think critically that you're
engaging them you're smiling you're laughing with them you're asking them
questions right you're making it worth their time and then last but not least
these are your receipts I can't tell you how many times a
student has come to me and said Leon I solved the problem and then magically
the problem changed like they decided to add some nonsense on the end they
decided to um tack on this extra bit that they
didn't say was part of the problem so I am very clearly saying hey if this works

00:41
we're good right like this is the this is the
the solution right like we we've got it we've slammed dunk we've won and so in
30 minutes when they try to switch it up
you go whoa oh Bob hold on now we agreed 30 minutes ago that have these worked
we were good right so these are your receipts
you're getting that agreement right and you're you're getting that buy-in to
like the thing that you're trying to do is the correct thing
right is the correct thing and if they try to add stuff well now at least you
have something to say about it right it's common that sometimes
interviewers will try and do something more complex we'll talk about that when
we hit it so the last thing here is we've done our parameters right we've
clarified what's coming in we've clarified our Returns the r and our prep
we know we're getting a Boolean not some string or something coming out we've

00:42
walked through some examples we've walked through our test cases that are
made from our examples the last thing to do is our pseudo code we're going to
talk high level about what we're about to do before we start coding we want to
make sure that the thing we're about the code is correct the pseudocode is the
high level plain language instructions you're going to follow right follow to
solve this problem but before we do that
we're gonna take a break uh we're at the
top of the hour I don't want these weird ads to run uh so we'll run our ads uh
during our break when we come back we'll look at our pseudo code we'll finish
this up and we'll talk about from the perspective of the interviewer what just
happened but what I hope you're taking away from right now is that this is a
conversation I'm having with Bob I'm trying to explain my thought process I'm
showing how I'm thinking through everything and what this is enabling me

00:43
to do is to build that Rapport of my interviewer it's giving me time to think
about how I might actually solve this problem I just took 15 minutes
and I haven't actually solved the problem yet but I could have been
thinking about it the whole time cool let's take our break come on back
come on back all right so we spent some time building this out uh so far
we've walked through our prep our parameters coming in was the word we
clarified everything about that word we know it's a string and all these things
we clarified about the string we know what we're returning which is a Boolean
of true or false we know that we have some some examples that we work through
we build out our test cases for those examples and also left to do is to
actually code this out now the whole time we've been doing this I have been
talking to Bob right I have been talking to Bob every
single question every single time thing I do I keep asking Bob Bob has been

00:44
saying yes yes giving me feedback talking to me this whole time
the reason why I do this is we talked about the building the Rapport but there
is another reason why I'm doing this I am priming Bob to answer my questions
let's think about that for a second Bob has been straight up answering every
question I've given them for the past 15 minutes
so when I get stuck and I ask a question there is
a non-zero chance that they will just answer it for me
I can't tell you how powerful that is right it doesn't work all the time
but if they've been answering your questions this whole time you've built
up kind of like a collaborative process here because most interviewers want to

00:45
see you win most interviewers want to see you win and they want to help you
because it means less work for them to do on the job right they want to help you
but they can't help you if they've been silent the whole time because it just
won't be natural for them to help you but if they've been non-stop talking to
you answering your questions and you finally throw out the ass because you're
stuck they're just going to keep then they don't know that they're just gonna
they're just gonna answer it right and so the this is also a bit of
priming to get the help that you need now most companies like a lot of companies
tell their interviewers to give hints literally the person in charge of
interviewing at Google that I was in the room with talking about this said we
give we tell our interviews to give a hint
right at least for that campus to give a hint so if somebody gets to the problem
they've brute forced it and they're kind of stuck at least on the optimal
solution they're literally told to give them a hint and a lot of interviewers if

00:46
you've built up the Rapport you've gotten them talking you asked for a hint
they'll give it to you or if you get stuck they'll just tell you how to get
unstuck cool so we've walked through our parameters our returns our examples the
p r e of prep the last is the pseudo code and so the beautiful chance of the
pseudocode is to is to is to kind of stay high level what you
wanted to do so you've taken like 10-15 minutes to kind of get to this point
hopefully by now I have been using some of that time the thing about what you
want to do and so I would take this time to to kind of confirm with Bob what's
going to happen so Bob I know I'm going to take in a word and what I want to do
is I want to reverse that word so I know I'm going to take in a word and I'm
going to reverse the word uh now I know in JavaScript that I can kind of easily
reverse that word uh using a series of methods and those methods I believe are

00:47
split reverse and join uh I think for a first pass reversing the word with split
reverse join would be a good first pass what do you think
the Bible say yeah that sounds sounds good so I'm going to say split
reverse join great so the next thing I'm going to do
is once I've split reverse joined I'm going to compare the Reversed word
to the original word and if they are the same then I can
return true uh if they are not the same I can return false so what I'm going to
do is I'm going to take in that word I'm going to reverse it and then I'm going
to compare the Reversed word to the original word
does that sound like a good plan of attack for this function
they're gonna say yeah right so like even even this part of the

00:48
process where it should be me right it should be me kind of coming up totally
with the solution by myself is I'm still asking Bob what do you think about this
approach is there anything that you're noticing that I'm not noticing about
this approach that might cause me some headache no this seems like a good first
pass it seems like you you'll this will work right like you're literally asking
your interviewer are you seeing something that I'm not seeing you could
have even said you know what Bob I know that it's split reverse I always forget
the last one here uh do you remember what that one is like that would be a
fair question right if if you have been getting Bob to say yes over and over and
over again and you say split reverse sometimes they can even help themselves
sometimes like join I'm like thank you Bob all right and you just keep moving
cool should we at least should we go for
least amount of code for readability I'm
going to get to that Dev give me give me a minute to get down I'm gonna get that
it's a really important question all right so I know I'm gonna take in that

00:49
word so I'm going to say let reverse word equal and I'm gonna do the word and
then I'm going to split it and this is where my studying of methods
comes in I'm going to reverse it and I'm gonna join it
right and what that should do because if you've done the methods work split
reverse join is in there if you've done your code words you've done this
palindrome before split reverse join they should all be in your Anki decks
right and this problem should definitely be in your your your Anki deck so I am
reversing the word by splitting it into an array reverse is an array method so
I'm reversing that I'm going to join it back together into a string I would say
this out loud to Bob all right but I'm going to reverse the word the way I'm
going to reverse the word is I know that the parameter word is holding my word
I'm going to split it split turns it into an array I'm going to reverse it

00:50
reverse reverses the array reverse it specifically an array method so I have
to split it because there's no native reverse method for a string and then I'm
going to join it to get my string back I need it back as a string so that I can
compare two strings together and so down here I'm just going to do a conditional
and I'm going to say if word equals reverse word then I know that that is a
palindrome right if the if the word reversed is the same as the original
word then that word is a palindrome and I can return true
and if it doesn't equal the same word reversed right
right if it doesn't equal the same the same word reversed I can go ahead and do
it with an else and I can return boss now uh the way that you see this

00:51
here Bob uh is there anything that you see that I'm missing or things that you
think I should do is slightly different and Bob literally won't be able to help
themselves I'll be like Leon you're missing the D
ah thank you I appreciate that thanks for helping me out there let me throw in
the D here reversed word thank you so much I appreciate that thank you Bob
you really uh give me a solid with that one great so now we've reversed our word
and we have a conditional to see whether or not it is equal so we'll return true
or return false and let's go ahead and just run this real quick Bob and see if
it works and we can see our test cases all became true uh true was true true
was true and false was false so our code work our test cases passed uh is there
anything here that you're seeing that does not lead to what you were expecting

00:52
to see in terms of me solving the problem let's leave the code quality off
the table for a second but in terms of what
you want it to have accomplished like determining whether or not a word was a
palindrome does this live up to your expectations
yeah well thank you Bob uh now I do have a few questions about this solution
at your company do you do you as a team value kind of like commented code is
that something that you feel like is left up to how you label your variables
would you leave these comments in would you use these types of variable names is
there anything here that I did that might not be the same at your company
okay so you would you would get rid of the comments because the variable names
um are descriptive enough wonderful and then
do you value kind of the readability that you see here or would a shorter

00:53
number of lines of code be useful here okay so a shorter a shorter number a
shorter lines of code would be useful here so maybe I can get rid of the
conditional all right maybe I can get rid of the
conditional here and um with the conditional I can just I can just return
like word equals reversed word right so now now we we
still get the readability of seeing that we reverse the word uh we can see that
we've done the comparison we know that this will return
true or false right uh but I do I do like the readability of this uh do you
use like es6 like would you turn this into like an arrow function at your
company oh you do like to use Arrow functions so
I actually think I could do this as an arrow function as well so what I'm going

00:54
to do is I'm going to just make a simple
arrow function here I'm going to comment this out
and I'm just going to do const is palindrome
and I'm going to set it equal to our Arrow function we know we're passing in
words so I'll say word and I'm just going to say does word equal
uh word dot split reverse and join cool so now let's go get myself a little bit
more room over here we've used this lovely Arrow syntax it's
all in one line maybe we lost a little bit of readability but I I feel that if
your company is definitely one that uses kind of these Arrow functions uh this
could be a good fit uh is there anything here that I'm not doing that you would
do on the job is there anything here that you see that I should add or change

00:55
no this looks great wonderful thank you Bob I really appreciate taking the time
to ask me this question to work through it with me thank you for spotting the
the typo with the the reverse D and for giving me some insight about how you
would actually code this on the job I I think this this type of coding style and
collaboration is something that I really
value on the job and I think it could be a good fit for me foreign

00:56
that's how we do folks that's how we do all right so there's a lot here right
there's a lot here we did a lot in this time together right and
we've made a friend which is the goal of these interviews right the whole time I
did not stop talking every time I had a chance to ask Bob a
question I did I brought them in I thanked them for their time and at the
end even though when I had solved it I knew how to make it a little bit cleaner
a little bit better and so I began to question about how they would do things
on the job right what is what is what is your like
what does it look like like how how you write your code what I am trying to do
at the very end is to get Bob envisioning me working on
their team writing code that they would write so that Bob can see that oh Leon's
a good fit Leon's already writing the code that would be a good fit for this

00:57
team right like that's the that's the goal hey thank you for the raid let's go
thank you for bringing the crew along hope you're doing well
saw that you were at uh twitchcon hope your travels went well hope you had some
fun welcome Raiders we we just finished up doing a technical interview question
together uh we talked through our our secret method of prep parameters returns
examples pseudo code talking through how we can make it
through these technical interviews how technical interviews are really testing
two things not only can you code do I want to work with you for the next
two years and uh we're kind of wrapping up with some questions here about how we
solved this first problem churchcon was a blast hey I love to hear it
that's awesome cool all right while we're here questions about this this first

00:58
challenge uh why don't we use two lowercase well
we actually clarified in our parameters that casing wouldn't be a problem uh so
maybe we've been even super specific I said like it'll all be lowercase right
so that's something that you can you can in your parameter stage clear up but if
you did not clear that up then you definitely need to use that leave that
in your code foreign what level code Wars would this be this
is like a an eight maybe a light seven uh can you get the checklist we can

00:59
practice with that is more than just prep what do you mean blars
prep is the for coding challenges uh prep is the checklist
would using Code Snippets be bad in an interview if you have them in your
environment uh that's the thing you want to talk to your interviewer about I
remember how we said we shouldn't go into these interviews like an accident
we should know what we're getting into before we show up for the interview one
of the questions I might ask the recruiter or the the hiring manager
whoever I'm talking to before the interview would be like hey
um what what's good on what's good during the interview can I use Google
can I use resources like the mdn is it okay to have documentation up is it okay
to use code Snippets that I have already in my environment like you can ask all
of those things before you get into the interview and then you can even confirm
those things with your interviewer too hey I talked to Bob beforehand uh he
said these things were cool I just want to make sure that we're on the same page
before we start the interview that these things are still good in your eyes as

01:00
well wet level challenges common interviews well like I said Rolanda like I said
Daddy Yankee built a button with HTML and CSS no coding challenge Sean
no technical assessment there's like 30 more of these at least
on our celebrations Channel where there was no coding challenge
because they did all the other stuff that we talked about
right they did all the other stuff that we talked about right
then a good portion of interviews if you do prep well enough

01:01
you can make it through with your prep and the methods that you
have really really well prepared but every company is different
that's why we do our research and we know what we're getting into before we
show up in that interview you should never show up to an interview having no
idea what's about to happen you have done you've already messed up you should
know you should be needling you should be trying to figure out you should be
using glassware you should be using blind you should be using
um GitHub to figure out what the interview is going to look like should
be talking to the recruiter you should be talking to people on the team you
should be talking to hiring managers you'll be talking to the person that
gave you the referral you should have an
overwhelming amount of information about what you're about to walk into so that
you know what to be prepared for mm-hmm so a large portion of your interviews
won't have a technical challenge if you've done everything else to pass the
sniff test you have an amazing hundred dollars project you have a portfolio of

01:02
work that has real clients that has real engineering experience on it a lot of
times you can get into these with just strictly behavioral
don't believe me go to celebrations Channel see three 30 other plus people
that have done it then a strong portion of your interviews if you do prep well
and you realize about communication it's about collaboration it's about not just
strictly whether or not you can code or not
you can get away with your methods right you're doing the 10 minutes of prep 20
minutes to solve the problem hard cut off at the 45 minutes because you have
another interview to get to you can always go ahead and send them more
optimal solution following up right and then there's gonna be a strong
number of interviews where you're going to brute force your way through a
problem and that's enough right where you're using just the big four variables
functions conditionals Loops if you use the method we just talked about 15
minutes for prep 20 25 minutes for trying to solve it Brute Force saying
hey I know we have a hard stop at 45 minutes I know I can get a more optimal

01:03
solution do you mind if I follow up with it it'll work
does it work every time absolutely not you're gonna get got yes you're gonna
get yours more than you get got I guess I mean just a list of good
questions to be asking throughout um yeah that's what this class was for
uh so I think a really good thing to do would be to run this VOD back
right to run this VOD back right um to to run this VOD back and
listen to the questions that I'm asking and then try to mimic those questions
even if you just like heard me say like even if you just like paused it and then
said back what I just said right that would be good practice to get into
like all right how did Leon clarify the parameters

01:04
hey wolf thank you I appreciate that all right how did Leon clarify the
parameters Leon all right Leon said will it ever be empty that's a good thing to
keep it back in my mind it will be empty
we'll have special characters will there be numbers will be a singular word will
capitalization make sense right and then repeat that right get used to that add
that to your prep the reason why you all agreed to use prep the reason why you
all agree to use prep for the rest of your life is because the more you do it
the better you get at doing it right the every code where you do going forward
every every code you do going forward you're doing
this prep and you're talking out loud you're talking to your duck the entire
time it is no longer enough right it's no longer enough to just be one of these
people that's to some problem I know there's a

01:05
hash map somewhere I don't know how to do a hash map how do I do hashmap again
no the communication and the collaboration
is just important and nobody's good at it out the gate
I've I've hundreds of students hundreds of students that I've helped
with this stuff I've never seen somebody be good at this out the gate ever
it's weird we spent we spent how many months right how many months Talking to
Ourselves not talking to ourselves just coding right thinking through everything
internally now you got to start verbalizing all the things that you're thinking
right and so you practice every day with
the prep you practice the things that we just did and then remember 60 networked

01:06
applications so the first 10 that you do they're gonna be bad but what you're
going to test out is like all right did I like
I lost the interviewer at this point I I I you know what I got two in my head
with the pseudo code I stopped asking questions and I could see that they they
tuned out next time I won't do that next time I'll verbalize all my pseudo code
so that I know I I keep them on the hook right you take
those first few interviews those first few interviews are gold you should be
giddy to bomb an interview you should be the happiest person in the world to go
into that interview and and just absolutely bomb
because you're going to learn so much you're going to take that to your next one
will they ever tell us to stop talking uh no because you're not just talking
you're communicating with them like don't be the person that just like
like you just got like your headphones on you're just like jamming out you're

01:07
just like that's not what I was doing the whole time
the whole time I was asking Bob questions very important difference
I wasn't just talking every single thing I was clarifying with
Bob I was talking to Bob I was getting Bob to say yes I was engaging Bob in the
questions it wasn't just me talking like
at them I was literally and don't and so this is this is a very common problem
glad you brought this up a common problem is I've seen this happen quite a
few of my students because they're so used to doing it with an inanimate
object they'll go all right so this um this array will just be numbers right
great numbers only like they don't they don't wait for the interviewer to say
yes only numbers they kind of just like already filled it in their head that it
will only be numbers in the array uh so just be mindful of that as well that
does that is that does become slightly a problem

01:08
so what we will be doing through a couple nights together is practicing our
technical interviews together right so the first time you're doing
technical interviews shouldn't be in a real interview it should be doing it
with us as a community together first so we'll have a mock behavioral night and
we're gonna have a mock technical night as well so that you can get practice
working through these questions we're going to do it kind of um like
speed speed interviewing style where you're just going to get paired up randomly
one person practices you get feedback then it switches the other person
practices you give them feedback and so we're gonna we're gonna do at least uh
one a couple a night of Behavioral and a night of technical so the first time

01:09
you're doing it uh it's not it's not just you Community taught exactly all right
now the the last thing I want to do is I want to do one more problem we got like
25 minutes left um I'm gonna do one more problem just so you can see
uh a point about brute forcing a problem and then we'll stop there on Thursday
we're gonna show we're gonna start our data structures and algorithms knowledge
so that we can take our brute force solutions and make them more optimal and
we're going to talk about like what optimal means like
how can we make our like what is why is it our code good and how can we make it
better in terms of space and time complexity if you don't know what data
structures algorithms are that's okay we're going to do that on Thursday we're
going to use Big O notation all these big words that we're going to treat as
disrespect until we get into class we'll
be there also you'll notice for homework uh is the is is

01:10
there was a raw JavaScript course that was an introduction to algorithms by
Scotch IO and it was my favorite course for my students to get a taste of data
structures and algorithms that was simple it was approachable and then they
got bought out and it disappeared but it's still in the way back machine
so your homework is to start going through that tutorial but it's a little
weird because we're using the Wayback machine to get through it so the link is
in Discord your homework is to start doing that I recommend that you start
the homework if you have the privilege of the time to start between now and
Thursday I definitely want you to do it and then if you don't have that Proto
time you're going to finish it up over the weekend but a lot of the core info
that we'll cover on Thursday comes from that course because it's just so good uh
so we'll we'll start there just I want to keep that in mind for for homework

01:11
all right Brute Force eventually to reach a certain Echelon of
interviewing you have to move away from code Wars
it's not that the code Wars problems are not good problems to continue your
interviewing prep it's just that they're phrased differently and so
my advice to you is once you are comfortable with seven cues
and you can take swings at six cues it's probably time to leave code Wars and
make it over to leak code okay you don't have to pay for leak code it's
completely free just like code Wars if you do pay like you can get like certain
like frequency lists and stuff like that for specific companies um but
my advice for folks is the reason why I want you to switch to leak code is

01:12
because a lot of companies right a lot of companies mimic their questions
just straight off of Lee code and yeah there are others there's code forces
there's project Euler there's like all these other places that you can go to
that have these but as someone so for my students I typically ask them
to give me a a report like we used to take for at
resilient coders after each interview you told us like what you experienced in
that interview and across hundreds of interviews you would be surprised
the number of companies that are going to leak code
searching for high frequency problems and yanking The High Frequency easy
problems and asking them during the interview
it was mind-blowing the first month we asked for this feedback and I could I I
got a taste for like what the questions were being asked

01:13
a shocking and alarming amount of companies are taking
high frequency problems off of leak code
and literally asking those problems with slave variations sometimes with little
changes little tweaks here or there um so that's why I asked my students to
eventually make their way over delete code I really do believe
if you've done everything we talked about tonight and you've studied your
methods they're committed to memory you know what they are and you talk about
your code and you go through the process that we do tonight you could get a job
with just that knowledge to open more doors
right to open more doors we also start the leak Kodak style problems and we
sprinkle in some data structures and algorithms as well you do not need this
to get a job I've seen hundreds of students that have
never had a leak code s problem be the deciding factors to whether or not they

01:14
got a job right and so this is just opening that
last door that will give us more opportunity and it's something that
we'll be practicing throughout hunttober is like getting good at these types of
questions what makes leak code hard at first is that the way they phrase
questions is a little more computer sciencey then maybe code Wars
would be and so it takes a little while to get used to that style of question it
gets used to it takes a while to get used to talking about it in that way so
that's why we make the transition cool this is a very common problem I'm
even seeing some people in chat say that they ask this problem at their company
uh this is a two-some problem uh two Summit when you go to leak code you can
sort by like high frequency uh this is like the like the most common question
so many companies ask this yeah so many companies ask this but

01:15
let me let's get into the the boardroom real quick this is opening a door
do you need this no this is opening a door that opens up
more interview possibilities for you but if you know your method's cold you know
your prep cold you could still get a job
I've shown you people that had less than that and still got jobs that's enough
for a strong portion of the interviews you'll go into if you use the methods we
talked about tonight but this last piece
this leak code data structures algorithm is the last piece to open up more
opportunity for you so that more interviews go your way cool
alrighty uh this is something we'll be practicing during hunttober right and
one of the things that you'll notice about this question is that this

01:16
question lends itself to a Brute Force solution pretty quickly all right so the
question is given an array of integers which we'll call nums and an integer
Target return the indices of the two numbers such they add up to the Target
so I'm going to go ahead and create a new replit for myself create
all right should have had this prepared I took my own advice
all right have a new replet I'm gonna say all right Bob thank you for the
question just so I can I can hear this question again uh you want me to go
ahead and take in an array of integers and an integer
and then return the indices of the two numbers as they add up to a Target so
I'm just going to repeat this back to you you mind if I take some notes all
right thank you Bob all right so you're going to give me an array of nums and

01:17
you're also going to give me a Target number
and what you would like for me to do is to return the indices
of the numbers that add up to the Target now that's a lot of big words
I'm going to treat them as disrespect and this is why we start this process of
prep it's why we start this process of having
a way that we're going to approach these problems because
this will happen in interviews where you're like well right but we don't do that
say all right Bob thank you so much and then you work through your prep

01:18
and your prep gives you what prep gives you what
ref gives you 15 minutes to figure out
what the [&nbsp;__&nbsp;] they're talking about exactly
all right Bob so you said we're taking an array of numbers
and you're also giving me another numb that you're calling the target
so I have an array of numbers and a target number
and what you want me to do is add two of the numbers in the array
so that they equal the target number but you don't want the actual numbers
you want the indices of those numbers so just to clarify
will have an array of numbers and if you don't mind I'm going to go ahead and
create an array of numbers here just so that this is not so kind of like

01:19
theoretical and we'll say we'll say one two three four five and you're going to
give me a Target number let's say that Target number is let's say nine right
so you want me to return two numbers that add up to nine but
instead of returning the numbers you want the indices so let's look three and
four is seven four and five is nine so those two numbers add up to our Target
of nine but you don't want four and five
you want their indices so if this was an array indices is the plural Index right
Bob ways to indices you mean the plural of of Index right so in this case you
would want 0 1 2 3 and 4. so the actual return of this would be uh three and

01:20
four because those are the indices 0 1 2 3 and 4. right
so that is do I have a clear understanding of the problem Bob an
array of numbers like this a target number and then instead of you're gonna
figure out which two numbers get added up to equal this target but in the end
you don't want the actual numbers you want the indices of those numbers is
that correct I have a grasp on the problem Bob all right thank you so now
they have a grasp on the problem I want to run through just some quick
clarifying questions just to make sure I really understand
everything you're asking of me so this array of numbers that you're giving
me this array of nums will it ever be empty so not empty great uh

01:21
will ever have anything that's not a number so no special characters no Boonies
nothing funny just always numbers right always numbers so always nums wonderful
will the numbers always be whole numbers right will there ever be like like
floated values so always whole okay uh will there be like negative and positive
like will there be like negative numbers positive numbers no they'll always be
positive great so they'll always be positive
great hope you're having a positive day today Bob all right so in random numbers
the array will never be empty it'll always be nums there will always be a
hole they will always be positive and I guess since I know I have to add up
two numbers will the array always have at least two numbers

01:22
yeah always always at least two we'll say let's say at least two
we'll say at two I'm just gonna say at 2 just remember at two and
those two numbers that are in the array will always hit the target right there's
there's there won't be a situation where the array
doesn't have numbers that match the target cool
all right so just to run that back it's an array of numbers the array will never
be empty we'll always have at least two numbers those minimum of two numbers
will always match the target there will always be two numbers that actually
match the target it'll always be nums they will always be whole they will
always be positive is there anything Bob that I'm missing about this array of
numbers that might be odd or might cause me some headache down the line
cool seems like I'm on the right track and I'm just going to assume that the
things we stipulated for the numbers in the array

01:23
also go to the Target as well so the target won't ever there won't ever be
like a missing Target uh there won't ever be any like funny business it'll
always be whole positive numbers there's nothing funny about the target as well
cool all right I think that gives me a good place to get started uh you also
ask that I return the indices of the numbers that match the target so we're
going to return the indices of the nums that add up to Target
and those indices would you like them just as two numbers would you like them
in an array I think an array makes the most sense correct all right wonderful
so I will put those numbers Bob into an array for you and so those indices will
be in an array wonderful so we have coming in an array
of numbers that we clarified a Target that we're clarifying and coming back

01:24
out to you Bob will be an array of numbers do you mind if I run through some
examples just to make sure that we're on
the same page Bob that what I'm thinking is what you're thinking
wonderful all right so let's go ahead and run through just just a quick
example we actually already have the uh example up here that we walked through
um can we do one more please at least please let's do two more if you don't
mind uh so I'm gonna go ahead and do uh five we'll go ahead and do five let's
do five six nine and let's go ahead and pass in the target
of 11. I'm gonna change this to a comma just make it easier myself of 11 and so
we know that five and six would be equal to 11 so we're gonna wind up returning
I'm gonna change this to an array here because you asked for the array to come
back Bob uh you would want to see here not five and six which is the tricky bit

01:25
about this problem Bob you'd want to see Zero and one is that correct Bob cool
all right let's go ahead and do one more example
here and I was going to pick some like random numbers let's do 22 let's do
seven let's do 100 let's do five and let's do a target of
I don't know let's do what's seven plus five that's twelve let's do a target of
12. seven plus five would give us 12 so then
we would have in this array 22 would be zero seven would be 1 100 would be two
five would be three so we'd wind up with
an array of one three now as I'm walking through
as I'm walking through these these arrays

01:26
a couple things are kind of starting to come to mind Bob does it matter the
order of the numbers in the return array does it matter the order of the numbers
in the original Rays they come in does that matter at all
cool no it shouldn't the order position shouldn't matter okay just something I
was thinking about all right uh if you don't mind I'm actually going to turn
these into some test cases for us and so let's go ahead and build out a function
here and this function is going to this function is going to take in a
Target and return indices so we're going to find indices
and I was going to call it that I think find indices is good enough for right
now we know we're going to take in some nums and we know we're going to take in
a Target uh we know those numbers is an array
though so I'm just going to call this an array and Target and

01:27
I'm going to go ahead and call this a few times so I'm going to go ahead and
run find indices and I'm going to pass in the stuff that
we have here so I'm just going to yank this great plop that in
that'll be our first test I'm going to copy and paste this and
actually I'm going to put these in a console log just to make sure our lives
easier easier console.log boom and I'm going to put the solution here
as well so that when we run this code we should see the output in our solution
and they should match since these are the ones that we agreed to I'm going to
put three and four here I know this is a string but it's just so that I can see
it in the console on the right Bob all right so we have three and four here I'm
going to go ahead and copy this and I'm just going to do the other two examples
that we walk through uh once again it's going to grab this array and Target here

01:28
wonderful and this value should be 0 1 instead of three four
and I'm going to grab the last one Bob and then we'll be done with our test
cases let's go down here boom uh so we grab this from here as well and
change this up here and then the last one is just this one and three just to
make sure that we know that we got the correct answer
all right Bob I think we both agreed that these these
Solutions here if if if this code runs and we wind up with matches to our test
cases here we could both agree that I solved the problem it would meet the
conditions of what you were expecting for this problem
awesome thank you Bob uh so what I'll do
is I'm going to work through coding this out and we know when that we run this

01:29
code if these all are the same or true then we will go ahead and assume that we
solve the problem correctly alrighty so the last thing I want to do here
before we kind of get into the Nitty Gritty is I want to go ahead and solve
the problem and pretty clear to me is a Brute Force solution
right pretty clear to me is a Brute Force solution that while not optimal
would get this working quickly and so I'm a fan of getting a Brute Force
Solution on the board as we have time we can optimize it and so the Brute Force
solution for me is I know that I have to find two numbers that match the Target
and so whenever I know I need to pick two numbers right off the top of my mind
the Brute Force solution the non-optimal solution here would be to just do two
nested for Loops right the outside Loop grabs the number and then the inside

01:30
loop checks every number against that that other number and then if those two
numbers add up to the Target we found our two numbers we can grab their
indexes and that's what we return uh is there
any problem that you would foresee with that Brute Force solution
no sounds like it would get get to the get to the point all right so let's go
ahead and do that let's go into a for Loop
inside this for loop we're just going to
set up a variable let I equal zero we're going to go while I is less than array
dot length right so that should make it so that we can go to the total length of
the array and each time we run we're going to make I go up by one and what
we're going to do is we're gonna have just another loop that
goes right inside this right so the outside Loop will be responsible for
grabbing one number and then the inside loop will be in charge of comparing that

01:31
number to every other one so I'm going to say let k equals zero I'm going to do
while K is less than array dot length cool and this will go up by one as well so
we'll do K plus plus now inside these nested for Loops all I have to do is
compare the two numbers and so for me I know that the
outside Loop I'm gonna put some comments here outside Loop is grabbing the
original num so we'll say grab a num and then the inside loop will be comparing
outside num to internal numbs Bob so far does this seem like
something that will get us the to the what you're thinking like we grab a numb
from the outside like we just grab one for example and then our inside loop
would compare one to two to three to four to five and then if it doesn't find

01:32
nine well then our outside Loop would grab it and go boom boom boom something
we could do like that that sound like something that would get Us close
cool all right thank you Bob so that's what I'm going to do I'm just going to
do a quick comparison in here I'm just going to say all right if array I Plus
array k equals our Target uh we know we grabbed those two numbers right
I know I'm grabbing those two numbers right I know that I'm grabbing
I know that I'm grabbing a number from the outside Loop and then I know that
I'm grabbing the numbers on the internal Loop I'm just going to add them up
together to be the target so if I ever wind up where this is true
then I found the two numbers right I found the two numbers that match the
Target and I could just go ahead and return those two industries actually

01:33
since it's already know the indices of the numbers that equal the target I can
just return I and K but I I did run into something that we didn't clarify with
the parameters Bob something that just came to mind as we
started typing this out is will there ever be a situation
right will there ever be a situation where the same number equals the target
right like the number added to itself will that ever equal the target
right so I think that's the first thing I'm worried about so can you clarify
that Bob Bob will there ever be a situation where
um the number plus itself would equal the Target no all right so we can also

01:34
I'm just going to add that up here um number plus self will never equal Target
awesome thank you for clarifying that Bob and the other thing that I'm that
I'm noticing here is will there ever be a a multiple Solutions inside
of this array right will there ever be multiple
Solutions or can I always assume that there will only be one solution where
only two numbers will equal the target cool all right thank you Bob so only two
numbers will ever equal the target and we know that those two numbers won't
be the number plus itself cool so we we don't have to worry about kind
of clarifying anything here if we really wanted to just uh if if we hadn't kind
of asked this we could have just done something like this where we say like I
also doesn't equal K like we could have just made sure that we weren't using the

01:35
same number in the array like if if we were both on
zero and we got one one then this wouldn't be true
all right so I think this should work Bob where we're grabbing a number on the
outside we're grabbing all the other numbers to compare it to if the two
numbers equal the target then we go ahead and we return the indices uh that
we set so let's just go ahead and run this real quick
look at our answers here three four zero
one one three beautiful it looks like it worked uh we said if these conditions
ran then we know that our code works it looks like we're finding the correct
numbers that add up to the Target and returning just their indices which is
what you asked for so the problem does work now
uh we did spend a little bit of time on this sub-optimal solution uh I know we
have about 10 minutes left uh the way that I would solve this well I would

01:36
love to tell you how I would solve this in a more optimal way we have about 10
minutes left and I'm sorry unfortunately
I do have a hard stop I do have to go to my next interview I would definitely
love to follow up by email with the optimal solution just because we might
not have enough time to do it right now do you mind if I have your email Bob
just so I can send you the email of the optimal solution uh quickly while we
have some time to talk about it I would solve this uh pretty easily with a hash
map and so I think if we're talking about more optimal code I could use the
hash map and that's something I think that we could work towards uh to get
this to be more optimal if I took this solution that already solves
the constraint and we went ahead and made it more optimal using kind of a
slightly different data structure and a slightly different algorithm maybe if we
just use the hash map is that something you think would get you very close to
the solution you had in mind wonderful all right thank you Bob I

01:37
really appreciate your time today I really appreciate you taking out the
time to walk me through this question to clarify everything that we've done here
together and um I know that I was talking to Rachel earlier she told me I
got to get my butt to the next one but I'll send you an email blob very quickly
as soon as I'm done that next interview with the optimal solution and uh yeah I
I really appreciate your time I'm really looking forward to hopefully joining
this company everyone I've talked to has
been amazing and so yeah appreciate your time
I hope tonight you saw the process that I used for every single interview it
really is prep it really is about engaging with your interviewer about
building up that Rapport getting them saying yes and it's something you can
practice right it's something that you can practice now
the end of this code I was able to do this quite quickly I I didn't have a lot
of like I didn't have I know we only had so much time left in class so I went a
little faster than normally would I actually kind of skipped my pseudo code
a little bit I kind of went back and added the comments I didn't want to add

01:38
the comments first and then fill in the the loops and
even though I know how to solve this with a hash map I am still
doing the Brute Force solution first right I'm still building up to the
optimal solution I'm still talking my inner viewer through right my thought
process and showing them that I can solve it uh with even just the basics now
what we will be doing over the next two classes is talking
about our data structures and our algorithms so this is not an optimal
solution think about how this has to run a loop inside of a loop takes a lot of
time like for us to get to the next number we have to run all the numbers go
the next number run all the numbers go the next and run all the numbers that's

01:39
just not efficient right and so what we're going to do is talk about next
class how to make our Solutions efficient both in something called time
and in space and we're going to learn all these data structures and algorithms
what they really are at the core level and then start putting them into
practice over the next few classes if you're doing hunt Tober that's the point
is to kind of do these every single day we start off with kind of simple method
problems then we move on to brute force solutions and then we move on to more
Optimal Solutions with data structures and algorithms so that's the goal the
goal is to build up these things to get to the point where we feel
comfortable no matter what door gets open to us that we can destroy our
technical interviews so I hope tonight was helpful I hope that you got a little

01:40
glimpse into what it's like to solve these technical challenges I hope you
re-watch this VOD and you practice it you gotta get serious for a minute
before we get into our data structures and algorithms today uh today we're
going to have a gentle introduction to data structures and algorithms we're
going to talk about like why they're important see the beginnings of
something called Big O notation and hopefully have some new tools that will
enable us to do better during our technical interviews to evaluate the
code that we're writing with a little bit more clarity and have the what I
like to think of is really the last door you need open to get the job okay now
kind of went in a little bit this on the uh at the beginning but you are ready
if you've been following along so far you're you're caught up

01:41
with everything that's been asked of you you submitted your stuff for hunt Tober
or you're very close uh you are ready there is nothing else extra you need to
get a job other than to go on the hunt right the Hunt is a long grueling
process when we look at the when we look at our
trough of Sorrow that last dip is where the hunt really exists where you've been
going through this trough for a long time you're kind of just starting to get
used to being in the muck and then it just gets really bad and it gets really
bad because the first few interviews typically don't go that well
sometimes you get lucky in your first interview is the one you knock out the
park and that's always wonderful but by and far for most of my students their
first three to four interviews are just not great and when that happens

01:42
it can take a lot of air out of your Sail it can it can make you doubt all the
hard work that you put in and so I just want to be very on the nose that
the trophosar that I showed you that dip at the very end is a very very real
thing but you are ready you know the basics of HTML CSS
JavaScript object-oriented programming you know the basics of of node you know
the basics of Express you know the basics of mongodb you know you know how
to build full stack web applications you know how to
do so many wonderful things you've built
so many projects so many code challenges have been solved so many bits of
information are now in your brain that other folks do not have you know things
that folks have been running JavaScript for years don't know you know things

01:43
about the event Loop you know things about all the little Nitty Gritty stuff
what promises really are with the the async await is really underneath the
hood all these things that you spent hundreds of hours putting into your brain
that has value and it will be appreciated when you find the right fit for you
and so you are absolutely 100 ready to start the hunt and to get the job you
need nothing else you don't need more react you don't even
need the data structures and algorithms we're going to talk about today you
don't need to do anything else other than to commit to the process
build out your Hit List start reaching out to Folks at the companies that
you're interested in build a rapport with them get get in so you can get a
coffee chat with them get the referral right research the hell out of the
companies research the hell out of the interview process when you get the

01:44
interview don't go into your interviews like an accident be ready to prep your
ass off to to talk and engage with your interviewer let your skills shine
this part of the process even with all that being said is increasingly hard
because I'm not going to stop showing you all folks that are getting
jobs so many folks have gotten jobs recently if you go on that celebrations
channel it's just honestly ridiculous now um
and and and even more folks that don't even Post in celebration Channel like on
Twitter they they post it they send me messages privately like
it's wild in these streets right now um how many folks are getting jobs and I
can I understand that when you see others around you
doing really well that can even take an even bigger hit on your confidence as to
whether or not you are ready other people's success has no bearing on
your success and so you can't compare yourself to others you can't look around

01:45
you and be like wait a minute there are five seats ahead of me on the roller
coaster why are they pulling into the station earlier nah we're all on the
same roller coaster you're gonna get there you should see other people's wins
as proof that it can work and that can work for you learn from their experience
learn from what they did well what they didn't do well and incorporate that into
your hunt Evan Shaw said I was asked about Big O
linked list and doubly linked list in my interview I flat out told them I didn't
know still got the job a did study all night and followed the next day with the
answers to the OG question let's go uh Evan we actually just answered that
question today uh in stand up so one of the questions somebody asked was Leon
what if I prep my way through the question and I still don't know how to
solve it it's exactly what Evan just said
you say hey I feel like we've we've come to a a good point here where I have a

01:46
really good idea of the question uh but at this moment I feel like I can come up
with an optimal solution I would just need some more time are you okay with me
following up after this interview with the optimal solution get their email or
some type of contact information and as soon as the interview is over
immediately try and solve the problem get the correct answer and follow up
with them does it work every time no but you'll be surprised how often it does
right I can't stress enough you're going to
get got you're going to get more than you get got if you just go through the
process uh can you ask your interviewer for
feedback if you didn't get the job you can um but in my experience a lot of
companies have policies where they can't because they don't want to get sued

01:47
um so if you have if you did it right like if if you just clicked apply the
answer is typically going to be no they're going to be less likely to give
you feedback but if you if you um networked your way into that
opportunity and you got a referral your connection is not with the company your
connection is with the person that gave you the referral and you can sometimes
ask them for feedback and so they're you're more likely to get feedback if
you do the process in the way that we that I ask you to do the process
I was surprised to see the folks out there that got jobs with the take-home
Tech question wait until you see the folks that got jobs with no technical
questions not even a Takeo it blows my mind I've been doing this for 10 plus
years and the folks that I've seen get jobs in the in the wildest of ways blows

01:48
my mind and I don't even I don't even share my experience anymore I just
literally take the text of people that are telling you and put it in the slides
because I just know at this point nobody believes me like I just don't think
people will believe me so I I stopped telling you hey I've seen hundreds of
people get jobs uh with like very minimal technical like interviewing and
yeah so that's why in the slides I put the ones I think are that highlight that
it's wild cool so I wanted to put that out there you are ready
you're ready to do this you have the things that will make you attractive to
employers you gotta start this is this is this is your sign to
start the process to to start the hunt to start taking your Hit List seriously
to start reaching out to people to start getting your applications in front of

01:49
individuals uh so that you can get the job over the next few classes we're
going to do the last little bits that we
need to be prepared we're going to build The Hit List live I'm gonna give you
lots of templates to do successfully but you need to
get into that gear where you're ready for the hunt where you're ready to go
out weekend after weekend and catch nothing to come home hungry only to do
it again the next day now the other thing too I talked about
kind of like comparing yourself to others uh we're at this really weird
point where everyone kind of becomes a code weenie
and so please be mindful of your inner code weenie uh especially as we do hunt
Tober and we're doing a coding challenge together every single day uh there are
just gonna be people that literally can't help themselves right that that to
like history I did it in one line Leon one line

01:50
right so just know that the uh that that at this point in program
uh everyone kind of becomes a little bit of a code weenie uh be mindful that
you're being a code weenie uh be mindful that you uh your experience is gonna be
very different than anybody else's experience we're all interviewing in
different locations with different companies with different experiences
with different backgrounds with different paths and so your experience
will be nothing like anyone else's experience um
so many folks when I when I when I try to give advice on interviewing uh know
that that you are going to have conflicting experiences
because that just has to happen right so what I try to do is I try to look at
hundreds of interviews right across hundreds of companies and synthesize the
things that come up the most but no that you might be an outlier and you

01:51
might run into some weird stuff that we haven't covered or things that are a
little bit different that's okay your experience might be a little bit different
but by and far a lot of the same stuff is going to come up over and over again
so be careful of your code weenie when folks are asking for help when they're
doing the coding challenges be helpful uh when we're in let's say Remo for for
the for the for the for the stand up make sure you're being helpful in those
chats make sure you're being helpful on Discord no one cares about your
one-liner help somebody understand how to actually solve the problem that's way
more impactful on yourself and is way more impactful in the community as a
whole so you're ready be mindful of your inner code weenie and be mindful too of
the energy that you bring to a space right you all have the power to to make
somebody's day a little bit better because we're all interviewing now

01:52
people are going to have some really bad days you don't need to pile on them you
don't need to to point out flaws you don't just support each other right and
so know that as we start the hunt and people start applying it's a really
rough experience for a lot of people be mindful of the energy that you bring be
mindful of the the emotional weight you put on others and try and lift each
other up because it is just a really stressful process the beauty of doing
this with the community is that there are people to help that there are people
to uplift really make that your goal this next month to to be a positive
force on Discord on Twitch on Remo because it really can make the
difference in a lot of people's lives as
they go through what is a very rough and difficult situation
yeah it's kind of really hard to carry these boats and logs by ourselves so

01:53
let's let's do it together good cool don't be this person
all right don't be this person it's your turn to build out your hit list
but 60 companies with open rolls on that hit list start doing the real work of
reaching out the folks that are at those companies
right that are at those companies get a referral into those companies and
if you're you're having some stress about how to do that this could be one
of our classes next week is how to actually do this process so if that real
work of how to get a job is is stressful don't worry we're gonna have a whole
class on how to do it uh on Thursday clicking apply

01:54
should be the very very very very last thing you do
I've always said never click apply but the reality is do everything the right
way and then maybe click apply who is this person what did they do with
Leon right the the reality is that there
are so many things they're going to move the needle
that you want to do all of those things first don't take the easy out
don't just click apply do everything do The Hit List truly reaching out do the
the the the the the work that's going to actually move the needle to to not have
your resume just be in a stack of things that never get read
and when did you do everything right you've opened all the doors clicking
apply is probably one of those doors I was at an online career fair yesterday
and a few recruiters said just to play on our website
yeah that's gonna be that's gonna be common from from recruiters that are

01:55
doing those like Mass like they're they're there to talk to
millions of people uh they're not there to build a relationship with you that's
the wrong person to build a relationship with at that company right recruiters
aren't always the best people to talk to uh that's why if you watched our class
on how to get the job it was talk to the recruiter talk to an engineer on the
team talk to the engineering manager hiring manager and talk to their mama
right because a lot of times the recruiters are like they're just
inundated with thousands of relationships and you won't be special to them cool
all right I'm gonna say it one more time the top of my

01:56
top of my chest here prep and methods and brute force is all you need
one more time prep methods and brute force is all that you
need to get a job if you can prep your way through a technical interview you're
talking about the parameters the returns the examples the pseudo code you're
setting up your test cases you're building that nice communication with
your interviewer you're you're slipping in a few jokes as you're doing it you're
trying to have fun during an interview try and have fun during an interview
right you're building that relationship with them throughout the interview you
know your method's cold that's going to open up so many questions if you just
know all your string Methods all your array methods all your object methods
you know the things that can turn a tricky question into an easy dub it's
gonna it's gonna be one of the biggest doors you can open I have seen so many
coding challenges that could have been solved just with a few methods if you

01:57
knew what you if you had just studied them but if you've put them into your
Anki and you had studied them that you knew them that you had done code Wars
with them you had done practice problems with them if you had done huntober with
them and each problem that we do during October should go into your inkies that
when you see it or something very close to it you know what to do
so if you prep you know your methods please please please if you haven't
studied your methods this is me begging you to study your methods because I see
so many interviews that if they just do their methods they would have slam
dunked it and then Brute Force meaning that you're just using variables
conditionals Loops right and functions to solve a problem you might have to
think through it you might have to it's not gonna be it's not gonna be pretty
it's it's not going to be optimal it's not going to be the most beautiful code
but if you do prep you get the Brute Force that's often enough you can always
say hey we ran out of time let me send you the optimal solution via email right

01:58
after this call I'm a flex if you want a Fang job you
better be able to solve a two-leak code mediums or Elite code easy and hard in
45 minutes that's how Facebook interviews go yeah we don't want to work at Fang
I'm gonna tie me out for a little bit there you go don't be a code weenie
we know this we know this we don't care about Fang
there are so many other companies that pay well
there are so many other companies that will give you amazing benefits
there are so many other companies that will give you a better experience as an
entry-level engineer that if you focus on Fang you're missing the point

01:59
and this is the sad reality right this is the sad reality of interviewing
this is one point in time where people take advantage of your fear
and it's really really really [&nbsp;__&nbsp;] up right
people will say if you don't do this course
you're not going to get a job they sell a dream of fang so that you have to leak
code your eyeballs out right there is a completely different way
if you want to go to Fang Shore that that's that's your prerogative do it please
go go go Elite code into your eyeballs fall out I want folks to get jobs

02:00
I'd rather you get paid right I'd rather you get paid continue to learn
and in that year build up the muscle to then go to Fang if that's what you want
I've literally sent two dozen people to fang over the last two years
like that were directly in my programs have very good relationships with a lot
of fan companies right an Untold number of folks to Fang but I wish
you wouldn't focus on it I hope that you find a local company
that pays well that treats you well that gives you great benefits that gives you
the work-life balance that you're looking for right
and that just because uh a YouTuber told you you needed a course or this is what

02:01
you should be focusing on or sold you on this dream of Untold riches
I don't need it right now right you don't need it right now that
could be a goal for a year or two from now so many folks will just get caught
up in this cycle of studying for something that is a long shot
right it's the same thing as somebody saying hey Leon I am going to practice
baseball every day because I want to go play for the Yankees
great don't let me stop you you do you you swing that bat every day you catch
those balls every day I really hope you make it to the Yankees
right and then somebody sells them a course on YouTube Hey use this course to
to learn how to throw better to swing better and you too can can can play for
the Yankees it's just it's just a weird system to
get caught up in and so I I I I say this as a as a word of caution

02:02
at this point in program people are going to play on your fears they're
going to play on your desires be careful right be careful
you don't need another course data structures and algorithms there are
so many amazing resources that are absolutely free
primes course that I shared absolutely free
front end Mentor has another absolutely free algorithms course that I'm going to
assign as well right the the course I'm giving you is
we're using the Wayback machine but completely free right
don't buy into these fears don't buy into these folks selling a dream
do the things that you know that you need to do to get ready for the
interviews that you're about to face and if you want to get ready for Fang
by all means go ahead and do it that's not that's not my goal for y'all that's

02:03
that's not what I think a lot of folks should be focusing on right now
so many other amazing opportunities that you could focus on that are that are
that are a way easier reach and then if you want to to then continue
on by all means do it and this is how many people from at
Amazon do we have from 100 devs now it's kind of ridiculous right
but at this point yeah don't overwhelm yourself
right don't overwhelm yourself keep doing the the things that you know you
should be doing you're Banky your coding challenge each day
making sure you're building out your Hit List these are all things are going to

02:04
move the needle way more than Lee coating your eyeballs out [Laughter] cool
it's all you need it's legitimately all you need cool
uh and I'm gonna show these again because I think it's I think it's just
beautiful to say I had a coffee chat it's told they had so many applicants
with empty githubs no portfolio sites and no projects underneath their belt
these are the folks that are just clicking apply if you've done this
program you have Untold number of projects you have an amazing portfolio
you have a well manicured LinkedIn you have a great GitHub you have all those
juicy green squares you have uh a coding challenge you've literally done every
single day for the past couple months you have a hundred hours project that's
your own full stack project that you've built uh from beginning to
end you have real clients that you've worked with real experience it's on your

02:05
resume right right all these things are going to help you stand out during
the process because I can't tell you how many folks don't do all this stuff that
help you pass the sniff test thinking thinking that if they're just really
really really really good at technical interviewing that'll be enough it won't
you'll smell like a boot camper you won't get past the final interview cool
and then there are dozens of these examples in our celebrations Channel
there was no technical assessment I just told them about the projects I had
worked on and made sure I was friendly connected with them as people I know
there are lots of people here that are better coders than me this is absolutely

02:06
possible you can do this Don't Stop Believing stay consistent it will happen
all right imagine if you believed that you had to be able to do leak code
mediums to get a job imagine if you waited
until you were a beast at least code to get a job
that to me is the saddest thing and I see it all the time I see so many folks
that decide to just invest in doing leak
code more and more and more because it's it's easy
it's easy it feels like progress each day you're doing something I'm
getting better at my data structures and algorithms it's it just feels like
you're you're moving the a little bit closer to the goal
when there are so many other things we talked about they're going to actually
get you closer to the goal the coding challenges are one bit but it's not the
only door you need to be opening plan out your days

02:07
make sure you're not just focusing on the coding challenges so many folks have
gotten jobs and the coding the technical interviewing which is a tiny piece
just a small bit be wary of what you're folk over
focusing on uh and and do the things that are going to actually move the
needle building out your Hit List reaching out to real individuals you can
get an actual referral to is the primary thing that's going to move the needle
for you everything else is extra I have a forward commitment in February
how should I address this with my interviewer you don't once you get the
offer you bring that up while you're negotiating your offer cool
uh you know what else feels like progress but is absolutely not buying a course
we get that sweet sweet sweet dopamine hit when we buy the course that we think
is going to help us get better at interviewing uh and then we don't do it

02:08
so don't get got literally the best courses on data structures and
algorithms are all free I'm sharing them with you here and on Discord uh these
things are not real things that'll move the needle all right uh
and if anything you didn't hear from me [Laughter]
I'm a flex I I know I was kind of messing with you I appreciate you saying
that I agree with you I worked on tons of startups myself because I didn't want
to deal with Lee code before most of them were Project based or languages
didn't realize demographic of the stream
hey no no worries it was I I thought you
were playing because of the the day Mama flex but uh yeah we we have a we have a
Meme here where we don't like our flexasauruses or our code weenies so I
appreciate you saying that thank you for being here
all right at the end of the day you don't believe me we brought in Daddy

02:09
Yankee themselves working at one of LA's hottest startups
they built a [&nbsp;__&nbsp;] button that was their coding challenge to build
a button no JavaScript no node no react no coding
challenge no data structures no algorithms a [&nbsp;__&nbsp;] button
with that let's take a break when we get back we move into data structures and
algorithms that you don't need to get a job but it's good to open all the doors
possible all right uh surge nine put put two more minutes on the timer if you're
new around these parts we like to take a break at the top of the hour we like to
make sure that if you're able that you get up move around hydrate
take care of yourself the hunt is a long grueling process make sure
you're taking care of yourself I put seven minutes on the timer I'm gonna run
the ads and you folks don't want to sit through them
and I will see you all very shortly we're gonna get into these wonderful

02:10
data structures and algorithms a gentle introduction the data structures and
algorithms and then we'll have more time to go deeper with it don't let me tell
you what to do not to do I'm going to show you how I think it's best to play
the game each and you each and every single person has to figure out what the
things they're going to use to help them in their personal hunt what their end
goals are what their objectives are and I hope that I can share enough that you
have a rough idea how to go forward but it's your game to be played I'm going to
tell you how I think it should be played
but it's up to you to figure out how you want to play it and the last thing I
really want to say on this before we move on is that
uh you you can't lose a job that you don't already have
right so many folks go into the hunt with these anxieties and these pressures
on themselves there's nothing you can do
gonna make you lose a job that you don't already have
right so get in there find what works find what doesn't work for you uh don't
be afraid to mess up there will always be other interviews there will always be

02:11
other places that you can find uh to get interviews with
take that anxiety off your shoulders as much as possible don't let your dreams
be dreams all right let's talk about some data structures
and algorithms now what I'm about to cover is going to make the Nerds angry
it's going to have them quaking in their boots none of this is meant to be a
comprehensive data structures and algorithms course it's meant to give you
the things that you should be thinking about and some ideas that I need
percolating in your brain uh your homework is the scotch I O course and
then we will have a full other data structures and algorithms course I'm
going to have you work through plus our daily stand-ups during October so
the goal today is to get a primer on the things that you should be caring about
thinking about and then as you complete the homework over the weekend it'll
solidify a lot of those Concepts we're going to come back on Tuesday
we're going to go deeper with Big O notation have more examples to help

02:12
drive home these these points and then it's gonna be something you're going to
start incorporating into your daily coding challenges so everyone should be
doing a coding challenge today whether it's code Wars or Elite code whatever
you're doing you're already prepping through those questions now you're going
to add this last layer of optimization and thinking critically about the code
that you wrote and is it optimal cool so we talk about data structures and
algorithms let's just get some quick things off the table when I say
algorithm all I really mean is just the steps that you are taking to solve a
problem that's it there are many ways to solve problems an
algorithms just a certain number of steps that you're going to take to solve
a problem now most of the time when we're talking about algorithms like for
the purpose of our coding challenges and
things like that I'm just really kind of talking about a function and and that's
kind of it a function that has some steps that we're going to follow to to

02:13
solve a problem and and that's kind of that's it
now this function or this algorithm is going to transform some input
which I'm going to call a data structure into a certain output that'll probably
be either the same or another data structure
and when I say data structure I'm just talking about the way that we
form our data you've been using a bunch of different data structures throughout
our entire time we just never really called them that we've been using
objects we've used these different things that hold our data or the way
that we structure our data throughout our entire program so we're going to
have different data structures we're going to be using different things that
enable us to uh work through our code critically but

02:14
when I say algorithm right when I say algorithm I am just talking about the
steps you take to solve a problem when I say algorithm I'm really just in this
point talking about a function and this function is going to transform data from
an input of one data structure to a certain output that is another data
structure throughout our time together we'll look at things like uh we've
already seen things like cues and stacks when we did our our our our event loop
we're going to look at things like heaps and linked lists and all these other
ways to structure our data um but we're going to get to that in time
all right the function that is our algorithm contains the logic that
decides how we transform our input to our output right
that that that figures out how we take this thing that we're putting in and how
we get this thing that we're taking out and to really kind of put a conceptual

02:15
framework behind this uh because it's one thing just to say like data
structures but then to like actually think about like what a data structure
might be it's kind of like a jump that we have to make so give me the chance to
to make that jump all right I like to think about when I'm learning
about data structures and algorithms I like to think about a library
right I like to think of a library and this example comes from Scotch IO I
always thought this was the best primer on data structures and algorithms uh
that was ever out there um they took it down when they were
acquired but it's still on the way back machine and I really like this example
because it gives us something think like physical that most of us probably have
experienced then we can tie these like kind of ambiguous Concepts too so

02:16
uh a library contains many different data structures books magazines CDs DVDs
Blu-rays uh when I was in Boston our libraries were lit because they had like
video games too like you could go get like 3DS games and and and and other
like video game stuff which is always pretty cool
right so a library contains a lot of data and that data is structured in many
different ways we can have data that's represented as a book we can have data
that's represented as a magazine we can have data that's represented as a CD we
have data represented as a DVD we have data represented as a Blu-ray
lots of different data represented in different data structures in this case
our different data structures would be these different objects the books the

02:17
magazines the CDs the DVDs the Blu-rays now if your data is just a bunch of text
it makes sense to use a book to hold that data
right let's think about that if we have our data and our data is just a bunch of
text right did it make sense that we would use a book to store that data however
if our data was a bunch of let's say low
quality video it would make sense to use a DVD to hold that data so there are
better ways to hold different types of data could we
put our book on a DVD yes and can we break down our videos into individual
frames to put in a book yes but we wouldn't be using the appropriate data

02:18
structure for that data like it just wouldn't make sense for video to be in a
book and for a text to be on a DVD uh so as we start to evaluate our data
we'll think about the different data structures that might be appropriate
right then there are some other things we might start thinking about as we
start to evaluate the right data structure as well so DVDs have a limit
on the amount of data they can hold they are cheaper but they are constrained
when compared to Blu-rays Blu-rays can hold more data but they cost more
so if you have a bunch of video you could use a DVD to hold that they are
cheaper but you might run out of space whereas Blu-rays

02:19
can hold more data you have more space but they cost a little bit more now
when we're worrying about real data and its cost we're not really really talking
about like the monetary cost like a DVD being cheaper than a Blu-ray right
the cost when we're worrying about our code and the data that we're
representing in our code comes down to two things space and time
Space is really just the amount of memory that this structure is going to
take up and time is how long does it take us to get done the things that we
want to get done and this works this comes into play with our data structures
and it also comes into play with our algorithms as we start to evaluate
different structures as we start to evaluate
different algorithms we're going to keep our mind on the cost
not the monetary cost but how much memory will it use and how much time

02:20
will it take up um I like to think of a very common data
structure that comes up and interviews all the time and that's a linked list
versus a doubly linked list this is a quick post check uh if you've heard of a
linked list before just throw like an emoji or an emote inside of chat for me
just kind of see where folks are at throw something in the chat okay
might have run into it in your code war is your Elite code when I started doing
the uh the instructions algorithm homework already cool
so we have uh a linked list up here on the top and a doubly linked list here on
the bottom now something interesting about a linked
list is that it uses way less memory but
it is less efficient why why would I say linked list is a little bit less

02:21
efficient than a than a than a doubly linked list
it's one way exactly a linked list literally takes up less memory but we
can only go one way now a doubly linked list uh takes up more memory but it's
more efficient because we can go both ways
right so if you were ever in a situation
where you only needed to go that one way you would be better served using a
linked list as opposed to a doubly linked list that would take up more
space so these are all the considerations that we need to start
making to make good decisions as an engineer we need to understand the
different structures for our data and the implications it has for how our code
takes up space how it takes up time how it will impact the things that we are
trying to do and so we are going to learn a bunch of different data

02:22
structures that are important to have memorized are
important to have in your brain but it just helps us make better decisions
right that that's the whole point that we're trying to do the whole point about
learning data structures and algorithms is to just be able to make better
decisions now like I said you can get away with most of your coding challenges
right with just knowing methods and just brute forcing your way through
these problems what we saw on Tuesday that I was able to solve a problem using
nested for loops and while it worked I don't think that was the best
engineering decision that I could have made there was definitely a way to
optimize that code right to make it better in terms of the cost that we care

02:23
about in terms of space and time so that's the point of what we're trying to
do here is that we're going to start learning these things that make more
sense that enable us to make better decisions that enable us to think
critically about our code and in the end write more optimal code now the reason
why I tell you all to learn your methods first is because the methods
someone's already done the heavy lifting for you
pretty much all the methods that you're going to use uh in JavaScript right
depending on where they're implemented because each browser can technically
implement the methods a little bit differently but somebody's already
thought through how to do it the most optimal way
right like if you look at the code underlying those methods they're using
the best data structures the best algorithms like everything that could be

02:24
done to optimize that code so by using the methods you're probably already
using the optimal stuff right and so that's why I select the folks to start
there one of the things that you might do
right one of the things you might do is I often will just look up the runtime or
the what we'll eventually look up the the the runtime complexity or the time
complexity of those methods and I just have them in my Inky so when I'm in an
interview and someone says like oh you use this method do you know how optimal
your code is boom yeah I've already looked this up it's already been in my
Anki from bumps every time I look at that method I also know the the amount
of time that it's taking up so what we're going to do now is we're going to
look at ways to make better decisions the things that we should be thinking
about and through our stand-ups I'm going to expose you to a lot of these
data structures through stand up so I'm going to expose you to a lot of these

02:25
algorithms and it'll also be in the homeworks that you have assigned as well so
to kind of visualize some of this and start to Think Through how we can make
better decisions uh let's go back to the library
not hard to have fun when you have a library card folks
how am I looking up um I I stack Overflow uh like if you if you like if you just
look up like time complexity of a method uh there's always a stack Overflow post
on on it with somebody that'll pull up like the actual like like Equis script
specification or like the V8 engine like specification for it uh that's that's
how I find most of them the real code weenies exactly you know you need code
weenies every once in a while cool let's go back to the library uh
the best data structures consume minimal resources while storing the data in a

02:26
meaningful way for various operations what let's think about this again the best
data structure typically when you're making decisions on what data structures
to use the way you're going to say that was the best data structure is because
it's going to consume the least resources to store the data in a meaningful way
the meaningful way is the the the the the really important bit here because we
could have a data structure that's more optimal but if you can't do the things
you want to do with it it doesn't make sense to use it
all right so let's talk about that let's talk about a flip book versus a DVD
right we could print out our video frame by frame into a flip book

02:27
right it would work the data structure would store our video
frame by frame in a book and if we wanted to we could sit there and flip it
and see the the video happen right or we
could store our video on a DVD now there are some considerations to make here uh
what's using less resources right and can we use the data in a meaningful way
if we know that we're going to use the data to take screenshots of our videos
flipbook might be better right but if we know we're going to watch the video
then the DVD is probably better all right liquid words hey how you doing
so when we're evaluating these different structures for our data a flip book

02:28
versus a DVD we have to evaluate all right what is what is the how am I going
to use the data right it's not always just this is a more optimal data
structure we'll I'm going to use this structure
because this is what I want to do with that data all right
good brings up a good point if I want audio then flipbook that data structure
is out the window there's no audio with a flipbook so if I want to be able to
listen then that cuts off that data structure immediately
so it's not just about optimization it's about how we're going to actually use
the data that we are storing cool all right I want to ask a question here
we're in a library and I want a specific book what could I do
to get a specific book I want us to come up with an algorithm right I'm going to

02:29
give you a data structure uh that's holding a string a name of a book
and what I want as the result of this algorithm is the actual book so I'm
going to give you a title or the name of the book and you're gonna give me the
actual book now we're in the library what is our algorithm I have given you a
string and I want a book back what could I do to go and find the book that I've
just given you my my algorithm is ask the library use
the card catalog uh look it up there's a lot of things that we could do
but let's let's let's let's think about how we can simplify this for a second
I could walk into the library and realistically I could check every book

02:30
right I walk into the Boston Public Library main branch I don't know how
many floors they have probably million plus books right
I could start with the first book that I see and check every single book
right I could check every single book I could just go in in order
until I find it would I eventually find the book that I was looking for
let's say the book does exist that it's in the library
yes you might die first but yes eventually two three days later I might
find the book all right we're assuming that it's there
that it's not checked out yes we would eventually find the book a more

02:31
optimal way for finding a book absolutely there's a Dewey Decimal System there's
sorting there's there's ways to look it up so we use algorithms every day of Our
Lives we use data structures every day of our lives whenever I start talking
about data structures and algorithms it can feel scary
right you already use these different structures for your data all the time if
you've ever been to a library a book with a data structure for your textual data
textual that just sounds you you already knew how to handle your
textual data right it could be in a book right
right it could be in a book you you already know how to handle your your
your video data right that could be in a in a in a DVD right you're already used

02:32
to accurately picking the right data structure for the data that you care
about in the way that you're going to use it right if you know that you are
going to want to see all the text right you're going to want all that textual
that textual data right then it's probably going to be a book but if you want
video it makes sense to go for the for the DVD or the Blu-Ray so you already
know how to choose the right data structure for the task at hand you do it
all the time when it comes to code there are these
data structures we have to learn heaps we saw cues we saw Stacks already we're
going to see these different types of lists we're gonna see all these things
that we're going to pick up over time right but you already know how to use data
structures not just using data structures relating to your code now you also

02:33
already used algorithms all the time none of you would walk into the library
and go all right I'm going to start with book one and I'm going to go linearly
through all of the books until I find the book that I won
right you're going to find that book you want if you find it finally get your uh
textual healing textual healing you find the book right but none
of us walk into the library and and go through all the books until we find it
we have a better algorithm to find the books that we want
right we we know that we can we know that the books are sorted already
we know that we can go to a specific area where that book might exist we know
that we can go to the librarian and get the book that we want so we already know

02:34
how to use algorithms and you already know how to evaluate the complexity of
those algorithms you know intrinsically that checking every book would take too
much damn time so it's gonna be the same thing when it
comes to your code they're going to be certain ways that when you write your
code and you look at your code you're going to be like that's taking too much
damn time there's a way that I can do this more efficiently that I could do
less and get the thing I want faster all right
if we were to do it book by book it would take us a lot of time to move
through each book but there are also other concerns too like
did we already go through that row right did we already go through that

02:35
road do we remember all the rows that we've already been to it's a lot
uh so I'm gonna ask you what do you think would be the most
efficient way to find your book what's what's the algorithm that you
would use to find the specific book what are you gonna do ask Bob
Library ask the librarian the hash map it's always hashed map the answer is
always hashmap you ever stuck hashmap uh ask the librarian cry in the corner
until somebody comes and helps you uh use the Dewey Decimal System
does that still exist uh look uh identify the Dewey Decimal
number locate the position in the library based on that
I think there's a whole like we're thinking like that like oh my gosh

02:36
and too old I just think that like there's no way in hell
there's no way in hell that by the time my child is old enough to like really
go to the library that they're using the Dewey Decimal
System there's gonna be an app on their phone
right and they're gonna type in it and it's gonna be like go here right
it works I just don't know like will it exist still like it will be a lost art
exactly will there be a new library meta
will there just be QR codes like I don't know right we'll still be there will
there just be air tags in each book I don't know foreign
I just did a coding challenge for an interview they told me the structure

02:37
they wanted the answer in they didn't just care about the right answer this
matters it really does cool so yeah so there's there's a lot of
different algorithms that we could come up with to find our book using the
librarian using the Dewey Decimal System going linearly through each book
right asking someone to go find it for you paying I was gonna say don't do this
it's like pay the kid in the children's section to go find your book no please
don't do that um now how long it takes to find our book is our time complexity
right is our time complexity uh searching each book by book would
probably have one of the greatest time complexities uh
asking the kid that doesn't know how to use the Dewey Decimal System to go find

02:38
your book might actually be longer in terms like less efficient in terms of
time capacity it might take them longer because they get lost they go home with
their parents and you don't see them until next weekend so that might be an
even less efficient system and now they have money they just went to the gift
shop or the the cafe or whatever right so these different algorithms and how
long it takes to find the book would be our time complexity right we could go
book by book that would be a long time using the librarian might be a little
bit faster using Dewey justice system might be a little bit faster right so
there there is there is how long it takes to find our book we
would consider our time complexity and so thinking through the appropriate data
structures do I want to book do I want a DVD do I want a Blu-ray and the
appropriate algorithm I'm going to go book by book am I going to use the
librarian is how we can efficiently solve problems

02:39
and yes these are silly examples yes we're talking about books and libraries
and things like that but it is the same process when it comes to our code
how are we going to structure our data in a meaningful way
so that we can do the things that we want to do with it
and what is the algorithm the steps that
we're going to take to solve the problem and is there a way to do it with less
steps to do it more efficiently these are the
concerns that is as Engineers we need to start thinking about
we need to start bringing these concerns to the code that we write every day and
then to the code that we especially write for our coding challenges now I
bring up the word Effectiveness and so when we're talking about the
effectiveness or the complexity of a solution
we're going to use something called Big O notation
we're going to use something called Big O notation and so all Big O notation is

02:40
is a way of mathematically describing the complexity of your algorithm in
terms of space and time now these are a lot of big words you can
treat them as disrespect but all it is is a handy reference to say all right
this is how long I think this is going to take and this is how much room or
space in terms of memory I think this is going to pick up and so it's not really
like we don't really have to know math here don't don't let that get you scared
it's just a way for us to be able to talk about the different complexities
that we are running into and for us to talk with other Engineers about how we
might make our code more efficient so there are a few common complexities
that we're going to start off with and I'm just going to very much skim the
surface here this is just to get these ideas in our brain
to get them top of what we're thinking about so that as we start to write our
coding challenges throughout October as you continue to do your code Wars and

02:41
your Elite codes these things to be at the top of your brain I want you to let
them marinate over the weekend I want you to do the data structures and
algorithm homework over the weekend and we come back Tuesday we'll go deeper
we'll go deeper with our Big O notation so here are
three I'm only going to focus on three common complexities
of one or constant time o of n or linear and N squared or some
people call it quadratic right these are
the complexities that I'm going to focus
on tonight and I'm going to walk through uh where we might see them we're going
to talk through some examples and we'll end it there so you have maybe it will
end a little early maybe you'll get the chance to maybe start jumping into that
homework and see these in play so when we're evaluating kind of our our

02:42
algorithms or we're evaluating the efficiency of our code right
right that's the first time I see somebody do that the we don't with the
End early code when he's really sweating right now
they are they they can't they're just they're just trying to chomping at the
bit like I said this is an easy introduction this is not like the
end-all be-all right well cool isn't that the end-all be-all right here we go
I want to start thinking through the number of inputs versus the number
of operations that my code would have to use so
the first thing I want to think about in terms of inputs and operations is let's

02:43
think of an array so you can think about this chart as
showing the number of inputs increasing and the number of operations increasing
as well so with an array let's say I had the numbers one two three
four and five in my array right if I wanted the first number out of my
array how could I get the first number out of this array
I want the first number out of this array
yeah I could use the zero index I could do array and use the zero index
how many operations did I have to perform to get the first number out of

02:44
my array one operation what if I added a million inputs to my array what if my
array now doesn't stop at five but it goes all the way to one million
all right that's where my array goes now does it change anything nope
so this is an example of constant time no matter how many inputs I have as part
of my array accessing let's say the first

02:45
the first element in the array it never changes like accessing an element based
off of its index will always just be one operation no matter how many inputs
there may be what if I wanted the last if I wanted the last value in an array
it's still just one operation right we could do it's gonna be a little fancier
looking array we'll do array dot length minus one right it's still one operation
all right right still one operation right so we can say that accessing

02:46
an element right accessing an element in an array by its index happens in
constant time or o of one no matter how many inputs we have
right no matter how many inputs we have the number of operations will always
stay the same now let's think about our library example I want to
find my book in the library right I want to find my book in the library
right now the library has a million books

02:47
right my library has a million books in it Big Daddy Gates rolls through
and you know what donates a million more books
all right donates an another million books so my inputs went from a million
to 2 million if I am going if I am going to go book by book
my potential operations just what doubled yeah they just doubled for each
book I added I added a potential operation if I am going book by book

02:48
right if I am going book by book my number of operations are going up linearly
right they're going up linearly each each input means that there could
potentially be another operation so we call this linear or o of n
in this case for each input I might have to do another operation so if the
algorithm I was following was to check and try and find my book book by book
right book by book right there might be a worst case scenario
where my book is the last book in the library right and as I added an input I
also added a potential operation cool yeah exactly worst case scenario now

02:49
something interesting is that we'll get to not today but you'll see that there
are some instances where linear complexity seems like it's better than
constant time or there's like these other ones like logarithmic and even
quadratic there seems to be some instances where like linear might be a
little bit better but that doesn't seem right like constant times always one
operation right but that linear when when would this linear algorithm pay off
like when would this linear algorithm where each book I add adds another
operation and k aka another book I have to check
when when would this might pay off small stuff
there's only one book in the library Yee
I got it right or if it's the first book I check right small input sizes getting
lucky with being at the first book like there are some things we could think
about uh later on and we'll get to this on Tuesday right where in smaller sets

02:50
of data things get a little weird but we're talking about the Long Haul here
we're talking big picture right we're talking big picture right talking worst
case scenario as we add another book we're adding another potential operation
now the last thing that I want to talk about today and then we're going to
break all these down is this N squared we saw an example uh on Tuesday
uh a Time complexity that's N squared what was that that what was that thing
that we saw that was a complexity of N squared
yeah it was the nested for Loops so we had nested for Loops that were trying to
find um that we're trying to find uh Matt it was
matching numbers right trying to find the the the the matching numbers or
sorry the numbers that added up to a Target value and so what we had to do

02:51
was we had an array of numbers right we had one two three four five we
have an array of numbers and what we were trying to do was find which two
numbers equaled I don't know let's do let's add six here
too a little easier what two numbers added up to 11.
all right what two numbers added up to 11. and so we had these two nested for
Loops where the first Loop was grabbing a number right the first for Loop was
grabbing a number from the array and then the internal for Loop was comparing
that number to every other number in the array and if it didn't find anything
then it moved on to the next number so this would do if we were actually to run
out this this two sum code we would pick the number one
and then we would do one plus one doesn't equal eleven one plus two

02:52
doesn't equal eleven one plus three doesn't equal eleven one plus four
doesn't equal eleven one plus five doesn't equal eleven one plus six
doesn't equal eleven and then our outside Loop
would go up to the next number but our internal Loop still had to do two plus
one doesn't equal eleven two plus two doesn't equal eleven two plus two
doesn't equal eleven two plus four doesn't equal eleven two plus five
doesn't equal eleven two plus six doesn't equal 11. and then we had to go
to the next number so for every number on the outside Loop the inside loop had
to do it all those times so think about the danger of adding a single input
if we make this go from six to seven how many more operations do we need to do
because now this internal Loop also has seven so we add one input and we have at

02:53
least what at least one two three four five six seven seven more operations
right with just one singular input addition this internal
Loop has to do so much more work as we add a singular input we can see our time
complexity almost becoming exponential and I'm using that word very very
Loosely here right that you could see this just how
aggressively we're going to be adding operations for each input that we add
right with a linear complexity a little bit different each input we add now we
just went up one operation another input
another operation but with a with a with a quadratic or N squared complexity
boom through the roof two inputs and we're we're we're adding so many
so many more operations so that's where these complexities come

02:54
into play we can start to look at our code and think through all right
does anything change when I add more inputs does it stay constant right
if I add one input and I only get one operation does it
continue that way linearly and if I ever find myself in a situation
where I'm adding one input and I'm just getting
exponentially more operations I need to pause and think to myself is there a way
to do this more optimally right so that's where we want to get we want to
be able to evaluate the code that we're writing in terms of these complexities
so we can write more efficient code not only for ourselves but also in technical
interviews during our interviews you're going to solve a problem and one of the
common questions your interviewer might ask is this the optimal solution and if
you looked at our solution from Tuesday you would say no this solution seems

02:55
like it's nested for Loops this looks like it's it's N squared there there
probably will be a way to make this more optimal so when
we come back from our break we're going to dive deeper into these different
complexities I'm going to show you some examples of constant time I'm going to
show you some examples of linear time I'm going to show you some examples of
our N squared or quadratic time and we're going to get a little more
comfortable with them and then we'll stop for the evening we'll let these
things percolate in our brains over the weekend you'll have some homework to
work on over the weekend that puts these into practice and we come back on
Tuesday we'll go deeper and we'll add a bunch of
other complexities to the list but the idea here
right the idea here is that we are moving into this world where it's no
longer just about writing our code it's about writing our code optimally it's
about choosing the structures for our data that do the things we need it to do

02:56
and the algorithms that get the job done efficiently cool
uh how can we do the two array numbers more efficiently uh that's a hash map
which we'll get to later this month we can't be baddies no more exactly we
got to be efficient baddies bye Tina no Tina's always a part of us
yeah cool all right let's uh take our break five minutes on the clock here all
right so let's see some of these examples and the trick that changed my life
alrighty so we talked about oh one already o of one you might hear some
people refer to it as order one if you're really like a code weenie uh but
more often it's called constant time uh for all the inputs in our algorithm
there will always ever be one operation required so no matter how many inputs we
put in uh our algorithm will only require one operation like the steps
we're going to take will be one step oh so here is an example where we have an

02:57
array of numbers and when we want to get
a specific number out of that array like we have we have the the the we want to
get the first number out of the array or
the last number out of the array we know we can use the index so one operation
right one operation and we can get that number
all right so if we wanted to get the first number out of the array we just do
nums zero that would give us the first number if
we wanted the last number we could do something like um nums nums dot length
minus one and that would also give us the last number in the array so no
matter how many inputs we have we could add a Million numbers to the array and
if we just wanted to get the first or the last or a specific number based on

02:58
its index it would only ever be one operation so those types of algorithms
where no matter how many inputs you have coming in you're only doing one
operation we call those constant time of
one operations this is kind of where you want to get a lot of your stuff too A
lot of times folks will ask you oh can you do it in constant time can you do it
in O of one can you take something that's quadratic and make it linear like
these are the things you might start having as conversations with your cool
friends alrighty the next that we saw was O of n
you might hear code weenies call it order n linear is what you most often
hear it as so a linear complexity is for all the inputs in our algorithm so
as we add more inputs we get one operation per input so for each input we
get an operation input operation input operation input operation and so that

02:59
linear complexity uh we call O of n now let's dig through an O of n an O of n
problem here and then I'm going to show you the the one weird trick
for all the singles in your area right all right
here it is here's an O of n example we have
arrays we have an array of numbers right we have an array of numbers
and I want to sum I want to sum all the numbers in the array
right I want to sum all the numbers in the array so if I have a linear solution
right if I have a linear solution the linear solution to sumness would be to
Loop through the array grab each number and add that to my sum

03:00
so my array right now has five inputs how many operations will this linear
solution require five operations if there were a hundred
numbers in my array how many operations would it take to find the sum
it would take a hundred so this is a linear algorithm right this is a linear
algorithm for each input I add I add another operation right
right I add another operation and so just to kind of flay this out real quick
let's say our array was one two three we would go ahead and run this for Loop

03:01
the very first time it runs we grab the first num which is one and we add that
one to our sum so our sum is now one the next time it runs we grab the two
numbers two we add that 2 to our sum which is now three and the last time
this runs it's three we grab that three we add it to our sum now we're at six so
we had three numbers in our array we did three operations
the one freaking place I could put the sum is right behind my head right
uh so for each number or each input we had in our array we did one operation so
that's a linear algorithm one operation per one input but are you ready
can you handle it you're ready to have your mind blown your world turned upside

03:02
down what was real is no longer real what was good is now bad what was textual
is now factual already here is something people refer to as
gauss's theorem or gauss's trick uh what it does is it says if you have an
array that meets some conditions right Gauss is some yep if you have an array
that meets certain conditions in this case what do we notice about our array
what do we notice about our array it's sorted
it's continuous meaning it goes from one to the next number without skipping
anything right and it starts with one so it starts with the number one

03:03
it's in in sorted order it doesn't skip any values right it's
contiguous right so this is this array is special
because it's already sorted it goes from one to certain number no funny business
exactly but this is a pretty common array that we might see
and so there's something really cool if we were to do our linear solution
if we're gonna do the linear solution that was O of n that we just learned how
many operations would it take to solve this to get this sum
if I wanted to sum these numbers with the O of n solution that we just did it
would take five operations you ready let's take a look at this so here is a
function and the function only performs one operation
it just grabs the last input that's it it grabs the last input

03:04
and when you have the last input in an array of numbers that starts with one is
continuous meaning that it goes from one to the the last number doesn't skip
anything you can just grab the last number so one operation
and then do this math trick with it you take that last number
you add one to it you divide it by two and you times it by the last number and
that gives you the sum so let's go back to our easy array one two
three we know our linear solution this equals six let's try gauss's sum here
gauss's sum says take the last value which is three
so we'll do three plus one which is four 4 divided by 2 gives us 2 2

03:05
times the last number which was three gives us the same sum of six
my mind broke when I learned this trick so now we have away of taking a
what would be a normally reasonable linear solution
but doing it in what type of time o of one or constant so we could now
speed up this operation it's just it's just night and day right like like you

03:06
went from having to do one operation from every input to only having to do
one operation no matter how many inputs there are
so this is an example of how we could take something that was a linear
solution and by having deep like algorithmic knowledge know that gauss's
sum or gauss's trick whatever you want to call it could do this in constant time
this is why people study algorithms right this is why people study
algorithms it's not that they are coming up with these Solutions on their own in
fact like coming up with like more efficient algorithm is not really like a
thing that happens unless you're like doing your PhD in the computer science
or math or something like that right but what you are doing is memorizing a
lot of these algorithms right so that when you encounter a similar problem you

03:07
know how to solve it in a more efficient way right so that that's the point here
right that's the point the point here is that we're memorizing exactly we're
memorizing some textual patterns here some algorithms so
that when these types of problems show up again we know how to apply it
if you're in an interview and someone asks you to sum an array of numbers
even if it's not a contiguous or um sordid array of numbers you can still
pepper this out and go oh you want me to sum these numbers it'll be really cool
is if the numbers were all like if the numbers were continuous and they were
sorted we could do this trick where this linear solution is actually in constant
time can I show you real quick right and then even if it wasn't the the actual
problem the interviewer might get excited and then you get the job

03:08
right you get the job and so a lot of these like these
algorithm I'm going to show you the algorithms that are coming up in the
homework are so you can pull them out during your interviews right you can
pull them out during your interviews and
and get to these Optimal Solutions but I just want to make sure I'm very like
abundantly over clear this is not something that I would expect you to
derive on your own it's something that you memorize and that's why like you'll
see people that leak code their eyeballs out uh and memorize a lot of these
algorithms to make their jobs easier yeah
can you show us how to properly do math on Abacus I do have my Abacus right
behind me cool so I hope that this kind of starts
to make it click why these algorithms might be important
right does that make sense now does it make sense why choosing the right

03:09
algorithm the right data structure might save you time and can help you write
more efficient code cool awesome let's talk about the last one and that's
where we'll end for today um committing these to memory like I
said is very important this this gauss's sum should be in your
Anki deck for sure these very simple linear complexities
these constant time examples should be in your Anki deck for sure
you want to be able to start recognizing these and as you start to solve your
coding challenges on code Wars or leak code
take another second at the end of your prep
right take another second at the end of your prep to see all right is this
happening how many operations am I doing here per input is this constant time is
this linear uh is this quadratic and we're going to spend more time on

03:10
Tuesday doing exactly that I'm going to give you some real world scenarios some
code scenarios where we'll sit back and kind of reflect on all right what type
of time complexity is this and can I do it better somebody said could I run the
math back again yeah so um if we did this if we did this normal
array sum before right we had uh one two three if we did the linear sum
right if we did the linear sum what we'll be doing is grabbing the one and
then adding it to the sum and grabbing the two and adding it to the sum to make
this three then grabbing the three and adding it to the sum to make it six
that would be three operations grabbing this input grabbing this input and
grabbing this input three operations to get the sum

03:11
but with gauss's trick or gauss's sum all we do is grab this last input
and now we can use it for this three we can use it in this little math value
here so three plus one is four four divided by
two is two two times three would give us the exact same answer of 6 but we only
did one operation we only grabbed we only grabbed one input out of that array
so what took us three operations before is now only taking one because we know
this algorithm we know this gauss's sum uh somebody some folks have been asking
this and I think it's a really good question why doesn't this count as an
operation uh because none of this is do I have it no it's in the slides on

03:12
Tuesday uh none of this is like exact right these are theoretical
complexities right we're not like literally counting like line by line
we're saying all right as I add an input
are my operations going up right is this all exactly approximations this is like
rough rough ideas these are these are a theoretical concept that we're buying
into so that we can explain the efficiency of our code we're we're not
really super focused on like oh 0.3 seconds or like it's exactly just that
one it's it's rough ideas of how we can talk about what's happening in our in

03:13
our applications mm-hmm and even if yeah thank you team even if
we said you know what this whole thing is in operation
this operation only runs once right like if we just said this whole thing was in
operation right here we said both like here we said this is an operation this
is an operation right do our operations increase with the number of inputs
going up so if if I added right if I add it a million inputs
and even if we counted this as two operations right if we said two one
we said two one right we said two one so there's two operations and it stays two
no matter how many inputs we put in that's still constant time and

03:14
technically what we'll get to on on Tuesday is that you would reduce this down
to O of one or just one so it it even even if you counted it as
an actual operation it's still constant right and then we boil them down to the
base notation that we're using of one of N and squared exactly
am I wild for thinking data structures and algorithms might actually be fun now
I think so this fundamentally broke my brain this is when it like that like I I
didn't understand and you might be feeling the same way data starts not
only didn't make any sense to me like why would I do this algorithms like why
would I invest time in like needing to know this stuff and then I saw this and
I was like [&nbsp;__&nbsp;] this could be useful
I could see myself maybe running into some things where if I had more

03:15
knowledge I could do stuff more efficiently and that's the beauty of I
think hunttober as we're doing these daily stand-ups at first we're just
solving problems but once we get to like hash maps and like some other fun data
structures some other fun algorithms that we have in our back pocket things
that used to take an exponential amount of time and I keep using that word very
Loosely we could do in constant times sometimes like it's just it's just it's
just mind-blowing and then if you think about the real implications this stuff
could have on your code basis like if you can if you can have something in
your code base that goes from a linear to a constant or a worse time complexity
to constant like that's that's game changing uh so for me this is fun I love
learning algorithms uh I I love doing leak code when I was grinding out Lee
code because I just it was a chance to learn these really neat things I put
them into my Anki and over time you start to develop this like sense for all
right this is the complexity and I know that there's this thing I can use that

03:16
would make my job easier uh the last one that we saw uh was
something that we call N squared and or or quadratic some people might call it
it's where you have loops inside of a loop that's like the easiest one there
are some Loops inside of Loops that aren't technically N squared but
whenever you see a loop inside of a loop your brain should start going wait a
minute wait a minute Loop inside of a loop we might be getting into a really
inefficient time complexity here right in this case we are
uh trying to see if this if this array has any duplicates right and so we have
a loop that's grabbing one number and then comparing it to all the other
numbers inside so if we were to run through this our outside for Loop is
going to start off with the number one and our inside for Loop is going to grab

03:17
one two three four five stop me from writing my apple pencil this die
five five right uh and it's gonna check to make sure
that it's not the same number so it it went from number one it didn't find
another one so then it moves on to two and it's gonna do one two three four
five five does it find a duplicate right then it moves on to three and it does
one two three four five five doesn't it find a duplicate so then it goes on the
four one two three four five five doesn't find a duplicate five finally
with five we get the one two three four five but it was the same index that
doesn't count and then finally five we find the duplicate so we had five inputs

03:18
but it took us five times one two three four five twenty five operations
right with the nested Loops we had five inputs but we did 25
operations right and if we had had more in here we could have wound up doing way
more operations we had it like six and we got to add six to all these lines here
right so by adding one input we added at least four more operations
right we had at least four more operations and that's why the chart
looks like this right for each input our amount of time
it's taking the amount of operations we have to do is just skyrocketing

03:19
all right just skyrocketing cool I love data structures and algorithms foreign
get the crew together we're doing algorithms baby
all right uh so for homework uh your first bit of homework this weekend where
I want you to start working through these things is the scotch i o data
structures and algorithms course um you don't have to do it alone
jump on Discord getting a voice Channel start working through it
so data structures I kind of talked a little bit about data structures last
last class and um I gave a lot of like I I would say
weird examples right I said all right think about books think about
DVDs think about Blu-rays right well I actually like that because I think it's
a good way to think about data structures a book can hold text right
and it's really good at going like page by Page

03:20
it's easy to get to exactly where you want to be right like I want to get to
page 100 boom you can jump to page 100 very easy to consume text-based content
however figure out how many books I could fit on a Blu-ray right I have way
more space way more things I can do when I'm using a Blu-ray but it might be
slightly harder to get to the exact text that I want to get to and so
this idea of like data and the structure of it we use in the real world all the
time like we have a concept of like all right here's how I want to store data
and when I store data in this way I get some quirks I get some features but I
get ways that I can use and manipulate that data because of the structure I

03:21
have chosen right I I can I if I if I store my textual day oh if I store my
textual data in a book I get some things that I might
not get when I store it in a DVD uh when I store something in a DVD I
might be able to to search through stuff faster I might be able to uh hold more
right but we're used to storing data organizing data and
it's something that we use every single day so when it comes to our code it's
still kind of the same thing a data structure is simply an organized way of
storing data whether it's tax numbers right it's a
way that we're going to organize that data but when it comes to a data structure
the thing that you really kind of also focus on is
how it's collected and organized so that

03:22
you can perform different very different operations on it correctly and
efficiently like if I want to find a specific sentence
is the book the best way to do it like is that the best way to store and
organize my data if I am if I am storing a video
I could have my video as a flip book is that the best way to store my data to
get to a specific scene that I want to watch or would a DVD make more sense to
store my video content all right so this is a lot of big words
but why like like hold on a data structure is simply an organized
way of storing data it's a pattern of collecting and organizing data for
performing various operations correctly and efficiently
but why like what what is the reason like why does this play out why do we
like do this why is it even worth thinking about this uh and I just want

03:23
to give you a very what I think is an example that we might all feel
comfortable with having gone through program um if I wanted to store information
about a stock Trader like a person who trades stocks
and I wanted to store information about them would it make sense to store their
information as an object or an array chat is overwhelmingly saying an object
and so you've already know how to make these data structure decisions you said
hey if I want to store information about
a stock Trader well then an object makes the most sense because we know when it
comes to using objects we have key value pairs right we can store first name we
can store last name we can store their location their job title their years of
experience we could even have a data structure inside of our data structure

03:24
right like recent trades and it makes it so that we can get the
things that we want right we can get the things that we want quickly right so if
I want to get their name I can just do stock trader.firstname right if I want
to get their job title I can do stock trader.job title right it kind of goes
back to this idea that it's a pattern of collecting and organizing the data to
perform various operations correctly and efficiently well if I want to store
information about a stock Trader it makes sense to use an
object because I can access the data in a way that makes sense right
in a way that makes sense I don't see total losses yeah we need to add that cool

03:25
so when you hear data structures I I don't want you to get scared
right you've been using data structures this whole time chat accurately picked
the best data structure for the problem at hand and what you're going to do as
you go through the homework uh not only the homework last week but the homework
that's assigned for this week is you're just going to add more data structures
right you're going to add more data structures to your
repertoire you're going to add more data structures to your tool belt and these
different structures going to be usable for certain types of data that you want
to store in a way that makes sense to consume that data
so it's not just the data but it's the way that you can access and organize the
data that makes up the data structure when I think of a library I think of a
lot of different data structures because I'm storing a lot of different types of
content I'm storing text inside of books I'm storing video instead of Blu-rays

03:26
I'm storing gaming data inside of a video game right
like we learn these data structures in our day-to-day live it's not anything
different when it comes to our code let's see another one
what if I wanted to store uh the stock Traders recent Tesla purchase prices
right this stock Trader is trying to accurately pick up Tesla stock at the
cheapest price and I just want to store the prices at which they bought the
stock does it make sense the store as an object
or an array and chat overwhelmingly is saying array right now because that
makes the most sense we are already used to using data structures every single
day to solve our problems when it comes to code an array makes the most sense
right we can have they bought it at 208 they bought it at 205 they bought it at
217 they bought it 222 220 right like they they these are the price the the

03:27
purchase prices that they made now why why would an array make the most sense in
this case could we technically have an object that had the purchase prices
it's all the same key yep it's all the same type
ease of access and memory that could be a thing here
uh so we can sort it we can get the average the the things that we want to
do at these prices probably requires us to Loop through all
the prices to sort the prices to find out which prices were the mid like all
the things that we'd want to do with this type of data an array is in a way
more efficient data structure to do the things that I want to do with this kind

03:28
of data right like if I want to sort it I want to find the Min the max if I want
to find the average having it already in an array is the better data structure
because it can do the things that I want to do with that data could I
have an object that had like price one and then a price price two and the price
yes but it would still be harder to do the things I wanted to do with that data
right like could I easily Loop through it yes but then I'm doing things a
little bit more difficult I'm not going to be able to do the things that I could
as quickly and efficiently do with an array
and the cool thing is if I did want that level of data exactly BSL I could have
an array of objects if I wanted that level of detail right so I still get all
the benefits and so these are the things that we start to think through when it

03:29
comes to data structures all right I have this data that I want to organize
what is the best structure to organize that data if I'm trying to organize
something about like a person an object this makes sense right like I could have
their first name as a key value pair last name is a key value pair if I want
to store the the price of their trades it makes more sense to be an array
because I can do the things I want to do with that data easily
does that make sense why data structures could be important like we're already
using them right we're already using them but as we
add more data structures to our our tool belt it becomes easier to organize and
work with the data that we run into cool yeah Madeleine of trivia says Rivia
says we just need to pick the best one exactly you just need to pick the best
one now how do you learn to pick the best one you do your code Wars you do

03:30
your Elite codes and you come to the boardroom
every Monday through Friday 6 PM Eastern Time on Remo for stand up
because what we're going to do is at first yeah we're just having some fun
solving some problems but quickly our our days are going to turn into all
right here's the problem at hand what data structure makes the most sense
for this problem at hand at first we're we're doing really messy stuff
at first we're doing things that that work that were brute for us and we're
working our way up to Hash maps and other fun data structures that we
haven't seen we're bringing stacks and cues back into the mix we only saw them
very briefly when we were talking about the event Loop so as we start to
progress and stand up we bring more of these data structures into our

03:31
repertoire uh it'll be part of the reading for those problems and it'll be
part of the problems that we're doing and so you can slowly build up your
knowledge of these data structures and feel more comfortable with them over
time could you do this on your own absolutely you can keep doing your code
Wars you can keep doing your your Elite codes and you'll build that up as well
what I'm doing with stand up is I've Cherry Picked
quite a few that I think lead to that natural progression where each one kind
of starts to build off the other are the Remo rooms getting full now like
I said we've been hitting between like five and six hundred there's a cap of
800. there you go alrighty now those are data structures
we also talked about algorithms and so an algorithm is simply the steps
you take to solve a problem that's it what steps are you going to take to

03:32
solve a problem uh they come together because often if we're talking about data
the data structure and how we store that data might dictate kind of what type of
algorithm we use right to solve a problem that's why they kind of come in
tandem but when you think of an algorithm it's just the steps you're
taking to solve a problem and that is it now
when we're thinking through appropriate algorithms we're trying to think through
the efficiency of solving a problem so when we have a problem at hand as we're
seeing our code Wars as we're seeing our Elite codes as we're seeing real
problems on the job we can think through different
steps we could take to solve the problem
and as we are thinking about those steps
it enables us to say all right the steps I took in this solution is it as
efficient as the steps I'm taking in this other solution

03:33
and eventually what you start to realize is that you can memorize quite a few of
these steps or these solutions to solve common problems and so just like you can
build up your data structure knowledge you can build up your algorithmic
knowledge right you can build up your algorithmic knowledge where you're
you're you're figuring out all right in terms of space and time how efficient
are the steps I took to solve that problem and the cool thing is there are
a lot of algorithms that solve or the steps they take to solve
that problem that are efficient in terms
of space and time so you can brute force solutions which will get you there or
you can be exposed to these different algorithms that someone has taken the
time to think through the space and time complexity how much memory they're
taking up how long it takes to run in terms of for each input how many
operations am I increasing right once again space just how much memory is

03:34
being used time how many operations are executed per input right if we start to
build up our algorithmic tool belt we can start to find solutions to problems
that take up less memory and perform less operations per input
now when we're trying to evaluate the algorithms or the steps that we took to
solve the problem uh we need a way of talking through how efficient one
solution is compared to another and so for that we use Big O notation
but why why do we use Big O notation what the heck why why where does big go
coming from what is this notation uh Big O notation
just mathematically describes the complexity of an algorithm like the

03:35
steps you took to solve a problem in terms of how many operations per input
are you taking and how much memory are you consuming Big O is the mathematical
notation for those two things and why do we use this
like why why do we need this notation why do why can't we just say Leon I
wrote code I can see that it's more efficient than this other code
right why would the code that's running on my computer what what why do I need
this like universal language to talk about how efficient my code is
well one it helps us describe it to others exactly but what we also have to
understand is that if I run an algorithm on my souped up PC
right my PC has a 30 90 soon to be a 40 90. uh it has a threadripper

03:36
3960x like if I run an algorithm on that computer
versus running an algorithm on my Chromebook even though it's the same
kind of code one would run faster right we could
understand that our code runs faster depending on the computer it runs faster
depending on the environment right like I'm running JavaScript in my
browser what if I ran it in in bun with the same algorithm be faster like
let's stop and think about this question for a second
the same algorithm running on my Beast of a PC 30 90. redripper 3960x

03:37
256 gigabytes of RAM right I take that code
right take that code I run it on that PC I take the same code and I run it
right take that same code and I run it on a Chromebook
and I just looked at the raw numbers right on the PC it ran in one second on
the Chromebook it took 20 seconds does the amount of time that it took the
run on my PC versus the amount of time that it took to run on my Chromebook
tell me anything like the raw milliseconds does that tell me anything no
so when we're evaluating when we're evaluating the efficiency of our code

03:38
it's not really the raw numbers like how fast
it executes like in terms of like the actual amount of time when I say time
complexity I'm not really caring about the actual amount of time
I'm care about the rough estimates right I care about the rough estimates
so that I can convey my ideas to you as another software
engineer and you can convey Leon I actually think we could do this more
optimally in terms of time and we're not going to sit there and compute the
actual number because that'll be relative to the computer the environment
how cold it is in your room right like all those things could affect
the raw milliseconds so we need a way to talk about the rough
estimates right the way that as Engineers we can talk through actually

03:39
as we do this type if we take these amount of steps
we're exponentially adding to the number of operations we have to do and that's
where Big O comes into play and it's where it's worthwhile to memorize some
common complexities so when we come back
from break we're going to take a look at some constant time complexities some
logarithmic some linear some quadratic see where we might run into these
different scenarios see some some Oddities as we kind of run into these
different scenarios and hopefully walk away at the end of tonight being able to
look at a problem and go oh this algorithm or steps I took to solve
a problem is more efficient because it is
happening in constant time whereas this one is less efficient because it is
happening linearly and we're actually going to see some

03:40
really we're going to see some examples where at first it seems like it
might be one but as we think about it we're going to realize oh it probably is
another so when we come back we're going
to see the common complexities again get some nice space repetition in we're
going to see some real world examples of a problem that I'm currently facing and
how I could solve it using this Big O notation when we're going to actually
take a look at some common stuff that we use every single day in JavaScript and
ask ourselves wait a minute underneath the hood what type of complexity are we
talking about now you could big brain it and go deep into like the real math
behind all this stuff if you really want to like nerd out about Big O notation
and you have somewhat of a math background the cool thing is that like
mit's Entire Computer Science curriculum is online including all their lectures
on this stuff and so for folks that have that background and want to you can

03:41
definitely dig into it but is it necessary Charlie said hard pass no it's
absolutely not necessary once you have a job you're getting paid well to do this
stuff and you want to start leveling up you can come back to all this right do
you need it for your first job do you do
do developers make it their whole career without knowing this stuff absolutely
right but once you get paid you want to come back and level up you can it's all
out there for free talk through some common complexities we talked about Big
O being rough estimates let's go ahead and take a look at some of these
complexities let's take a look at our quadratic our linear our logarithmic our
constant and I actually want to get to the point where like we can understand
like What's Happening Here like if we look at this it looks like um
it looks like in some situations uh linear first example is better than
uh logarithmic and I want to make sure that by the end of tonight we kind of

03:42
understand like how that could be true so that's kind of one of our goals for
this uh this this uh portion all right we saw last class the basics so we're
going to kind of walk through it to get our repetition in and we're going to see
a new one and then we're going to have a greater talk about it and then we're
going to see some examples all right for all of our inputs to our algorithm uh
there will only never be one operation required so no matter how many inputs we
have going into right how many inputs we have going into
our algorithm only one operation is being performed right and so
we call this o of one or constant time uh what is the classic example of
something that has a lot of inputs but only requires one operation

03:43
something we saw quite a few times yeah getting getting like looping
through like getting getting not looping
through everybody like getting something out of an array right
if we wanted to grab say the first number out of an array no matter how
many inputs we have coming into this array this would go from one to a to a
billion right if we still want the first
number boom we can do index zero and get that first number if we want the last
number we can do array and inside the square brackets we could do the array
dot length minus one and that would still give us
one operation even though there is a billion inputs
right and so the beauty here is that we can have any number of input that are
going but only take one operation so we consider this constant time all right
now another example we saw last class was this idea that as our inputs

03:44
increase so do our operations right so for each input I have my operations
increase when I have an operation for each input we call that linear o of n or
linear and what is an example something we've seen that was linear
yeah looping through an array of numbers right
um four string said why is this not two steps don't confuse steps with like the
total number of operations remember we're going for rough estimates here
right we're going for it it's not the actual like counting of steps it's like
what do we have to do based on that input coming in so even if you treat it
like grabbing the value and then like and then and then like putting that

03:45
value into the index right that's still like two steps for any number of inputs
so if that was two one what is two one reduced down to
one right so we'll see that again in a little bit but the idea here is that if
you're doing something it's it's about yeah it's a rough measure right it's a
rough measure it's it's not the exact like oh I did this this like no no it's
a rough measure of how many operations you're performing so in this case we
consider this one operation if we want it to say Loop through our array and
create like a sum right like create a sum right and each sum
requires us to look at each number that's in the array right so if we have
one two three four five in our array we Loop through that array we grab the

03:46
value as we Loop through so if there are five
inputs in our array how many operations are we going to perform
five operations or five inputs is Big O like the worst case yeah it's like the
worst case scenario that you can run into and yeah so somebody else say it's
about how it scales exactly we're trying to measure the efficiency in terms of
time right now right how many operations so it's about how that that efficiency
scales remember it's not about the the rough
actual like actual numbers right it's about talking at a high level about
what's happening in our algorithm and how does that algorithm scale

03:47
as our inputs increase right if we're talking about something
that's happening in constant time right we're talking about something that
happens in constant time and it takes like an extra step for us to get that
value right like it takes like we're gonna set uh actually we'll see it over
here like if I want it to figure out how to go from this linear complexity to
something that uses constant time uh we could use gauss's summation that we
learned about last class right that gauss's trick or gauss's sum what we
could do is we have this linear complexity where We're looping through
each number right We're looping through each number
and as we Loop through we're grabbing each input to add it to the sum so if
there are five inputs we had five operations for this linear solution
however when we look at gauss's sum what we are doing is we are going ahead and

03:48
grabbing the last value oops this should be this should be a I forgot to update
this slide we are grabbing the last item right the last item in that array
and so if we have a continuous number array that's already stored at one two
three four five is contiguous it's it's sorted we can just grab this five and if
we grab the five we can calculate the sum using gauss's trick here now
this is two steps right like all right we're grabbing the last number out of
the array and then we're doing this fancy math trick with it if we think
about how this scales as I add a million inputs how many steps have I changed to

03:49
it doesn't really matter right it's still the same thing so if we're talking
about at a high level how does our algorithm scale if we're talking about a
high level how many operations are happening right
this is still one operation no matter how many inputs we have and if you want
to code we need it out and be like all right I'm going to treat this as a step
that happens in constant time and I'm going to treat this as a step that
happens in constant time so it's really it's really o of two what the heck does
o of 2 simplify to yeah it still reduces to one we wind up
with o of one or constant time right so even if you wanted to code we now
actually two steps here right now but that's not what we're thinking about
we're thinking about like all right total number of operations right all

03:50
right total number of operations and what we're going to do here is if
we're using this gauss's sum no matter how many inputs we have we're still
performing at base level one operation the the the algorithm is not getting
more complex we're not doing more work as we add more inputs so this like I
said last time is what actually blew my brain right this is what as soon
as I saw this I was like I need to know my data structures I need to know my
algorithms what else am I missing in this world where I can go from a linear
complexity to Something in constant time just by knowing this trick
and that's what the data structures and algorithms will do for you the more

03:51
right the more the more you learn in terms of the how you're organizing
your data and data structures and the more
you learn the different algorithms that can take you from a linear to a constant
time complexity the more efficient code that you can write and it's literally
like unlocking cheat codes right it's literally unlocking cheat
codes and so that's why we study these that's why we're doing our stand up
every day it's why I'm giving you so many like tutorials that work through
the basics of this stuff because if you can have these on your tool belt you can
do really really cool stuff um some folks are asking like how does
this work out well let's do a simplified version um
let's go ahead and do one two and three so one two and three if we're doing a
linear solution here we're going to grab each number and add it to our sum so

03:52
we'll grab one and add it to our sum so now our sum is
one and we're going to grab two and add it to our sum so now we're at three and
we're going to grab three and add it to our sum and now we're at six so when we
did it linearly we had to do three operations to get the sum of six
when we use gauss's sum we have the same array one two three
we only have to do one operation which is grabbing that value out of the array
right and so now once we have that value
if we do three plus one it gives us four four divided by two gives us two two
times that 3 gives us 6. so we performed one operation we got one input
right we got one input and we're able to get the same exact sum

03:53
if my input my lick array if I add it a million
I went up to a million now so I'm I'm adding almost a million new inputs
right because this is 100 million but I'm adding let's say 100 million inputs
right does my number of operations change at all with this solution
can I still get the sum right yeah it doesn't change I can still get to some now
I can feel the code weenies just just shaking in their boots they're they're
nerding out about the more complicated math that can be had here are there more
nuanced ways to talk about this stuff are there slightly more mathematical

03:54
notations that you can add to discuss the problems we're talking about
absolutely but for your first pass and for what
actually matters right for what actually matters when you're trying to evaluate
the efficiency of the solutions you're writing for your code Wars that doesn't
matter right so you could you can stop shaking
it's okay we understand that you that you took your your intro to math class
in your computer science classroom like that that's okay we don't need it right
now once we're getting paid real money we'll go back and learn all that stuff
well then said unclutch thy buttocks well actually

03:55
all right let's talk about quadratic uh what's the example of a quadratic
complexity that we saw before yeah one of the one of the simplest ones
that we've talked about is just nested for Loops now not every nested for Loop
becomes a quadratic problem but a lot of
times they do uh we'll see one during uh during stand-up that I've picked out
specifically to get you got because we're going to get so used to seeing
next if we're loops and go quadratic quadratic but I'm going to throw one in
that's not quadratic so just as a note there but
here we are checking to see uh if there are duplicate nums uh that are not the
current num and so we have an array that goes one two one two three four five

03:56
five and what we are doing right what we are doing is grabbing a number
right We're looping through on the outside our outside for Loop is looping
through grabbing a number and then we have an internal for Loop that's making
sure that we're going to run through each number again so we're going to
compare one to one but since that's at the same
number at the same index it doesn't count then we're going to compare one to
two one to three one to four one the five one the five and realize that there
are no duplicate ones and then our outside Loop runs again
and we do one two three four five five three one two three four five five four
one two three four five five five finally runs one two three four five
finally finds the duplicate and stops right so the problem here with a

03:57
quadratic solution right the problem with the quadratic solution
is that if we were just to add one more input think about
how many more operations we actually have to do
right if we just add one more input each one of these now has a six in it right
so we added one input and immediately we can see right away four more operations
right almost like completely exponential
right like literally adding one input we
have to do all these more operations and so the quadratic can get pretty sticky
pretty quickly because you're adding one input and boom the number of operations
you you have to do is is going up and so if we were to think through some of the
things that we might want to be wary of introducing into our code base
this might be one of them right whenever we see a quadratic solution we should

03:58
probably stop and think is there a way right is there a way to do this more
efficiently all right uh the last one that we hadn't had a
chance to talk about and I'm just going to talk about it high level I'm not
going to bog you down with like the actual code to be able to talk about
something called logarithmic uh and a weight logarithmic works is with a
specifically a specific algorithm called divide and conquer is that for
each Loop that you do your operations become halved right so for each Loop you
do your operations become halved so let's think about let's think about a

03:59
a an array here that goes from one to a million right goes from one to a million
and I want the number five hundred thousand if I was to do this linearly
how many operations am I about to perform to get to the number 500 000.
I'm about to do 500 000 operations well what if I told you there was an
algorithm that enables me to crack my array in half
and that's the operation so I take my array going from one to a million and I
crack it in half and I look and I see on this side it

04:00
went from one to four hundred and ninety nine thousand 999. is 499 999
less than 500 000. yes so I throw it away ye
and now I can look at my other half and see oh 500 000 I'm there done
so it went from 500 000 operations when we were doing a
linear complexity right to two to two let's talk about a different let's talk
about 750 000. if we were doing it linearly
and we're yes we're assuming some things
here it's already sorted it's continuous it's going from one to a million right

04:01
right 250 000. we take our array of one to a
million we crack it in half is 499 999 less than 750 000. yes so what do we do
with it that whole set of numbers what do we do with it ye
we take a look at our another half other half is half a million to a million
so what do you think we do with this set that's half a million to a million
crack it in half we look at the number all right 749 999
is that less than 750 000 it is yeet put out the window and then boom so we
did how many cracks there we did one crack for half a million another
crackers under two thousand so we went to two operations

04:02
so this logarithmic right this logarithmic algorithms can approach something
that is not quite constant time but it can be really efficient
especially with large amounts of inputs right it can be really efficient with
large amounts of inputs because we could have a billion inputs and literally in
two operations get to the thing that we cared about now
let's think about a scenario here why does it look like for
a small number of inputs why does it look like linear complexities

04:03
could maybe be better like let's look at this we can see
logarithmic here is taking more time linear is taking less time until we get
to like more inputs and I think it's worthwhile to mention
that like with a small number of inputs and you'll learn this from the homework
that was assigned uh for this week with a small number of inputs you're really
not going to be optimizing for efficiency you should be optimizing for
like readability and some other things right because it gets a little wonky uh
with small input sizes so we just said Leon wait if you had a
million inputs and we went to get the 500 000 or 750 000 it was so quick it
was two operations as opposed to all these all the other ones we had with a
linear complexity so why with a small number of inputs

04:04
could could linear be better than logarithmic let's think
Let's do let's do a small number of inputs shall we
let's do a small number of inputs uh if we were to do
let's say we wanted to do the number three right or or let's let's make it let's
make it even bigger let's go ahead and say let's say number of one through ten

04:05
the Pen's not working all right let's stop at four uh let's make it five
all right look at six make it easier sorry my pen stopped working there you go
all right let's say I want the number two I want the number two linearly

04:06
how many operations am I going to do do one two logarithmically
how many operations am I about to do right we're going to do our first crack
boom first crack right we see three and four we eat out four
we do our next crack maybe we have one and two three
so maybe we're at like two operations but maybe even like that third crack has
to happen so we're already kind of at a similar
right we're already kind of like at a similar number of operations what if

04:07
we were looking for the number two inside that original array of a million
if I'm doing it linearly how many operations am I taking to get to that too
linearly I'm still doing one two operations boom I got the number
I cared about but if I'm doing it logarithmically
all right boom crack a million to half a million crack that half a million 250
000 crack that 250 000 into 125 crack that 125 in the 75 crack that 75 into
right think about all those cracks we have to do to get to that number two
and so there are some cases right there are some cases where when
you're just thinking about rough estimates right rough estimates if you

04:08
focused on like the raw math you would see some weird stuff with low input sizes
but when we are trying to figure this stuff out do we care about like the raw
math do we care about the raw compute speed do we care about the raw numbers
no we are doing it I thought that was on the other side sorry we are doing it
to get rough estimates to figure out how our complexity scales to figure out the
worst case scenario so when we are looking at low amounts of inputs things
can get a little weird right things get a little weird we can be like hmm
maybe linearly could be a little bit better in this scenario but we're
talking about rough estimates we're talking about

04:09
worst case scenarios we're talking about how things scale and so
we keep that in mind as we're valuing the complexity of our applications
it's important to commit these to memory
the quadratic the linear the logarithmic
the constant those are the ones we start off with are there more yes
right there are more they have ethos a thank you for the hydration cheers to you
right Community sort of memory are important because it's going to help you talk
about your Solutions As You Are right as we are

04:10
going through our interviews as we are working with other Engineers it's
important to be able to identify something that might be quadratic
it's important to be able to identify oh
this might be happening linearly oh this is important to see that oh this might
be happening logarithmically and though this might be happening in constant time
right and so it's not that we're worrying about the
day-to-day Raw map the day-to-day uh exact details it's about being able to
take like a high level approach to what's happening in your code and so
part of what we're doing during stand-ups is doing that we're looking at
the code that we write each day be like all right I think this is actually
happening linearly or I think this is happening quadratically I think this is
happening logarithmically and seeing those examples come to life but you can
start doing this uh with your code challenges every day as you're doing
your code Wars as you're doing your Elite codes you should be asking
yourself is this the most efficient how efficiently am I solving this is
there any way to get this to go from a quadratic to a linear there's any way to

04:11
get this to go from a linear to constant time
and as you do this tutorials that I assigned for homework as you keep
pushing I'll keep going to give you I'm going to give you a third one as well so
we start off with the scotch i o and we're moving on to uh the older front
end Masters and then we'll move on to Prime's newer front end Masters by the
time you make it through those three tutorials you'll have enough data
structures and algorithms in your tool belt that for pretty much whatever you
run into you should be okay you combine that with our daily stand-ups where you
have lots of practice you'll be golden but all of this is just the what
the sprinkles the cherry on top exactly the extra do you need to to

04:12
Super focus on this no ing the basics here is enough to
honestly impress quite a few interviewers uh and for some interviews
that want you to go super deep into Big O and they want you to give you like a
super more optimized Solution that's just one of your 60 and you keep it moving
cool all right I have a problem a big problem
the problem is that the price of boxes is too damn High
uh I I have a thing you know my thing is Pokemon I've been doing this for a long

04:13
time foreign box first edition not only first edition but first edition misprint
misprint collect up to 139 different Pokemon
playing the red version this is the Blue
version folks but it says Red version on the back not only is it first edition
it's first edition misprint bruh first edition

04:14
first edition or first print whatever you want to call it first print
the Holy Grail sealed in box sealed ugh and then the greatest stuff started
happening oh my gosh oh so here's the problem the problem is

04:15
can't stop buying boxes and the cost of boxes are too damn High
if you go and look at boxes right now you go on eBay stuff like this right
Pokemon Blue Factory sealed VGA 85 Plus sold for 7K right sold for 7K
but you go on eBay you go on eBay and somebody's offering a VGA 80
of inferior quality for 30k so I'm sorry not too big sorry I didn't

04:16
go back to little Leon right we look VGA 85 Plus sold like actually sold 7K
but then somebody same time frame or an inferior version once 30k so not
only the price of box is way too high the price is all over the place uh
it it's just it's just ridiculous right and so real purchasing
right the real purchasing doesn't go down on eBay that's where you get got
it really goes down in like Facebook groups uh it goes down in like these
other marketplaces that are on eBay and uh
it's really hard to keep track of stuff so what I want to do
is I want to build a platform right I want to filter I want to build a

04:17
platform where folks can list their boxes for sale
right and list their boxes for sale and I want to be able to like have some
quality of life features for myself where when I create this bidding platform
uh you can you can find how quickly like the maximum and bids are we can see if
those bids are reasonable compare them to pass bids like I want to build a nice
reasonable bidding platform for where people really buy boxes right now
I want to build this platform and people are like Leon you're flexing I'm

04:18
not flexing I wanted to flex show you this this is this is learning see
see this is a flex and if you know you know this is a flex now what's on here
is a backup of a cartridge did I still have working by the way
that sealed and locked away this is my backup and on this backup is the dump
of My Pokemon Blue and on this dump of My Pokemon Blue is a gen 1 mu with
certificate of authenticity from the 1999 Pokemon trainer tour
see now that's what I would have brought out because if you collect Pokemon

04:19
and you're going for a full Dex you ain't got this now the real Flex is
I don't have just one now I have two with letters of authenticity
with working cartridges and uh that's all we'll say
back to our regular schedule programming okay now problem is boxes are too
expensive right I actually didn't buy that Mew the the
second Mew I traded uh I I trade most like I don't buy any of this stuff I
trade for it like all right like this is
this was like my hobby for a long time I would go to swap meets I would go to

04:20
gaming conventions I would bring cash buy it severe discounts
resell use the money I made to like buy what I wanted to buy and I started
getting into this way before the prices went up um now
to get the second Mew just because we're here uh well the way I did it is I have
a bunch of when you used to go to when you used to go to like GameStop you
would get the event Pokemon well those event Pokemon are actually on cartridges
that you put into like the different game boys or 3DS's and stuff like that
they weren't meant to be resold but I have I've I've I don't say all of them
I've pretty much all of them though I'm pretty close to having all of them and
so I traded a bunch of those like event exclusive cartridges for the Mew
that's probably the best trade I've ever ever did
is he still talking about this yeah get timed out

04:21
you don't now you have to worry about talking about anything
this is important to me all right so prices of boxes are too damn High
right this is this is one of my my Supreme Hobbies this is what I spend a
lot of my time on boxes are too high the real bidding
is going down in right the real bidding is going down
in other platforms that are not centralized and so I want to build a
bidding platform where I can really easily take a look and see if there is
the the Min bid and a Max bid on every box that has ever been sold
right I want to see the the full range of bids on all the boxes that are being
sold right now I could find let's say the men in
backspids by looping through all the bids that have been made

04:22
right all the bids that have been made on a particular box so let's say I pull
in all the bids for every Pokemon Blue that's ever been listed on the platform
I have all these bids that are all over the place
two seven three one four five five uh how could I find the Min and Max bids
well I could Loop through all the bids right I could Loop through all the bids
and then compare the current bid to the bid that I am currently in with
the internal Loop so if I had this this array up here two seven three one four
five right I could grab the two and then compare it to two seven three
four five and then I could compare the seven to two seven three four five then

04:23
I can compare the three to the the three the sorry the two the seven the three
the four and the five that could compare the four
to the two the seven the three of the four and the five and then I could
compare the five to the well the two the seven the three the four the five right
and while I am looping through all of these bids
right inside that internal Loop not am I only comparing the numbers but I'm
saying hey is the bid that I am currently on
greater than the current Max bid so is two greater than seven nah we would skip
this is eventually seven greater than two
then yeah that should be a candidate for
Max bid is four greater than seven no is is five greater than seven no is five
greater seven no so then we would have our Max bid that was set inside this

04:24
Loop we could also be setting our Min bid inside this loop as well we do two
compared to two nothing happens is two less than seven no so nothing happens is
two less than three no so nothing happens is one less than uh less than
two yes so then our Min bid becomes one so I could have a loop on the outside
that's looping through all the numbers and then a loop on the inside that's
grabbing each number and comparing it to the number that we are currently at and
we're setting our Max and Min bids would this work it would work but would it be

04:25
efficient yes but at what cost the cost of time exactly
it would cost a lot of time uh this is really bad code this is us
being baddies brute forcing it it works we found the Max and the min
right we brute forced it we came up with a solution but at what cost
what would be the complexity of this solution
nested for Loops yep nested four Loops we're talking about
quadratic complexity now if I'm building a bidding platform
right and the platform becomes popular we have a lot of people in chat here
that were very very interested in the Pokemon conversation I just had lots of
potential customers for this new bidding platform especially as you all start to
get these amazing jobs and realizing that all the money that you're making

04:26
should be funneled into boxes right lots of folks might be using this
platform the more people that are on the platform the more bids the more bids
means what in this scenario if we still have a quadratic solution
MLM incoming this has all been about getting you all to buy more boxes
yeah it means more bids as we increase the bids oh [&nbsp;__&nbsp;]
way more operations are happening this would be the Crux of our bidding platform
this would make our platform work at first with just us but as it started to
take off and it became a more popular platform this Loop would take more and

04:27
more time it would get harder and harder it would become something that could
slow down our application significantly so this is a real thing that we have to
think through even if it was just a simple silly application like a boxes
bidding platform right so how can we not be baddies and
write inefficient quadratic code what would be some way of fixing our bidding
platform right fixing our bidding platform so that
it didn't take as many as much time or as many operations

04:28
well let me show you something first what if one Loop found the min
and the other loop found the max let's take a look so here's a loop here's a
for Loop and all this for Loop is doing is moving through each number
and comparing if that number is greater than the max bid
so what happens at first is Max bid is set equal to the first number in the
array so max bid starts off as one then we Loop through and say hey is two
greater than one since two is greater than one what does Max bid become
Max bid becomes two all right is seven greater than two

04:29
yes since 7 is greater than two what does Max bid become well it becomes seven
and we do the same thing for three four five five none of them are greater than
the seven so we return our Max bid of seven
what type of complexity uh was this Loop it was linear right as we added more
numbers we simply added one operation for each item now the cool thing is
I could just do this again with another loop that does the same thing for a
minimum bid but instead of it being greater than we're looking for less than
right now I'm not nesting them it's just one Loop that runs

04:30
right it's one Loop that runs for the max bid
and then a completely separate Loop that runs for the Min bed
now what's the complexity of the max Loop and what's the complexity of the
Min Loop there are two separate Loops what's the complexity of each
yeah they are both linear and since they are both linear we wind up with
something that's 2N right we wind up with something that's 2 n
and since it is 2N right what is this reduced down into we
have two linear Loops right we have two linear loops
right we could think about this right as even though we have two linear Loops
they don't rely on each other right doesn't care what one Loop is

04:31
doing with the other loop we can still think of it as o of n right
right they don't rely on one another they're just separate linear Loops we
don't have to think about them as anything that would be quadratic and
think about anything else it's just two linear Loops doing their own things when
we have two linear Loops they're doing their own thing it still boils down to a
linear complexity right so we went from something that was
nested and bad and quadratic to just thinking about wait a minute why do we
have to like Nest these things why can't
I just have them run separately and just with that one decision you've turned a

04:32
quadratic problem into a linear problem cool so our box bidding app right
the Box bidding app is now back online what would have taken us forever to
calculate Min and Max bids right we're now back online we're we have a linear
solution to our problem now so folks are kind of a little confused
on how this is going to work this we agree is linear right it's just one input
for one operation so this Loop runs once or each input in our array
as we add more inputs we are linearly adding operations
right so as the number of inputs increases we are still only adding one

04:33
operation for each input now the cool thing is we have a separate
Loop that is doing or a separate even in this case function that is handling the
max bid and then we're going to have a completely separate one that is
doing the Min bid since this Loop here is linear
and this completely separate Loop that does not rely on the other one is linear
how many linear Loops do we have we have two linear loops
and when we are trying to get the rough estimation of how much time this would

04:34
take we can reduce this two linear Loops down into just a linear time complexity
right now this is not a direct corollary to
what we just talked about but let's say we had two libraries
right we had one library and we wanted to we want it to
we wanted to count each book in our library right we wanted to start
with the first book and go all the way to the end
right to grab the last book each book we
did one extra count right we went one to
two to three to four right one to two to three to four
if we go through our whole Library what was the complexity of moving through our

04:35
entire library to count the books it was linear right it was linear now if if
I was gonna say if if Bezos came along and says hey Leon
I want to give you a whole other library but I need you to count the books
I have this whole other Library when I started the first book and go to the end
how's that complexity what is that complexity it's still linear right so
does it matter that they were separate libraries it's
still the same process it's still linear I'm still just doing one operation for
each input I just happen to do it two separate instances
right and so it's the same thing with this code here we're just doing
something twice but since they're both linear nothing changes they were two

04:36
separate libraries they were two separate instances we wouldn't like
magically say oh because there are now two libraries something has changed no
we did linear and we did linear so it's still linear even though we now have
more books it could be the same thing as saying we just have more inputs it's
still linear at the end of the day cool now what if our data was already sorted
what if our data was already sorted like
what if all of our bids like our Min and Max bids like what like we have a bid
coming in right we have all these bids coming in over time I still want the Min

04:37
and Max bid what would that be yeah that's constant right accessing an
element out of the array happens in constant time now you might say Leon but
I'm taking two things out of that array but what we could realize is that all
right it's two things that are happening
but if we think about it at a high level and we separated out those plucks right
we have our bids that are going from one to let's say the the most expensive bid
was a hundred thousand right I wanted I had this array of bids that
went from one to a hundred thousand uh does it matter if the bids keep going up
to be something else will it always still be the same number of plucks
to get them in and the max like no matter how many bids we add no

04:38
no matter how many inputs we add into this array to get them into the max
they'll always be the same constant number of operations so even though it's
two things that we're doing we can treat them as two independent events that are
both constant right there are two constant things that
are happening you could say that was O2 but then we could reduce that down to
O of one or constant time right grabbing the first index would
always be index 0 and then grabbing uh the the last index would always be the
array dot length minus one wait a minute hold on

04:39
Leoni said accessing it by the zero we get that that's always going to grab you
the that's always going to go ahead and grab
you the the first element out of the array that's clearly constant time
right but then you say to get the last element in the array you need to do the
array dot length minus one well Leon how fast
or what's the complexity of dot length what can we tell about dot if we know
that this reduces down to constant what can we tell about dot length
that length is probably happening in constant time too and let's think about it
what is an array really underneath the hood when it comes to JavaScript

04:40
it's an object and that means that length is really a what on that object
length is actually a property on that object remember how I said data
structures aren't just the data it's all the stuff that comes and helps us
organize that data so arrays are really an object that has a length property
and as we are adding inputs that length property is going up so it goes from
when it's just one element in the array it goes from one when there's two
elements in the array it goes to two and as we're adding elements to the array

04:41
we're actually updating this length property in real time
and then accessing the property of an object happens in what type of complexity
constant someone said does JavaScript have to count the length somehow no if
it had to if if our arrays had to calculate length right if when we did array
dot length if it had to go through and do all right
one two three four five if it actually had to do like that looping each time
for length then it would be what it would be linear

04:42
but we know that arrays are really just objects underneath the hood I've just
told you now that this length property is a property on that object and so each
time we add something to the array this length property has already been updated
to be five so when we go to access the length we're not like looping through
the array to figure out how many things there are it's already a property of the
array that we get access to and since accessing the property of an object is
happening in constant time we have array.length
minus one inside of something that's accessing the array so this is constant
this is happening in constant right so even though we have like all these
constant times and yes there's a couple different constants they all reduce down

04:43
to constant because we're not doing math we're doing high level
rough estimations of what's happening in our code
right so if you sit here and you try to like all right one plus two plus three
no no you're missing the you're missing the uh the mountain here
right you're missing the mountain here it's that even though
there's a couple things happening here it's still constant because as we add
way more inputs the operations don't ever increase it's still gonna be the
same thing no matter how many inputs we have oh all right
um we are we're gonna squeak this out give me a few more minutes I know we're
at the top of the hour for a break but ah

04:44
let's do a quick five minute break five minute break and then we'll come back
and we'll finish this up I do want to end a little early just so
folks can um start working on the homework let's go and take a five minute break
when we come back uh we're gonna just quickly reiterate the the different
examples that we've seen so far and we're gonna look at some JavaScript and
see what JavaScript is really doing underneath the hood and what things are
happening in constant time when things are happening in linear time and it's
just as surprising to me is when I start to really think about
all right dot length is a property properties are accessed in constant time
so when we get the length of something we're not actually going one two three
four the length has always been there beautiful all right five minutes on the
clock if you're able to please get up move around hydrate
and we'll be back together shortly let's take a look at well I want you all to

04:45
give me what's an example of something happening in constant time
ah yeah access to an array when we use the when we use the index of an array
that's happening in constant time beautiful uh what's something that happens in
linear time yep Loops like looping through an array
right where maybe we're adding all the numbers in the array together that would
be linear how about something that happens in quadratic time
yep Nest that Loops can be an example of quadratic time and what's an example of
logarithmic time anybody remember what I called that
toss on the slides but what's a what's an example of an algorithm that runs in
logarithmic time people are throwing up binary search

04:46
okay I see y'all yeah any type of divide and conquer algorithm things like that
cool and let's just take a look very quickly give me like another couple
minutes and then uh we'll end for the evening actually going to end early this
time which is amazing let's take a look at some things that
are actually happening in JavaScript uh so a method that we use all the time
or especially if you start doing your code Wars would be pop what does pop do
yeah removes the last item from the array so if we had
an array with one two three four five in it pop would grab this five off
of the array now what complexity think this is happening in
yeah this is constant right uh underneath the hood maybe it's just

04:47
using the array minus array.length right to grab that last element out of the
array and so grabbing that last item element
out of the array happens in constant time so pop happens in constant time
uh how about shift what does shift do shift remember takes the first element
off of the array so what would if pop is is constant what a shift
and a lot of y'all did the homework all right so kind of you got got so you
would think if pop is constant why wouldn't shift be constant well we have
to think about the data structure at play which is the array so if I was to

04:48
shift off the one what happens to the two well the two has to become the zeroth
element and the three has to become the first
and the four has to become that and that has to become that not only you're just
removing the first element off but you're literally changing the index
of every single element and so that makes this no longer constant but what
linear exactly linear yep so we could see a pop being constant time but shift
since it's literally changing the entire
array that's linear beautiful we already talked about length right length is a
property that's being set as the array gets bigger so when our array just has
one in it the length property on that array is one

04:49
when we add another element it becomes two and we add another element it
becomes three and we add another element it becomes four and we add another
element it becomes five right but it's happening at the same time so when I go
ahead and I try to use dot length I'm not even looking at all the numbers in
the array I'm looking at this property that has
been kept up with as the array got bigger so since I'm just accessing the
property of an object this is what constant beautiful concept yes we're
getting some of this I love it all right
now we also have these methods that come baked in with a lot of stuff we use in
JavaScript we use things like arrays and uh we see them a couple of other places
so we have like these four each these Maps these reduce where they're looping
through elements in the array what would

04:50
be the complexity of a for each a map or a reduce
okay yeah well underneath the hood they are just a simple Loop so that would be
linear however however some of these take in a callback right
they're higher order functions they take
in a callback and depending on what that callback does these could no longer be
what they could go from linear to be something else depending on the call
block that you passed in so we'll actually see that during our
stand-ups where we'll use something that off the Jump
looks linear but depending on the Callback we're passing into it could get
us into some other types of complexities cool all right look at us go look at us
understanding how pop could be constant but shift can be linear understanding

04:51
the different complexities of the JavaScript we've been writing all along
able to have a really weird problem where we're saying all right we want to
create a bidding platform because Leon wants the bidding platform we're able to
think through high level all right if we want to get min and Max bids we should
stay away from these like nested Loops because that'll get us into quadratic
but if we were to separate out the Min and Max into their own Loops those are
both linear and that was reduced on the linear like this is the stuff that we
start thinking about as we progress through the stages of our
engineering muscle right and so we're adding little sprinkles here so we can
get more comfortable with these tools that are nice to have on our tool belt
now the weenie life yeah now you had the scotch I O course to work through
I'm asking you to work through this uh practical algorithms course uh which is

04:52
also a completely free course to go through this will be two out of three
algorithms courses that I'm asking to work through
um this one is four hours but expect to take double the triple that amount of
time to work through it I'm gonna give you like a week or two to like at least
like a week or two to get through it um because you're gonna slowly start to
see me incorporate it into the stand-ups uh and also it's just important for you
to get this knowledge underneath your belt so uh you got through the scotch IO
which I know is really helpful for a lot of folks I'm seeing a lot of your
answers have been influenced by that which is really cool now you have this
one which will using it uses regular JavaScript so all the stuff you already
know and slowly builds you up um slowly build you up to having all
these different tools and Tool belts on your belt so please this is the core
homework I need you to get through over the next week or so
please do it it's going to help you it's going to help you immensely put these
sprinkles on top but your true homework and the reason why we're ending early

04:53
you have 30 minutes plus of time left over and what I want you to do is to
take your first step of the hunt if you have not been applying if you have not
been reaching out tonight is the night where you start your hunt so take the
next 30 minutes find an open job find somebody to talk at that company send
them an email send them a cold Lincoln message do whatever you need to do to
get on the radar somebody at that company you're gonna do it tonight
if you need the templates exclamation point templates
we come back on Thursday I'm gonna build out a Hit List live I'm going to show
you all the messages I would send so that you can mimic what I'm doing and
take your hunt in stride on everybody no raid tonight because I really do want
you to take that first step no delay start today you are more than

04:54
ready you are more than qualified you are a phenomenal lean mean software
engineering machine time to get you a job everybody have a
wonderful rest of your evening I will see you all tomorrow for stand up I will
see you all again on Thursday for stand up again for class Friday for tea spill
Sunday for our office hours and we do the whole
thing again next week folks all right everybody have a wonderful rest of your
night take your first step don't just click off and not do anything take the
step you deserve it you owe you good night everybody peace
