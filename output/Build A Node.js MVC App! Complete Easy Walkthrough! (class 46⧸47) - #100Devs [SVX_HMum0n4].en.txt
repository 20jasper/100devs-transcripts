
00:00
after this video you'll be able to add an MVC model view controller structure
to your node applications this is actually two classes combined into one
video of our free 30-week software engineering boot camp if you've ever
wanted to learn how to code you found the right place we are 38 000 strong on
Discord so if you have any questions that come up as you watch the video
we'll be happy to answer them that's leonnewell.com Discord see you soon
good morning good afternoon good evening where you're coming from hope you all
are doing well hey does this work hope you all are doing well hey welcome back
another week another dollar let's get it done hey yeah speed hey what's going on
Rascal 2 with the raid thank you for coming through with the crew what's

00:01
going on everybody hey Thompson in the house hey got to meet
some of you at the meetups I love it I love seeing everybody's seeing each
other at meetups I gotta go to meet us I got to go outside you know how I am I'm
online but now I gotta go outside what's going on everybody
welcome back welcome back tonight we get into some
MVC adding some much needed architecture to our crud applications our full stack
applications it's one of the most important things we'll cover as we get
to the tail end of program so uh quick things no slides for tonight we're
jumping right into code uh so no worry about uh having slides or anything like
that we have one image I'm going to share with you and the starter code is
on our Discord if you're new around these parts you can do exclamation point
discard Discord and uh it'll get you all the code that you need for today hey
what's going on so uh since there's no slides I'm gonna ask everyone please

00:02
check in exclamation point check in if you have not already uh that does not
check you in but it gives you the link uh for tonight's tweet go ahead and like
and retweet that for me please uh and if
you haven't already if you need to catch
up with your part of the ketchup crew uh class 44 and 45 are now on YouTube I
would appreciate folks giving that a thumbs up just to help with the
algorithm it's been a while since we posted the YouTube let's uh make sure
that that video doesn't tank I'm good to see everybody hope you all
had a wonderful weekend hey what's going on everybody uh as
always I always like to start off with a few questions let's give folks a few
seconds to get in here if you have some questions I got some answers go ahead
and shoot off your questions here in chat happy to answer
do we Fork the code for class tonight that's up to you you can always fork and

00:03
and clone it down if you want um that way you have like your own version if
you want um eventually I'm gonna ask you to to
add on to this so if you want your own version that's okay it's okay just to
clone down to will baby learn coding too if they want
I hope they do but that that'll be up to them
is that cold brew coffee no it's um it's uh it's like an honored Palmer in a
can yeah uh what version were you saying yeah this
is the MVC version uh the link to the code is in today's Discord message in
the following materials Channel we need 100 devs Meetup convention you
know there's a lot of things that I want to start like once we get to the end of
this cohort and I have a chance to really kind of have some more time to to
to invest in things that aren't in class that's one of the things people have

00:04
asked for a long time I think that could be fun to do something or maybe like
attached to another convention that's already happening but have our own
Meetup yeah I think that'd be fun yeah so I'm about it there's a lot of other
big projects too that I want to get get going
um I've been working shopping this idea called a hundred maintainers so there's
a lot of projects that I think could really benefit the community a lot of
tools and resources that I think could be really helpful and so I would love to
find a way to have folks that want to contribute through writing code and
helping build those projects I have an Avenue to do that which is another thing
that people kind of ask for so lots of stuff uh to do yeah and it's also been
really cool seeing so many folks build so many wonderful things for 100 devs I
want a way to like highlight them and make them feel a little special so 100
maintainers is coming soon lots and lots of little things that I want to be able

00:05
to have some time to focus on which I think will be fun
what about translating to other languages um so I would be down one of the
problems though is that I wouldn't want folks to
um not get the support that they need so our Discord is English right
um and that's just because we we can provide consistent moderation in English
and consistent support in English my worry about translating to other
languages which I've definitely talked to like folks that wanted to help
translate everything is that then they wouldn't get the same level of support so
um something maybe way down the line once we have more folks and more folks
that want to help out in different languages
um could be could be a real possibility yeah
but for now probably not a little too much for us to take on
Leon will we ever move on to other programming languages no because this
isn't a coding bootcamp this is a getting a job boot camp and right now

00:06
the stuff I'm teaching is going to open up the most doors for you to get a job
now a lot of my students go on to learn other languages entirely during the job
hunt a lot of my students will go on to use complete different languages on the
job but what you realize early on is that the languages that you learn right
now really have no impact on your job opportunities a lot of folks think that
if they have to learn like the specific set of languages they have to learn
these very specific set of skills but time and time again it's not true if you
know the fundamentals you have really strong projects and you show the ability
to learn quickly anyone can bang out a few tutorials over the weekend to add
that skill to their to their application
should they need that on their resume or
on their portfolio for that specific job so by the time you leave 100 devs you
lean mean interviewing machines and part of that is the ability to pick up new
things very quickly so you can talk about them in the interviews so when we

00:07
get to the hunt that's gonna be something we talk a lot about you're
going to customize each of your applications to the company that you're
applying if they are using PHP then your
application is going to have some PHP on it right even though it's not something
that we touched during this program also each of your localities are completely
different the job market in each city is completely different there are some
things that are really popping off in certain areas that aren't in others and
so you're going to add those little cherries on top and so that's something
we'll talk a lot about I'm going to show you how to do that quickly easily I'm
going to show you how to do that when we
get there but we're not there yet we got we got fundamental stuff core stuff to
be focusing on that's going to help you with any interview not just kind of like
a very specific Niche set of skills and so that's what we're going to build up
to and the other thing too is like right now I've helped students like in my day
job in Boston Philadelphia Pittsburgh even New York then I have helped

00:08
hundreds of other folks get jobs around the world and
if you have a fundamental base of how you go about the application process it
really doesn't matter what you know it really doesn't if you go about
applying the right way if you go about the hunt the right way it kind of
doesn't really matter your technical skills all that much so we'll get there
we're not there yet do one or two more questions and then uh we'll jump in
best dad jokes since you've been since you've been a a dad a lot of people blew
up my Twitter DMS with dad jokes I appreciate y'all thank you

00:09
um also uh I figured out like using uh the voice input on my iPhone has been
a game changer if you notice I reply to every ask Leon message so if you ever
ever have a question that only I can answer right if you ever have a question
that only you think only I could answer um you we have the ask Leon chat on
Discord sometimes it got really backed up but I just cranked through over two
nights just using the voice input on my uh on my iPhone and so if the the
responses seemed a little weird there wasn't punctuation uh that was because I
was using voice to text but I cranked through like 200 messages on
um Discord and then like a whole bunch of Twitter DMS and so uh yeah it was fun
I had a lot of a lot of dad jokes um one was um
I had a job crushing cans it was so depressing

00:10
that's what you came here for folks that's what you came here for all right
I can't see the question uh does anyone have trouble running
today's code on the server yes uh you should not be able to run my code
because your IP address will not be whitelisted on my mongodb instance so
even though I have the EnV file in there it's not something you're gonna have to
get you're not gonna be able to get that running you're gonna have to connect
your own mongodb instance like your own  Atlas instance for it to work fully
cool all right folks let's get into this a lot of fun stuff to cover tonight
um but the big thing that we are covering is MVC model view controller

00:11
when we first started 100 devs there was one overarching
pattern that we always used right what was that pattern that enabled us to work
with other developers was that pattern that was our Guiding Light in the
beginning yeah it was separation of concern so
this idea that we're going to keep our HTML separate from our CSS we're going
to keep our JavaScript separate from either of those things and we wouldn't
mix it and the reason why we did that right the reason why we did that is so
that when we are working with other Developers
they knew where to go to make changes right so if they wanted to make
something pink they went to the CSS they wanted to add another paragraph they
went to the HTML they wanted to make something wiggle they went to the
JavaScript and if all our developers are following those separation of concerns

00:12
it made our job as developers easier and enabled us to have a little bit of
abstraction right a little bit of abstraction meaning that we could focus
on just the HTML and not worry about breaking the JavaScript now MVC model
view controller brings that same level of ability to work with other developers
it brings the same level of organization to our backend code right now we're
doing stuff that's a hot mess right for the longest time when we first started
out right when we first started out with our backend node code we had all of our
all of our node in one big file we had our HTTP module we had our FS module and
there was a lot of stuff in that one file

00:13
what would be a major problem of having all that code in one file it worked we
could build a full stack web application but what were some of the problems with
having all that in one file yeah it was messy it was hard to debug
uh one edit could break it right hard to maintain right and so there's a lot of
things here right if all of our code was
in one file it's really hard for us as a development team to work together to
build stuff right we're always afraid that our one change will break
everything else also we don't have the ability to hand off different parts of
the project the different members of our team and so as we get to the end of
program with 100 devs we're gonna be building a lot of big meaty projects so
we built a to-do list which is a great kind of example of how things work but

00:14
we're going to move into building social networking apps we're going to build an
Instagram like clone together with all the bits and Bobs and then you're going
to have some projects where you're building full stack apps together as a
team right develop very rarely work alone and so we have to practice those
skills as what it means to work as a development team and so MVC model view
controller brings a level of organizational to our code that enables
us to work well with other developers to make changes and not lose sleep at the
end of the night and to know where to go when we want to make those changes at
the end of the day right and so just like separation of concerns helped us on
the front end MVC is going to help us on the back end cool
so I love this image uh it's from the goat uh travesty media it's from one of
their original videos that I had you watch if you have not watched their

00:15
video that I gave you for homework you must watch that video it's super
important you have to watch that video so I love this image from that from them
we're going to use it for the first walk through MVC and then we have a little
bit more of a complex one um that we're gonna walk through so
shout out to the goat um so many wonderful videos so many great
videos on MVC specifically as well so definitely give those a watch as well
now I'm going to give a warning before I
jump into it tonight is about seeing and understanding the why
why we make certain decisions why we do certain things I don't need you to walk
away with the raw knowing how to build and knowing the exact code right that's
not the goal tonight the goal tonight is to understand why to ask lots of good
questions about why we do things this way what we might benefit from by doing

00:16
it this way but the Nitty Gritty details is not for right now right now
we are going to have office hours on Sunday so anything that doesn't make
sense tonight no worries come back on Sunday we're going to take as long as we
need to make sure everything sinks in and that we can actually follow all the
Nitty Gritty I am going to be jumping around a lot I'm going to be showing you
a lot of different Legos that we have to build together if you haven't done the
homework if you haven't taken a peek at this code it can be a little
overwhelming at first that's okay give me a chance to walk through it ask
questions we're going to take our time and we're going to come back on Sunday
and do it from scratch meaning we'll type everything out we'll see it line by
line okay you have to give yourself some Grace with this level of organization
we're taking something simple and adding some complexity so that in the long run
we can be more organized and be able to make the changes that we want to change

00:17
and be able to work with the team members we want to work with so it's okay
it's okay A lot of times can be overwhelming for the first run through
that's okay we're gonna come back on Sunday and do it again but my goal is to
get the why to you and for you to understand at a high level concept what
MVC can do for you cool you ready already so I have a very simple application
here I have my application running on localhost 2121 and I can refresh this page
and it takes me to this wonderful home page I also have the ability right I also
have the ability to click on new to-do list

00:18
and be taken to a different page that has my actual to-do list on it so what
you might have noticed and it's a little hard to see it's a little tiny up here
the route is to do's and on localhost 2121 it's just my root route route so
now we have a little bit more advanced routing right we have a little bit more
about routing meaning that we can have like our home page right and we can have
our to-do's more pain go take a nap you don't have
to be here catch the VOD go to sleep if you're sleepy go to sleep anybody's
here that's sleepy go to sleep you don't have to watch the VOD take care of
yourself why are you here go take care of yourself Health First all right so we
have two different routes right we have two different routes we have our home

00:19
page right and we have our to-do's now a wonderful thing here is we are going
to set up our code to start listening for all these different routes to start
listening for all these different types of requests and we're going to add
organization to walk through them now with MVC we have a very common pattern
we have our users that are our client-side devices and these
client-side devices are going to make requests so far we've seen a structure
that looks like this we had our client-side device on the left and we
said we made requests to our server and sometimes that server would make
requests to our let's say database if need be
right and so for all the applications we've seen so far that are full stack
applications we had clients making requests our servers were set up to hear

00:20
those requests and then the server has some code running on it right the server
had some code running on it that could hear those requests
and then know what to do what was that code that could listen for our request
and know what to do that was coded to know what we do
yeah that was our API our API was set up to listen for those requests and then
know what to do it really doesn't change when we
introduce MVC when we introduce MVC it's just a little bit more layers in who's
hearing the request who's handling the request and then what happens but the
same idea exists our client-side devices are making requests to our servers our
servers hear those requests and then a bunch of different stuff can happen the

00:21
problem right now is the server side that's listening for
those requests all that code was really just in one file right it was in one
location and when you start to work with more and more people what are some
problems we're gonna run into by having our API in One Singular file all the
server stuff in One Singular file everything that needs to happen server
side in one file what what are some problems that we're going to run into
organization could be a problem confusion on how to change things
absolutely can be a problem never find anything when it's too big no
encapsulation love it yeah too much overload there's too much

00:22
going on and right now when it's just you right when you're just by yourself
and it's just you working on an application you can work through the
muck right no problem work through the muck you'll get through it but when you
are working with a team you need to be able to hand off different pieces right
you need to hand off different pieces for different people to work on at the
same time if all your code is in One Singular file then it's not only like
hard to walk through everything but how are you going to make changes at the
same time also what if something breaks it breaks all the other code and so
while this has worked so far with our server having all the kind of code in
one location one file we really need to move away from that so that it's easier

00:23
for us to work on the same projects together it's easier to debug and find
our errors it's easier for when something breaks it doesn't break the
entire project and that we can start having some interchangeability in our
code base which I'll explain in a second cool
so to get around having all of our code in this singular location our singular
like server.js file we're going to introduce an architecture Paradigm a way
of organizing our code that makes it easy to do all the things we just talked
about so we still have our client-side device and this person right here
represents our client-side device they are using a browser whether it be Chrome
Firefox so far whatever you want to be they're using a client-side device
now they are going to make requests from this client-side device and as that

00:24
request comes to our server there is going to be some code that's listening
for this request and knows where to where to go next
right so the router is kind of the first touch point the request is left the
client side the router hears the request and the router wants to hand off that
request to a controller and you can think of a controller as
just someone in the middle a middle person right somebody that's going to
hear a specific request and then know what to do with that request to either
maybe hand off that request directly to a view they maybe hand that request off
to a model which we'll talk about in a second
it's gonna know what to do kind of what our API has been doing right like it
knows what to do we're adding another level here so
our clients make a request the first touch point is going to be a router and

00:25
the router is going to hand off that request to a specific middle person
that middle person then knows what to do with that request so you can see our
applications starting to have a bunch of controllers that are all coded right
that are all coded to do different things a bunch of Smurfs sitting on the
Block that all know what to do when certain requests come in from the client
cool traffic Smurf exactly you could think of our controllers as traffic
Smurfs now the beautiful thing about this is
sometimes our web applications are going
to want to do simple stuff and sometimes our web applications are going to want
to do some pretty complex stuff let's think about this very first thing that I

00:26
did here where I was just on the main page I refreshed the page what type of
request did I just make for my client-side device
I made a get request to my server now what do we know what is the thing that's
going to be that's going to be expecting that get request what's the part of my
code that we're now going to have we're going to see the code in a bit but let's
talk higher level what's the thing that's going to hear that get request
and know what to do API is right like that that's what we're still building
here but we're adding another layer here
the router the router is going to be the
first thing that hears that request come through
the router hears that request and they go hmm

00:27
you made a get request on the root route I know what controller you should go
talk to so the router is really good at like looking at the URL right the
router's really good at looking at the URL and when I refresh the page I made a
get request to my server right exactly I
made a get request to my server I made a get request to my server and the router
was like you know what I know somebody that can handle that for you right
you're trying to go to the root route you're trying to make a get request I
know just the person to handle this request and so there was a Smurf that was
in charge of hearing any get requests that are on the default route right

00:28
I'm in charge of hearing any get requests on the default route so the
router heard the request come through and said you know what I know who to
talk to go talk to this Smurf their sold job
is to handle any request that is a get request on the default route
cool now this Smurf could do a bunch of stuff
this Smurf could if it needed to use our model to go and talk to the database
our Smurf could generate some HTML with our views right
and so if we look at the refreshing of this page what does this Smurf need to do
does this Smurf I keep clicking on here I'm just going to close these
does this Smurf need to talk to our database at all

00:29
I'm just trying to refresh the main page here right refresh the main page here
does my Smurf need to go talk to the database
absolutely not there's no data that I'm pulling from my database that is just
some straight HTML that I need so my Smurf is going to go directly to My
Views and I'm still using ejs so it's going to generate some HTML via ejs
right and once it has that HTML my Smurf and respond back to my client with that
HTML right so the client the user refresh the page the router was like yo
I know which Smurf is ready to handle that request there was a Smurf or

00:30
controller that was set up to handle get requests on the main route and that
Smurfs sole job was to just go and deal with our view engine which in
this case is ejs to get some HTML and once it has that HTML that Smurf
responded with it right so this MVC architecture is going to come
down to a few key pieces the router hearing the requests coming in
and knowing which controller or Smurf is set up to handle those requests you can
imagine our application having a lot of Smurfs all that are set up to
handle different types of requests some might be set up to hear a get on the

00:31
main route some may be set up to hear a post on the main route some may be set
up to hear a the delete on the other route right like all these
different Smurfs can be set up to handle different types of requests that are
coming their way and each Smurf or each controller gets to decide what it's
going to do right sometimes they're just going to use our views which in this
case is our ejs to generate and render out some HTML
sometimes our Smurfs will need to talk to our models and our models are the
only thing that can talk to our database let me say it again our model is the
only thing that can talk to our database

00:32
so requests will come in from the client side to our server
our router will hear those requests coming in know which controller to talk to
and sometimes the controller will use ejs
our view engine sometimes the controller will talk to the model and the model
will talk to the database right but it's
up to us to code out what the controller does and the beauty of this right the
beauty of this is if we separate out our concerns if we have a controller that
has the ability to talk to the Views that has the ability to talk to our
models and they are all separate that gives us the ability to do some really
really cool things so right now for my views I am using ejs it's in the game

00:33
what are some other things that we could use to handle our views
what are some other things we could use to handle our views
handlebars pug react so let me put some of these down here handlebars pug react
right all these different things can be written to handle our views
how about our database we're using mongodb but what else can we use
what else could we use sequel right postgres equal whatever right
everybody has like a really cool one Maria DB Firebase yeah let's do it on

00:34
there Firebase rear DB couchdb whatever right so we
could use all these different types of view engines or things to handle our
views whether it's the egest that we're using handlebars pug react we could use
different types of databases SQL mongodb Firebase read it because we it doesn't
matter if we build our application with an MVC
structure does it matter what we use to render our views
like if we decide to change from ejs to pug
does any other part of our application have to change no
and if we decide to change from mongodb to SQL to any other part of our

00:35
application have to change no and exactly and that's the beauty of
it if we follow MVC model view controller and we separate out all of
our concerns we abstract out all of our concerns right it doesn't matter what we
use to handle our views it doesn't matter what we use to uh handle our
models like that can talk to our database we can swap out whatever the
heck we want and our application still work right so
what I want us to Think Through is all right if we're gonna build an application
right if we're gonna build an application and right now our applications use ejs
our applications use mongodb and we build out some really good

00:36
applications like we build out our to-do
list we build out our Instagram clone we build out our
um our our a couple big projects that we'll do as a team
and you have an interview with a company that uses pug
what do you do over the weekend learn pug and then just change the views right
if you right if you are going to apply to a company that uses postgres right
that uses postgres you take the weekend you learn enough

00:37
postgres and do you have to rebuild an entire application
you have to rebuild an entire application no
you just swap out the piece here that they need to see or you just swap out
the piece here that they need to see right and so the beauty is if you can
learn MVC if the concepts can make sense if you understand how to build out this
layer of abstraction you get a whole new level of flexibility a whole new level
of modularity that serves you so well going into the hunt so tonight I'm gonna
walk through our to-do list using MVC with ejs mongodb and Mongoose for

00:38
handling our models but know that we could swap out any of these pieces if
you ever the heck we want and so that's why I don't think it's worth it to to
over invest in one area we can learn the core build out a bunch of projects
together that use this core you understand the core
and then when you have to make these little changes or tweaks you do it
so we'll start off by building the to-do list and our Instagram clone using ejs
and then we're going to put this in the practice because we're going to swap out
our views for react right we'll redo it with react and then if we have a little
bit of time at the end we'll do it again but we'll swap out postgres but we're
still reusing the stuff as needed cool so that's the goal
the idea of MVC is that it brings this level of modularity abstraction but once
you understand these Concepts it is a game changer for your job search right

00:39
for the hunt cool let's think about another request here just to think
through it we're gonna we're gonna dig into some of these Concepts deeper right
we're doing some of these Concepts deeper don't worry like yeah I don't
really understand what a model is that's all right we're gonna see that in a bit
all right for now know that the router is the thing that's listening for the
request right and the router takes those requests and knows which controller to
hand that request to each controller knows what it needs to
do sometimes the controller will go and talk to our model which can then get
some data from our database and then once the controller has that
data what it can do is pass that data to The View

00:40
The View can use that data to help build out
the HTML and then the controller can send that HTML back to the client so a
lot of times the controller is talking to a model getting some data then
passing that data to the view so we can build out the HTML once it has that file
it can respond back to the browser will there be more than one controller
yes every big thing that we have to do will be handled by a different
controller so you can think about every single request that we make to our
server having its own controller so right now
when we refreshed our page we made a request right we made a request and our
router heard that request and knew what controller to go talk to all right when
we are on our to-do list there are so many other requests that can be made one

00:41
we just made a get request by loading this page we can delete stuff we can
post stuff we can um update stuff all of which are
requests all of which are going to have their own controllers
now once we understand that everything's
going to have like its own controller we can also start organizing our
controllers so I'm going to have a bunch of controllers just for my to-do list
the controllers that handle the creating the reading the updating deleting but I
also might have controllers that just handle like the home page and like the
basic HTML stuff right so we're going to see that in our code today that yes
there's so many different controllers that we're going to have we can also
organize those controllers based on the different parts of our apps so I'm going
to have like my home controllers and I'm going to have my to do controllers and

00:42
uh connecting all those pieces is what we're going to work on
dumpster death so the controllers akin to each API logic yeah it's starting to
the controller is the thing that can be our API and know what it needs to do
does it need to go talk to our views does it need to go talk to our models
which can talk to our database the controller we write to know what to do
for each of those scenarios for each of those requests
we used to know HTML exactly we used to not know HTML exactly y'all have come so
far like I said there's this is a this is a big topic there's a lot of little
pieces we have to connect and so what I want you to do is just realize all right
right these are Legos we're learning how to put all these different Legos
together that's okay if it feels a little overwhelming at first we're gonna
walk through it step by step to see how it all comes through
uh what's the point of the router uh the

00:43
routers just so that we can organize all the different requests that are coming
in there's a lot of different requests that are coming in and we want to be
able to pass those requests off to individual controller so some people put
the controllers able to hear the requests I like one more level of abstraction
um because what will often happen is I want to be able to think about all the
requests that are coming in independent of what needs to happen when
that request comes in right like like hearing the request and knowing what to
do are two different bits in my mind right so the router is an actual router
exactly it just routes that request to the right controller
does it matter which browser the client uses no it doesn't matter which browser

00:44
the client uses because it's always the same kind of request when I refresh this
page I have made a get request on my root route
does it matter if that request came from Firefox Safari Chrome it doesn't matter
it's still the same kind of request so these requests are coming from the
client side and those requests are making it to our server
all right are making it to our server the first thing that's going to hear
that request is the router and the router knows which Smurf which middle
person to hand that request off to right
cool so MVC is server side then yes this is all about organizing our server side
that's all this is It's just adding a level of organization to our server-side

00:45
code so that we can work more efficiently as a team know where to go
to fix bugs when they happen and to add a level of modularity so that if we get
discussed with EGS we can switch to something else and the rest of our code
base still works all right how many routers can a major site have a
lot like a lot a lot um there was this um hold on real quick I'll show you this
it's called hackathon starter kit I believe it was called and
the cool thing about the hackathon starter kit

00:46
was that it had like a really good um it was like a really good boilerplate
for starting an application like if you're going to a hackathon I just had
everything already done for you and so let me just show you this real quick
because they've thought through it um so here is their router
and controllers all on one page because you got to think about it
every single request every single request needs to have its
own like it we hear the request and then what controller do we use here's the
request what controller do we use right here's the request here's the controller
that we use right and so think about all the things you can do on a normal web
application right we can go to the main page we can log in we can log out we can
reset sign up log in right all these different routes that we're listening

00:47
for and all the different controllers that we're using controller
that's gonna happen a lot and then look even for our API like all the different
routes for our different apis that we could use right like it just it just can
be really it can be overwhelming I think this looks really beautiful and elegant
but that's kind of what we're getting ourselves into I'm not going to start
you with that we're gonna have some really simple code to look at that's a
little overwhelming right but that's the idea every single request that can be
made in our application every single request right it needs to be heard by
the router and passed off to the right controller right and then those
controllers know what to do that's the API code that we're writing right knows
the weather to just hand stuff straight off to ejs and render the view or to
talk to our model which can then talk to the database and all that fun stuff

00:48
cool now we are today going to see high level right this
is a really meaty topic there's a lot for me to show you there's a lot for us
to discuss like I said we're going to come back Sunday and see it all again
there's a lot of big words a lot of big terms that I'm not going to use tonight
I'm gonna skip them and the reason why I want to skip those big terms is not to
confuse you right to not overwhelming a lot of folks but because I also want you
to do something for homework for homework I want you right I want you
to build a lecture on MVC so we've already talked a lot about MVC
model view controller I want you to build a lecture slides if you had to
explain what MVC was to someone else and
you had to do it lecture style like I do
for you each each and every single night I want you to walk through it now the
reason why I asked you to do that is because this is such a fundamental part

00:49
of the rest of program and the rest of your career as a software engineer that
I really want you to nerd out over some of the details to really understand what
a model is to really understand what views are to really understand what a
controller is and one of the best ways to really understand something is to
teach it to someone else so to get that into our brain right to get that into
our brain I need you to build an MVC lecture so that's what you're going to
be doing so hopefully you're taking some some some questions tonight right
hopefully you are uh going to internalize some of this but
the idea is to take what we learned tonight and build a lecture to help make
it stick in your brain to be able to explain it to someone else that'll walk
through it so at some points I'm going to give you a a cheeky smile
that's on you that's your job right because I'm gonna skip over a couple big

00:50
things right that I want you to figure out a way to define and explain on your
own in your lecture now uh I'm a terrible teacher though no
you're not because here's the thing everyone explains stuff differently
right everyone explains things differently and you have to find your voice in
explaining things because guess what you're gonna have to do on the job
on the job you're gonna have to explain your code
and one of the hardest things we can do one of the hardest things we have to do
is get used to explaining things and coming to those conclusions on our own
right and so we're going to cover a lot of stuff tonight
I need you to not really like to to lean on yourself right

00:51
right to lean on yourself tonight tomorrow into Thursday to figure out how
to explain these things in your own voice right
to in your own voice is the is is the really important bit here not on me not
on somebody else but to really internalize all right
MVC something really important I need to explain this to other stakeholders I
need to explain this to other individuals how can I do that right we
have to start practicing this right we have to start practicing this it's
something that you have to get better at it's something that you have to start
doing and so tonight after we end I'm going to ask you to build out this
lecture so you can get used to explaining things now the easy thing to
do would be to run off right and watch a bunch of videos and then just copy what
they say right now I'm not saying don't watch the videos I'm not saying don't

00:52
consume other content but it has to come from you your own voice right and so
with this hard topic with this difficult topic
practice explaining it to someone else right in your own voice on your own
there's a few things where I say you have to work on it on your own don't
work with others on this thing take the time push yourself understand it but we
got plenty of stuff to cover tonight we're gonna walk through MVC plenty of
times you're gonna see the code we're going to see it in action and on Sunday
we're going to walk through it again but know that your work is to build a
lecture explaining it to others cool now I'm going to ask for these slides I
think I said Thursday but I'll I'll actually ask for them on Tuesday so I'll
give you a week to work on this uh and then I'll collect all the different um
I'll collect all your different your different lectures right I'll ask for

00:53
you to submit your lecture and then from these lectures I'll randomly pick one
and as long as it's good as long as you put effort into it right as long as you
put time and energy into it and it was good uh that person that wins I will
personally help you on the hunt so I'm gonna help you find the companies you
should apply to I'm going to work through your story I'm going to work
through your resume your portfolio I'm going to work through your 100 hours
project we're gonna spend a significant amount of time making sure that you're
set up a hundred percent for the hunt so there's there's a pretty big incentive
on the line uh for getting this lecture done so trust me on this
it's one of those things that seems like an odd request but please trust me that
you want to do this exercise it will help you not only understand MVC but get

00:54
you used to something that you're gonna have to do on the job
a lot of times especially as entry level Engineers you get assign a ticket
something you have to do you do it and then at the end of the day you have to
say what you did at the end of the week during your retrospective to say what
you built you have to get used to like learning quickly understanding complex
stuff and then communicating that to others it's an invaluable skill that's
going to help your first 30 days 90 days on the job right it's huge you have to
do it cool alrighty so let's go ahead and we're at
the top of the hour so we're going to take our break uh when we come back from
break we're going to talk through MVC again we're going to see code so we can
start to see like all right you're talking about routers you're talking
about Smurfs I I need to see it when we come back I'm going to show it to you

00:55
we're going to walk through it so you can see what's actually happening in our
code base if you need to code exclamation point Discord and the
follow-on materials there is uh the code all right folks let's put five minutes
on the clock uh should we include a script with the slides that's up to you
depends on how deep you want to go into it
all right depends on how deep you want to go into it
but I think the more you put into these kind of some folks see them as silly but
I've I'm telling you the folks that put time
into this assignment they just they just it just clicks more than it does with
others right um so it's up to you the length it's up
to you how much effort you want to put into it but how could you convey MVC to
someone else right that's the goal all right folks come on back uh somebody
redeem two more minutes but we'll apply that to the next one because the timer
had already started lost it I can't wait to see these I know I'm excited cool

00:56
all right so we we talked a lot about this idea of
different requests coming in so I am going to talk through the first request
that is coming in we're going to see all the pieces and then we'll come back to
our lovely MVC uh to see if it makes sense to us let's see if we are what
what actually happened here how did it work how did it work right so let's
let's talk through what happens here when I refresh the page here I have made
a git request a get request all right so if we look at our code base we have a
lot of new code here there's lots of new files and folders lots of bits and Bobs
here that we're gonna have to talk through but before I go through all
these individual pieces let's just let's see if we can follow through what just
happened there so what we know with MVC is that we refresh the page what type of

00:57
request did we just make and what was the route what type of request did we
make and what was the route yeah it was a give request and it was on
the home route now let me show you a Nifty line of code
look at this line of code right here app.use forward slash home routes
so right here you can see I'm setting up my code to have two base routes
either the default kind of like root route route in which case I would use
all of my home routes and I have my slash to Do's right so
without even having to look at the rest of my application right we we can we can
we can look into the future here right we know that all of my like root routes

00:58
will probably be in home routes and anything to do with my to-do list will
probably have the slash to Do's route in it right so they're two different URLs
when I say you're out we don't have to get twisted here I I mean the URL like
if we look at the URL here we can see that I am on localhost 2121 right
21 21 21 21 21 and that would be the root route or the default
however when I click over to my to-do list look how the route changes now we
are on slash to Do's they are two different routes two different URLs that
are going to help us as we build out this project right so
we refresh the page and we made a request on the default route

00:59
since I am on the default route the router I am going to use is called home
routes now all the stuff I am about to show you I gotta get big for this
all the stuff I am about to show you you already know
I am showing you variables I am showing you objects and that's about and maybe a
function and that's it right and so yes there's layers yes there's Legos that we
have to do but these layers are important because it gives us structure
organization and the modularity to our code so it seems like we're doing some
extra skips and jumps but those extra skips and jumps enable us to break up
our code into different pieces right and then we can all work on those pieces
individually and when we have a problem or a bug we go straight to those pieces

01:00
and we're not dealing with one giant massive file so when I see history when
all right Siri you're trying to get me going I'm taking this off
I gotta switch that all right here we go when that get request comes in right
when that get request comes in on that default route I'm going to use home
routes now what is home routes without looking
anywhere else in my code what the heck is Home Route just look at it what is it
don't overthink it what is home routes it's a variable it's a variable home
routes is a variable and that variable is holding something right
we don't know what it's holding yet but it's just a variable that's holding

01:01
something so let's go ahead and look at this home home routes home routes
variable if we look up here home routes equals require route slash home hmm
so we have this ability to require right we have this ability to require
and what we have to do is we have to chase down this path so I have to go
look in my routes folder and then I have to find home
so to to figure out what Home Route is going to hold right to figure out what
it's going to hold I have to chase this down so over here I have my routes
folder and then I have home you can see my home.js here
cool so let's click on that inside my home JS you can see that it

01:02
exports this router right it exports this router so what's happening is the
stuff that is here is being exported it's being spit out
right it's being spit out so when I see this require here routes home what I am
really doing is I am catching what was spit out of that home.js file and this
is what was spit out so it was really just a fancy way right it's just a
really fancy way of running the code that's in this file
that's all it is it's just a really fancy way of running the code that's in
this file so when we refresh the page like an import
exactly exactly exactly so when we refresh the page right we refresh the

01:03
page that sent a get request on the root route all right let's take a look
root route use home routes all right to know what
home routes does we have to come up here and we require
go into the routes fighter folder find home right whatever gets spit out is
what's going to go here right is gonna go here right is gonna go here now
when we look at it there's not too much going on here
but there is one thing that's happening what type of request did we make again
right what type of request do we make again when we refresh the page

01:04
all right so it was a get request on the main route
and what does the router do the router does what the router goes and gets the
what the router goes and hands off the request to the what
the controller that's right here right it hands off that request to the
controller that's right here so our controller is right here right laughs
nasty redeemed a spicy rant on the topic of their choice uh
nasty what is your what is the topic of your choice
that was a hundred thousand Channel points
I'm keeping an eye out for your response you got to give me a response or I'm

01:05
Gonna Keep I'm gonna keep going what's the topic of your choice I see them uh
they see them post it scam thank you for the posture check first try
slow mode yeah no it was a hundred thousand Channel
points which you get by just being here all right actually I'm Gonna Keep moving
on I don't see her I don't see your response um so if you uh send me a a message
we'll do it uh next stream maybe they accidentally hit it that
would suck all right I'm Gonna Keep go it was a mistake oh no
it was a mistake no there's no way for me for me to give you the points back

01:06
like I don't have the ability to do that that's a twitch thing
but uh we'll make it right send me a send me a message on Twitch we'll figure
out something else if you want to use your points for something else uh send
me uh send me a a mod mail send me a mod mail and Discord and we'll figure out
what you need all right foreign let's get back to what we were doing sorry
that sucks I'm sorry all right let's take a peek we refresh the page right
we refresh the page you got got that made a get request
all right we made a get request right if we look at our server.js file
we set it up so that all of the root route requests use the home routes file

01:07
so home routes was telling us to go into the routes folder find home that's what
we did and boom here is the router for the home routes all right so now we
gotta check the the the the the create read post delete right was it a git a
post a put or a delete it was a get on that root route so here is the
controller that I want you to use right now we could look at the to-do's
router look at this to-do's router the to-do's router is going to have a
lot more stuff that can happen right if we look at the to-do's router
we can see the default route we can see that we want to create a to-do for like
the post a put to Market complete put the market
incomplete a delete request to delete the to do right so the router for the
to-do's has a lot more work to do right whereas the router for the home well
there's really like only one type of request here right there's

01:08
really only one type of request here that can happen and that's that that get
request so our router is really not doing too much heavy lifting now
somebody asked Leon why don't you just keep the routers here in the server.js
uh and that's because I want my server.js to be separate from my router
all right my server.js can sometimes get pretty bloated there's a lot of stuff I
need for like configuring the server so I rather have my router be a separate
piece right and a lot of times I wind up having my router
um handle all these different pieces of my project and so I like to have them
separate now some folks will keep them all together some folks will separate
them out I find when I separate it out it does help me debug a little bit
faster and know exactly where I'm going I also want folks to be able to look at
my code and really have a good idea of what's happening just by looking at the

01:09
code right cool all right so we had that get request come in home
wrote home routes why can't I say after I say home
routes right which we required is set up to use this home controller
now it's the same thing right it's the same thing this type of require syntax
we're going to see over and over again so for home controller to do its thing
it had to go to our controllers and find home right so if we look I have a
controllers folder right and inside of that is our home controller
if we look at our home controller it exports a what
now don't worry about this I know we're jumping into this a little bit but what

01:10
is this file export it exports an object it's an object so
that makes git index a what well who remembers who remembers
yeah that makes git index a method right it's a method and the reason we know
it's a method is because it's tied to a function right so here is a function
right it's a function and a function that's part of an object we call a
method right it's a function that's part of the object so we call it a method
right key value pair two that is true yep and so git index is a method because
it's tied to this function and what the heck right

01:11
what the heck does this function do yeah it renders out our
index.ejs right it renders out our index.hs so let's let's walk through all
of this all right we refresh the page when I refresh the page what has my
client done my client has refreshed the page so that has made a what when the
client refreshes the page from their client-side device they have made a what
they have made a get request exactly a get request
that get request makes its way to our server

01:12
and the first thing that we set up on our server is a router that hears that
request and our router knows what controller to go talk to so
we have a controller called our home controller and the router says hey
go talk to the home controller right go talk to the home controller
all right and the home controller is like all right well I can do some stuff
what do you want me to do well in this instance since we have made a get request
on the default route what I want you to do right what I want you to do is to go

01:13
and render out some ejs take your ejs right take your ejs bit out some HTML
and then I want you to respond with that HTML back to the client so my user all
they did was refresh the page when they refresh the page right when they refresh
the page that made a request to our router
our router the sole job of the router is to know which controller to hand that
request off to because we could have so many different kind of requests gets
puts push posts deletes whatever it doesn't matter right so many different
kinds of requests that could be passed through

01:14
and the router knows what controller is in charge of handling that request
right so it hands the route that request off to the controller the controller is
like oh I hear that request all right since I hear that request I know what to
do I'm gonna go to My Views and I'm gonna ask the views to render out some ejs
and when it renders out the ejs that's going to give us some HTML
and then the controller is going to respond with that HTML back to the
client so request comes in the request is passed to the controller
from the router the controller says all right I know what to do in this instance
let's go to our ejs spit out some ejs get that HTML and respond back to the
client right so a lot of steps are happening here

01:15
right a lot of steps are happening here right what if a router doesn't have a
particular method or controller set up uh then it wouldn't work right like if
it doesn't if the router doesn't have to
handle that control like it doesn't know what controller to hand it off to then
maybe nothing would happen eventually we'll have like a 404 for
everything yeah so if the router doesn't have a controller to pass stuff off to
it'll have a 404 controller and the sole job of the 404 controller will be to
serve up the 404 page that would be it does MVC affect the user experience is
it any slower than how we're doing it I mean if we think about it like at like
a an actual like what's happening in the Machinery type of thing then yes there

01:16
has to be some sort of delay it will ever be like we're talking about speed
of light here right so will the user ever really notice it no
yeah Larry thank you for the hydration cheers to you well
can you show us where the routers are I can cool so I refreshed the page boom
refresh the page the very first thing that here is that
refresh is all right what route was I on I was on the default route right I was
on the root route right I was on the root route since I was on the root route
I'm going to use my home routes my home routers my router file is going to
handle all the routes that are possible with this root route
all right so let's go take a look at that file all right

01:17
what type of request was made oh it was a get request on the root route I know
what to do I know what to do it was a get request on the root route I know to
use the home controller and and not only do I know to use the home
controller I know what method to use and that method is get index
right is git index so if we look at the home controller we can see the get index
method does what the git index method does what look if
we look at the Home Route it said go to the home controller and use the get
index method home controller get index method home controller get index method
what does this function do it renders out the ejs
and when it's done rendering out the ejs it responds remember that res is short

01:18
for response right short for response we respond with that ejs
right so there's a couple levels here the server set up to hear the request
all right it was a root route so we go to our home routes all right it was a
get request on the Home Route so it's a get request on the Home Route we'll use
the home controller and we'll use this method to get indexed cool
now we'll notice in the home controller it renders out index.ejs
what the heck is index.ejs what part of this MVC is it
it's our views exactly our controller because right now we're looking at the
home controller our home controller knows how to hand off the ejs rendering

01:19
to our views right so that request came in and we can see the controllers doing
the work the controller knows what to do the controller knows to render out the
ejs cool and so that's just a really simple one
right this is like this this is as simple as we can get where we we hit
enter or we refresh that is a get request on a root route that get request
comes in the server knows to use our home routes
we know from the home routes that since it was a get on the root route we're
going to use the home controller and specifically the git index method from
that controller that controller goes and talks to the Views which is our ejs it
renders out the HTML from that ejs template and responds now the cool thing
is we can we can go over here and we can look at

01:20
our views and we'll see that there's an index.ejs in the views and there's a
to-do's.ejs in the in the in the views so our actual ejs templates are
separated out into their own views folder as well
what does modules dot exports do remember the way we're linking all this
stuff together right the way that we are linking all
this stuff together it seems kind of wild at first right that we're jumping
from folder to folder to folder how are we jumping right how are we jumping from
folder to folder to folder well it's because we are calling something right
we are calling something and when we call it it spits something out
right so let's imagine we're going back to back in the day we
were little kids we were playing on the block by ourselves well uh sorry we'll

01:21
let something slip about myself we were playing with lots of friends outside
right we were playing with lots of friends outside and mom or dad came to
the door and said hey Leon come home right hey Leon come home
and I would come running right I would come running back home
right the same thing is happening here with modules.exports somebody is making a
call and then for this to work this file has
to spit something out to answer that call right so the way that we're connecting
all these files together is one file is making a call
and the other file is spitting something out to answer that call
right now what we're seeing here is that a lot of times we're spitting out an
object or eventually we'll also see that we're

01:22
spitting out functions or we're spitting out um
very simple things that are built into Express right
and so this idea of calling and spitting out is not using anything new we're
using the same structures that we've been using since the beginning of
JavaScript we're using objects and functions and so to separate stuff out
into individual files we still need a structure for the stuff that's in those
individual files and so we're not going to make something else up we're going to
use the structures that we're already comfortable with in JavaScript so we'll
use functions and we'll use objects and we can spit things out of files as an
object or as a function and so if we look and we're saying all right

01:23
we're on the server.js we're running home routes home routes is being
required that's like Mom or Dad yelling for you to come home right it's yelling
for you to come home and you need a response so we have to go look at this
route's folder the home file to find that response and we can see it spit out
the router right Express is doing some routing for us and
it's spitting out that whole router for us so the response the response to this
call right the response to this call is what is spit out here which in this case
is just all the stuff we see right here right so you're asking for something and
something is being spit out to answer that request same thing's Happening Here
we're saying home controller all right well here's home controller it's

01:24
requiring it's making a request for something right it's making a request
for something and I don't even have to go and look to see what it responds with
right I don't even have to I don't even have
to look to see what it responds with because look at this
what is this right here that dot notation what's the only thing that we know can
use dot notation what's the only thing we've used so far that uses that dot
notation objects objects are the only thing that
use that notation so I am requiring I am asking for something I am asking
something from this controllers folder I'm asking for something from that home
file I'm asking for something to come here and I can just take a peek and see
oh I know it has to be an object an object is going to be plopped in here

01:25
like that right and I'll just be plopped in there
just like that and so if we go and actually look at the home controller so
I go to my controllers folder I go to the home.js we can just say all right it
spits out this object let me grab this whole object here copy paste
that's all we did right we went to that file we went into that
folder we went to that file and we grabbed that object right
we grabbed that object right and now that object is there for us to use
and we can use it so if home controller is now this object it has a git index
method so when I do home controller dot get index I'm using this object I'm

01:26
using this get index method and what I'm really doing is just running this
function all right I'm just running this function
nothing has thing has changed though nothing has changed and so a lot of
folks get they they get confused at this point and that's okay I know it's a lot
to come at you at one time if the if especially if you haven't done the
homework if you haven't done the reading if you haven't done the videos right
um if you haven't done any of that this could be really overwhelming right um
everything I'm showing you is just organization
that's all it is I'm just showing you organization right
you've already done this you've already set up a get request right you've

01:27
already set up a get request that that goes and and renders out some ejs right
right you've already done that all we're doing is we're adding some layers to
what we've already done so that when we want to make changes we can
right when we want to make changes we can so if I want it a different
I wanted a different I wanted a different let's say let's say I don't want
this page to render for the home page right
I don't want this page to render on the home page
right what could I do I don't want create a to-do list I want some other I
want some other some other file to to change right I could

01:28
simply create a new view a new ejs file if I want it to right
a new ejs file if I wanted to and then all I have to do is know all right
what's handling what's handling my get request on the default route right like
pretend we are a brand new I'm going to get big for a second
Pretend We're a brand new engineer to this project right we're a brand new
engineer to this project and the very first thing I am tasked with is
modifying the home page right I want to make some changes to the home page right
so I have to figure out how to make changes to that home page
what I'm going to do is just look at my code all right let's start

01:29
home page is the default route so I'm going to use home routes
where the heck is home routes okay I go to my routes folder and there is a home
file so I go to my routes folder home file all right so now I'm in my my
home file and I realize that when I'm loading that
home page right that main page on the root route
that is a get request so all right here's my get request it's on the root
route what happens when I load that page well I'm using the home controller and
I'm calling the git index probably a method on that home
controller so let me go and find the Home controller all right so I gotta go
to my controllers folder I'm going to look for the home file in that

01:30
controllers folder controllers folder home file and here we go all right
I am going to wind up rendering out the index.ejs which is part of my views so
if I want to change the home page I know to change the index.ejs so I
know that's going to be in My Views so I go to My Views and here's my index.ejs
now the index.ejs right the index.egs is very very simple
I could put all my changes in here so I can say instead of create I want to say
make a to-do list right make a to-do list right and when I
go back and I refresh my page now it says make a to-do list
I was able to step through all of my code right
I'm going to step through all of my code right because I understand that a

01:31
request is coming in let me hand it off to my router the
router is going to hand it off to a controller and if I find that controller
right if I find the controller I can see what it's doing what ejs files is it
using what view template is it using you can see all of that inside of the
controller and then I can make the change that I
want to make and the Beautiful Thing the beautiful thing is instead of when I
make this change am I worried about anything else breaking
am I worried about anything else breaking no
the funny thing is I could go back to like my home controller I could change
out this file entirely to be something completely different and nothing else
would ever break or I don't have to worry about it so now as a team
we can make all the changes we want to the Views and know that something else

01:32
isn't breaking somewhere else right and so that's kind of what we're
getting here there's lots of little layers here right
right lots of little layers here what we're doing is separating stuff out and
I actually think the the home page route is a little harder to understand right
because there's only one thing happening there's only one thing happening but
stay with me stay with me let's take a look at the to-do list now
I'm going to click this anchor tag right I'm going to click this anchor tag
if we use the inspector right if we use the inspector we can see
that this anchor tag is taking us where where is this anchor tag taking us
to the to Do's route so slash to Do's let's click on it boom slash to Do's we

01:33
can even see that my URL now has slash to Do's in it what heard that request
what's the thing that heard that request the to-do's request the router exactly
the router heard the to-do's request and
the router's job is to hand that request off to the appropriate what
the appropriate controller I think there
might be some learning happening I don't I don't know if I don't know if you all
feel it but I feel like there's maybe a little bit of learning happening here
don't worry if the jumping doesn't make sense I feel a little bit of learning
happening though let's let's hang on here all right let's hang on here
all right so we went to slash to do's that request came through

01:34
right the job of the router is to hand off
that to Do's request to the appropriate controller so let's take a look at our
code all right started our server.js now was the route
the root route or was it the to-do's route it was the to-do's route so which
route file are we going to use we're going to use the home routes are we
going to use the to-do's routes we're going to use the tuners routes
right look slash to do we use the to-do route so where do I find the to-do's
routes I have to go to my routes folder and look at the to-do's file so it's
going to do that all right here's my routes folder and here's my to-do's file
boom here are all my routes for the to Do's

01:35
route now the beautiful thing is since I am and people ask like Leon why do I
separate this out into separate files well now that I'm in the to do's
now I'm in the to-do's router I don't have to do what over and over again
since I'm in the to-do's router I don't have to do this
ah misspelled it that would have been a problem right I don't have to do that
right how wet exactly I don't have to do that because I've already said
I've already said I'm in the to-do's route
right I'm already in the to-do's route so I'm already there right
I'm already there I don't have to worry about it I don't have to worry about it

01:36
great so this was a get request right I'm on slash to Do's this was a
get request on which route inside of to-do's
which route am I at inside of to-do this
is a tricky question which route am I on inside of to do's
you ready yeah the root exactly so I'm I'm here
right that's where I'm at I'm at to do's forward slash
the root route route on to deuce and what type of request was this
this was a get request okay this was a get request so let's go back take a look
at our code do we have the appropriate router for a get request

01:37
on the root route of to-do's we do line five exactly right give me
the root get on the root route we're already inside a to-do's right we're
already inside to Do's root route right root route route inside of to-do's we're
already there and so when we hear that get request on the root route of to-do's
what controller are we going to use are we going to use our homes controller
now we're going to use our to-do's controller which is a whole separate
controller that just handles our to-do's and what method are we going to use on
that to Do's controller well it's get to do so where the heck can I find my
to-do's controller well I got to go to my controllers folder and find the
to-do's controller file so controllers folder to Do's JS and then here is my

01:38
get to do's function here it is and what is this doing
what does this get to Do's function doing well
it's going to go and find all of our documents in our database
it's going to actually count all of the documents that are still left to be done
and then it's going to pass all those documents into our to Do's ejs file

01:39
to uh render out the HTML but we're missing some code here
let's let's go look at our old code actually let's look at our old code
uh GitHub look at our old oh look at that handsome fellow
let's go to 100 devs repo there are repositories all right uh where's our to-do
I was doing a different was it it was not in the in the um
oh here we go to-do list expresses the very first one all right so
something interesting about the code before right before we had this uh

01:40
go to the database all right let's make this bigger go to the database
find the to-do's collection all right go to the database
find the to-do's collection find all the documents in the collection
and turn it into an array right go to the database find the to-do's
collection find all the documents yet that's not here just says to do
what the heck is to do why is it why isn't it going to the
database why is it finding all the the right collection why isn't it finding
all the documents oh to do is our model should the code that knows how to talk

01:41
to our database be here no we want to separate that out into our
model right so if we're looking at our original photo here right the controller
knows how to talk to the Views and knows how to talk to the model but the model
is the thing that actually knows what to
do and talk to the database and all that fun stuff right so
instead of having that all jumbled here inside the controller we'll just use the
controller of to do right the troller can do and then we'll
separate all the stuff that the database needs into that to do model
right so we'll separate that so instead of having it all hard coded in here
right we could hand that off to the model cool so
let's walk through what happened there again just so we can see it we
got sent to this to Do's page so if we actually step through our code

01:42
server just said all right you went to slash to Do's let's use the to-do routes
we looked at our to do routes all right we wanted the get on the root of to Do's
so we were at to Do's forward slash so we're going to use the to Do's controller
and what we're really trying to do is when we go look at this to-do's
controller and we look at the get to Do's what we're really trying to do with
get to Do's is show the freaking to Do's on the page right we're trying to show
this first try right that's the actual to do but to actually get that data our
data is stored in our database so we're gonna have to use the model to get that
data right it is part of it yeah so when we come back from our break

01:43
we will use that model to talk to the database to get stuff from the database
right all right they get stuff from the database and then be able to show it and
render it to our users cool all right that's a real knock so
I'm gonna take the break seven minutes on the clock because we had the uh the
bonus from before and I will see you all very soon we let me show the music here
we had a wonderful raffle today in the newsletter so if you
haven't opened the newsletter what are you doing folks
newsletter always has the coolest stuff dopest stuff first stuff and uh
we will be having a a lot of surprises inside the newsletter going forward
um especially to get the end of program lots of cool things to to raffle off and

01:44
stuff like that I am going to throw twitch names into
our name picker I did the mistake the last two times of doing Discord names so
now I have to go back through and connect Discord to Twitch to send you a
message on Twitch so I will do that today so every uh all nine folks that
win the raffle uh will get a message from me today uh with the uh link to set
up a coffee chat really looking forward to talking to some of you so let's go do
name picker here and then this is kind of like my trial run
um for for the coffee chats and uh if it goes well we'll do a lot more because
one of my favorite things of last cohort all right so let's go and pick three
and this will be for a coffee chat uh so let's go ahead and
pick it three two one all right here we go
octopus Ridge Ryan Hawkins and Shelby 55 uh looking forward to talking to all

01:45
three of you all right I think we've talked before
haven't we I'm not sure but if not it'd be great to finally talk to you
um congrats to all three of y'all I'm gonna put you over with my list here uh
you'll get a message from me later today um with the link and we'll set up a
coffee chat uh for either late this week or early next week cool
alrighty so we were at the to do right we were at the to do
and so we are using if we look to do right to do was simply another variable
right it was another variable and that variable was requiring our models so we
had to go to our models right we're going to go to our models folder which
we have let me just kind of make a little bit
easier by collapsing some of this go to our models folder and then find the to

01:46
do we only have one model uh and that to do is using something called mongoose
so before with with our mongodb we were using the client right
I'm interested in using the client before now we're using something called
mongoose what the heck is mongoose I look forward to learning more about
what the heck Mongoose is in your MVC lecture thank you thank you
but for now it's going to be the it's kind of like the the the missing
web development Wu-Tang member right odm ROM whatever you want to call it right
it's it's the missing member and so Mongoose for now is just going to help
us talk to our database and you will discover the merry wonders as you build

01:47
out your MVC lecture as well now for now let's just understand Mongoose is
helping us talk to our database and is handling all the stuff that we need to
be actually be able to talk to our mongodb database and
we have this wonderful thing that it's exporting which is the actual model and
the ability for us to talk to that model that part of the database and Mongoose
is handling all the connection the actual the actual connection uh is over
here with this connect to B function the connect DB function is part of our
lovely uh config and all that fun stuff we'll get to that later don't worry
about that for right now but there's a lot of stuff going on here that just
makes it work for now let's just understand that it's how we talk to our
wonderful wonderful database okay now eventually
as we start to build out our databases we are using mongodb to start

01:48
and mongodb right mongodb is a wonderful database but it
is very loose it it doesn't really matter what you try to put into it it
will accept it so what would be one of the problems of using mongodb going
forward like what would be a problem of using mongodb
I like the yeah I like that word consistency consistency could be a problem
especially if we're working with other Engineers if we go back and look at our
old code like if we look at our to-do Express
right and we look at our specifically our post
we had this lovely insert one and the structure for what we inserted was kind

01:49
of like in line with the code right kind of like in line with the code now
any developer could have came along here and changed this and in fact somewhere
somewhere else in the code base might try putting a to do into the database
with a different structure right and mongodb would be totally fine with this
and we could run into some real trouble where if we're working with other
Engineers we really haven't agreed upon what's going into the database how it is
structured and so one of the really cool
things that we get when we start working with uh Mongoose are schemas right and
so here we have a schema which well I look forward to your lecture on MVC

01:50
explaining what a schema is but for now for now we can think of it's kind of
just like the structure the structure of what we are using
inside of our mongodb database right so when I am creating to do's
well there was some data that was associated with those to Do's right
there was a an actual to do which is like the text of the to do we're telling
it's going to be a string and we are telling it that it is going to also have
a completed property which is a Boolean now
one of the things you might have noticed about
this project somebody said a schema like
a template yeah it's like a template for what goes into right it is like a

01:51
template for what winds up going into our database
a blueprint exactly exactly cool now we have this lovely structure
right this lovely structure of what's now going into rdb [Music] right
and with this lovely structure we also have the ability to know what's going on
maybe without direct access to our database right now do you all have
access to my database no put up in different
no so if I wanted you to work on this application right if I want you to be
able to work on this application maybe you're a developer on a team that hasn't

01:52
given you full access to the actual kind of mongodb instance
how could you write code that interacts with the database without access
to the database if I wanted you to extend right I wanted
you to extend this project this application how would you know what
what's actually going on how would you know what data makes it into the
database how it's structured what the properties would be right
what do we do how how can we how can we do that yeah
we could look at our model right we could look at our model and we could
look at the schema that that model provides and so if I was a new developer
on this project right and I noticed that we were building a to-do list I don't

01:53
actually need access to the database to know exactly what's going into that
database I can go and just look at my model right
I can go and just look at my model and as a developer I know okay well the
data is going into our database there's this to do model and it is
going to have a all the documents are going to have a to-do property and a
completed property uh the to do property will be a string and the completed
property will be a Boolean so even without access right even without access
to the database even without access to the mongodb instance I know exactly
what's going into my database and all the other developers can always just
take a quick look and understand what's the heck's going on so as we build out
this application and it gets more and more complex we know exactly what kind

01:54
of data we're dealing with should we actually need it cool
Let's uh let's try walking through actually using all of this so
all right let's do second try submit all right so now we have second try
all right second try what type of request did I just make
chat what type of request did I just make a post request
what route was that post request on it was a post request what was the route

01:55
it's on the to-do's route let's take a look at the inspector too
if we look at the inspector we can see that the action is to Do's create to do
look at the action and there's there's other ways to like not have to hard code
it in the action this is just I think a little easier to read and understand so
that's why I did it but if we look at the action it's to Do's create to do
so the route is to do's cool let's look at our code
let's look at our server.js is it the root route that post request or is it
the to-do's route for that post request it's to Do's all right let's look at the
to-do routes all right let's look at the to-do routes

01:56
all right where do we find the two routes we have to go to the routes
folder and find the to-do's file all right so I'll go to my my routes folder
to Do's route file there and it was a post request so do I have the ability to
handle a post request yes I do right here and let's look at the last bit of
the action we already know that we're in to Do's right because we just clicked
through we know we're in to Do's but the
last part of that route was create to do because if there are multiple forms
right if there are multiple forms of multiple different types of posts we
might have different actions but we knew that we were on the to-do's route we
know we're on the create to do and it was a post all right our router is set
up to listen for that post on the create create to-do route and it knows to use
this create to sorry this to Do's controller right it knows to use this to-do's

01:57
controller all right where the heck is the to-do's controller coming from look
at the controller's folder find the to-do's file inside of there all right
here's our controllers folder here's the to-do's file
and this to Do's controller has so many different methods on it
it has the get to Do's the create to do the mark complete the mark incomplete
the delete to do but let's look let's look at our router
the router said all right it was a post on create to do we're going to use the
to-do's controller and specifically the create to do method
the create to do method so let's look at
the to-do's controller and let's look at the create to do method to Do's
controller create to do method there we go cool

01:58
now we can follow along with what we're supposed to do inside this controller
so we are going to go ahead right we're going to go ahead and use
the to do model which has a schema to then go ahead and create our to do
and so since we are using Mongoose we know where to go to add this to our
database and since we have a schema we actually have the ability that if this
was incorrect like let's say we tried to add some something else here like
right would this match our schema if we tried to just randomly add some
other stuff in here right this wouldn't match our schema so

01:59
we would have the ability to reject we'd have the ability to reject right
this this this creation of a to do because it didn't match our schema right cool
but it matches our schema so we should be all right we go ahead and create our
to do and then what do we do as our response what do we do as our response
we redirect back to to-do's and this is really important because we didn't
redirect back to the root right we didn't redirect back to the root we
redirected back to to Do's like we stayed where we are right because we had
just done four slash that would have taken us back to the main page right
that's not what we did we refreshed the page we were on
and so when we refresh the page that we are on right when we refresh the page

02:00
that we are on that is now what request the get request beautiful
it's a get request all right now that get request is on the to-do's route so
let's start at the very beginning of our
server is it a root request a root route or a to-do's route
ah it's a to-do's route it's a get on the root route of to-do's so we gotta go
find our to-do's route so we already have open here's our to-do's routes it
was a get request on the route route of to-do's so we're going to use the
to-do's controller and we're going to use the get to Do's method so here's the
to-do's controller and we're going to use the get to Do's
method and if we look at the get to Do's
method we have some wonderful stuff here right

02:01
right so what are we going to do we're going to use our model the model is the
only thing that knows how to talk to our database right do you like it knows how
to talk to our database and we're going to use that model to find all of our
to-do's that are in our mongodb database right we'll pass that into our ejs our
to-do's ejs right we'll pass everything that comes back into that ejs
we also will count how many things are still left to do also pass that into our
ejs right so the controller file that we're in right now is passing off the
actual to Do's from our database the total number of items left into our
database from our database into our to-do's ejs we go to our views file I'm
sorry I've used folder views folder has a to-do's ejs and we're
passing all of that stuff all that stuff into our ejs template our ejs spits out

02:02
our HTML and then our to-do's controller with the get to Do's method responds
with that HTML so when we when we simply submitted the form we jump
through all of those individual pieces and it can seem like a lot at first right
but once you have this structure once you have this structure
the the world is yours because now you know how to set up your controllers
right and if you wanted to add something else to this application right if you
wanted to say if you wanted to do to Do's but also like a Pomodoro tracker
well then you just have a bunch of Pomodoro tracker controllers right and
if you decide you didn't want to use ejs anymore you really like handlebars well

02:03
you just chop out ejs for handlebars and if for some reason you wanted to update
the the stuff that's going into the database well you can just mess with the
model right and so we're starting to see this
MVC come together lots of hot but lots of like pumps to overcome lots of hops
to do lots of little things to to jump around in
but once you can start to see that pattern all right we're going from here
to here to here well then you get so much modularity so much flexibility to
your code and there are still pieces we have to clarify right there are still
little things that we have to add right for this all to come together we really
haven't yet gone through and really kind of looked at like even like our server
file we haven't really looked through like how we're connecting to the
database right we haven't really looked through like how like a lot of this like
the little things are coming together for how this really really works
underneath the hood but this is our first pass

02:04
right this is our first pass this is meant for us to kind of start to see all
right NBC I maybe I can kind of get it we have requests that come in the router
hands those requests off to individual controllers and those controllers are
set up to do whatever we need to do and sometimes the controller will just talk
directly to the Views sometimes the controller will talk to the model right
and that's kind of where we're starting to to be that's where I want you to
exist I don't care if you can't go out there right now and code a controller I
don't care if you can't go out there right now
and um code uh code code out the the the the EGS that I have here that's that's
not where I want you to be I want you to be able to see that the
Hops gets in the jumps that we are taking cool all right now your homework
there's a lot of pieces that are missing here what the heck is Mongoose what the

02:05
heck is a schema right and any of the other little bits that we're missing
here I'm putting on you right now all right I want you to build a lecture on
what MVC is what it is how it's helpful and then any of the pieces here that
don't make sense I want you to research on your own by yourself yes that means
by yourself [Laughter] put in the time and the energy to work through it on your
own okay now we're gonna come back on Thursday and do
more of this we're gonna see the bits and pieces that we haven't got a chance
to cover tonight Sunday we're going to do it again all the way from scratch
showing all the little itty bits how things come together right

02:06
but I need you to put in that cognitive effort
to learn some of these key Concepts before I introduce them to you right
and the reason for that is because in a few weeks you were all leaving
the wonderful confines of the hundred devs agency and you will be on a team
as an entry-level engineer where you will be plopped into a new code base
that code base will use lots of techniques tricks code languages things
that you have not seen before things that will not make sense to you
and I won't be here my wolf won't be there the rest of the stream team won't be

02:07
there it's going to be you and you're going to have to figure it out
and so I like my students to get used to that process right to get used to that
process now knowing that on Thursday we're going to review it again knowing
that on Sunday right knowing that on Sunday we're gonna do it again in more
detail right and so get used to that practice
let your brain sweat a little bit dig in what the heck's a schema what the heck
is a model what the heck are I I don't get this required what the heck's going
on there right spend some time going through it on your own diving into
resources that you can find and build me
a lecture on MVC I promise you if you do this I Pro just do it
I promise you if you do this it helps things click and it's really good

02:08
practice for being on the job okay really really good practice for being on
the job and so I'm going to start doing some of these things at the end of class
where you shouldn't really feel that comfortable
because I haven't covered everything right
and and you're gonna have to fill in the gaps and this is going to be on purpose
because that's what you're going to be doing on the job all right and I would
not be preparing you if you got through the hiring process because I'm going to
make you a lean mean interviewing machine you're gonna be able to do data
structures and algorithms with the best of them you're going to be able to have
beautiful projects in your portfolio I would be doing you a disservice if I
showed you how to interview really really well got the job and then in the
first 30 days you're just you're drowning so we start with the beginning
the beginnings of feeling uncomfortable and working through some of that
uncomfortableness so that we can be doing that on the job okay

02:09
so we're going to end a little early tonight
uh we'll probably still let's just still still do a raid just to give somebody
some love and some follows um but then you should
uh stop and take some of this time right take some of this time to
take some of this time to work through your lecture on MVC okay
yeah yeah yeah yeah yeah yeah hey does this work 21 21 21 21 21. yeah
hey good morning good afternoon good morning good afternoon good evening no
matter where you're coming from hope you all are doing well let's go hello is
Rufio with the ray Rubio Rufio Rufio what 87 let's go stream team keep going

02:10
up up up up I love to see it what's going on
hey what's going on everybody welcome back welcome back
good morning good afternoon hey I actually take a really good question
just put in chat morning afternoon or evening for what it is for you morning
afternoon or evening in chat for me I'm curious
I've never actually asked this before evening afternoon
morning we've got a few mornings sprinkled in
shout out to all the morning folks or like the really really late evening
folks all right cool wow I've actually never
this is pretty interesting to see so quite quite a few most folks it's
evening it seems like quite a few afternoons and then a fair amount of

02:11
morning folks which is cool to see hey well I'm glad that you all are here
welcome back we got some more MVC to get
into uh last class we walked through the basics we saw kind of the big stuff but
we didn't really hint at a few other things mainly uh deleting updating so
that we can see some of the new stuff that's there follow some of the new
Pathways that are there see things like data sets come into into play so we have
a few more things to get to with MVC to set the Level Playing Field so we can
jump into authentication authentication is going to sprinkle on top of what we
have here so if you got questions I got answers super excited to get through the
stuff we didn't get through on Tuesday make sure folks are feeling good make
sure things are starting to sink in if you have questions I did share a slido
uh in the following materials channel so some folks have been putting questions
in there I'm going to take some time to answer those questions tonight and
Sunday for office hours so if things are still aren't clicking

02:12
please come back to office hours on Sunday I will put more time in to make
sure everything makes sense all right uh urchin said congrats to all the new
deaths who got jobs yeah we don't have slides this week next week we have like
really like a lot of slides because there's a lot of detail I have to walk
through lots of spicy memes for y'all um so I'll put all the jobs uh on our
Tuesday slides so don't miss Tuesday we have a lot of folks to celebrate
so many folks have gotten jobs in the last week it's kind of wild uh so yeah I
try my best to to capture all of them put them into the slide just as a quick
celebration uh but take a look at that celebrations Channel folks uh take a
look at Twitter like it's been popping off recently and we're not even there
yet we're not even there yet we're not even in the hunt yet uh but we're folks

02:13
are cruising along so I love to see it I've already started my 100 hours
project so I incorporate MVC code from last class or yeah I I think really
after like if if this MVC stuff feels comfortable you'd want to start using it
for your your 100 hours project because one of the questions that always comes
up right one of the questions that always comes up for entry-level
Engineers is well tell me about how you write code or tell me about the things
you think through when writing code and folks that are like entry-level
Engineers that just do a like a normal boot camp not the 100 devs Academy right
they don't really have an answer to that question but we have two really solid
answers to that question on the front end we adhere to separation of concerns
the Golden Rule and on the back end we separate our architecture using MVC and
so you want to start incorporating the MVC structure into your applications so
that when architecture questions come up during your interviews you can talk

02:14
through them it's just a really beautiful thing to have like your 100
hours project be a really well uh architected application and it's not too
hard once this MVC stuff sinks in and so you'll use this going forward and next
week we add next week we add in the little bit of authentication that we
need to have like user logins and stuff like that having multiple collections in
our mongodb database and that's what we'll really use going forward because
it has everything that you need cool uh are we doing more crud review during
office hours well we're going to start building out bigger and bigger
applications right and so we need to get through that
point where we we have authentication and then once we add authentication

02:15
we'll do like another Mega stream like where we do like the full nine hours
from beginning to end with a full crud application that follows MVC that has
authentication so we're building up right we've we've started off building
crud apps now we're building crud apps with MVC next equal build crud apps with
MVC and authentication and then we'll build something from scratch together
and then our really big project that we'll do after that uh will be to build
an Instagram clone so there's a lot of stuff that goes into
that Instagram clone that you could then once we build that you can build
anything you want right because Instagram has like image uploading like
profiles uh individual Pages for individual users uh there's login all
that wonderful stuff right so uh that's what we're building up to and actually
one of the questions in the slido was uh MVC seems to be a common pattern are
there templates for apps with pre-built methods to handle crud including

02:16
validations and standard Mongoose schemas absolutely like there are a
bunch of them out there I actually showed the hackathon starter on stream
um last class but the beautiful thing is that's what we're building up to here
together so that by the time we get to the Instagram clone it's not because I
want you to build an Instagram clone it's that the Instagram clone has
everything you would really need to build whatever the heck is that you want
to build and we've built up together through it so it's not completely just
out of left field toward all these pieces and Bobs do right we've worked up
to it there's tons of lectures you can go back to and see like oh I don't
understand this piece Leon walked through it and kind of understand it and
then that's your template going forward uh there are a bunch of other ones but
the one that we built together in class could really suit you really really well
until you get to your job once you're on
the job they will do things in their own way right they will use their own
systems their own tools their own Frameworks and you're gonna have to

02:17
learn that but for the projects we do together that's a good template so I
don't think you need to go off the deep end to learn something else
um but what we build here will be enough to get you through the job and once you
get to the job you you take over from there um just a quick check is the closed
captioning working because I see it running on my end but somebody mentioned
that they didn't have it the other day so make sure closed captioning is
working before we continue yep working awesome thank you so much ah
as we let folks get in we always like to do questions
um but before we do that if you haven't checked in please check in exclamation
point check in for the link for today go that tweet like it retweet it please
house more folks find us but also lets me know that you are here uh blah and I

02:18
are meeting on Friday to finalize our process for the hunt uh meaning that
we're gonna figure out like folks that need verification uh folks that need
references things like that so we're going to finalize that process the mods
are meeting on Sunday so that we can we can put that process into place and so
next week we'll start kind of talking about those things so next week we'll
probably do like an intro to the hunt type class uh and of course
authentication yeah it's hard to get a job with these boot
camp tweets we chilled the boot camp tooth at the end
um but we've had folks get hundreds of folks get jobs that have done the tweets
the retweets people people don't care like it just it's it's come up like once
out of hundreds of places yeah so you'll chill it as we get closer to the hunt
um but for now let me know you're here yeah people don't care honestly that
that's the thing like so many entry-level Engineers they get they get
caught up in like all these things that have to like they think that recruiters

02:19
care about is just data's dull so that's one of the things we talk about during
the Hunt is like what really matters what really moves the needle um and
remember it's a numbers game even if one
person dismisses you for something silly there's so many more fish in the sea
yeah cool all right uh thank you for checking in
uh no slides today because we have a lot
of code to go through next week we bring back the slides like I said I got a lot
of slides for you next week because we got a lot of stuff to get into with the
authentication bit um I always start off with some
questions and I shared the slider so I have a few questions coming in uh let's
start with these questions real quick and then we'll jump into class like
normal all right do we turn in our MVC presentations today no they are due on
Tuesday uh Tuesday right so on Tuesday I'll ask for your
presentation that walks through what is MVC what are models what are views what

02:20
are controllers I want you to put some time in on your own to build that
presentation and the reason being because a lot of you are about to leave
the the wonderful Halls of the 100 devs agency and walk into companies with new
technologies new Stacks new things that you haven't heard of before and you have
to gear up very very quickly on those tools Technologies tips tricks and so
something I need you to start practicing now getting some a little more
comfortable with it don't worry we're going to cover a lot of this stuff today
we're going to cover more of this stuff on on Sunday we have the stream team
members have been doing some stuff too my own wolf did some MVC stuff yesterday
so I'll share that link after class and uh hello Rufio shared a link with me too
that I'm going to share as well so uh there's lots of chances for you to get
caught up on that material too all right another question we had here uh what's

02:21
the point of having a router in addition to a controller instead of just a
controller when all the router does is direct the request to the controller so
it's just a layer of abstraction right right just a layer of abstraction and so
the route is really listening for that request it's really listening for that
URL and then handing it off to the appropriate controller now you could put
that all in one file right you could have listening for all
the URLs right listening for all the URLs right and it would it could
possibly work right but let's say we want it to change
right let's say I want to change all the routes tied to to Do's well think about
that for a second I want to change all the routes tied to to-do's
I want to change it from to Do's to to to to Rainbow right I want to change it

02:22
from today's to Rainbow and so since I have my router file all set up nice and
neat and I want to change it from to Do's to Rainbow in my server.js I would
just change this from to do's to Rainbow and I'm done
right now from today's to today's exactly so now all of my routes right
all of my routes are no longer slashed to Do's it's now slash rainbow
and so that was one change that enabled me to to fundamentally change how
routing Works throughout my entire application so to me that's way more
worth it to have these routers kind of separate out because I might want to
change the path thing or I might want to change the URLs that my application is
using and this enables me to do that very very quickly
um what's a real world scenario that you want to change routes like that well

02:23
when you're working on a team let's think let's say you're working in a
really big company uh let's think of like Wayfair that sells dozens and
dozens of different kind of furniture and stuff like that and maybe their
routes get broken down into tables chairs let's say tables and chairs right
but now they said you know what uh we have tables and chairs but we also want
like side tables so side tables is like a new route whereas before everything
was tables now there's also side tables right and so if there wasn't an easy way
to make those changes you would be going
through lots of lines of code to fix all these routes right now the other thing
too is that yes we made this the switch from Rainbow to to Do's but the
other wonderful thing is I don't have to worry about somebody like really
breaking my routes right if all my routes were in this

02:24
singular file like if all this stuff from my to-do's was in here and all this
stuff from my home was in my server.js and somebody starts making changes we
have to think about the maintainability of our code base over a long period of
time right if my route stopped working I know where to go and look to see if
things are working or not working right I can see all right did somebody mess
with my to do's and my my my re like my my root route if there's nothing wrong
here then I know all right if there's my if my to-do's still aren't working then
I can just go straight to the to-do's routes file and look here and figure out
what's going on but if I have everything in Just One Singular file
the chances of someone messing up my routes is very very easy or if somebody
decides to change one thing to another like it's just having that just extra

02:25
layer of Separation just makes the code base a little bit more maintainable
um over the Long Haul and so that's why I do it
um and I and I like it so that I can I can quickly change my routes on the whim
I know that folks if they're in the if they're in like say the to do routes
file they know that they're messing with
the to-do routes right like if you're in the to do routes file you know that
you're messing with the to-do routes if you're just in the server.js and
everything's there and you're making changes you might not know that you're
messing up the routes for the entire rest of the application so a little bit
more a little bit more abstraction which helps us not lose sleep at night when
changes are made that's kind of the purpose there cool

02:26
uh is it better to name each file to do JS or is it better to be descriptive and
call them route to Do's view to Do's controller to Do's that's actually a
really good suggestion right um that's really a good suggestion you
could have your file names be a little bit more descriptive so that you know
when you're looking at the file where the file also exists right so we're
looking at right now the to Do's uh router right if you're looking at the
to-do's router you could call this to Do's router
I personally just always look at the folder names anyway uh so I don't do
that because I think it adds a little bit more um complexity to a file a naming
convention that everyone would have to follow right and so just a lot of the
teams I've worked on we haven't used that naming convention typically we look
at folders and then files and that's okay um
that's up to you though you might join a team that has a different naming

02:27
convention and that's okay right and you might come up with a name if you
mentioned that helps you build out your 100 hours project whatever it is
document it and stick to it mm-hmm what am I sipping on I'm doing just uh
instant iced coffee what's the drip today this is my gnu shirt um yeah
your new Linux yeah as long as you're consistent
exactly you can make up any of the naming conventions that you want it's

02:28
just about being consistent and what works for you yeah cool
how do I check if something exists in the database before executing and
creating a new object we're not 100 there yet
um when we get to our our full stack apps that we're building together with
Instagram I'll show you how we don't have repeat stuff we're going to see a
small sliver of kind of the beginnings of that tonight because we're going to
be using IDs and data sets and all that fun stuff so we're going to kind of hint
that a little bit tonight and then we'll see it in in full action once we get to
our authentication I don't like to jump all the way right to it um because it's
just not something that we need to optimize for right now so it's one of
the things that we'll build up to but I don't like to show it right now just
because I think it gets folks too confused and just not something to worry
about for right now we'll get there I'll tease a little bit
tonight and then we'll get there over the next couple days
uh just gonna kind of wrap up a few more

02:29
of these questions and we're gonna start looking at the code um
the MVC video shows that the views report back to the client directly
instead of the view sending info to the controller and then the client does this
matter um so it kind of depends on what you're doing it depends on uh
how your MVC is set up right it can depend on the tools and technologies
that you're using the Frameworks that you're using the libraries that you're
using kind of like how this process happens
um it's also a little bit more muddled than a nice clean graphic could uh
present right so if we look at let's say
our to Do's controller we can see in our get to Do's yes we are using our to do
model which we'll talk through again today and we are asking it to render

02:30
right so we are asking ejs to render and then once it renders that file we are
responding so the the handing off to the
view is kind of intertwined right now in the controller um
and so the the actual like passing back and forth it depends on what you're
doing right now the controller is asking EGS to render and then responding with
whatever was rendered yeah so how true or not that is depends on
the libraries that you're using and and how you've written out your code to kind

02:31
of abstract out these different concerns all right so I think we got some of the
pretty pretty kind of standard question so far
if you have more questions that come up of course you can always use chat uh and
then the other thing you can do is just keep putting in the slido the questions
that get upvoted I'll answer at the end of class and then we'll also review some
on Sunday as well cool all right uh just so I can kind of get a
pulse check how are folks feeling with MVC so far
um how is I know there's a lot of like hopping jumping skipping but how are
folks kind of feeling with the the MVC got some arms got some Goods got some
great decent good 50 50 scared feeling great I seems like
folks are in a good spot a little confused when I get the broad

02:32
concept because that's where we should probably be not bad okay
cool let's take a look a little bit deeper tonight at some of the things
that we started introducing on Tuesday uh we'll keep asking questions keep
putting questions in the slido I will keep working through it so that folks
can get that a clearer picture and then like I said on Sunday we'll
have more time to go from the beginning uh for folks especially that missed
Tuesday's class I couldn't quote it myself yet but
broadly understand the concepts that's exactly where we should be
um little secret right now you shouldn't be able to code any of
this from scratch like if you did like if you could
you're you're like a like you're like a savant right like if you could go to all
this from scratch like no one does that no one would legitimately build all of

02:33
this from scratch if they're building a full like crud application right
I might be able to do it I'm sure I would miss a few things but that would
like not be a good use of my time why when I code all this from scratch
when I've already put together a beautiful template that has all this
stuff right like all the stuff already coded out for me right I could copy and
paste that and start with everything in the right place knowing that everything
is connected knowing that everything is is just ready to run it's got to do an
npm install uh put in my URL my EnV file and then run it right so
why would I why would I ever do this from scratch it just doesn't make sense
right uh and so I think I think that's something that a lot of people kind of
go into this type of lecture with where they're like Leon I get to Broad

02:34
Concepts but I couldn't do it from scratch that's okay no one does it from
scratch right no one would take the time to do all of this as long as you
understand all the Legos and how to put them together you are in the right place
um now as our application gets bigger we're
gonna have even more right we're gonna have even more like templated code right
and have even more things that would just make zero sense like zero sense to
have memorized right let's let's take a look at it real quick just to to
Hammer home this point real quick um there we go
so it makes a little bit bigger this is the off that I linked for you to take a

02:35
peek let's look at our let's look at our passport JS file here
you're not memorizing this you're just not why you're just not right
the best Engineers don't write this from scratch they know where to get the code
that they need they use libraries and tools to assist them right
track if you were saying travesty copy and paste it from documentation exactly
because we're all kind of building on top of the shoulders of giants right
somebody's put a lot of time into making sure that passport works right so I can
just link it and put it into my code right
right and so I think you you got to let that that you
chill take a deep breath let it out you don't have to have this memorized you're
just kind of piecing things together right there will be times where you have

02:36
to write a lot of code but a lot of this like glue and like building the project
is not where you put in that time yeah cool
are you gonna practice them you already have the templates all the starter code
that I share are your templates and like I said we're going to keep adding more
and more pieces onto these templates and uh the templates are already on our our
100 devs GitHub so you can always just go grab what you need and they'll stay
up forever so if you're if you're let's say you you leave the hollowed Halls of
100 devs you go off to join a team that uses PHP and then in two years you're
back to node right well come back and grab the templates hopefully they're
updated a little bit but that's it school's hammering hammering plagiarism

02:37
is bad into my brain really makes this Con copy and paste concept challenging
well here's the wonderful thing so here's the wonderful thing right
it's not plagiarism because there are licenses on the code
that we use right so uh most of my code is either GPL V3 or MIT and all the code
that I use is the same either MIT or GPL V3 and that means you can use it for
whatever purpose you want to use it for right and so
um one of the things I love about this code I have here is my database JS like
how we connect to the database right and if you're looking at this you're like
hmm that looks familiar because this is Brad's connecting to the the database
right this is the one we saw in the video but this code is MIT license so I
was like that's really elegant it's really easy to understand people can see

02:38
it and knows what it knows what it does I wish I could use it and then boom
laces as MIT right and so a lot of the code that we're using is
giving you permission to use it which is beautiful and it's one of the most
wonderful things about coding yeah uh people like MIT it's just the name of
the license uh the MIT license is a license that kind of just lets you do
whatever the heck you want with the code um there are plenty of other licenses
outside of that MIT is in the school yep exactly my T is the school but the
beautiful thing is you can always typically check the license on code and
and and do it so all of my code that we generated 100 devs will be MIT licensed
or GPL V3 so you can use it do whatever the heck you want with it I don't care
I'm working on licensing all of my other content so all the videos all the
homeworks all that stuff to be a free use license as well so pretty much
everything we generate 100 devs you could take it build a whole another boot

02:39
camp with it I don't care right like as long as it's helping people that's
what we want it to do right so um I just gotta I've been talking to
somebody just to figure out like what the best use like best license for like
non-code content is um so that we could figure out how to do that yeah hey blah
cool alrighty so um tonight we are going to look through
a little bit more of this code uh see the things that we're going to need to
better understand what's happening we're going to review the MVC structure and
then the two big things like I said are kind of seeing the deleting because we
have something interesting uh we we have in our application the ability to do
something like this all right so now I have three to Do's I

02:40
have a first try a second try and a first try and I can delete that specific
first try like if I if I go back again and I do first try again
and I can go ahead and delete like that specific first try so we can see that
the first try that was above got delete the first try that below got deleted
right so we haven't seen that before right we haven't seen this ability to
delete specific elements exactly when they're the exact same text right like I
said we're building up to being able to have a little bit more like realistic
code and so we're going to see that tonight like how does that work how are
we able to delete stuff that's exactly the same and know which one we're
deleting and we're going to see uh the updating and a little bit more of
the egs2 that's going on here so I want to kind of walk through the pieces of
the application and then dive deeper into the codes that's where we're going
to start uh if you need the code everything of

02:41
course is always Linked In Our Discord in the follow along materials Channel if
you're watching this on YouTube or somewhere else please come to Discord
that's what makes this program work um come get the help that you need come
help others learn we are Community taught so all the coding is on Discord
come grab it come hang out come answer questions help get help that you might
need alrighty so here is our server JS file and on
Tuesday I didn't really walk through it but there's some things I just kind of
want to bring back to mine uh just so that we understand what's happening if
you've cloned down my code you're gonna have to do two major things one you're
gonna do the mpm install right npm install sorry yeah npm install will give
you the the lovely node packages or the npm packages that you need to make this

02:42
work and you need to in your EnV file right in your EMV file put your
string uh so when you use Atlas and you create a new cluster uh it'll
give you a connection string all you do is Click connect it'll give you that
connection string you throw it in here with the appropriate username password
and make sure your IP address right make
sure your IP address is is accessible if
you want to open it to everyone you want to White list all the IP addresses so
if you've just cloned down my code uh why why wouldn't you be able to why
wouldn't you be able to add new to Do's to my to my application you have all the
code why aren't we having a bunch of Griefers put new stuff here
exactly only my IP address is white listed at the moment meaning unless you
have unless you have the same IP as me you can't actually wind up making

02:43
changes uh to this application cool alrighty so you've cloned down the code
you've put in your connection string from mongodb right uh now you should be
able and you've done your npm install now the application should work
um I do npm let's go ahead and clear this real quick
npm start to start my server and we're going to notice something
slightly different about the way the server is running now um
slightly different than we've seen in the past and like a h lean back lean back
just off your shoulder and leave I remember remember think about this too
if you're like in your late 20s early 30s or older we had it real easy because

02:44
in the club this is all we had to do this was it this is what we were doing
in the club that was it you see at home one more
time for the new folks boom that was it that's all we had to do have you seen
these tick-tockers have you seen these Tick Tock nah
um I'm glad I'm married I already have my kid foreign
something's a little different here though it's a little different here right
sounds a little different here what what are we using here that we haven't used
really in the past some of you might have used it nodemon
uh so nodemon is running uh and what nodemon will do is it'll restart my
server when I make changes so instead of having to like start
stop or make my change start restock restart my server each time nodemon is

02:45
listening for those changes in my files and when I make changes in those files
it automatically restarts my server for me if you look at my package.json I have
my scripts section and this is where that npm start comes from right I can do
npm start right I can do npm start and it's going to do the command to do node
mon server.js right so it could be we could have made npm start do node
server.js and that would have started our server like normal but I've set mine
up to do nodemon server.js now I don't introduce gnomon right away because I've
been in interviews where folks have painfully not known how to start and
stop their server uh so I always make for make sure folks know how to start
and stop their server with node and then the file and then we introduced nodemon

02:46
but please if you get used to nodemon don't forget that you do on occasion
especially in interviews if you're using like their box uh like their code or
whatever they might not have node Mon and you might have to remember to start
and stop your server so just remember that um eventually we'll also have like uh
development versions of our code and production versions of our code meaning
that we might have some stuff running during our development process uh
testing linters hinters all that stuff that might not be running in production
and so we might have like npm start Dev or npm start prod so we'll start to see
more and more kind of like these little scripts that help kind of our server
start and run but someone got really excited about uh Scripts
all right so we saw that and that's how our server is running and
I want to start off with our server.js file just to kind of briefly go through

02:47
everything we've covered a lot of this in the past but let's see it all we are
using Express this is still an express application it's still our wonderful
crud apps that we know and love and we are using Express to help us build out
our API we're using Express for all the wonderful things that we've learned that
helps us so we don't the right raw HTTP methods we have to write raw FS modules
all that fun stuff Express is doing all the heavy lifting for us to help build
out our API cool next we have our connect DB and connect
DB in this case is a variable that's going to be holding something whenever
we see this require we're going to a different file to get something
sometimes we'll go to a different file and we'll get a function sometimes we'll
go to a different file and we'll get an object sometimes we'll go to a different
file and we'll get a link to another file right like that that weirdly can

02:48
happen right in this case I'm going to my config folder and then to my database
file so let's take a look at that here is my config folder and then my database
file and so in this database file you can see that we export connectdb and
connect DB is just a function it is a function that enables me to connect to
my database using Mongoose right so Mongoose if you start to build out your
presentation is a little bit different than mongodb we get a lot of little
extras that are going to help us talk to our database via our models we get a
slightly different Syntax for certain things that we're going to see tonight
create instead of insert one little differences here and there but it can
really help us to build out our application a little bit more a little
bit a little bit easier and so you can see in this file what is getting

02:49
exported is this function right here and
this function is what connects us to our database now there's something really
interesting about this if this file spits out a function if we want this
file to do its job what has to happen what has to happen
yeah we have to call it a function don't do nothing it's happy to sit on the
block all day long no action right if we want our function to do something we
have to call it so we can see that this is a function that connects to our
database we see that we spit out that function
but when we go back to our server.js you can see that here is where we actually

02:50
call it right those parentheses are letting us know that we are calling that
connect DB function that function came from being spit out of this file
so it's not enough to just require that function we actually had to run it or
else we never would have connected to our DB
right and we talked earlier earlier that this lovely connection this database
file is something you should be familiar
with it was from the videos this is Brad traverse's connection I love this one
it's very clear very easy to see and would you know how to code this from
scratch you might be able to do it after a few times but you don't have to you
can just include this file right you can
include this file in your projects going
forward it is MIT licensed right and you don't have to think about it you just
know that this is going to connect to your database no problem now there are a
few other things in here that are really helpful just as a reminder you can see

02:51
that we're trying to connect to our database but the connection to our
database isn't here we have this process.env DB underscore string huh
what's that mean yeah it's an environment variable we have to go to our
e and v file right to find this DB string and if we look at our EnV file
our environment variables are listed here I have an environment variable for
my port and I have an environment variable for the connection to my database now
how how does my application know how to use these

02:52
right one of the the weirdest things about node to me is that this is not
built in this is not built in like node by default doesn't like recognize this
stuff and so if we go back and we look at our server.js we had to say hey
server listen for these environment variables know how to use this EnV file
right know how to go find it hey it's in our config folder and then there's an
EnV file if we don't have this string any of the environment files right any
of the environment files that we're trying to use just won't run
and so a lot of folks have been asking me recently about other
other ways of running our code right remember node is the environment in
which we're running our code but there are competitors there's Dino there's bun
and all these kind of up-and-comers that
want to take away market share from node and they're adding a lot of quality of

02:53
life improvements meaning that in say bun EnV files just work you don't need a
third-party package right so that's something that's pretty cool that some
of these newer environments give you access to without needing something
extra right and so I think that's that's something really cool like this is one
of those things where like if you're in an interview and somebody asks you is
like what do you think about node maybe like well I love node it's helped me
build wonderful applications but I love some of these up and comers that have
these quality of life improvements right like having EnV files built in so so
much of interviewing is being able to like talk that talk and it's one of
these talking points that helps you sound you know you got it in the bag you
know what I'm saying I'll keep that one in your back pocket add it to your your

02:54
Anki deck uh and we'll be Wicked cool so our our server address file has
connected to our EnV files we've connected to our database uh we're we're
pretty much Off to the Races here like we're in a good spot
um why the heck am I using an EnV file anyway just as a quick question
yeah it's my secrets exactly it's the stuff that when I push this code to
GitHub I don't want folks to see I unfortunately have to share all my
secrets with you so that you have a application that works uh because
writing readme files is is just not something I think to do in the moment
so thank you for all the PRS that have come in through with with how to do it
uh but for me I I push this EnV file so you could see it but I limited the IP
addresses on my end right but for y'all there's gonna be a lot of secrets
that you don't want to push up to the Internet especially as our applications

02:55
get more and more complex by the end of program we're gonna have
things like our connection are cloudinary like where we store our
images some of our Heroku stuff where we're hosting our applications we're
gonna have so so many Google Google like analytics stuff we're gonna have um
what are some other ones that we're gonna have some some like Fancy Search
stuff some contentful stuff they're gonna have so many different things that
are like keys that we just wouldn't want
to push up to the to the interwebs right because somebody would just take them
and be able to do whatever the heck they wanted with our our services so we put
everything into the EnV file and we make sure that our EnV file is in our git
ignore so you would dot EnV and boom somebody said what about logs
that's actually really important to uh to keep in mind

02:56
if you have ever committed changes that included uh like your EnV file before
you add it to your git ignore so you can't like you can't have like pushed
your keys to GitHub and then realize it and then like delete the file add it to
your or like add it to your git ignore and then re-push it's still like in your
git history like your commit history on GitHub so just be careful about that I
know a few people have gotten got by doing that uh so that is something
worthwhile to bring up cool all right so we know we're using Express we feel
comfortable with that we've connected to our database we feel comfortable with
that we have uh we're letting no know that we want to use our environment
variables so we can use them throughout our application now and the other two
things we saw on Tuesday is that we have linked to our routes so we're going to

02:57
listen for the requests come through and then hand the request off to the routes
and the routes will know which controller to use based on not only the
route but also the what very very oddly phrased question but the route's gonna
know which controller to use based off of the route and one other thing
yeah the method exactly the route's gonna be paying attention to not only
sorry the routers will be paying attention not only to the route but was
it a get a post a put a delete and based
off of the matching route and the method it'll know which controller to use
beautiful all right uh next we're saying hey we're
using our specific view engine which is ejs that's in the game right without
without this line we wouldn't know what views to use like how we're going to
handle our views and so you could swap out ejs to something else but for now

02:58
we'll be using it eventually our views will be handled by react cool
uh we also set up our public folder so this application has a lot of stuff
going on if we look at our application what type of files do we already know
just by looking at this what type of files are going to be in our public
folder remember the public folder right the public folder hosts all of our
static files uh so we don't have to write individual routes and then like
individual controllers for them which would be a pain in the butt
yeah we're looking at this right now we know that in our public folder is going
to be our CSS because we can see that there's red color and if we're like
clicking on stuff the only thing that can hear that clicking is our
client-side JavaScript so in our public folder will definitely be some CSS and
probably some javascripts because we can like click on stuff and there's yeah so

02:59
if we look at our public folder public we can see that there's a CSS
folder with our style.css and there's a JavaScript folder with our main JS right
so that's within our public folder then we have these two lines right here uh
and these two lines replace something called body parser and body parser is in
the name meaning that we can parse stuff that comes out of the body so remember
whenever we're making a request to the server there's a lot of information that
comes along with the request and we're able to yoink the stuff out of those
requests so that we can use them now in our controllers to then go make requests
or hand them off to the Views but we have a lot of times we need to pull data
out of the request what was in the form when the form was submitted
um what exactly was clicked on when you clicked on the delete like what what
item are you trying to delete all that stuff we're pulling out of the body and
these two lines help us do it cool uh then we're telling our
application to uh use these specific routes and so this is something that's

03:00
built into Express this routing is now handled by Express and so if we're using
the default route we'll use these home routes and if we're using a to-do's
route we'll use this to do routes file so just kind of separating out our
different routers just to make our lives a little bit easier a little bit more
flexibility and a little bit more maintainability because somebody's
probably not going to mess up this bit of code and if they do I know exactly
where to go look and then the last little bit here is this app.listen and
we are using our environment variable for the port why am I using the
environment variable for the port like what is that setting me up to do
yeah deployment exactly eventually this this application is going to be hosted
um we'll use Heroku to host it in the near future
and that Heroku is probably going to set

03:01
their own port for their own servers and so it's nice to not have a port
hardcoded because that might not be the port that Heroku wants to use or
whatever hosting provider you are using so we'll be using Heroku in the
beginning we will see some other um we will see some other
we will see some other hosting providers as well Rook is just easy to get up and
running with from the beginning uh historoku used in a professional
setting isn't more for small projects it's definitely used in professional
settings especially for a lot of like startups or like kind of simpler product
companies it's just really quick um you wind up paying more money though
so a lot of startups will use Heroku just to get up and running get their
MVPs out and then once it's like set up then they might switch to something else
that gives them a little bit more flexibility in terms of like

03:02
everything including price um that's not true for every company so
a lot of people stay on Heroku just because it's easier it's also really
popular in certain development communities so Heroku became really
popular in the Ruby on Rails community and then you'll see like some other
hosting providers are more popular in other communities
um it just depends on the languages and who who's kind of like building around
those tools and systems cool all right cool alrighty folks let's go ahead and
take our break uh if you are new around these parts we like to be healthy we
like to if you're able get up move around hydrate take care of yourself
during these five minutes uh when we come back from the five minutes uh we
are going to look into uh some of the bits and Bobs that we didn't get to last

03:03
time I wanted to walk through all the stuff that was here in the in the actual
structure of our code we're going to review MVC quickly and we're going to
look at that deleting and we're going to look at the updating just to walk
through it together as well uh we had two minutes added to the timer brat Kane
thank you for the extra two minutes this
will be a seven minute break folks oh so luxurious if you haven't yet already
please go ahead and check in exclamation point check in I will give you the link
for today and if you're on YouTube go ahead and give it a like and uh and a
comment just help the algorithm to boost us on the YouTubes
alrighty seven minutes on the clock enjoy the tunes I'll see you soon
alrighty folks come on back come on back all right so we walked through
the server.js file uh there's a lot of other little things that are in here
just quickly to kind of touch on them before jumping back into it uh there
there was there was a newsletter raffle we'll get to that after the next break

03:04
uh the folks that won the past three newsletter Raffles uh
they you've all gotten a message from me here on Twitch
so check your twist messages uh grab a time looking forward to uh chatting with
y'all all right so we have some other wonderful things
in here my vs code this is just like my settings for vs code uh I have things
like larger so you can see them on stream right larger because I've seen
you want you to see them on stream you can add this to your git ignore like I
should put that in my git ignore so you don't have my settings uh but if you're
like why is the text so big that's what it was for the config right now is
holding our database connection and our environment variables right but starting
next week it's also going to hold like some of our stuff for authentication as
well controllers for our controllers models for our models uh node modules

03:05
comes when you do your npm install but it won't be there when you clone it down
of course public for our static files some folks are saying could you put HTML
in here you could but we're not using we're not like serving up any static
files that way we're using EGS to kind of do all of our HTML but could you do
it yeah of course uh routes for our routes views for our views and get
ignored so we don't push stuff up to GitHub or elsewhere we might push our
code and then we have our package.json which has all the packages we're using
for this application and the lock that comes through using it and so you can
see in our dependencies we're using our DOT EnV for our environment variables
ejs for our templating Express to build out our API mongodb and Mongoose to talk
and connect to our database and then node mods that we can restart our server
without having to stop and restart and then the server.js file which you
already saw and our proc file where does the proc file come from what do we need

03:06
that for nice yeah for broken when we push the
Heroku that's what we're going to use that for
true give it get us all the give us all the experimental features I want them
all right so any questions about folders or folder
structure or kind of the little things that are happening here
before we look into the MVC a little bit more makes sense to me okay yes tons
has go away chromium yes EGS is our templing language it's how we

03:07
plug different stuff into a template to spit out HTML if you're new we've been
building up to this for a while so we started with raw node then we added a
little bit Express we built up we built up we built up so this is like the sixth
or seventh class and a longer series building crud app so if this is like
brand new to you probably want to go back and watch our previous videos on
YouTube exclamation point YouTube to get access to those
will this be the standard structure for the rest of program we're going to use a
structure similar to this there will be things that we add to it some ways of
doing things slightly different but for the most part it'll be this structure
why start with why start with ejs and not react from the start
um because a lot of folks won't use react professionally and it just adds a
whole layer of complexity that most folks don't need to start when folks are
learning how to code especially for folks that are new learn how to make

03:08
stuff work first so that you can build and then once you're building think
about and say oh it'd be really nice if I could do this or it'd be really nice
if I if I didn't have to worry about that and that's where
the react can come in but when I've started with react because I've tried it
I've been teaching for 10 years I've tried starting with react my students
always got lost and they just gave up um so I'm gonna start with react I want
something simpler that gets you just injecting stuff into your HTML
um using it like a template and then we once we learn like the limitations of
that then you can add something extra on top but jumping straight to it uh it
just doesn't I just haven't seen it be really useful as a learning mechanism
I'd rather you have a strong base exactly below
um the travesty video uses handlebars is that used professionally yeah

03:09
um it's kind of like what you a lot of this is like preference right you can
argue for like why one is better than the other but a lot of them comes down
to like your personal preference I use ejs because it's only two things that
you have to learn you have to learn like they can have stuff in code blocks and
you can have stuff that you're inserting like variables once you learn that you
can template whatever the heck you want so I find ejs to be more simple to start
folks off as opposed to something that has its really own syntax it's like
completely like not completely but looks different than HTML just a little bit
more of a shock now pug might be a little bit easier in the long run but
that initial understanding I want people to see the connections between
everything and so with ejs it's easier to see those connections mm-hmm

03:10
are any not used professionally no like any of these big ones probably has a
community of folks that use it right and so like I said the other big thing
is that this isn't like a learning to code bootcamp
this is a getting a job program and you are all going to leave to go to
different companies that all use wildly different stuff
it's not worth it over investing in one narrow piece without having a larger
understanding of the broader landscape so I'm here to give you the broader
landscape and then you can get narrow in on the job yeah
jokes on you I also learned how to code it's the goal right coding is the
mechanism for getting the job right cool I'm gonna take a quick peek at some of
these uh slido questions real quick uh the MVC lecture submission is that a
PowerPoint or a video oh whatever the heck you want
um probably most folks are doing like a Google Slides or a PowerPoint or

03:11
slides.com type thing your favorite Marvel versus Camp comp 2
character I'm a big and I know this is controversial Spider-Man Captain
American combo web into final Justice like like that's that's the uh that's the
combo of combos uh if we have interviews to focus on is it
okay to fall behind on homework tricky question Tricky Tricky
I always want you to prioritize your interviews but we're really not at
the interview stage yet for the support that we're going to give
post program I need to have seen that you've done the work I I can't in good
faith get on a call with someone and say
yeah they're great when you haven't done the homework and you haven't been here
in class right like that's not something I'm going to do and so I need you to

03:12
have done the things that we've asked you to do so that I can in good faith be
like yeah this person's awesome here are the things that they've built they were
always here like like that's what I need you to be doing yeah
so always prioritize like the the interview and getting the job but know
that we're not at that phase-it program so I'm still expecting you to like do
the work if I fell behind Can I submit the old
work with MVC sure if you want that's okay
are we gonna do a back and mega review we will yep we will after we get through
authentication looking for more along MVC questions though foreign
if we want an app to be we built to be able to access a DB do we make that DB

03:13
public or there are ways to approve the app um So eventually the only thing that
will have access to your database is wherever you're hosting your application
so like Heroku would have access to your  Atlas right and nothing else so
the only way that you could add stuff would be through the actual site through
the actual like the the application itself so we'll get to that yeah mm-hmm
why is client-side.js and CSS not in the views folder because the JS and the CSS
has like it's it's not part of our it it's not part of the view that is being
rendered like we're using our views to like generate something and the thing
that our views are generating is the HTML so we we have the way we set it up
now that we can continue to have our static files like CSS and JavaScript
being public that means we don't have routes for them other view type engines

03:14
might have the CSS and JavaScript Incorporated right now we've kept it
separate just to have a little bit more separation of the concerns there but
know that you could be using a certain thing for your views that has everything
together uh the way we're doing it right now we just don't but you could
good question is there another way to do it besides
MVC oh yeah boy is there there are tons of other ways to architect your
applications we'll actually see some of them like if you've already dipped your
toes in to react um or any of the other like front-end
Frameworks or libraries or even like angular there's like MVC and VVC there's
like a bunch of them that are kind of riffs on it but there are also other
completely different paradigms MVC is pretty popular it's pretty easy I think
to wrap your brain around um especially for the Apple types of
applications that we're building that's why we start there yeah

03:15
but there are plenty of other things to do it other ways to do it yeah
can you so there's I'm looking at there's any other um
so there's some folks are saying like are there other folder structures for
like what we have there will be like like I said like when you join a team
they're gonna have a way of doing it right um they they're gonna have a way of
organizing their code they're gonna have different folder structures and so uh
like I said it's not it's not worth it to really over invest in one area

03:16
um but know that when you join your company they might have a library folder
some other ways of slightly organizing it I think this is pretty clear that
there are um different like we can see that there's
controllers there's models there's views and so if you know MVC
um you know what you're doing you know yeah and Bloss said a good team will a
good team will give you time to find your way around a repo exactly a good
team like the first month is just like getting comfortable with the code base
um sometimes even like the first three months if you're on like a really big
like a really meaty type of team that has a lot of like pulling from different
areas of the code base um and a really good team gets you set
up making like really small incremental changes until you feel comfortable
throughout the entire code base it's actually one of the questions I
recommend folks ask once they have an offer once they have an offer
um that's one of the things you might ask is like what does onboarding look
like what does the developer experience look like in the first three months how

03:17
quickly will I be able to push code to production these are all questions that
we want to bring up to have a better understanding of like are you just
thrown into the into the deep end or they actually support you through uh the
first couple months cool um here's one other question I saw here
because I'm only doing MVC type questions right now
uh can you explain module dot exports um so instead of having our code in one
giant file we want to be able to separate our code out into individual
files just so they can be in charge of doing one thing well for an individual
file to do something but be used somewhere else we have to like spit it
out so that it can be used somewhere else right so we saw that with our

03:18
database.js this database.js is really just a function and module.exports spits
out that function and then when we're in our server.js we can require
that file or that function that's been spit out so the module exports is just
spitting something out that we can use somewhere else that's it um
does this organization of folder slow the speed oh this does on Tuesday not
really because we're talking about like speed of light through all this stuff
um if you did have way way more complex structure
um it could it could slow things down but at this level not really
you have to do a lot for this to be like

03:19
the the slowing down of your application uh so I had a good question if devs are
changing jobs every two years and onboarding is three months they are
onboarding 1 8 of the time yes well I didn't I'm not gonna check your 1 8 math
but yes that's kind of one of the rough things about hiring developers and why
this process is so wild right they'll tell people the reason the becoming a
developer at a company process is so wild is because
What It Takes most companies I I wonder if folks remember this if there we have
some ogs in the in the house how much do you think it costs to get an engineer
that you're ready to hire through the door like all the recruiting all the
interviewing like through the door how much does it cost

03:20
thirty thousand yeah exactly around 30 000 to like get them in the door and
it's different at different companies right some companies pay way less some
of the companies probably pay more but you're talking about like 30k like all
is said and done including um the things maybe they're spending on
Advertising job posting recruiter uh time for employees to interview so like
you're 30k in the hole and the person hasn't even started yet let's say
they're making a 100K a year right we'll just use that for Better Math right and
it takes them three months to really ramp up right so that means before you
ever realize if an engineer is going to be effective on your team
you're already 60k in the hole Plus benefits plus laptop plus all the other
stuff that you have to do right so like imagine being 60k in the hole and then
you realize they can't code so that's why there's so many weird
things that happen during the interview process where they want you to leak code

03:21
your brains out or they want you to do these different types of stuff or they
need to talk to so many different people because it can be a serious cost for a
lot of companies um so that's just something to keep in
mind yeah now a lot of companies realize you know what if we're just good at the
on-ramping right then it doesn't matter right some companies actually invest in
training their their engineers and the systems that they want them to be
trained in and so a lot of companies might have a less
rigorous interview process and that could be a sign that they might have a
better onboarding process right where they just get Engineers up to speed so
they don't they lose less people and they can be less weird during their
interview process so there's a lot of different things that can happen there
um and it's a very hard thing that's why the actual hiring process can be all
over the place for different companies which companies are those

03:22
uh so I always have these different ideas right and one of the ideas is like
I've interacted with hundreds of companies um just through my students having
interviewed there I know what companies are good companies to like interview at
I know which companies are good companies to like
um to work at and it's it's always been something I wanted to like publish
um and my Ed at resilient coders actually has this idea of like an
equitable employment Council um I have a list I keep the list I've
made this public I have a list um where companies like agree to like do
things equitably and then they get put on the list and like that would make it
so they had more candidates that were applying uh so blah let's add that to
our talk on Friday I would love to have like folks that graduate 100 devs having

03:23
access to that type of system um yeah and then the other fun thing is like
I want people to be paid like I want people to like I want people to learn
for free but that's not Equitable because not everybody has the time or
privilege to do this without getting paid so I want people to get paid to
learn and so one of the things that we had talked about before which is like
when you graduate you get an nft right and so that nft could be your ticket to
access the list and so you could access the list until you get a job and then
maybe you sell that nft that you got for
free and then somebody could buy the nft to get access to the list right so now
not only did you get access to the list like get your job but then you resold it
and you got paid for all the work that you did to graduate 100 devs so if
you're excited by these ideas I have too much stuff on my plate uh me and blah
are talking a lot about this on Friday but next week we're going to talk about
a hundred maintainers right so we have all these little projects I think could

03:24
make it really great for 100 deaths we have lots of senior Engineers that want
to work with you all to build these ideas and so if that's something you're
excited like hey I would love to be on a project team that did that to help
everyone let's make it happen so next week I want to share if you want to join
some of those project teams um and and start building these things
that can make the community better um show up next week and we'll talk about it
cool all right so we answered some questions we've talked through the
entire code base we've seen all the bits and bobs
let's talk about some of the things that um
let's talk through some of the things that we didn't get to talk to on Tuesday
uh which was this like deleting thing that's happening and and
um let me delete first try here let me delete second try here let me add some

03:25
stuff here first Troy cool so we got our first try let's do our second try
and let's do our third try and then we're going to do another first try
uh Nemo yep it's cohort two you want to be following on YouTube and then join
Discord and join the ketchup crew let's add another first try here
thank you skint appreciate that all right so now we have the the first try
second try third time first try and let's take a look at it um let's take a look
let's take a look at this in the inspector just to see what's happening here
uh when we look at this in the inspector what do we notice about these L like
about this li like look at these lies what's a little different about the Lis

03:26
than we've seen before maybe what do we notice about these Li's that
are different than allies we've seen in the past they have this data ID
um and we can see that the first try has a data ID of like 7f2 7f3 7f4 seven to
five um so we can probably get a realistic
idea of what's Happening Here but each of these allies now have their own
individual ID and if we look this first try and this second first try are
similar in text but they both have different IDs like this is 7f2 and this other
first try is 7 F5 so while the text is the same the IDS are unique where the

03:27
heck are these IDs coming from mongodb automatically generates an ID
for every single document in your collection so if we actually go look at
our documents and our collections we should see some stuff that matches
Let me refresh here all right I gotta change off of this Virginia East
Coast I need to be on the the West Coast this is just adding to like the
mind-blowing nature of this like our request to like leaving La going across
the country coming back and like and that's being streamed through twitch
which is them being sent to all these different places like what
that's how we know we're living in the simulation anyway all right let's take a

03:28
look here we go is our first try all right here's our first try with 7f2
right 7f2 and then here is our last first try with seven f five
so we can see that these individual documents both have an individual ID now
the wonderful thing is that whenever we create a document right
all right whenever we create a document that document automagically that's for
you blah automatically creates the ID so it's not something that we've told
to do it's not something that we've like asked it to do just whenever you create
a document it also creates an ID and this creating of the IDS is going to

03:29
really pay off because now we have ways of targeting specific documents right
starting specific documents and and we can delete those specific
documents we can update the specific documents and then as we start to add
more complexity to our applications the way that different bits of data kind of
works together in is that we're able to tie everything back to IDs so our users
will have an individual ID and then each post that the user makes will have its
own ID and so we can figure out who made a post by looking at something like a
poster ID that ties back to the original user so these IDs and I don't want to
kind of big brain us right now with that but eventually these IDs become really
important because how we're going to connect different types of data together
that may be in different types of collections we can go ahead and keep
track of IDs inside of our documents and tie everything together cool

03:30
uh is there security risk with IDs being in the HTML there are some things we
have to think through like I said we're this is not like production ready code
we're being bad is writing bad code um there will be things we'll do in the
future where it's not like directly because if the IDS are directly in the
code and you can make client-side requests and you could like do stuff
with the idea if you wanted so yes there are ways that you could use this uh
advantageously but right now we only think about that boom
Tina says bring it all right so we can tell that this to do a first try is the
same as the to do first try but they have different IDs and so since they
have different IDs right since they have
different IDs we're able to Target those elements individually but

03:31
how do those different IDs wind up in our HTML like how how did 7f2 and 7f5
both show up in our HTML so that we could use them and yes it's part of our
ejs it's in the game so let's go and take a look at our ejs and see where
this is happening where would I find my ejs foreign I gotta record this
I was running through the six with my woes I was running through the six with my

03:32
woes I was running through the six with my woes
I was running through the six with my woes hey does this work foreign
don't work out I got another career lined up I got another career lined up
let's go only fans hold on I got a VIP them oh who said it there you go Dominus

03:33
Prime oh where are you at where are you at there we go
there we go Dominus Prime he got VIP my friend all right foreign [Laughter]
crispy nugget we gotta get this EP out we gotta get this EP out all right
oh I didn't run ads during break I'm sorry if folks are getting ads I
apologize I'll run the ads during this upcoming break all right

03:34
so we are going to look in the ejs for where these IDs are being
added right right so we saw that these IDs are making their way into the HTML
and these IDs are unique for each document in our to-do's collection where
the heck are they coming from we know that if it's if it's rendering in our
views then we should go to our views folder and look for that to do's ejs and
so inside the to-do's ejs we have some wonderful code so we have our code block
that opens right with the carrots and the percent signs or modules or whatever
the heck you want to call them our code block closes here and the cool thing is
that this code is a for each Loop before we've seen we just saw like four Loops
but the cool thing is you can use even like the newer

03:35
um the newer kind of es6 plus type syntax inside of here and so I have this
lovely four each uh on the to do's and so all of my to-do's from my document
are being passed into this ejs right in our controller we could see where all
the to-do's are being passed in and since there are four documents in my
collection we noted this for each Loop is going to run how many times
four times exactly looks like bees people do call them bees like I think
that's what a lot of people call them these days they're like these are biggies
um yeah this this for each Loop is going to run four times and each time it runs
it's going to create this Li and the cool thing is that we now have
this data ID property right this data ID property right

03:36
and I can plug whatever I want into this data ID
right I can plug whatever the heck I want into here and the other cool thing
is that these data properties on HTML5 plus we can actually change this to
whatever we want right so there could be um
there could be I could call this data rainbow if I want it it doesn't matter
we can we can change this to whatever we want data zebra doesn't matter
right the cool thing about these lovely data attributes is that you can call it
whatever you want right and so I'm going
to keep it as our data ID because what I am doing is grabbing the ID out of the
document right and so if we look at our documents we go
back to our mongodb we can see that each of our documents is going to have an ID
property to do property a completed property and this like underscore V
property as well right and so what we're

03:37
going to do is we're going to yoink this
as we build each of our allies right and so if we look
our Li we're going to give it this lovely class and we made up this data
attribute to be data ID and we're going to plop the ID in remember this l e l is
the element right each of my to Do's remember it's going to run four times
each time it runs L is going to represent a different document in that
collection right so the very first time this runs it's going to be the document
with first try so l or El will represent the document of first try the next time
it runs it'll be the document of second try the third time the document a third
try and then the fourth time it is the other document with the text of first
try so it's just our parameter that's holding each of those individual

03:38
documents and the cool thing is that each of them will actually just be a
what it's always just what's foreign each time it runs yeah
it's just gonna hold an object each time that this runs right it's going to hold
an object and so the first time that it runs the object will be the first try
object the next time it runs it'll be the second try object these objects are
coming from our collection and since it is an object right since it's an object
we can grab the properties of that object so the very first time this runs
we're going to grab that object and we're going to grab the ID property off
of it so that way when we actually see in our HTML there will be a data ID and
the value the value that came out of the

03:39
document right so that's how we're going to plug in the individual IDs for each
one why is it underscore ID because that's the property on the document that's
that's what automatically creates for us and so we're going to use that to
our advantage cool all right so now we're able to build out
these lies that all have their individual IDs right welcome Ultra uh
each has their own individual IDs and these individual IDs are coming from the
actual documents themselves or grabbing that ID property off of each one right
and plugging it into the Dom eventually right here so L is going to be just a

03:40
bunch of objects exactly because remember this is just a fancy for Loop
and all this is doing is looping through all the documents that came from this
collection right we could step back and see how it got the documents but let's
focus here for a second and just know that we've passed all the documents
we've handed all of them off to our ejs template and now we're going to Loop
through all four of those documents and L or short for elements just going to
hold each of those documents one at a time the very first time it runs it's
going to grab a different ID than the second time it runs because that's a
different document from our mongodb collection cool
how does data ID know to go to mongodb and get the ID it's not that smart we've

03:41
already passed all of the documents into our ejs template just like we've been
doing in all the past of our credit apps we've already passed all of those
elements into our ejs now we're just looping through all of those objects all
those documents that came from the database I'll show I'll show that again
just so we can see it in a little bit but we already have all four documents
all four documents have been passed into this uh ejs template and now we're just
looping through each document one at a time uh don't custom don't any custom
attributes work yeah any any any data whatever you can you change this

03:42
whatever you want it could be whatever you want cool
all right I also have some other Fancy Pants stuff here
um that I that I like uh what is what is this called here what is this code here
yeah it's a ternary exactly so instead of having that conditional
logic that we had before like if we look at our old code um look at our old code
we had like this conditional if completed equals true then we add this

03:43
span else we add this span so I did a ternary which is kind of like an inline
conditional and I'm saying hey is is the document have a complete does
the document have a completed property of true if so give it the class of
completed and if it's not true like if it's false give it the complex the class
of not right so I'm just I'm just going ahead and uh
either giving it a completed class or a not class and where could I go to see
what these classes do yeah we can go look at our CSS which is
in our public folder if we look at our CSS uh we can see that the completed
class gives it the line through in Gray and not just has it be underlined right
so what we're doing is we're just giving you either the completed class or the

03:44
not class using that uh delicious ternary ah
cool let's go back and take a look at our to Do's ejs so we're going to Loop
through all four documents that are in our collection we're going to put in the
individual IDs we're going to use this Turner to figure out whether or not has
to complete it or or not class we can actually see that completed or not
classed here in the inspector so if I click on the first try um
uh it it now has the class of completed you can see it right here if I click on
it again we can see that it has that class of not right so I'm able to toggle
that class using my ternary cool uh can we see that in mongodb yeah sure
so if I let's say I click on third try third try is the only one that has the

03:45
completed class um so that should be the only one that is true
let's refresh here and we see uh first try is fall second
try is false but third try is true and then the other one is also false as well
the off calling from ejs is super annoying it's just you just have to tell
vs code that you're using ejs um I haven't I haven't set the file type
down here to be ejs you can like add it and like change your your uh your
language and there's a way to do it for ejs
yeah there's an extension and stuff like that cool

03:46
um so we are taking all four of those documents looping through them adding
the Lis that have the individual IDs and why are we going through this trouble
why are we going through the trouble of adding the IDS again
yeah it helps us stop with the duplicates we know that each of those
Li's is unique exactly uh whatever use Morgan yeah we'll use that in the near
future cool all right let's just real quick
show how we're getting all the documents into this ejs file so folks who are
curious about that if we go to our to-do's controller we can see in our
to-do's controller our get to Do's function and that function goes and
finds all of our documents right and then we're passing those documents to do

03:47
items into our ejs so this is something we've seen plenty of times before
um with our previous crud examples we are going to our database we are
finding all of the documents all those documents are now stored into do items
and I'm passing to do items into my ejs template with the name of to-do's so
wherever I see to Do's inside of my ejs uh it's just the things that came back
from the um from the the database now there are some interesting things
that are here that are a little bit different
um what's missing from right here that we've used all the time in the past
yeah we have this we normally have two array why do we need to array right now

03:48
why why don't we need to array yeah because we're using Mongoose uh and
Mongoose kind of makes our life a little bit easier does a lot of heavy lifting
for us and so Mongoose already knows that hey you're probably going to want
like an array of these objects and so it just does that for us right just take
some of that heavy lifting off of our shoulders and does it for us so we have
here like this to do fine we don't need the two array it just kind of just works
cool all right uh so we're gonna take our break now when we come back from the
break uh we're gonna dive deeper into looking at the deleting and how we're
going to use those individual IDs and the updating how we're going to use
those individual IDs and then we'll answer any other questions that folks
have all right folks let's put seven minutes on the sorry five minutes on the

03:49
timer and we'll be back soon cool all right everybody Welcome Back come on
back come on back we got a couple other big things we want to do and then don't
forget we're coming back on Sunday uh for office hours and going through this
kind of like more step by step so if you
missed Tuesday's class or you still have
a lot of questions no worries we'll have
office hours on Sunday then next week oh
boy we got a lot a lot we got a lot next week a lot of little stuff that we've
been working on behind the scenes uh and
then also get to authentication so super excited for next week let's see if you
have any other questions in the slido [Music] um
uh this is an important question just because it's here I wouldn't tell people
out on Discord but I'm autistic and find it really fast and overwhelming any
suggestions for ways I can contribute to the community
um so Discord you could ignore pretty much everything about Discord except for

03:50
the things that you care about right so in Discord we have our help channels and
our help channels are actually threaded so there's no like boom boom boom one
after another you can go into the help channels and they are threaded so there
is no kind of like fast pace so if that's more helpful um definitely start there
um because that could be pretty helpful um the other thing that we're doing is
like I said we work on these little things behind the scenes we're talking
about like other ways for folks that want to help the community that are
further along in their engineering career we'll be talking more about those
in the upcoming weeks and we we talked a
little briefly about the 100 maintainers
um where you'll be working with folks to help kind of on actual code so yeah
totally get it for anyone that's new here Discord can seem overwhelming when
you first join find your little Community find your pieces of it but you
can ignore most of it like like each notification is not important find the

03:51
little pockets that are important to you yeah you can you can individually do
that too yep cool alrighty any other big ones here
why don't we use es6 Syntax for this to do app we are using quite a bit of es6
syntax we're using a lot of it actually there are some things I think that are
just easier for new folks to understand if we don't use the newer way of doing
it but there's a lot of es6 mixed in here um
and one other thing here that I thought was important can you please let office
dollars stay on Twitch for longer than 60 days nah unfortunately there's one
there's there's a few things to being live like I don't want I don't ever want

03:52
100 devs to just be like I don't know like a like a like a course
on teachable or something right where it's just like you go through it at your
own pace and like there's like you're just doing it by yourself like you just
do video after video like thing after thing like I think there's something
special about being live and together and going through work together
um to where I want to encourage folks to join us live right like I want you to
participate in the community and so one of the few things I can do that helps
that is the office hours like there's an incentive to show up
um because it'll disappear right we're Community taught right and so
I think that is really important and the cool thing about office hours is you
could be you can join office hours at any any point and program and get
something out of it and a lot of times the office hours aren't like it's just
kind of answering questions right so there are some office hours where we
focus on specific pieces but at least an hour or two I always try to do that

03:53
first right like the first hour or two is always kind of just answering
questions that might be helpful to anyone at any point in the program so
definitely come to office hours I think that's one of the few things I do to
like keeps Community Live and not just a static you're just going through the
material on your own yeah cool it's also why I pushed Discord so
much right and it's also the reason why I don't like publish like I know there
are like there are things that people do like in ketchup crew that like move
through material uh but there's a reason why I haven't done that right because I
I really do want people using Discord I really do want people participating and
any little thing I can do to like get people to
interact with each other that's that's the goal yeah alrighty

03:54
let's keep digging folks we got a little bit more I want to cover tonight
all right so we right before break started talking about the wonders of
inserting unique IDs and I wanted to talk about where those unique IDs come from
Tas for 100 devs no we are Community taught no one is above another there is
no like I don't want people blessing each other
with knowledge we come together to work on stuff you have myself that goes live
you have Maya wolf you have Rufio you have Fox that go live on Twitch we have
so many other folks that are uh hopefully joining the stream team soon
that go live um we we have so many folks that are
part of this community that like take time out of their day to help each other

03:55
um that yeah there's no need for that and then folks just helping in the Discord
channels right uh it's it's it's beautiful to see so um
thank you to everyone that does help if you've ever answered a question in the
help Channel you're doing more than you realize because Community talks a real
thing and it's helped so many folks get wonderful jobs uh wonderful
opportunities coming their way so yeah if you want to help jump on Discord and
start helping that's my thing people that want to help will find a way to help
um folks that when I sell you stuff might pretend to do it but the folks
that really do want to help they just help you know and so if you're that
person you feel like you know what I want to help others learn how to code
maybe you're an engineer that's further along in your career pathway and you
think you've learned a thing or two and you want to help others jump on Discord

03:56
we need it maybe appreciated me all right so
we were showing those individual IDs right we had those individual IDs oh yeah
shout out the Rascal too too yeah thank you rascal I appreciate all the work you
do yeah um we were putting in those individual
IDs where folks are like Leon where are those individual IDs coming from where
are those documents coming from in the past right
right in the past we had this DB dot collections
dot find right we had that whole string but right now what has replaced our DB
connection and like anything that has to do with interacting with our database

03:57
what has that been what is that being replaced by
the model exactly the models handling all the stuff that has to do with
talking to our database and so you can see that we've we've required
our to do model up here and so we're using that to do model in conjunction
with Mongoose to go and get all of our documents and so we are using the model
that knows what database to connect to how to talk to the database all that fun
stuff uh Mongoose is handling that for us and then we're doing find so that's
going to give us all the documents out of our to-do's collection we're storing
all those documents in the to do items right and then eventually we're passing
those to do items into the ejs just like we've done for the past couple of times
with our crud applications if you're new
and like that hop skip and a jump is too much go back to our earlier crud videos

03:58
where we spend a lot of time and detail on like all right how is the to-do's
getting into the EGS but that's what's Happening Here we also have this lovely
count documents which is a wonderful method that will look for how many
documents have this match right of completed false what the heck is this
enabling us to do this line right here line seven what is that enabling us to do
yeah it's enabling us to count how many things are still left to be done because
remember when we click on our items right like
when we when we click on like go with refresh real quick make sure we're up to
date when I click on first try I have changed that completed property
right from false to true so now we know there are four documents in our

03:59
collection two of them will have the completed of
true and two of them will have the completed of false and so the cool thing
is that this line of code can count how many documents in our collection have
the completed property of false and so we can also pass that into our ejs as
well and when we're looking at our ejs we can see that we're using the left
value here so we're just plugging in how many items we have left to complete
we're just plugging that in as like a variable that we pass through and if we
look one more time at the to-do's controller
we can see that we've passed in wherever we see items left right this is the
items left we've passed that in items left gets passed in with the name of
left so wherever I see left inside of my ejs right wherever I see left inside of

04:00
my ejs that's the number of items that are left to be completed cool alrighty
now there's one other tricky bit that's happening here right and it's this kind
of like this this this idea of completing or not completing I want to
talk through that we're going to look at the models a little bit and then
um we'll we'll see if there's any questions at the end so when I click on
this first try what actually hears the click right
what actually here's the click yeah our client side code our
client-side Smurf here's the click right here's the click

04:01
and what it's going to do is is it going to try and grab because in
the past every time we've done this before it's just grab the text of first
try and then we send that text and we try to find that text in the database to
delete to change that document right but are we going to do that anymore are we
going to grab the text of this now we can use the ID now right we can
use that ID so let's go ahead and look at our client-side JavaScript and see
that in action all right let's go to our public go to
our JavaScript main.js and so here we have this lovely uh client-side
JavaScript all set up to handle different types of clicks so we have a
click on the delete we have our um are to do items that are not

04:02
completed and are to do items that are completed because remember the spans
could have the completed or the not class depending if they have been
clicked on or not all right so if they have been clicked on they get that class
that helps us like make them gray and and strike through and then the not
clashes make sure that they are underlined cool alrighty so
if we are clicking on let's say we're clicking on this first try for the very
first time three two one click right that originally right that originally
right that click will be heard right by the the wonderful
uh one of these two wonderful event listeners these two Smurfs right if it's
if it has the not class it'll be the first one and if it has the completed

04:03
class it'll be the second one and so we're able to listen for those two
different types of Click has it been completed or not based on the class that
it has that's all we're doing right now if we look at the very first time we run
this we'll run the lovely Mark complete right that's the function that we're
going to call we just clicked on a to-do
item that was not yet completed right so we're going to run that Mark complete
function that Mark complete function is going to
grab that item a little bit differently right it's going to grab that item a
little bit differently right and like I said this is a jump it's not exactly how
we do it in production but we're getting closer to it and so the thing I just
clicked on we're going to say all right well I just
clicked on that span right if we look at the actual text the thing that had the

04:04
text first try that I was clicking on was the span so if I want this ID what
do I have to do how do I go up a level how do I go from the span up a level to
the Li parent node will be one way to go from
the span up to the L line so that's what you're going to see here we're going to
see all right I just clicked on that text this the thing I clicked on we're
going to go up a level to the Li D and then we're going to look at the
data attributes so the cool thing is that we can make up any data attribute
that we want right we could have called it data ID data rainbow data zebra data
duck it doesn't matter we can access all of those independent or different data
attributes by using the data set and then the attribute that we care about

04:05
right so we called ours data hyphen ID we could have done data hyphen rabbit
data if and duck does it matter and then we just would have changed this to be
what it was rainbow duck right but we called it ID because
we were using the ID right cool cool so now we went ahead and we were
able to grab that ID and the cool thing is we know that these IDs are unique to
each individual document in our collection so when we go ahead and make
our request right when we make our request to our server we're able to pass
in that unique ID right so we're making a put request we're passing along that
unique ID and when we look at our controller
all right well let's look at our routes first all right well we made a put

04:06
request on the mark complete route put request on the mark complete route
remember we we get to say what type of requests we're making and what the route
was that what came from our client-side JavaScript and the router said all right
I heard your put request on the mark complete route go ahead to the to Do's
controller and use the mark complete method so we go to our to-do's
controller we find the mark complete method and what are we going to do well
we're going to find one document and update it so what document are we going
to find we're going to find the document whose ID
matches the ID we just sent along right so that we've seen this pattern 20 times
before already when that put request was sent to our server not only do we send
the put requests but we send we sent that ID along with it as well and now

04:07
we're able to use that ID we're going to find one document that has that ID and
we're going to update it from completed whatever it was to true
right so we were able to set that to true
there are some other stuff that's going to happen we'll respond back to our
client-side JavaScript the page will refresh yada yada we've done this
bazillion times right but it's still the same process just because we're adding
an extra layer of abstraction doesn't mean the core stuff is changing right
it's still the same crud app that we've been building up to it's just that now
we're getting a little bit more robust and a little bit more abstraction so
when we're working with others we're not stumbling over other people's mistakes
and we're able to kind of go exactly where we need to go
let's look at that one more time let's try a little bit differently now uh
we're gonna click on this let's take a look at this one we can see that this

04:08
first try span has the completed class right
has the completed class so when I click on it
we actually used a different click event right let's go back to our client-side
JavaScript public folder main.js all right we clicked on something that had the
completed class so that's going to be a different function that is called we're
going to call the mark in complete function right we're going to call the
mark incomplete function and this Mark incomplete function is going to be a
slightly different function down here here's Mark complete here's Mark
incomplete this Mark incomplete does almost exactly the same stuff
except that when it makes the put request it's a slightly different route
right it's a slightly different route before it was to Do's Mark complete now

04:09
it is to Do's Mark incomplete so we have to go to our router our router's gonna
be listening for that to Do's Mark incomplete let's take a look router to do's
Mark incomplete all right we heard the put request that came along with Mark
incomplete go to your to-do's controller
and find the mark incomplete function to
Do's controller Mark incomplete function and it's almost exactly the same except
instead of it being completed true it's completed false cool alrighty
no res redirect well we're gonna respond back to that request that came from the

04:10
client-side JavaScript right like that we're going to respond back and then
it's the client-side JavaScript that's doing the reloading for us in this case
lots of bouncing around but makes total sense hey good to hear it and if it
doesn't make sense come back Sunday we'll have more time we'll go through
the whole thing again come to office hours this Sunday
1 p.m Eastern Time 10 10 a.m PST cool makes sense couldn't make it myself
and guess what a lot of other developers couldn't a lot of developers that are
getting paid six figures couldn't do this from scratch right it's just it's

04:11
just it's just not a good use of your time it's just not a good use of your time
right my dog keeps opening and closing the door I have a dog that can open doors
that's why sometimes you can hear the little one in the background is because
the dog decided to open the door and come see what I was up to laughs
yeah so what I was saying is like like it's your job is to know how to bring
all these things together to research different ways of doing things to pull
all the pieces together like you you are an engineer Engineers don't do stuff
from scratch Engineers can go look up formulas Engineers can go look up the
right tool for the job you wouldn't expect an engineer to necessarily be
swinging the hammer right when there's been a something that's been developed
to help them do the job you are all here

04:12
are all Engineers writing the individual
lines and knowing every individual piece from memory is not a good use of your
time right we work smarter than that we have the templates that we have we can
pull the pieces in together you have to understand how the system comes together
but the individual lines that doesn't come until you've been doing this for
for years right oh all right questions while we're here questions
while we're here if I want to be a carpenter you're first
gonna need to learn how to build a saw from raw metal exactly now we just don't

04:13
do that right real Engineers uninstall the windows
calculator right a new one from scratch whenever they need to perform a
calculation exactly uh Jayhawk I think your question got uh
blanked out I think you said could you go over a parent node again parent node
is just when we're looking at the span right the span is inside of the LI so if
I'm actually clicking on the text I'm actually clicking on this text that's in
the spanner first try but the idea I want is up here on the LI so to go up a
level I can do parent node we could have also done like query
selector and a bunch of other stuff but my goal is to show you a lot of
different stuff and then build up to the more performant ways of doing stuff to

04:14
build up to the ways we'll actually do it in production
Bravos yeah you can think of the model exports at modular exports is like just
functions ready to be called or objects ready to be used until they're required
uh the data ID gets set on the first get request right exactly yep when that get
request comes through or actually on EV right now on every single get request
we're redoing the Dom right on every single refresh this all gets repainted
um and so maybe that's something we might think about when we get to react
is like do we need to be repainting the whole Dom every single time yikes
hey the last two classes really helped solidify this concept for me I
whiteboarded a presentation of this to my niece today in a surprise level

04:15
understanding talking through it yes let's go uh that's the beauty of of
working through this uh specifically the lecture I know it sounds like a silly
assignment but I trust trust me if you just do it you're gonna walk away with
so much more like it's one thing to learn it's a whole other thing to teach
and the way our brains work is we get all these new connections when we try
and explain something to someone else right and so just the act of building
the lecture uh and figuring out all the gaps the things that don't make sense
and investing time and understanding them and then trying to articulate in a
way that makes sense to others that just like is like cheat mode it's like it
just does something in your brain that's going to help this click a little bit
more and then the things that you're still really struggling with you come to
office hours on Sunday so please do the assignment and it'll really help

04:16
mine will say secondly I say I do this all the time it really is it really does
um help the the thing sink in so try give it a try cool
all right let's take a look at the uh slido real quick
I'm going camping next week I submit my MVC lecture early
um no but you can it'll be open on Tuesday sorry
I probably won't announce the winner for a week so you'll have some time [Music]

04:17
variables using the index where are the functions
uh variables used on the index where the functions for example on the items left
where is the function that decrements minus one oh I give you mean
so this so this is a really interesting question so in our to-do's controller we
have this count documents uh so there's nothing that's like like subtracting or
adding what this is doing is literally counting the documents inside of our
collection so it's going to and literally counting how many of these
things there are um so that's where that's coming from uh
if you're building like a super serious application you might store that number
into memory so that you're not like counting because that might be like
incrementally faster but one of the things you have to realize right now is
like none of these automations like matter until you're on the job and when
you're on the job you'll just research the way to make it more optimal right

04:18
it's not something you have to know in this moment especially when you're first
learning there are so many ways that we can make this code more optimal more
efficient but it's this is a learning exercise right we have to get there and
to add all those little bits and Bobs it's just too overwhelming let's
understand the core of what's Happening understand what MVC might bring to the
table and we'll have time to add all this extra stuff
so you have the presentation you have to do the other thing I'm going to ask is
to tweak this in some way make some changes to this figure out something you
want to modify about this application right because the way you learn the way
you're going to learn especially this part of programming going forward is by
building please don't just listen to me and then go home and do Banky and that's
it right please actually break this build with it play with it get stuck get

04:19
lost bring it back to life jump in a Discord
voice Channel say hey I'm gonna do X Y and Z come join me as I do it right like
Bill Bill build if if at this point in time you are not building you are
messing up right you're gonna learn so much more from building than you are
from just listening to me right listen to me to maybe understand how this all
comes together and then build comment that at least oh that's a really
good idea yeah so at least comment it right right
on the job unfortunately you're not going to get paid to listen to me
anymore right like you're going to get paid to build stuff so start practicing
the building too and then maybe incorporate the thing

04:20
that you changed into your presentation cool
all right any other questions trying this one down cool all right
cool let's let's end with a raid and then we're gonna come back on Sunday
we're gonna go from beginning to end on Sunday and I'm gonna answer all your
questions it'll be traditional office hours so if you got questions about this
code bring them if you got questions about the hunt anything in general uh
come back on Sunday and we'll go through it all together
