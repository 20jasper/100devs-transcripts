
00:00
let's get into it let's do a little let me walk you through what we're gonna do
today so we're gonna start off with JS fundamentals right let me start off with
JS fundamentals uh we're gonna go over promises async await we're gonna go over
node fundamentals we're gonna go to crowd with Express we're going to go
over local off we're going to review our binary upload boom right and so if sit
through these six hours right if you sit
through these six hours and you don't do any active recall it was a waste right
it was a waste uh we know we know that there are specific study habits that
will literally change the game and what you're able to retain and what you're
able to use going forward software engineering is a cumulative
career the way that I go through lectures because I'm always learning
something new literally always something

00:01
interesting one of my favorite things to do is learn something new and when I am
learning something new active recall is a key part of my process the way that I
go through lectures right or through somebody trying to teach me something is
I don't take notes notes don't work um I take questions instead so as I'm going
through and somebody says um let's say somebody says uh HTML is the
content of your website I would say what language makes up the
content of a website so that's the question I would write down so instead
of taking notes I'm taking questions at the end right at the end of my lecture
or video or whatever the heck I'm watching I go through all those
questions and that's my active recall that's my ability to recall all the
things that I just learned now there was
a study and Ali Abdallah has a wonderful video on this this is their their

00:02
graphic here where they looked at a group of people that re-read a chapter
four times so this is the group of folks rereading a chapter four times and this
is the group that read the chapter once and then recall to themselves the thing
that they just learned this broke my brain and I know if you've
been around here you've seen this a bazillion times but this this literally
broke me right because I was the type of person that
would reread [&nbsp;__&nbsp;] multiple times that
would Thug it out like I was going to put in the work and hopefully get there
but these people are doing a quarter a quarter of the work
and doing better than people that reread it four times
think about that a quarter of the work and getting better results
so make sure you're incorporating active recall uh for a lot of folks uh they'll

00:03
active recall at the end of each chapter I like the active recall after every
couple of paragraphs my brain teleports when I read right my brain teleports
when I read and so I like to actively recall after each chapter yeah sorry
after each couple paragraphs what did I just read what did I just do right
and so um super important practice if you're not
doing it even if you've been with us the whole time you're not doing it start
doing it now literally put in a fourth of the work and get better results
now the other thing to keep in mind is that we forget stuff
right we forget stuff we will all right one second we will learn something

00:04
and then by the end of a month there's an 80 chance
that we have forgotten what we just learned let's think about that software
engineering is a cumulative career and there's an 80 chance that we forget
the stuff that we just learned that Mom right
and so we can't let that happen you can't put in all this work
and then being an interview and they asked you to use some CSS and you can't
do it right or they ask you to do a certain coding challenge that you know
you've already sucked that's the worst that's the worst the worst is being in
an interview they ask you a coding challenge that you already solved and
you can't remember how to do it right and so we can flatten our forgetting curve

00:05
right we can flatten our forgetting curve right and make sure that we do not
forget stuff for the Long Haul and so what we can do is we can review material
over and over again and each time we review the material the length of time
that it takes us to forget increases so the first time you learn something by
the end of three days there's like a 40 chance that you've forgotten it
right and then the second time you review it it takes like seven days for
there to be a forty percent chance and you keep reviewing and it keeps
flattening and flattening and flattening right
all right he's flattening and flattening and flattening so the more you do your
resetting of your forgetting curve the more likely you are to remember and this
is called spaced repetition the tool that we mostly mostly use around these
parts are tools we do use around these parts is called enki or Anki if you're

00:06
Hermione right and this tool is flash cards with an algorithm behind them and
when you use this space repetition tool it serves up the material that you need
to see so you don't forget what's happening and so here is something
that's really interesting here's someone
that spends a Saturday right that spends a Saturday
studying something over and over right so you you reread something a couple of
times you you have your flash cards and you spend you spend a couple hours on
Saturday going through your flash cards right so let's say you have five hours a
week right some folks will take their five hours and say you know what I'll
take five hours on Saturday to do all my studying
does not work you have to space out your
repetition here's people that study just on Saturday and here are people that

00:07
find time to get a little bit of studying in each day right so
you're better off having an hour studying each day as opposed to five on
a weekend right and if you can start incorporating the space repetition into
your daily practice just 30 minutes a day you're gonna see massive results
when it comes to retaining information especially with these like complex
topics that we cover uh in software engineering
is there 100 devs Anki deck there are tons of them floating around uh don't
use them uh don't use them uh why don't we use
other people's Anki decks it's a really interesting question
the making of your deck is active recall

00:08
it is literally the primary thing that's going to help you learn right so when
you use other people's decks you're depriving yourself of active recall
you're depriving yourself of a point of space repetition
and we all remember things in different ways
right and often tying the things you're learning to the process of learning them
helps form the neural Connections in our brain uh so a lot of folks like to
a lot of folks like to write out their I write out my questions there's some
research that shows like writing out stuff helps like with your memory
retention and so I like to write out my questions and then transfer them uh to
my Anki and that process gives me active recall gives me space repetition gives
me the benefits of having these questions and answers in my own words
right and it ties it to the generation process that my brain does something

00:09
weird where I actually remember it and so you could definitely find decks out
there's tons of them right but you're better off doing it yourself
Krista B said you don't need I don't know who needs to hear this but it's not
too late to start inking now I started super late just start even if it's today
it will work I understand agree uh this whole class is a lot of review right uh
but this is maybe the starting point for a lot of folks right especially for a
lot of folks that are in the ketchup crew um there's no shame in the game of
starting to put these things into practice now right best time to plant a
tree was 20 years ago second best time is right now right and so make sure
that you're taking the time to do these things because they are scientifically
proven to work they they just work having had thousands of thousands of
students that have taught how to code there's two classes there are folks that

00:10
do the tools that help them to learn and there's folks that don't and what's
going to happen what's gonna happen is three months like
let's say you're brand new it's the first time you heard of 100 devs right
first we've heard of 100 devs three months from now you're like that
was too hard I I wasn't able to do it and you drop right you disappear
I guarantee you the reason why you dropped and disappeared is because you
didn't do active recall you didn't do spaced repetition you didn't watch Dr
Barbara Oakley's course on learning how to learn and put that stuff into
practice barring life events that's the reason 95 of the time
and you could even be here right now being like Lee I'm barely hanging on to
buy a thread right I'm barely hanging up by a third
and the first thing when I'm so I teach during the day and the first when
somebody comes to me says Leon things aren't clicking things aren't making
sense the first thing I tell them to do is show me your Anki deck and a lot of

00:11
them go oops right he got God and so you you like there there's things
that work and there's things that don't and so what I don't want folks to have
in the back like learning the code is very very hard
I honestly believe everyone can do it if
they put good study habits into practice
and I would say barring like I said life events
right some some some some learning challenges that that we some folks don't
have the privilege of having um for for most folks
comes down to good study habits right and so if you put these things into

00:12
place I guarantee you're gonna have a better time
so the other thing that you have to do is because this is a lot of work
right it's a lot of work and you gotta have a solid why
all right if you're gonna make it to the end if you're gonna make it through the
hunt right we're if we're here if you've been following along you're here for it
back in review and you know you're gearing up for the hunt to get the job
The Hunt is a very difficult process it tries you mentally it tries you
spiritually it can shake you to the core because it's rejection after rejection
when I tell you it's one out of 60 I really do mean it went out of 6D we had
War roach that said on their 55th networked application they got the job
and so to put ourselves through that you need to have a really clear why [Music]

00:13
says you have to have a prize to keep your eyes on I 100 agree
right there's a lot of wonderful things about this career it's high paid
it's consistently ranked one of the happiest careers there's lots of
flexibility but had remote wonderful office spaces sometimes with slides and
arcades against Wild I'm not a person that likes the hype
Fang like you'll never hear me say like go get a Fang job I think that's
ridiculous don't do that because some YouTuber told you to do it but there's
so many wonderful jobs out there for software Engineers that are high paid
that are happy that have really great work environments that could be the the
the blend of work and work from home that you could spend time more with your
kids and your family right like there's so many so many wonderful things about
this career it's fun like building [&nbsp;__&nbsp;]
is fun right you could be working on building projects that you love and so
there's something here for everyone um and you really have to focus on your

00:14
why why are you putting yourself through this learning to code is hard why are
you putting yourself through the Wiggles of false hope that is the hunt what is
your why like you need to think about that right now like when we take our
first break while you're getting your water you're
hydrating you're getting up if you're able to and walking around
I want you to think about what your why is right like keep that in the back your
mind why are you giving me six hours on a Sunday right why
and if you can focus that why I guarantee learning to code gets easier
because when you're lost in the sauce it's not you're lost in the sauce it's
I'm gonna get there because why because I have to because I want this thing for
my life all right I I want this for my family I
want this for my future I want this for I don't care I want the Porsche I don't

00:15
care what it is like whatever that that motivator is for you you gotta have it
you gotta I have a lot of folks that just put like a sticky note on their
monitor right right what is your why why are you doing this right it could be
that you just love to build cool [&nbsp;__&nbsp;]
like whatever that why is it has to be front and center or else this process
will tear you apart and so a lot of folks when it starts to
get a little stressful because they're not centering on the why
right like who cares if it takes me an extra week to learn something
right who cares if it if if I don't understand something the first time I
cover it I can go to Maya wolf right who
cares if if if my first three rejections come through during the hunt I'm
sticking to my why I'm sticking to my why and You Gotta Have It
don't don't continue with this program without a why and it can be the it

00:16
doesn't have to be that deep I love programming because when I looked
at my bank account money was there that's why I loved programming
that's it that's where I started I started with that why I want food
I want food that's literally why I started coding because I wanted food
right like figure out what your why is and there's
a chance to grow into it to turning into something that you love right I love
learning about code I love writing code
I love building cool [&nbsp;__&nbsp;] every single
day but it didn't start that way right it didn't start that way don't
ever let somebody tell you that you have to you have to be in love with writing
code to be a good software engineer nah the best software Engineers I know
clocking at nine leave at five they don't touch code on the weekends and
they're beasts right right but figure out what your why is Center

00:17
that you're going to need it for the rest of the program
now one of my experts in Residence at resilient coders that I work with every
day I had this wonderful analogy that I think is super important
uh and it they relate it learning to code like babies learning to walk
uh babies learning to walk is half like hard work like them getting out falling
down uh constantly not being able to do it
and half believing that you can actually learn to walk so babies look around and
see all these people walking and they don't start crying and sitting
in the corner going I'll never be able to walk there's never I'm never gonna be
able to walk like they don't see other people walking and feel bad about
themselves right like they keep putting in the work they keep getting up they
keep falling down they keep getting up they keep falling down they keep getting

00:18
up they keep going down they keep getting up they keep falling down and
they learn to walk don't ever look at somebody else getting a job before you
looking at somebody else picking up the code we did last week
before you don't ever look at somebody else that's having a better grasp of
node don't ever look at those people and go
damn I'm never gonna be able to do that that makes absolutely no sense
you have to believe right you have to believe that you're going to get there
too and if anything seeing those people walking is should be the biggest
highlight of your day because you're
like if they can do it I can [&nbsp;__&nbsp;] do it too
right I think so many people see see folks walking see folks getting jobs
they see folks picking up Concepts and for some some reason in their brain and

00:19
their body their soul they go I can't do that cap you all have the ability
you all have the ability it just takes a lot of hard
work and babies don't sit in the corner crying sometimes you need a good cry but
babies don't sit in the corner crying what was me I'll never be able to do it
they see everybody else walking and they get up they fall down they get up they
fall down they get up they fall down so you need to get up and you need to fall
down a couple hundred more times and you'll get there too
this is also the point of program where imposter syndrome becomes probably your
chief your Chief concern I think this is the point of program
where imposter syndrome comes in the full effect

00:20
um and this is honestly what will um hold the most people back from
achieving their why and getting getting this [&nbsp;__&nbsp;] done
like I said you you see other folks starting to get jobs and for some people
that trigger something in their brain um that makes them feel like they can't
do it too and uh you need to squash that that's
that you just need to get rid of that right now it's just absolutely not true
other people's success takes nothing away from you nothing from you
and you have no idea how long they waited to get on that front of the car
you have no idea what experiences they have you have no idea how their life is
set up right now to do all this you can't look around at other people walking
and think that you won't get there too babies don't do that you don't do that
now the other part of imposter syndrome is we're getting close to the hunt
right right we're getting close to the hunt
which means that you're gonna now have to start showing others that you can do

00:21
the things that you can do and that triggers a whole other level of
fear within ourselves but that's why it's a numbers game
right it's a hundred percent why it's a numbers game you're going to have 10
interviews that go horribly wrong like you vomit on your keyboard you slip
right and as you're slipping on your vomit you you you you like
I don't know I'm trying to think like the worst thing that could possibly happen
you hit the nuclear launch codes right I don't know right you need to do
something horrible like it's just gonna go like the worst thing you could ever
think of right and so what you have to realize
and you poop yourself on the way down exactly nerd
um on the way down you just have to realize that that you're gonna every
single one of us has ten of those in US every single one of us has ten of those

00:22
in us right right and so it's it you can't think less of
yourself when I'm telling you you already have 10 of those in you right
and then you got like 40 mid interviews right you got 40 You're Gonna Go ah I
was there it kind of went okay and then you'll have 10 where the stars aligned
you're gonna feel like all the planets are in a direct alignment with you
you're gonna feel like uh like I don't know that that that somebody was
whispering all the answers magically into your ear it just happens
it's a numbers game right and so you can't let the nerves get to you you
can't let the Imposter syndrome creep up because it's just it's just the fear of
the unknown it's just the fear of um what if somebody's gonna ask you like
it just doesn't matter all right at the end of the day
all these companies that you're going to

00:23
join are going to do things in their own way
and they're going to expect you to take three to six months to ramp up most
companies expect you to take three months to figure out what the heck is
going on right and so you're gonna learn just
enough to get your foot in the door and then you're gonna work your ass off once
you're there and worst case scenario worst case scenario you get you get paid
for three bumps to learn how to code let's go turn up right and so the
Imposter syndrome this is when it hits it's not warranted you've been putting
in the work you've been here been showing up you've been building your
projects you've been doing the things that you need to be doing to get these
jobs you're a great software engineer full stop
now it's time to find the right fit for you it's time to find the right
interview process for you every company does it differently there's gonna be
something that clicks for you and the things that you know and you'll be an

00:24
asset to that team now very first thing I showed you
was the trough of Sorrow the funny thing is like I show the trough of sorrow and
it's so true like you show the trough of Sorrow it
just it's just it's just true right like people don't get how true the trough of
Sorrow is you show this day one and everybody's like ah
yeah nah it can't be that bad right and
then a week later they're like [&nbsp;__&nbsp;] that was true
and uh and so I I think the uh the trough of Sorrow is very real
right I mean most folks aren't willing to sign themselves up to go through six
months of Sorrow right they're just not willing to do
that right because like that it's just it's just it's just it's six plus months
of Sorrow like most people in the world aren't willing to do that

00:25
and uh I think our our our our our community showed that right like we
started off with uh first class which is always a scrub because people trying to
figure out what it's going to be but our first class was 5400 right like after
the after the the intro like this is what you're signing up for
5400 and now now we're we're at like one to two thousand right like we've kept a
strong number of folks but this trough of Sorrow is real
right is real right you get stuck right you get stuck in this trough of Sorrow
right and most folks don't want to work through it right more you do it
right the more you do it right the the more you trudge through it

00:26
the worse it gets right the worse it gets
right like that this this drop of sorry you still you're still like in the fun
part you just went down the roller coaster you're like and then you get to
the bottom right this is the real trough of Sorrow that that three months in
things still aren't clicking right things still aren't clicking
you're you're you're feeling uh you're you're feeling the all the insecurities
you're feeling all the things that are that are coming up like that's the real
trough and then you've pushed it you've pushed it to here
and now we're building full stack web applications and you're seeing folks get
jobs and then you tank everyone does it this is the process you
tank there's something about being close to the end that messes with us
it's the worst part of the process when you're so close that you can see it

00:27
you're seeing other folks around you all the Imposter syndrome comes through
right all the Imposter syndrome comes through all of the the struggles of
realizing [&nbsp;__&nbsp;] I got real deadlines holy
crap like this stuff I really need to start putting into action I'm gonna have
to start talking to people in these interviews like all that stuff comes
together and that's why this little dip right here exists the worst part
it's where most folks take themselves out the game and then you start to
you start to build your 100 project you start to realize that wait when I
build up that checklist I'm starting to get recruiters reaching out
right I'm starting to like maybe understand some things I have my first
interview right I have my first interview and then after your first
interview what happens boom he dropped down again right and then and then you

00:28
then you have like your next interview and it kind of goes well and then boom
down again interview down interview down interview down up and down up and down
up and down sideways left right boom boom boom boom boom and then eventually
the stars align that one interview goes really well and you make it to the
promised land and then you're out of the
trough of Sorrow you still fight and you fight over the next rest of your career
to keep learning and keep growing [Music] right so don't
realize that most of us are right here and realize this is the most difficult
part where all of our knowledge is coming together to build full stack
applications all of our doubts are coming to the surface because now it's
time to start applying stuff all the the judgment and worry that comes with the
interviewing this is the hardest part but will get there as a community

00:29
right we'll get there as a community as you need help come to Discord
leonnewell.com Discord right if you're watching this on
YouTube Discord if you're brand new here exclamation point Discord
you can do this you can absolutely make it through the
crash of ineptitude and Into The Wiggles
of false hope and into the Promised Land cool now before we jump into the rest
before we get into basic JavaScript all right before we in the basic
JavaScript three things this is it I after thousands of thousands of students

00:30
I could say tens of thousands of students now with 100 devs um
managing your frustration being consistent and taking care of
yourself are the only three things that get you to the end the only three things
that literally help you get the job in the end
I've talked about the studies in the past about the magic frustration
basically they look at you look at adult Learners the reason why adult Learners
don't actually learn how to code is because they are in control of their
life they can decide to put Netflix on instead of studying
and so when things get tough when they get frustrated instead of doubling down
and trying to get help and working through it they turn on Netflix
right and so the more you can manage your frustration
the easier it is to learn and managing your frustration just starts with

00:31
realizing that you're frustrated and coming up with systems to not be that's it
it's coming up with systems to not be frustrated so for some folks that is all
right when I'm frustrated because I'm stuck on code what do I do to get
unstuck on code do you post on Discord do you jump in a voice channel do you
ping folks on Discord do you go to the stream team members streams and ask
they're like what do you do to get unstuck so your frustration subsides and
most folks don't have a game plan for when that happens but if you put a game
plan in place for that because a little easier
the next thing is being consistent consistency works because we saw that
spaced repetition Works literally scientific fact about how adults learn
space repetition is the key to not forgetting stuff it's
the key to learning stuff it's active recall is the key to getting that
material in with a quarter of the effort and consistency means you can't just

00:32
chunk one day of the week and hope that you
remember something a week later doesn't work it's daily practice it's squeaking
out 30 minutes a day so you can get that space repetition in right so that you
can so that you can reap the benefits of the things we know actually help you to
learn as an adult and then the last and most important
thing is you're signing up for months and months of mental anguish
making your fingers on the keyboard do things you haven't done in a long time
sitting for long hours staring at screens for long hours constantly
getting rejected when you go into the hunt it's a lot
you have to find ways to take care of yourself you have to introduce breaks
you should be doing Pomodoro right I know a lot of folks like to to to just
go for three four hour stretches I'm telling you if you do that for months

00:33
most of my students are not successful doing that taking good breaks taking
care of yourself hydrating walking away letting your brain defusively think pays
off to significant dividends we're not in flow States yet
right we're in learning mode when you're
on the job maybe you'll achieve flow and you can code out four hours straight
that's fine right now you're learning and we know the research behind memory
consolidation and it doesn't happen when
you do it for that long you need to take breaks
cool so last but not least don't let your dreams be dreams just do it
so just do it make your dreams come true just do it all right Center your why
manage your frustration be consistent take care of yourself if you do that you

00:34
make it to the promised land you owe you
you owe you I can't make you do anything but you deserve a high paid career you
deserve a happy career you deserve a flexible career you deserve the things
that come your way when you put in this amount of hard work when you put in this
amount of supporting those around you that are part of this community you owe
you what is the internet bring it all the way back
what's the internet chat what's the internet
it's a wire connecting two different kinds of devices we have
our clients so think of our desktops our laptops our mobile phones and they make
requests to servers their servers are just computers out there on these

00:35
internet wires that can hear those requests and respond eventually we are
going to be writing code that exists on these servers that can listen to those
requests generate the responses and then respond
right and so the beauty here is that we can build out
applications that look good on our client-side devices and that
would be our front-end web development so building out the HTML the CSS and
JavaScript to make our stuff look good and run good on these client-side
devices and it's back in developers we can write the code on our servers that
listens for requests and knows what to do when it hears those requests do we
store stuff into the database do we process credit cards do we log folks in
all this stuff that happens on the server and then figures out how to

00:36
respond are we sending code are we sending uh Json or anything back wonderful
so today we'll be talking mainly about the back end the stuff that runs on the
server that's listening for a request that's generating responses that's doing
the heavy lifting to build out our applications all right programming
as we talk about programming we had to keep something in mind a computer will do
what you tell it to do all right Peter will do what you tell it
to do so a program is simply a set of instructions that you write to tell a
computer what to do and that makes the act of programming just simply the task
of writing those instructions in a language that the computer can
understand that's the important bit the the language that a computer can under
stand so if we talk about this in terms of building up to a language that the

00:37
computer can understand I like to start with a simple circuit okay one second I
gotta grab um my iPad I don't know why it's not plugged in be right back
share your why in chat for me why I grabbed the iPad why isn't chat why I

00:38
grab the iPad please foreign you nerds you're a bunch of nerds foreign
stable job Child Care is expensive hell yeah
so I can move out that's dope I'm gonna make the bread Lambo
family vacations a nice work from home Freedom flexibility I'm gonna live for a

00:39
into pride and Financial Freedom take care of your family more pizza
money so the family can get their best life buy more digital Goods on meta
not be on disability help my mom without dead-end job travel the world Health
Care I love it thank you for sharing somebody
I don't understand why we're spamming wise because you're all a bunch of nerds
I'm a nerd too so that's okay everybody starts typing the letter Y in chat
alrighty thank you for sharing that all right iPad's ready to rock and roll
thank you all right so programming is the task of writing
instructions in a language that the computer can understand so let's build
up to that language so here I have a simple circuit so I have my light bulb
and I can connect a battery and since this circuit is complete

00:40
right since the circuit is complete the light bulb should turn on
right so let's go ahead and introduce a switch into this circuit so right now
the switch is open and since it is open is the light bulb on nope not on
and if I was to close the switch the light bulb would turn on and so we
can represent this on off value with some very simple notation

00:41
right so we'll say off is zero and on is one right and so if I was to draw this
circuit that had two switches how could I represent this this circuit
yeah I can represent it as zero zero or off off
and how could I represent this circuit here
now that both switches are closed how can I represent that
yeah I can represent that as one one right one one and so that means that I
have now represented a circuit where both switches were open I represent a
circuit where both switches were closed right we could also do
right we could also do some other things like zero one one zero right we could
represent these very simple on off values in a very simple language which

00:42
we call binary now from this we can actually start to
build up to a little bit of logic booleans are C and she or sugar that
reduces to zero one I love that um I actually can introduce a little bit of
logic with the this notation so since both of these circuits are closed and
I'm representing it with one one what would one one actually represent right
now like if we were just trying to think of it very simple this is very high
level this is not meant to be exactly what's happening but we can just think
about something yes it's on but we're talking about both of these switches and
we're representing that they are both on so we would say this blank this
yeah and right and right we're saying this one is closed and this one is

00:43
closed and so we can represent both right one one and we can say that that
means and like this one and that one and so we can actually build up some very
very simple logic right we eventually call these things called logic gates and
just by representing on and off values and adding slightly more gates that are
on and off we wind up with things like and
nor like all this other fun stuff that you'll see when you kind of nerd out
about this stuff but the idea here is that from just simple on and off values
we can build up to some logic we already saw and right
right so and then we can start to utilize right oh once we have SIMPLE
logic we can then build up a very low level programming language once we add
things like memory right a a way of doing some a basic
arithmetic and we have some very low level logic right we can build out a

00:44
programming language however the language that we're we're learning is
still very very that would be very very low level for us we're not going to be
writing this low level like assembly level code on a day-to-day basis we're
gonna be writing something that is a little bit more human readable and
talking about human readable uh true story for those that don't remember
uh Independence Day right aliens came to attack the world and we were able to
destroy them now if you remember when the aliens first came we tried to Nuke
them we try to do all these wonderful things and uh we couldn't we couldn't do
anything they had these wonderful Force Shields
but what we did realize is that we had one of their
one of their previous planes that had crash landed years before and when the

00:45
alien Mothership got close that spaceship got power so there's something
about how power is distributed across these alien ships
um something about how the force field comes on when it's near other alien
ships and so there's this idea that if we could like turn off power on the
mothership maybe that would distribute to the all the other ships and uh bring
their force fields down so that we could uh you know nuke them and and save the
world so what did Jeff Goldblum do to save the world
yeah he wrote a computer virus that they then upload it to the alien Mothership
that took down uh the the power or distributed uh the power uh to these

00:46
other ships force field turned off and we were able to blow them out of the out
of the sky uh how in the world the Jeff Goldblum write a
computer virus for an alien civilization that probably wasn't just writing plain
English like how could we ever write how could you ever write code that would
work on their systems yeah Jeff Goldblum broke it all the way
down they reversed engineered it all the way right all the way down to the zeros
and ones the on and off values we would assume that on and off is a universal
constant so this idea of building up to more and more complex logic would be the
same no matter if you're here on Earth or your aliens
far far far away so Jeff Goldblum reverse engineered their language all
the way down to zeros and ones and then built it all the way back up into a
language that they could inject into the alien

00:47
Mothership uh we refer to this wonderful event in history as binary upload boom
we took down uh all the ships and Jeff Goldblum saved the world America
right national hero and so this is a true story right and this idea is that
we could theoretically do this because at a very very low level all the
languages that we are writing can be broken down into on and off values zeros
and ones built up to more complex logic to more complex logic but
us as programmers on the day-to-day don't want to have to worry about
writing binary writing assembly level code we want to be using something that
makes our lives easier and that's a JavaScript
uh JavaScript is the language that we're using so that we can work well together
as Engineers we can communicate our complex ideas and then underneath the

00:48
hood right underneath the hood this JavaScript is getting broken down
into that simpler logic that our computers can understand but it's not
something we have to ever worry about because JavaScript is doing the heavy
lifting for us cool now some Basics just to get them out the way
especially for folks that are kind of really new just so that we're all on the
same page as we get deeper into the review and don't worry we're going to go
through this kind of quickly and we'll jump into the more meaty stuff pretty
soon uh and also just a quick caveat again uh for those that are new or kind
of uh jumping ahead a little bit with the ketchup crew today
there's a lot of stuff that we go through don't feel like this is the
class or the moment where you have to learn it or fully understand it this is
meant to be a review for folks that have been kind of watching along and so know
that there is a class for each and every bit of information that we're covering

00:49
today feel free to jump on Discord to ask questions feel free to ask questions
here in chat I ask everyone that you answer questions that you see in chat
and then um know that you can always go back and
watch individual classes to shore up a lot of this material all right
uh variables uh so variables enable us to store information so we have this
idea of when we talk about kind of computing we have a space in memory
and our variables enable us to create that space in memory with a step called
declaration so I would create a space in memory called age and then I can assign
that space in memory of value so then I put 25 in that space in memory so I can
do this declaration creating a space in memory an assignment on the same step so
here you can see let age equal 25 I have declared my variable and assigned a
value at the same time boom we also have conditional syntax

00:50
where we can check to see if a statement is true and if it's true we wind up
doing what is inside of the curly braces we can also have multiple conditions
where we're going to try and keep checking stuff until something is true
so you can have an if if that's not true you can do an else if
and you can have as many else ifs as you
would please and if none of your ifs are true none of your else ifs are true the
else will automagically run right they also automatically run
rfn 972 so where can I find the previous videos you can do exclamation point
YouTube here in chat to find our YouTube but don't just watch on YouTube also
join our Discord exclamation point Discord that's where you'll find all the
materials and you'll find our community we're at what home where are we at now

00:51
let's see oh that's wild that's just wild to me it's absolutely wild to me
we are at 39 589 people 39 589 people on Discord that's wild
how many Bots uh we have we have like four or five Bots that run on the
channel but uh we are like our like everything's dialed up to the max like
it's it's um you have to do like phone verification and all that stuff but the
cool thing is you can actually like see um you can actually see um
the number of active folks and like any given time there's like four thousand

00:52
just think about that like at any given time like whenever I do like at everyone
there's at least 4 000 like actively online that's bonkers that's wild
yeah that's wild cool uh so here is a lovely bit of uh syntax
here we have kant's pizza equals Domino's uh why is why is this pizza const
it'll never change it'll never be reassigned my pizza will always be
dominoes from here until the end of time right and so does pizza
equal Papa John's hell no does pizza equal dominoes yes and so

00:53
what gets printed to the console log what gets printed to the console here yeah
all aboard the train to flavor Town exactly all aboard the train of flavor
town because Pizza equals Domino's so uh this first conditional was false
the elsif was true and then the else right the else never runs because the
else if was true now let's say for some reason pizza was
Bob I don't know just to make something up right pizzas Bob
right so does pizza equal Papa John's in this case no this pizza equal dominoes
in this case no since our if and our elsif right since they're if and our elsif
another number true our else automatically runs

00:54
here today thank you for the raid thanks for bringing the crew along we're doing
a uh a a back-end super review cool our local Papa John's when my business
enclosed good absolutely good that's the best news all day all right
what's the danger of assignment versus comparison Pizza Hut number one hold on
no absolutely not I refuse I'm out yeah you're timed out for 10 minutes got him
and Gaga and they just got reassigned [Music]

00:55
uh assignment versus comparison remember if you do one equal sign inside of your
conditional right if you do one equal sign inside of your conditional right
that's the same thing as doing assignment an assignment will always be
treated as what true right so you're not doing any comparison
when you do just one equal sign you're literally trying to reassign a variable
which will be true and then it will kind of always run which can get you into a
pickle so the thing to be careful when you're inside of your conditionals be
careful of assignment versus comparison two or three equal signs is comparison
one equal sign you're trying to reassign or assign a variable
all right now we can have multiple conditions inside of our conditional

00:56
where your name equals Leon and Status equals Ballin
I'm gonna go to the boardroom for that one you know what I'm saying
you know what I'm saying all right we can also have multiple conditions
that are or so if day equals Saturday or day equals Sunday it's the weekend all
right it's the week I'm calling HR for that one uh it's the weekend wonderful
functions uh functions are just simple sets of instructions they are reusable a
function performs when action typically has a best practice that's something
we'll start building up to later on and they form the basic building blocks of
our program here is a function we have our function declaration and we have our

00:57
function call if we want the instructions that are inside of our
function body to run we must call that function we call Mom to argue
all right we call Mom to argue so we call our functions we're telling these
functions to run and we can pass in arguments individual values that will be
passed into our functions that our function can use as it executes so
here's an example we have a function called yell and it takes in a word that
it will eventually alert and so down here I have called my function and I
have passed in string hello as a what string hello is a what here
that with a string hello has an argument exactly as an argument
so a passion string hello as an argument

00:58
it gets passed into my parameter of word wherever I see word it's actually the
string hello so we would see hello right Ruthie hello all right we would
say hello alerted to our users cool here is a function with two arguments
both hello and goodbye right and we say bye-bye and so we passed in hello
wherever we see word it'll be hello we passed in goodbye wherever we see
other word it'll be goodbye so we will see alert it below and then we will see
alert it goodbye right very simple functions here loops

00:59
and Loops enable us to repeat an action some number of times there are three
main kinds of Loops in JavaScript for a while and do while and each type just
has a different way of determining when you start and stop your your your actual
Loop there are plenty more especially as we
especially as we get into the methods for for various kind of uh arrays
objects and strings there are other types of Loops but the three main ones
are for a while do while here's a an example of a for Loop where we set our
starting value or our initial value we have the case that we check to see if
the loop should continue and then we have our increment how much our value
goes up by each time this Loop runs so the very first time that this runs I is
one and since one is less than five this runs and we console log the number one

01:00
to our console then we add one to I and we check again 2 is less than five so we
print two to the console then we increment again three is less than five
so we print three to the console uh then we increment again and 4 is less than
five so we print four to the console we increment again but now
five is not less than five so we stop right and we stop cool
arrays uh data structure that we can use as an ordered collection the
little little odd thing about a raise as we start counting with zero and not one

01:01
uh and we can create them with a Constructor or little notation
um and I like to think of my arrays as toasters right our arrays are just one
entity that can hold a bunch of other stuff so we think about a toaster our
toasters can hold bread it can hold Toaster Strudels it can hold Pop Tarts
right it's still one toaster but there are slots for each and every item now if
we have Bill Gates toaster whenever we fill up our slots a new slot magically
appears and we can put anything we want inside of Bill Gates toaster
cool uh so here is that literal notation where we are literally declaring an
array we have a variable name and then we have the square brackets so we have
literally created an array and when we create an array we can have any type of
value that we've learned about so far inside of that array we can have strings
such as zebra we can have booleans such as true we got a number such as 21 we

01:02
could even have arrays inside of our arrays cool now when we start accessing the
elements that are inside of the array right we start accessing the elements
that are inside of the array we use the indexes to grab those individual
elements so if we wanted the element of New York City we would use the index of
zero Right Use the index of zero can you have an array of rays yes you can if I
want it London I would use the index of three so tricky question I always like
to ask what is the second element in this array second element in this array
not too good looks like we've been doing this for a couple months
yeah the second element in this array is l a

01:03
however if I want to access that element of La what index do I use
wow nice I love seeing all the first time Chatters first time you chat out to
say la and one I love seeing it if you if you've been here and you never
typed in chat before today's your day I want to see you type in chat today
cool yeah so we would access the second element of LA
by grabbing the index of one beautiful now uh we can use these indexes to grab
elements out of our array so in this case I'm going to use my array of new
array with the zero index and that would grab zebra
uh when I do new array one I get undefined because there's no element in
that spot blank spaces right blank spaces count

01:04
and when there's nothing in there right right
nothing in there right this still counts and we get undefined
uh YT uh do exclamation point unban we can help you figure out what happened
uh so we can we can grab individual values right we can grab individual
values and we can not only grab individual values using the index we can
also use the index to add items to our array so in this case right
right in this case I'm using the index of one
right and I'm going to give it the value of Bob and what that winds up doing is

01:05
putting that value into the array at that index right into that index cool
objects objects are simply a collection of
variables and functions objects help us represent the attributes and behavior
something that we're going to use in our program we call these
variables and functions very specific names the variables tied to our objects
we're going to call properties and the functions tied to our object we're going
to call methods right so empty spots still take a spot
they absolutely do in a raise whenever I
think about objects I like to think of a physical object what are the attributes
and behaviors of that physical object and so I like to start off by thinking
of a stopwatch right right of a stopwatch right of a
stopwatch and so when I think of the physical properties of a stopwatch what

01:06
are some physical properties or attributes that a stopwatch could have
yeah our stopwatch could have a color property a size property a shape
property you can even have like a brand property right so to have the color of
black it could have the shape of round it could have the brand of Nike it could
have um all these different properties what are
some behaviors or methods that our stopwatch could have start stop lap reset
pause beep beep beep [&nbsp;__&nbsp;] right so we

01:07
can think about a physical object and it can have attributes and behaviors
we're going to call those attributes properties and it can have behaviors
that we're going to call our methods so we can actually create an object using
literal notation so here I am declaring a variable called stopwatch
and setting it equal to curly braces when I am literally creating an array at
square brackets when I'm literally creating an object it is Curly braces
and the Beautiful Thing is we can use what kind of notation
what type of notation am I seeing here the add properties
and add methods here what type of notation
yeah dot notation exactly so you can see here I did stopwatch which is my object
right I can do stopwatch dot current time which now gives the stopwatch a

01:08
current time property with the value of 12. and then I can add the tell time
method using stop the the dot notation and how do I know that tell time is a
method and not a property how can I tell that tell time is a
method and not a property yeah it's a function
yeah it's a function exactly so whenever we see something tied to an object that
is a function we're going to call that a method and then down here we can
actually use this so here I am using the tell time method and I can tell that
this tell time method is running how can I tell that the tell time method is
running like how can I tell that it's going to actually run or execute this
function yeah the parentheses exactly if we look
this is the same function call just look right here

01:09
this is the same function call that we saw a little bit a few slides ago we
have the name of the function the parentheses you need the parentheses for
the function to actually run and then we're passing in stopwatch dot current
time as a what stopwatch that current time as a what
as an argument exactly as an argument wonderful so I'm passing stopwatch on
current time is an argument I know that stopwatch that current time is currently
the number 12. so it's as though we place number 12 in here number 12 is
being passed in as our arguments we're going to pass that into time and we're
going to wind up seeing is the current time is 12. beautiful ah
um I said what's the difference between an argument and a parameter arguments
are what we passed into when we are calling our function and parameters are

01:10
there when we declare our function to accept those arguments now why the heck
do we have arguments and parameters what does what do arguments and parameters
enable us like why do we have this why not just like hard code everything
yeah exactly it enables our functions to be reusable I can pass in a different
value whenever I want so I could pass in
the number 12 here but I could also pass
the number 24 I could pass in the number
five right past him whatever I want into this function call right into this
function and this function will work with all those different values right so
it makes our functions reusable right reusable wonderful

01:11
all right now uh we don't have to just create our functions literally we can use
classes and Constructors to spit out a bunch of objects for us we could think
of classes as our templates for objects so here I have a make car class we can
see that every single car that comes out of this make car class will have four
properties and it will have two methods right or properties and two methods so
in this case we're saying make a new car we're passing in Honda or the car make
Civic for the model silver for the color number of doors of four so the Honda
Civic that comes out of this Constructor will have a make property of Honda

01:12
it will have a model property of Civic it will have a color of silver and it
will have a number of doors of four it'll also have two lovely methods hunk
and lock that enable us to then go ahead and make as many cars as we would like
as many cars as we would like so what's stopping here for a few seconds
and uh and and answers of questions can you explain to this keyword so when we
are creating stuff out of this class right we are creating stuff out of this
class we want the objects coming out of this class to have the properties so

01:13
that this keyword is what binds these properties to the object coming out of
this class so if we were to copy this class here
and we can just go ahead and open up our inspector and we can go to our console
and we can paste this in and hit enter if we ask for Honda Civic back we can
see that the object right you can see the object that came out of
this class now has a color property a doors property a make
property and a model property the reason why right the reason why they have a
color adores a make and a model property is because of this keyword bound those
properties to the object that was coming out of this class

01:14
is this what we used for sorry is this what we use for our schema yes holy crap
wait a way to connect it to the end this is exactly what our schemas are doing
our schemas are spitting out right spitting out objects right and those
objects are the documents in our collections it's exactly the same thing
Mongoose is using schemas just like classes the spit out documents into our
collections yeah uh Constructors are just enabling us to
make the object that's all it's doing he's needing us to make an object that
has these properties and so for for folks that are like Leon what classes
moving through so quick well you have to realize that this is a review class
right we had what three whole classes on just this
like really just this and so if you're new and you're like I don't it's a

01:15
little too much for me that's all right uh hang on for the review but know that
you can go through three full classes on our YouTube exclamation point YouTube
um through all this material oh can Constructors make a raise yes
technically underneath the hood instructors can be used to make pretty
much anything in JavaScript because everything in JavaScript is still
technically an object which is a weird thing to to remember yep
cool now I just want to take a moment but it took a moment before we take our
top of the hour break I just want to take a moment to to think through
everything we just talked about right uh for folks that have been here since
the beginning the fact that you understand variables conditionals
uh assignment versus comparison multiple

01:16
conditions like and or the fact that you understand functions with their
arguments and parameters the fact you understand loops and the ability to Loop
through content the ability to understand arrays as ordered collections
that you know that indexes matter and you can pull stuff out of the arrays you
know that you can create objects and arrays with both little notation or
Constructors inside of a class that's wild that is wild you should be absolutely
absolutely 100 proud of the fact right proud of the
fact that that stuff makes sense no it might not always be able to do it
from scratch to the date of the day but the hell that you understand all that

01:17
crap that I just said is absolutely mind-blowing
uh and you should be immensely proud of all the hard work that you put in to get
to that point where this stuff makes sense and so I need you to carry that
energy into next couple of months next couple of weeks because
you have done something that hundreds of thousands of people want to do
but don't do they all want it but they don't do it you did it
you came to get and you got and don't ever
don't ever forget that all the hard work that you put in all those long days
those long nights the struggle the asking questions on Discord the popping
into the stream team to get more help you did that

01:18
and now this stuff that makes no sense to
99.999999999999 of the community in this world you understand
and so carry that with you you're built different
your special you deserve the good things that are coming your way so for folks
that are just joining us we're doing a back-end super review right now we're
building up to the things that we're going to need to kind of talk a little
bit more intimately about the back end if you're new or still catching up with
the ketchup crew a lot of this is gonna be pretty fast you can go back and watch
all of our individual classes on YouTube
that go way deeper into all these topics alrighty apis
a simple interface for some complex action I like to think of a restaurant

01:19
menu right you sit down they give you a menus back in the day when you used to
actually go to restaurants I sit down they give you a menu you point to
something on the menu and something complex happens in the kitchen you don't
really know what's happening you don't know how it's happening but you get your
delicious food that's delivered to you right and so it's simply one thing that
lets us communicate with another thing without having to know how those things
are implemented our menu enables us to order food we don't understand how the
food's being cooked how it's being cooked how much water they're using how
much flour they're using uh what type of what type of a knife do you think it
just doesn't matter we can request something and we can get the response
that we care about I expanded this example in my MVC
lecture hey let's go and so apis are going to be kind of the Cornerstone of a
lot of what we do especially on the back end where we have some sort of requests

01:20
come in we do some complex action and we respond uh eventually right eventually
eventually our apis do more and more complex stuff storing things into a
database um checking if someone's logged in storing
images in the cloud uh all the things that we're going to do especially if we
start to build out binary boom instead of working 100 hours project all these
complex things can happen based off of a very simple request
user makes a request typically from the client that request makes it all the way
to our server all that complex code on the back end happens and we serve up a
response uh here is a simple API that we started
off with this is using the dog CEO API let me go ahead and copy this real quick

01:21
uh we are making a fetch request to this URL and if we get a response back uh we
are going to parse that response as Json and then we will go ahead and console
log that data now this structure uh just we're going
to get to this in a little bit but what is this structure technically what are
we using here what is the fetch going to return just to Big Brain it and think
ahead for a few seconds yeah it's a promise right it's a promise
we're going to talk about promises a little bit but we're gonna make a
request we're gonna get a promise back
yes let's [&nbsp;__&nbsp;] go can we just stop for a second
can we just stop for like what how do you look at this code and go yeah
Leon that's a promise look at you seriously seriously
look at all these people in chat seriously think about that

01:22
you look at this go oh Leon yeah that's a fetch it's an API request API request
is going to turn a promise what that's huge I I don't care like that that's
a really wonderful thing like all the work you put into to understand that
that's that's pretty special cool all right so you made a request to this URL
uh you get a promise back or some data back we can eventually console log that
data so let's go ahead and open up our inspector
and you can actually see that the promise was pending and then we got a
response back and that response back had
a message property that had the value of this link which was a Mexican hairless

01:23
I'm really excited to see what this is what that's a thing that's a cool dog
what yeah it looks like Anubis right it does Zolo is that the name
I don't know what I don't know what that is that's wild I've never seen it looks
like it has like the face of like a chihuahua almost
Mexican hairless looks fast yeah it does sleek no drag
cool so I was able to make a request I was able to make a request using the
fetch API I was able to make a request in fact there's an API we're gonna talk

01:24
about that in a second all right oh sholo that makes sense that's really cool
all right so fetch is an API we're gonna
talk about that in a second that enables us to make a request
right he wants to make a request and we get some data back and the data that we
got back we console logged we console logged it and we can see the data we got
back was an object right it was an object right that had a message property
it was the link to the to the image of the dog and also a status property just
let us know that it went okay and we can
make this fetch over and over again like if we do another fetch we're gonna get
another random image back and this time we have a Basset Hound

01:25
what's up ears right and so now we're able to make these requests
these requests are going to the dog CEO server the dog CEO server hears the
request all right here's the request and when it hears the request is
responding with this object right it's going from this object right it's
coming from this object right from this object
sorry it's going from that request to the server the server hears that request
we get that information back we're able to console log it
I'm gonna go over how we could insert the data from the faction to the Dom uh
we could just change up what happens inside of the then instead of just
console logging it I want to edit that actually so just console logging it we

01:26
can do whatever we want we can um we can do our document dot query selector
we could select I don't know let's just say our
Let's see we had an image tag on the page where you can check our image tag
we could change the source and set it equal to data Dot message
all right so that will go ahead when we get the data back from the dog CEO API
well console log what we got we'll find the image on the page we'll change its
source to whatever that URL was so let's go ahead and hit it there we go
it comes back and if we had an image on the page it would have changed that
image to this miniature poodle that's it cool beans

01:27
we're using Express for the back end yep cool
so we want to get into the back end but before we get into the back end
we gotta talk a little bit about JavaScript
you got a little we're gonna learn a few things right
I learned a few things right you gotta learn a few things about how
JavaScript actually works underneath the hood before we can do the back end yep
someone's correct they string into an object that's what the the
response.json's doing for us exactly all right
JavaScript is single threaded meaning that it will process one operation at a
time I like to think about this in of this is this very rough it's not exactly
no code weenies today please right this is rough we're just trying to get we're

01:28
trying to teach a theoretical concept here give me some Liberty right so we're
thinking about JavaScript a single threaded okay and what we can do
is I like to think of a paper delivery person right each morning they get on
their bicycle and they start riding through the neighborhood they throw a
newspaper at the first right right throw it at the first door all right
so at the first door and then they wait for the person to get up
to go down the steps to make their coffee put on their robe
go to the door get the paper and then once they see the person get the paper
they move on to the next the next house right they get they bicycle off to the
next house right off to the next house they take the paper they throw it

01:29
against the door and they wait same routine the person takes their morning
they come out to get the paper and then then they move on so they're doing one
process at a time this would make the paper delivery person not very good
at their job right if if they just do the paper and weight it and wait it and
wait it and waited we want them to continually move on
uh so there's one way if we think of the
paper daily person as as a single thread synchronous process
um it would be one operation at a time we could have a multi-threaded operation
which is where we have multiple paper delivery persons going around
and so we have to think about is Javascript is single thread it it's
doing one operation at a time and so if JavaScript is synchronous
meaning doing one operation at a time how do we do stuff like make an API

01:30
request and keep scrolling right right how do we like if we're on our
binary upload boom how do we like a photo and keep scrolling through the feed
right how do we how do we do all this stuff that we'd
normally do when writing job or using JavaScript like how do we
um make all these requests if JavaScript is single threaded if it is blocking if
if it should if it should wait like it should be the paper delivery person it
should wait until that process is done before moving on to the next thing but
that's not our experience when using the web we're able to do all this stuff and
keep moving scrolling clicking doing all this stuff uh and we don't get blocked
and the answer the reason why we're able to do all this stuff is the environment

01:31
and when I say the environment I don't mean this 10 second warning five seconds
I mean [Music] thank you all right we're talking about this when we say
anything right we don't mean this we mean this the environment is our browser
JavaScript is running in our browser up into this point since JavaScript is

01:32
running in our browser we get access to a bunch of stuff
that that does all the heavy lifting for us right so
browsers have a bunch of apis that we can utilize make requests to they do all
the asynchronous stuff for us right because JavaScript should block so when
we were doing a lot of stuff early on in JavaScript when we were using the Dom
right when we were making fetches none of that stuff is built into JavaScript
the Dom does not come with JavaScript that document.queryselector not part of
JavaScript all right fetch not part of JavaScript
this is all stuff that browsers come with since we are running our JavaScript

01:33
in the browser JavaScript can use all of these web apis to do all this heavy
lifting asynchronous stuff for us and if you look there's a whole list of
these common browser apis or these web apis and I remember learning this stuff
for the first time and looking at this list and seeing that the Dom
the Dom was one of the apis that we get access to when we run our JavaScript in
the browser and I I lost it right I lost it because
that document that we wrote over and over and over again the fetches that we

01:34
were writing over and over and over again that does not come with JavaScript
right does not come with JavaScript all right
that document.query selector is a web API it is not JavaScript and it always
has been right so a lot of these things that are
doing the heavy lifting for us right they're doing the heavy lifting for us
that are doing the stuff that is happening asynchronously is because
JavaScript is making requests these web apis and the web apis handle all that
stuff for us do what it needs to do and then
returns a response and so a lot of the stuff that we use in our day-to-day of
running JavaScript it's just not stuff that it comes with
this is like mind-blowing to me I can't tell you how many people

01:35
right right I can't tell you how many people um I can tell you how many people
probably write JavaScript and don't understand the stuff that
they're using day to day right day to day is uh
is not built into JavaScript it's part of the web apis it's part of the running
your code in a specific environment right you're running your code in a
browser right JavaScript is not running somewhere else the the JavaScript is
running in your browser and the browser we have to remember the browser is a
program that is installed on your computer let's think about that for a second
sense the browser right is a program installed on your on your on your

01:36
computer right Firefox Safari Chrome they are programs that are installed on
your computer and since they are stalled on your computer they have access to
what they have access to your CPU they have
access to your RAM they have access to the file system right like the the
program since you installed it on your machine has access right
right has access to all of that raw computing power the browser can do the
heavy lifting the browser can be multi-thread it can do all that stuff we
need to do because it actually has access to the resources of your computer
so when we run JavaScript in the browser we can get access to a bunch of stuff
that does not come the browser and different it's all blur I don't know
if I made this or somebody else made it in the in the cohort I think I did but I

01:37
don't remember it's been too long so yeah
JavaScript can do a lot of The Blocking stuff in the browser
because it is handing that stuff off to our asynchronous web apis so all the
stuff that JavaScript shouldn't be able to do it can do because it's handing
that stuff off it's literally saying hey browser do this stuff for me right and
the browser is able to take that that stuff that we're trying to do use the
resources of your computer to get it done and then respond with an answer
right and so this is a version of an API right our our javascript's making a
request these apis built into the browser hear
that request go off and do some complex asynchronous stuff

01:38
and when they're done they respond what eventually those web apis do indeed have
to respond and how do we handle those responses we
saw with the fetch that we were using the then chain to handle the responses
to a fetch but we need a way of handling the responses that come back from these
web apis if javascript's running in our browser we're making requests these web
apis whatever API is going to do their complex stuff and at the end they're
going to need to respond and we know we need to know how to handle those
responses and JavaScript handles those responses with callbacks then promises
and eventually async await like we've had an evolution of how we handle these

01:39
responses pad I'm new to programming is python a
good programming language to start with hell yeah it is it's a wonderful
language um however if you're trying to get a job
the quickest way to a job is definitely full stack JavaScript you don't have to
do context switching if you're learning python you're going to also have to
learn JavaScript right if you're gonna be a web developer and so instead of
having to do context switching we just do full stack JavaScript here you can do
exclamation point 100 devs you want to learn more about what we're doing here
for the bootcamp oh yeah alrighty so let's start off with the old school

01:40
way of how we handled the responses that came back from these browser apis right
so callbacks uh you can always have a function that
takes another function as an argument so something if we're going to use
callbacks here to learn this we have a function that takes another function as
an argument these are called higher order functions like functions that take
in other functions as an argument now you've seen this a bazillion times
when we use things like click events right click events add event listener is
a function and when it hears the click it runs this function right
right it runs this function right it runs this function so this is a function
right it is a function that takes another function as an argument our
event listeners our click events our smurfs have all been higher order

01:41
functions and the function that we are passing in the function that runs after
the click we call that a callback a callback is simply the function that
has been passed in as an argument right so we're thinking about our event
listeners right we're thinking about our event listeners and we have our click
event and we have the function that runs
once the click is heard that function is being passed as the argument we call
that a callback and callbacks really aren't like a thing
that's like specified in our JavaScript specification or the ecmascript
specification it's just a convention it's like a term for this convention cool
uh callbacks fire when an async task or another function is done right our our
callbacks are going to fire when the other function is done so think about

01:42
the click event it fires once the click is heard right and so here's kind of the
wonderful callback chain uh that you can see here right so
set timeout is a function right is a function that weights a certain amount
of time all right hey Waits a certain amount of
time before it does what's inside of its
curly braces so here you can see the set
timeout opens it has this console log of paper delivered to house one and it's
going to wait five seconds and once it's done that five seconds
it's gonna run this next time out right that'll say console log paper
delivered to house two and once that's done it'll call set timeout so this is
kind of a lovely little uh callback chain and uh people passionately refer
to this as the Pyramid of Doom uh are often referred to as call back hell

01:43
back in the day this is how we handle stuff right we wanted this to happen
first and once it was done we wanted this to happen so we nested all of our
callbacks because we knew that this set timeout could only run after this one
because it's a function inside of our function right it's a higher order
function it's a function that can only run after this outer function has
completed and so this is how we did this how we handled these really complex
requests happening where we we didn't want other code to execute until other
code had executed and it led us to call back home where our code got real messy
it got real indented it became a hot mess and this is this is like this is
like this is an easy example start thinking about when you really need real
stuff to happen real mechanics not just console logging it becomes a hot mess to

01:44
keep track of uh how long are we talking about uh promises were added to the
specification and was it 2015 with es6 I think um
so we're talking about like seven years ago plus seven plus years ago
ten to seven years ago and then uh with that es6 specification
uh we got a more readable way to handle our asynchronous code right so instead
of having to deal with these really messy callbacks right we had a promise
right a promise or a better future right and so promises came in on their
White Horse to save the day right and A promise is something that's
somewhat hard to grasp at first but it's really just an object you know like
objects that can have properties and methods it's just an object that may

01:45
have a value in the future so when you make a request you get a promise back
and that promise may not have the value immediately but once that asynchronous
task has it can have a value in the future
and there are some methods that we use when we're using promises that enable us
to handle this asynchronous nature so basically once the promise resolves our
then methods can fire right and so uh you'll make a request you'll get a
promise once the promise resolves your then will fire you can think of these as
like really fancy fancy click events right it's going to wait until it hears
the click before it does anything in this case the den is waiting for the
promise to resolve before it does anything and um whenever it does that value uh

01:46
gets passed as an argument so what the heck we've seen this before I know it
sounds confusing but it's something you've seen before and we can we can
step through it A promise is like an IOU exactly
so here is the fetch that we were just talking about earlier we made a request
and what did we see chat do you remember what did we see
exactly as soon as we made the request what did we notice
we saw that we immediately got a promise but it had a pending State let's see
let's see if we can get that to happen again
so we made our request right we made our request let's go ahead and inspect
come on work the same way again please we made our request
boom immediately we had a promise right immediately we had a promise and
then eventually that promise resolves right it eventually gets the response

01:47
back from the server and once the response is back from the service so
sorry from the server what fires what fires as soon as the promise resolves
the then's fire right the dense fire right the dense fire and somebody was
asking what is this like why do we need to do like the response.json well
the response that we're getting back from the server is not actually
organized as an object right and so what we're telling here is that hey we want
we want a like a Json object from the response that you just got like we need
it to be an object so we can use JavaScript right so we can use
JavaScript to like get the data play with it do the things we need to do with
that data so we made our fetch and immediately got a promise right

01:48
eventually the promise resolves it has some sort of data that it got back from
the dog CEO API as soon as the promise resolves we make sure we're dealing with
a Json object so we can actually play with it and use it and then we console
log our data so this is very very important promises are doing something
very very unique for us here we saw the promise was unique which is really
important because JavaScript is what now what is what is this helping us with
yeah JavaScript is synchronous it's single threaded meaning that it can't wait
did JavaScript have to wait here it made a request and it immediately got a what

01:49
it immediately immediately got a promise
did that promise have its full value yet
no it just had a promise for some future value and eventually once that promise
went from pending right to fulfilled or resolved right once it resolved then
what happened what triggered the then's triggered and then we could
do it and once we had that data right once our promise had that data right
right once we had that data then and only then did the dens fire then and
only then did the dens fire then oh wow that's really good
then and only then did the dens fire then and then only then did the dense fire

01:50
then and only then did the dense fire then and then only then did the dens fire
hey does this work then and only then did the dense fire
then and then only then did the dense fire foreign run
then only then did the dense fire then and then only then the defense fire
cool all right all right so we immediately made our request
we immediately got a promise the promise just didn't have its value yet
right it just didn't have a value yet eventually some asynchronous stuff
happens right some ACE organist stuff happens the value right the value
it's resolved we make sure we're dealing with an object right we make sure we're
dealing with an object and then we can do whatever we want with that that

01:51
object in this case we just console logged it cool
can we take off slow mode I'd be curious to take it off I mean office hours we
always have less people like um we always have less people so maybe we
could try it it'd be fun just to see the the shenanigans but
maybe we'll do that at the end just to see what it'd be like all right

01:52
something to look forward to exactly all right so we can see this like I think
this is really important concept this is something that I really um
that I I really think is important to kind of understand that JavaScript is
single threaded this synchronous we make requests and it doesn't stop it doesn't
block because we immediately get a promise right it's just that that promise
right it's just that this promise eventually resolves we already got the
thing that it eventually resolves and once it resolves then it fires all these
dens it's the exact same thing as a callback right like a callback would
just wait until something was done and then the next function that was the
argument fires right it's the it's this it's the same
it's the same thing it's just like a a newer syntax a new way of handling this

01:53
type of request and it's really important that we kind of see that and I
really like that we that we broke it down that way cool
so in this case fetch returned to promise just like all the other web apis like
pretty much all the other API obpi's do the exact same thing look at all these
web apis canvas the Dom fetch all this stuff we
make requests immediately get a promise right and then eventually that promise
will have a value in the future cool so here is US building some like raw
promises right we're building some raw promises we have
uh house one set up as a new promise house two setup is a new promise and
house three step is a new promise basically when I'm trying to build out
here is my my paper delivery person um I want them to uh be able to go to

01:54
each house right and uh move on uh after after that delivery
and so here you can see that I have my house one has a set timeout of 1 000
seconds my other one has 5 000 seconds and my
third one has 2 000 seconds and so what I can do is I can uh use a promise chain
so that when house one is done it console logs the data and then it calls
house two which then console logs the data and then we call house three which
then console logs the data and if there's ever any errors we have the
catch that catches the error so this is a good way for us to build out
um some synchronous things that should be happening
synchronously asynchronous right like it's going to wait for one thing to
happen before it moves on to the next and then once that happens it'll move on

01:55
to the next we're not using callbacks we're using promises here and those
promises will just call the next thing right the next thing when the one before
it was done running and so this would work like if we copy this
we throw this in our inspector so we see paper delivered to house one
it's chilling it's chilling it's chilling it's chilling
house two it's chilling it's chilling it's chilling house three so it worked
right even though these promises all had different values one second five
thousand seconds milliseconds sorry and two thousand
milliseconds or one second five seconds two seconds we would expect
if JavaScript was synchronous right that it wouldn't wait it would just do boom
house one house two house three right it

01:56
wouldn't it wouldn't wait but here since we're using the promise chains once one
thing resolves it calls the next once that resolves it calls the next ones
that resolves it costs the next we get this lovely one two three
now the problem is this works right this works
um but it don't read good like having to do like this chaining uh with promises
doesn't doesn't actually look too good doesn't look like real JavaScript so I
want my asynchronous code right like my stuff that's like waiting for responses
to come back I want my asynchronous code to look synchronous
all right I wanted to look synchronous and so that's where async awake came in
async await is simply a way to handle asynchronous responses and really it's

01:57
just some syntactical sugar right it's some tactical sugar on top of
promises uh underneath the hood it still
promises it's just the async await looks
more like our original JavaScript uh the
way that async await works is that await waits for an asynchronous process to
complete as long as it is inside an async function uh so what does that look
like here we have our normal asynchronous stuff that's returning
promises and down here we have our asynchronous function oh
take a look at that beautiful right look at this
we have async in front of our function and then we can just say house one and
it'll await house one it'll wait that one second
then we say house two weight and that'll wait the five seconds and we say house

01:58
three weight and that'll wait the two seconds That was supposed to take and it
looks synchronous even though all this asynchronous waiting two seconds five
seconds one seconds is happening it looks like our synchronous code we can
console log it oh oh right is training still steam a lot typically
you'll see it every once in a while but async away has really replaced this it's
just like I said syntactical sugar right it's in tactical sugar that makes
this look better right it still promises underneath the
hood it just looks like the normal JavaScript that we would write
all right so then you're like I need something real like this is great like
you're talking about theoretical newspapers being passed around what the
heck we talking about here let's look back at our fetch code
uh before we had those like those promises and stuff like that well now we
can do it with the async await syntax as well so

01:59
we have our async in front of our function we have our awaiting of the
fetch remember fetch is a what what is fetch we actually didn't say this yet
fetch is a what fetch is a web API right so the web API
is going to immediately return a promise and the cool thing is that res is now
holding that promise and then we can also make sure that we are using a Json
object and then we can console log the data so we don't need those then and
only then did the dens fire then and then only then did the then fire
we don't need that anymore we can use this lovely async await
syntax it looks like the more synchronous JavaScript but underneath
the hood it's still the promises all right still the promises underneath
the hood it just looks like our more synchronous code
I'm not catching any errors here I would

02:00
definitely still need to try and a catch block right they're trying catch blocks
that you use with the async functions uh
there's not one here just for Simplicity to see what it could look like um cool
Dexter I believe the secret to understanding the concepts more is to
watch mine and Rufio after hours not a secret it's what I've been saying
for months if you want to understand
this [&nbsp;__&nbsp;] more you should be going to
the stream team there's a reason why we say community taught there's a reason
why I talk about the stream Team every freaking class because if you're not
going to the stream team you're messing up people given time days hours of their

02:01
week to help you learn these Concepts better a community that's going through
the hardship together piece by piece line by line if you're not going to the
stream team you're messing up it's not a secret
it's not a secret that's the point Community taught 53 [Laughter]

02:02
that's the point that's the point I gotta manage my frustrations yes
all right let's use a web API and then we're going to take our our top of the
hour break and this one will be a little bit longer
I'll be a little bit longer because we've been going for three hours already
so let's use a web API uh we're gonna go
ahead and use set timeout set timeout is a web API this broke me
just you understand uh this broke me um set timeout and set interval are not
actually part of JavaScript let me say again set timeout

02:03
and set interval are not part of JavaScript it just so happens
that most environments like all the browsers that we use and node.js give us
access to these things like set time outside interval are web apis they do
not come with JavaScript they can't come with JavaScript because JavaScript is
synchronous it's blocking right so something that weights literally cannot
happen with JavaScript something that does something on an interval literally
cannot happen with JavaScript these are not part of JavaScript these are web
apis right so something that we've seen before
is let's say we have this house one paper delivered the house one uh
function house two with a set timeout of three seconds and then house three so

02:04
since JavaScript right since JavaScript is synchronous right
since JavaScript is synchronous right is synchronous
we would expect house one to run house tutor run and house theater one and will
JavaScript wait welcome well JavaScript wait
no it can't it literally can't let's run this let's look at the inspector
go to our console paste this code uh and this is what we're gonna get
we're gonna see house one house three and then house two
right there's nothing right now that's set up to wait because JavaScript

02:05
doesn't wait JS goes Burr exactly right and so we can see that the very when
house one ran right it immediately console logged then set timeout which is
waiting three seconds well that's gonna have to happen later and Amelia moves on
to house three we see house three and then house two finally winds up being
console locked there was a delay of three seconds so JavaScript doesn't wait
it just kept going down the page now the really really tricky thing is when we
change this from three thousand we change this from three thousand to zero
we would expect that there is no longer a delay before there's a three second
delay but now there is no delay by today right
no delay before is three thousand but now we're saying a zero delay but when

02:06
we run this code we still see house one then house three
and then house two but there was no delay Why didn't it run
chat Why didn't it go one two three yes the event Loop exactly the event
Loop the event Loop is still in play meaning that JavaScript has to hand
offset timeout set timeout is a web API a JavaScript is going to hand off set
timeout to the browser the browser gives it a promise immediately
JavaScript keeps going eventually the set timeout resolves even though it was
a zero second delay it still had to be passed off to the web API all right and
that passing off is enough for JavaScript to just keep on moving so
even though there's no delay by today it

02:07
still had to get handed off in the event Loop so when we come back from break
uh we're gonna save you from getting got right uh and we're going to learn more
about the event Loop and the event Loop is really important because once we
understand the event Loop we can understand how JavaScript is able to do
all these wonderful things and then we'll be able to apply these things to
our node environment as well right now we're just talking about browsers is an
environment but we'll see that node is an environment for us to run our
JavaScript as well and a lot of these principles still apply so we were
talking through this really weird thing that happened where even though there
was no delay right even though there was no delay the
it was still going one three two all right
one three two right and so even though there's no delay something odd was

02:08
happening and the odd thing that was happening is this set timeout was being
handed off to the browser it's a web API it was not built into JavaScript it's
being handed off and since it's being handed off
it has to wait for something to come back from that handing off that request
to the web API right and the way that this works is through something called
the event Loop all right so before we get into the
event loop I want to talk about two very simple data structures actually it's
simple with two data structures that we're going to use and we're going to
use them especially when we get to data structures and algorithms uh in just a
few weeks we're what we're like What two two weeks away from data structures and
algorithms that's pretty wild so some of the first instructions and algorithms
that we're going to learn about our cues uh just like a real cue like
you're waiting in line right you're waiting in line uh the first element was

02:09
added to this queue or this list is the first element out so you get in line and
the first person that was in line gets out of the line right it's called a
first in first out structure so cues are
a first in first out structure where the first person in the line is the first
person out of the line so a quick example of a cue is just having an array
we push two and five into the array right we push two and five into the
array so now we have two and five sitting in our array and then we shift
off the first value which would grab two so two was the first value into our
array and shift will grab that value off because it is the first in the queue so
just thinking of an arrays where we had an array set up we push two in we push

02:10
five in and then shift we'll grab the first element in the array out of the
array oh Stacks are like I like to think of
Pancakes the last in is the first out so unless you're a monster you put your
pancakes on the bottom right you put a pancake on and you put
more Pancakes on top right and the last pancake on the stack is the first
Pancake off of that stack right and so this is called a last in first out the
last pancake on top of the pile is the first Pancake off this is a last in
first out structure so an example of this would be once again we could use
our array where we push two and five into our array but instead of Shifting

02:11
we pop it and we pop five off of our array so the last element
that was put into this array is the first element out last in first out cool
so back to getting got all right so if we understand
if we understand that our JavaScript is running in the browser the browser
is giving us access to a lot of things that enable us to execute our
code so when we are running our JavaScript in the browser if we're using
Chrome uh we're using something called the V8 engine that takes our JavaScript
and enables us to do a lot of stuff it is the compiler that enables us to write

02:12
JavaScript and then have that JavaScript understood by our actual machine right
remember JavaScript is good for us to talk and communicate but it's not so
great for the computer to understand it has things like garbage collection and
memory management and all the stuff that JavaScript itself might not necessarily
be good at or have with it and it gives us access to a bunch of these web apis
that we've been talking about right set timeout set interval fetch the Dom right
and the way that this all works the way that we're able to run our JavaScript in
the browser is that a lot of these events that should be blocking our cast
off to something called the event Loop using lib event right
and so lib event you can tell is real serious
because when you go to their website this is what it looks like so if you
ever wondered about like how JavaScript Works underneath the hood just trust

02:13
it's doing look at this yeah I'm good you do you bro you do you what's going on
welcome this site is disrespectful to all this stuff that's happening
underneath the hood uh is what enables kind of our
JavaScript to run in the browser even though it's asynchronous asynchronous
language all right so how does this all work how are we able
to use these things that should be blocking with JavaScript well this thing
called the event Loop monitors the Callback queue and the job queue and
decides what needs to be pushed to the call stack let's take a look at it
all right so here we have that same bit of code that caused us some some tricky

02:14
things we have console log house one console Log House 2 and console log
house 3. now what we saw was that we saw console logged house one
then we saw house three and then we saw house two so it went one three two even
though there was no delay by today right you know there's no delay it still went
one three two let's take a look at why this happens
we have something called the cost stack where all of our
lines of code are going to be executed first so console log1
is added to the call stack right is add it to the call stack and
since the call stack is a stack what does that mean

02:15
what does it mean if the call stack is a stack what do we know about it
it's a lasting first out so the last thing on this stack was the console log
so it's going to be the first thing off right and that's why we see console
logged house one that's why the house one gets immediately logged to the
console now the second line of code the set timeout executes and that's going to
be added to the call stack Now set timeout is a what set timeout is a what
the web API so since this is the last in it will be the first out but this set
timeout is going to be handed off to the browser to be handed off right it's
going to be handed off to the browser hand it off to the web apis

02:16
and it's going to be here in this lovely
lovely little area it could take as long as it needs to do its job
but the event Loop keeps going we get to the next line of code which is the
console logging of house three since that console log goes onto this stack
and the stack is a last in first out structure this console log has to run
now we also noticed that since there was no delay on our set timeout the web API
responded instantly but when the web API responds where do those responses go do
those responses go on to the stack no they go into the queue now there's
the task queue job queue there's a bunch of different like micro cues and funds
like they were taking a high level here so that response came back from the web

02:17
API now it's sitting in the queue but the stack is a last in first out
structure so this is the last in so it has to be the first out we'll see
printed to the console log3 the call stack eventually runs again
like the event Loop goes BR it runs again it takes off that initial main
that was there that kicked off the JavaScript and now
that the call stack is empty where does the event Loop look
the call stack is officially empty where do we look
yeah we look at the queue we go and grab that response from the set timeout that
came from the web API that's chilling in
the queue call stack is empty so we look at that q and we put that on the stack

02:18
since the stack is a last in first out structure it the event Loop runs it
pulls this value off of the stack and we see the last console log in our console
right so the idea here is that this first line
ran add it to the stack last in first out immediately console log this set
timeout ran but had to be handed off to the web apis that's asynchronous it
could take all the time it needs when it's done whatever comes back from it
gets put in the queue but our program kept going on to the next console log
put it on the stack back is a last in first out so that came
off the stack we saw that lovely house three once the call stack was completely
empty we went to the queue to get the thing that came back from the web API we

02:19
put that on the stack it runs and we see house two so even no
even though there was no delay by today it still had to be handed off the web
API the response still had it to be put in the queue and we only get stuff from
the queue when the call stack is empty put that on the stack exactly
so so folks are asking kind of like why task UI Java queue this is just a way of
this is just a way of handling um handling

02:20
JavaScript knowing that it's synchronous this this
execution context the environment in which we are running JavaScript gives us
access to this event Loop so that we can use this synchronous language with a
bunch of asynchronous stuff that needs to happen right
so we all go to get help on Discord but sometimes we have to go over to stack
Overflow what the heck is stack overflow well this stack can hold a lot
right this stack can hold a lot but we're constrained by the resources of
our what right we're still constrained where

02:21
where is this still technically running where this is all still technically
running on our computer right this is running on
our computer our computer can only handle so much so much memory so much
stuff right all right and one of the things I always
love to do with my students in in Meet space I really can't do it too much
digitally because then you would all just disconnect from twitch but one of
the first things I have my students do when we're in person
is run an infinite Loop with a bunch of set timeouts right
eventually you add so much to this stack you add so much to the to the web API
queue you add so much to the task queue that your your computers can't keep up
and it turns off right Chrome now has like things to stop this from happening
but back in the day like this is still real resources that are being used and

02:22
you can run out of resources right well and just think about all this stuff is
happening right like all this stuff is happening lightning fast that we can see
cute dog photos I love it all right it's time to get us some back in baby
so let's talk about some back end all right now we just talked about this
all right we just talked about this does JavaScript have access to the Dom
natively built in like this JavaScript have document query selector all that

02:23
fun stuff nope doctor does not have the Dom built
in all that stuff is a web API now JavaScript needed web apis to handle the
async stuff and a bunch of the other stuff in the
browser right A lot of the stuff that would normally be blocking that would
cause JavaScript to stop running we needed those web apis and the only
reason we had those web apis was because JavaScript can only do it the hosting
environment allows and when we're using the browser as our hosting environment
we get access to things like the Dom set
timeout set interval all those wonderful
things right so JavaScript is a language that can only do what its hosting
environment allows a lot of stuff that we use day to day in terms of JavaScript

02:24
isn't actually JavaScript it's just with the hosting environment allows us to do
so if we're going to talk about the back end and back-end web development I'm
going to ask a very important question what do servers need for
their role in the kind of how the internet works building out these full
stack web applications like if a server if a server is going to hear request and
generate responses if it's going to store stuff into a database if it's
going to serve up files like at a very very very basic level
our servers do some very specific things and one of the most common things we
might use a server for is to serve up some files right like we go to a website
when you type in a URL and hit enter you have made a request to a site that site
then responds with some information respond with some HTML it responds with
some CSS it responds with some JavaScript and so if a server is going

02:25
to actually serve what needs two very important things
it needs access to the disk remember I think a lot of us start forget that those
files that we're serving up the HTML the
CSS the JavaScript that we're serving up that exists somewhere that's on a hard
drive or a solid state drive somewhere on that server right like it's not magic
those files have to be stored somewhere and when the server hears the request it
has to grab those files and respond with them right and then if it's going to
hear the requests come in and it's going to respond to those requests well then
it needs access right it needs access to a network
right right it needs access to the network if it's going to hear those
requests and generate those responses well it needs access to the network to
hear those requests and generate those responses so our servers are back in

02:26
would not be able to do the things that it does that are fundamental level
without access to the disk or without access to the network and so
what if there was a hosting environment right a hosting environment that allowed
JavaScript to have disk access and network access let me ask you this does
JavaScript have access to the disk nope does JavaScript have access to the
network like can a JavaScript file on your computer just like start accessing
stuff when you know every website we would go to would be horrible if every
voice that we go to that JavaScript could just like start reading files on
your computer it just it doesn't have access to those things so if we're going
to build a server that can pull files off of the drive that can listen to the
network we're gonna need a hosting environment that enables us to do that
10 second warning and so the hosting environment five

02:27
seconds that enables us to have disk access network access [Music] foreign
Sullivan said Leon does it mean that using the async await the web API goes
to the web stack from the call stack and returns immediately to the queue and
then the call stack while the synchronous process is kept on weight so
the the the the way that this is still working async away is just promises

02:28
right it's just promises right it's just promises and so
when we add something like the set timeout right we got something to set
timeout JavaScript has a promise that promise doesn't have a value until we
pull something off of the task queue so it gets handed off to the to the web API
it does its thing but we still had that promise immediately and then eventually
the promise resolves let me pull something off the task queue if you
really want to know more in detail like I'm saying like I'm giving like a very
high level very skimming the surface of how the event Loops because I just don't
think it's super super important for you to understand right but if you really
want to know the event loop I shared two really amazing uh videos on the event
loop on Discord uh they were actually part of the homework and so
um there's Jake Archibald's video and I'm blanking on the other ones uh the
author's name but they're both on Discord if you just type in that loop on

02:29
Discord uh you'll see both of those videos highly highly highly recommend
that you watch both of them they go in way more detail than I could ever get
about the um the event Loop and in fact the uh the the example I gave you is a
very similar example that comes from those two videos that I shared cool
all right so node.js is a JavaScript runtime built on Chrome's V8 JavaScript
engine Phillip Roberts Thank You Phillip Roberts is the other one thank you so
much Gibbon what node.js is a JavaScript runtime built on
Chrome's V8 JavaScript engine why all right basically what they're trying
to say is the same [&nbsp;__&nbsp;] that lets you

02:30
run JavaScript in the browser can now be used to run JavaScript on servers
desktops and everywhere so when they say javascripts are the notice the
JavaScript runtime all they mean is that node is a place to run your JavaScript
just like we were running JavaScript in the browser
node.js is a place to run our JavaScript
because remember JavaScript doesn't come with a lot of goodies it's synchronous
by default and so when we run it in the browser we get all these goodies so
node.js gives us all the goodies as well
and it's built on Chrome's V8 JavaScript engine that's the same thing that
enables it JavaScript to run in our browser basically the V8 engine gives us
the compiler that breaks our human reader drop human readable JavaScript
down into something that the computer can understand uh it gives us access to
the garbage collection memory management all that fun stuff all right uh
we learned from the true story that is Independence Day that

02:31
our code has to be broken down into something that the computer can
understand right computers don't understand right
right computers don't understand JavaScript JavaScript is that we as
developers can communicate ideas with each other and build applications but
that has to be broken down to something that the computer can understand and
node uses the V8 engine to do this um now we're saying engine and not
compiler because V8 comes with more stuff than just the compound more than
just the stuff that breaks our human readable code down to something that the
computer can understand uh and just like the browsers came with
web apis node comes with a bunch of stuff as well
right so node comes within a bunch of built-in modules which are kind of just
like libraries or collections of functions that do all this heavy lifting

02:32
for us node comes with a bunch of code already written that enables us to
handle incoming requests and generate responses it comes with the ability to
access the file system and it stores all these functions that enable us to do
these things into modules so right off the right off the bat we'll use the HTTP
module and the fs module to listen to the network and to get file access
now the other cool thing is that node is really extensible because there are
millions of other packages that you can use to do all these really fancy stuff
uh and so packages are really just groupings of one or more of these
modules that do the heavy lifting and by installing packages you get a lot of
extensibility to make your node environment be able to do a lot more
than it originally comes with cool now the thing that's doing is heavy
lifting is no longer web apis right before we used to hand off stuff to the

02:33
web apis but with node it's really just C and C plus plus apis right and so what
that means is all the stuff that's doing the real heavy lifting that's really
doing the like giving us access to the network that's listening to the file
system let's keep it in opening connections that's doing all this stuff
is actually really built with C and C plus plus which makes node somewhat fast
right it makes it fast now could it be faster yes and there are other
environments that enable us to run our JavaScript that are trying to make
things even faster so the big talk right now something called bun bun is just
another environment in which to run your JavaScript that gives you these goodies
that node gives you access to the file system access to http and what they're
doing is they're rewriting a lot of these apis from scratch to be faster
than the original stuff that came with node nowhere near ready for prime time

02:34
but it's interesting to have an idea of how things might get faster in the
future cool I was like that's that's really interesting
what's your thoughts on Dino and all that stuff I think they're cool I think
they're fun I think I think theoretically these are fun things to
like learn about and think through I spent a lot of time with fun just trying
to see what they're doing trying to look at some of the code so I can maybe
figure out what's actually happening um but for me none of these things are
ready in prime time um as an engine hold on let me check on these dogs real

02:35
quick right back I have the smartest dogs in the whole wide world
so my wife was trying to come back into the house and I guess they're struggling
with the door so my one dog comes into this room like opens the door into this
room and leaves so that I could come to help with the door
like didn't come to me this open the door other one starts barking comes to
get me and then wife comes back in like what [Laughter]
and so that's what they were barking for I love it all right so a lot of these

02:36
things are fun right like no like learning about Dino and Bun are fun
um but for me I'm not ready to use them in Prime Time right buns nowhere near
ready for you to use in like production level code uh it's not even at its 1.00
yet um and for Dino even though they're there
I don't want to have to worry about edge cases right when things don't work I
want I want years and years of stack Overflow right I went years and years of
stack Overflow and people that have been building on top of it if that's what my
business relies on right so for me uh I'm always kind of slow to adopt the
latest and greatest unless there's something that's really essential for me
to continue to build products and the thing is that none of these are
essential yet um yeah uh and so as indifferent as saying right

02:37
now yeah Dino doesn't have enough market to grab Market grab to matter yet since
they're not really there yet that's not something I'm going to use in my
products my projects um some folks really like to be on the
bleeding edge The Cutting Edge using all
the latest and greatest tools not for me I want to be able to build stuff
um that works that's battle tested that I don't have to guess and figure out and
um yeah I don't I don't like to chase a lot of the latest and greatest until
there's a really strong Community around it yeah yeah
Lord Coco said Pioneers die settlers Prosper yeah that makes sense
all right so we're building on top of a lot of these like really fast kind of
um standard libraries which makes writing node or writing JavaScript that
runs in our node environment uh really suitable for being on service because
all this stuff has to happen fast right these requests need to get the responses

02:38
in back in under three seconds and if it
takes more than three seconds well guess what people bounce
all right uh so if you haven't installed node uh you can just go to the main
website click install node and you'll notice this is a this is an older photo
but you'll notice that there are a couple different versions of node there's the
LTS the current and the nightly so LTS is the long term stable it's the version
that's going to be supported for the longest period of time remember people
are using node to build their businesses on top of and so you want to know how
long the developers are going to commit to maintaining that version of node so
you'll see that some versions are in current development then they go into
like their active phase and then they go
into their maintenance phase and this is an older photo
um I think 8 18 is the current version right now right actually let's just look

02:39
no I clicked the back button instead of so as I'm going back on my keyboard
brain fart uh yeah so 18 is the current version 16 is
the LTS which is the long term stable it'll keep getting uh maintenance
security updates all that fun stuff for the foreseeable future but all the
newest features are in 18. so sometimes you might need a like a new feature that
comes in the node ecosystem might fundamentally change your business and
you might start using 18 but most folks are going to build on top of 16 and not
have to worry so you can kind of quickly see like when
they're going to be maintained till So like um you can see that node 12 is still
just kind of came off of its maintenance period node 14 is still maintained into

02:40
2023 right and uh 16 will be maintained for a very long time yeah
uh most folks that go through the program stay on the LTS while they're
doing it but being on 18 won't really impact you at all for this program just
know that when you join a company your company might be on a specific version
of node that you would have when you set up your environment right when you get
that sweet new computer from your org one of the first things you're gonna
have to do is set up your environment and that means like setting up the
version of node that they use all the same tools that they use right and so
that's where this comes into play now if you want to live on the bleeding
bleeding edge you can use a nightly release which is where all the stuff
that just got built is thrown at you but it could break easily current is like
all the cool stuff that's already happened a little bit more tested a
little bit more stable than alts is the actual long-term stable version cool

02:41
all right so let's look at a very simple
node server so a very simple node server can just use the core modules right
http and Fs the core modules that come with
node we require that module for HTTP we require that module for fs and then here
is using that module modules are really you can just think of them as an object
that has a bunch of functions and properties or properties and methods
tied to it so these modules are just files that are big objects that come
with a bunch of pre-written functions so that we don't have to write all this
stuff from scratch and in the HTTP module comes with the create server

02:42
method how can I tell that create server is a method
Tucker said oh nice area there's also simple back then
yeah we we can see that there's uh some dot notation and then we see the
parentheses right parentheses opens parenthesis closes so create server is a
method and we can tell that tell this method because it's a function tied to
this HTTP object there's dot notation here the reason why I started off by
talking about objects right right the reasons are talking about objects and
methods is because when we're writing code in our node environment it's still
the same stuff it's still the same stuff right
and so we have this lovely HTTP meth our HTTP object that has a crate server
method and then this create server method enables us to create our server
and then we have the ability to use the fs module to get actual files off the

02:43
server so if someone goes to our server that's currently listening on Port 8000
just by running the code they will go and require the fs module to find the
demo HTML file and to respond with that file so if you were running this code on
your server it would enable folks to make a request to the default Port 8000
sorry default route on on our server and it would respond with this demo
file.html so if you just wrote this very simple code you have now built a full

02:44
stack web application 10 seconds five seconds [Music]
this line of code to run you're a full stack web developer
everything else from this point forward is making your life easier
it's adding systems so you can get stuff done
it's adding uh systems that you can work with other developers but it's all just
about improving your quality of life so if you're new or you are
um or you are part of the ketchup crew haven't gotten here yet uh you can run
and execute this line of code uh open up your vs code pop this in right create a

02:45
HTML file called demafile.html do node and then whatever the name of
this file is and you are a full stack web developer right
everything else everything else is making your life easier cool
I've made full stack apps and still don't feel like I know anything welcome
to the club there's always more to learn and that's the beauty of being a
software engineer no one person can know everything you're always learning
something new you're always standing on the shoulders of other people's code a
lot of folks get down on themselves because they feel like they're copying
and pasting too much that they're not they're not doing real work but that's
what we do we use libraries we use Frameworks we use things that other
people have written to build the things that we want to build at the end of the
day as long as we're building we are doing what our role as a software
engineer is there's always time to go deeper there's always time to learn more

02:46
if you choose to but at a very base level even when we're using such bare
methods the core node methods you could spend your whole career on just really
optimizing the HTTP method in fact there's literally people right
they're literally people right now that are disbending their their their their
time right right they're literally spending their time right to rewrite
these core modules right that's what bun is doing they're literally a whole
organization that's just nerding out about these little things to make the
environment faster right so we stand on the shoulders of giants and it's always
okay to reuse to build because at the end of the day the companies that hire
us hire us to solve problems it doesn't matter what tools we use or how we use
them is do we get the job done do we build stuff or not do we serve up stuff

02:47
for our clients or not foreign all right so that's a very simple back end
right let's look at like a Squidward back end something a little bit more
complex you know a little more a little more to it you know so how would we
clean up this type of of back end um actually pull up that code I don't
think I shared that code but let me pull up that code um
let me show you a more complex back end here
so here's a little bit more of a complex back end

02:48
we're still using the raw HTTP method still the raw FS methods but we're also
using some of these other raw methods that enable us to like look at URLs
enable us to look at the strings that are part of the URLs and we we've done
this in class we went over this bazillion times so I'm not going to kind
of do it right now with us so if you're like Leon this is we have I don't
remember this full class on just using these core methods to build stuff if we
look at this we have this lovely create server method
and what we're doing is we're checking to see the different requests that are
coming in is it the root route is somebody trying to go to some other page
am I trying to go to some other other page are they trying to go to the API
let's actually run this code so let me go ahead and open up um my
terminal here and let's go ahead and just do node and then the name of this
file this name is called server.js right this is called server.js node will try

02:49
and run this server.js file and if it works I should have a server
running on Port 8000. let's go ahead and run this
looks so weird after using Express exactly also looks weird because I don't
have any notification that my server is running but how can I tell that my
server is running how can I tell yeah I the rebel I I haven't gotten back
my Rebel to write another command there's there's no place for me to write
another command so I know that this code is running so let's go back to the
browser and try seeing what happens localhost 8 000
there we go we have our very simple application and when I went to this main
route the code that executed was this line right here hey they went to

02:50
localhost 8000 on the root route what I need you to do is to grab this
index.html right grab this H index.html and respond with it so when they went to
localhost 8000 we were able to use that FS module to grab that HTML file and
serve that up to our users at the most fundamental level this is what a server
does it hears that request and serves up the file now the cool thing is if we
look at this index.html uh it makes another request it's requesting our
style sheet and so since it's making a request for our style sheet our server
needs to be set up to hear that request right so if we look at our server.js we
can tell it works because we're seeing a red color here so we have to look
through this and be like all right boom boom boom boom boom boom boom boom boom

02:51
boom all right here we go if you're asking for the style.css grab the CSS
file and respond with it right so every single request is just here in this
massive conditional and when it's very very simple site right when it's
something that's very simple there's only a few things that you're
doing this could work right we we could we could build very simple servers very
simple sites that build off of this principle right just every every route
every file every request is its own part of the conditional but it's so messy
there's so much complicated stuff going on here it'd be really hard to build off
of this like if it was your job to just make this specific page work and
somebody messed up somebody messed up a request right
somebody messed up a request we'd be in a bad spot all right we were

02:52
looking at this server and we were talking about each and every single
request right each and every single request right each and every single request
um we had the hand code and the problem with this being all one big massive
conditional is what what are some problems we can run into with this being
all one big massive conditional it's ugly yeah it's not manageable it breaks
easily it's hard to read it's confusing um
it's not manageable when you're working with others specifically right like if
we're working together and like you bork this like piece right here
will any of the other code below it run no it's also not modular exactly or it's

02:53
a lot of repetition here there's a lot of unneeded complexity that gets in the
way of us writing our application so does it work yes could you build a fully
featured full stack application with raw node modules absolutely kid but
how can we clean this up how can we make it so that our code is more manageable
that has a little bit something that that other folks that
um when they come and work on our projects that come and work on our projects
um could could work with us well yeah Express
so Express uh helps us clean up this hot mess of code
right I also clean up this hot mess of code I propose I don't know what Express
says express is a fast unopinionated minimalist web framework for node.js
with a myriad of HTTP utility methods and middleware at your disposal creating

02:54
a rust or bust API is quick and easy what how do people talk like this all right
fast means it's fast right like it it's it's
it's it's not slow we get that one got the first one
un opinionated what does unopinionated mean the heck does that mean
do what you want exactly it doesn't really care how you use it it

02:55
doesn't care what you bring along with it express does one thing and one thing
really well which is help you build out your API but there's no like there's no
specific way that you have to use it they don't care how you use it they
don't care what you bring along with it it just gets out of your way it's
minimalist it's just the web framework it's just for helping you build out your
API there are definitely more opinionated Frameworks that do more for
you so one I've been playing with recently is called Adonis let's actually
look at look up Adonis so Adonis is a fully featured web
framework for node.js right and so it comes with all this stuff
um routers controllers file uploaders validators a template engine now let's
think about that all the stuff that comes out the box with Adonis

02:56
uh router we're using the express router because it's helpful but we could use
any router that we want um controllers we kind of we kind of
build our own with with Express like we we don't we're not locked into a certain
way of building our controllers Express you just kind of use it file uploads
that Express like really care about our file uploads are we using something else
what are we using for our file uploads molter exactly we're using multi right
so expressed it and tell us to use that that's something we picked up on our own
um we're doing kind of the validation already on our own we were doing it with
like our sign ups and our logins we were handling all the validation and stuff
like that um and then there's like some other this
is actually something different but that's kind of an idea and then the
template engine what were we using we were using we're using
um ejs but we could use pug we could use something else right so Adonis

02:57
is opinionated right it comes with some ways that it wants you to do these
things right it comes with some ways that it wants you to do these things
um it comes with some decisions that have kind of been made for you about how
you're going to use this framework and so this would be a more opinionated
framework whereas Express would be unopinionated because it lets you pick
whatever the heck you want right let you let's let you choose the
things that you want to choose uh when you're dealing with Express and so some
folks find that freeing and some folks find that limiting right it depends on
the team that you're on um minimalist means that it just handles
the the building of the API and so has a
myriad a lot of HTTP utility methods and middleware middleware is just the stuff
that sits between the request and the response enables us to build our API
remember the API the request comes in our server hears the request what do we

02:58
do to respond that Express's job right expresso's job is just to handle
building that API it doesn't care how you do anything else
it doesn't care how you do validation doesn't care how you use different
templating languages it doesn't care how you do file uploading it's just the
request response architecture to build out your API
uh is there a class on multer we haven't really gotten to it yet that'll be
Tuesday uh Tuesday we're going to look at molter and cloudinary in detail
because we just haven't gotten there yet with binary upload boom
sounds like Express with extra steps so if you're talking about Adonis yes it is
expressed with extra steps but there's a specific way that you're buying into
when you're using Adonis and if your team all buys into that way you might be
able to build stuff a little bit faster so that's why some people like

02:59
opinionated Frameworks because there is a way of doing stuff and some people
find that especially when you're newer right when you're newer to development
and you don't really know what's out there having someone out there say just
use this templating engine or just use uh this way of talking to your database
or just use uh this way of storing stuff
in the cloud right can be a little bit a little bit freeing right it's literally
telling you what to do and so some people enjoy that but we
start with Express it's the most common thing you're going to see
um the most common thing you're going to
see right and uh you're going to be able
to have the freedom to use the different
bits and pieces that you do and when you join a team your team might use a more
opinionated framework yeah uh Brazil RoR or Ruby on Rails was one of the
really first big Frameworks that really became super populated uh super super

03:00
popular it's very opinionated and people call it magic right there's there's a
lot of magic that happens when you use Ruby on Rails where things just work but
you might not really know what it's doing underneath the hood right you
might not know what's doing underneath the hood or how it's doing it but you
don't care because it's doing the thing you need to do it another another
version of that is laravel for for PHP where it's doing a lot of heavy lifting
for you it's a lot of magic that's doing all these things and it kind of just
works so web Frameworks can be really nice we start with Express so that you
understand what all these different pieces bring to the table and then you
get to choose if you want to do something more opinionated mm-hmm yep cool
I see a lot of Ruby jobs uh yeah um because it's been around for a really

03:01
long time so a lot of companies um have have been using it for a very very long
time and so and a lot of specific locations Ruby on Rails is pretty
heavily relied on but there's definitely
more if you look at Legacy exactly a lot of Legacy code bases are Ruby on Rails
but it's definitely not as popular as it used to be especially now that
JavaScript and JavaScript Frameworks and things like that are a big deal
but there that's why I think it's really important to know your local area and
this is gonna be something we talk about um when we start the hunt if you're
applying for jobs in Boston it makes sense to have a quick Ruby on Rails
tutorial project in your portfolio because there are just so many Legacy
companies that have used Ruby and rails in Boston for so long and a lot of
different locations have different different pockets of technologies that
they use that are really popular so certain places PHP is really popular

03:02
some places job is really popular and so while we're using JavaScript and full
stack JavaScript as our base once we get to the hunt once we get to the hunt you
might take a weekend to do a Java tutorial or you might take a weekend to
do a laravel and PHP tutorial or you might do something that's specific to
your area because it might give you that leg up when it comes to the job search
and so that's something that we'll we'll talk more as we get into the hunt but
that's something you should expect to do is to like have a deep understanding of
what's happening in your area cool uh but before we start using Express
let's talk about how the internet works uh let's talk about how the internet

03:03
works uh let's talk about um let's talk about requests
and responses and what actually has to happen as we build out our API so our
API is just a set of rules that allow programs to talk to each other the
developer creates the API on the server and allows the client to talk to it this
is from Zell's tutorial on crud apis you have not gone through sales tutorial on
credit apis yet you must absolutely walk through that tutorial it's definitely a
doozy as your first intro but it has so many important bits and Bobs that come
up to the rest of program and so definitely worth while giving a read cool
uh so if we're talking about how the internet works we're going to be making
uh we're going to be making the link is in the slide so you just click in the
slide you click anytime you see a blue blue text in the slides
um anytime you see blue text in the slides uh that's clickable yeah

03:04
yeah I need to do zeligan now that I understand it better absolutely it's one
of the most important things you can do as a developer is one of my favorite
things to do is to go back through the stuff that gave me trouble and feel like
a boss right or at least pick up new stuff each time uh one of the most
wonderful things about building these lectures is going back through material
I've already learned and trying to think of new ways to like teach it to others
and that concept of like C1 do one teach one is really really important it's one
of the ways that you'll solidify Concepts forever in your brain there are
some things that like like one of a very common interview question is tell me
about oop right what is encapsulation what is
abstraction what is polymorphism right what is inheritance and a lot of folks
struggle with that question because that's what you think about every single

03:05
day but once you've built a lecture on oop right once you've built a lecture on
MVC right those things stick in your brain a little bit better and so uh the
the aspect I love about Community taught is that you should be taking time on
Discord to answer people's questions not necessarily for them but for yourself
right answering somebody's question figuring out a way to explain something
in simpler language right really helps these ideas cement it is a form of
active recall it is a form of space repetition and it's a way of building
these like new ways about thinking about problems and when you do that
it sticks in your brain and so I really encourage you to be active on Discord
just not even to get help with your questions but help answer other people's
questions right and don't be afraid if like somebody's already answered

03:06
something to like maybe explain it in a way that made sense to you right because
you explaining stuff in your own words might click for someone yep cool
all right so we have these different kinds of requests that might be coming
into our servers we have create requests we have read requests we have update
requests and we have delete requests so we can create read update and delete so
um typically we'll hear these create requests called posts we'll hear it read
requests as gifts and we'll hear updates
as puts and we'll hear deletes as delete now the reason why
we have these different methods this post to get the put delete is because
we're sitting on top of some very serious Technologies right we're sitting

03:07
on top of HTTP we're sitting on top of TCP we're sitting on IP like all these
technologies that make the internet work the methods that those Technologies
understand are the posts that gets the puts deletes the patches all these
wonderful stuff okay now we call it creating reading updating and deleting
because it's a little bit easier for us to communicate our ideas to others when
we're talking through it but our applications pretty much every single
web application that you will build is really just doing these four things over
and over and over and over again right uh dhhzz hey thank you for the hydration
cheers to you it's wild that credit's just a kind of
convention exactly it is kind of wild all right
cool so we can think about every major application is really just doing these
four things you're either trying to create something you're trying to like

03:08
read or get something you're trying to update something you're trying to delete
something no matter what no matter what type of request it really
breaks down to these four types of Things Different a have a good rest of
your day thanks for hanging out with us for so long we gotta catch up
big things coming down the pipeline I need your help [Laughter] all right so
um we're gonna take a look at some apps that do this crud the creating the
reading the updating the deleting and we're gonna need some other bits and
Bobs in our flow if we're going to if we're going to really understand how
these applications work we know that we can create these different types of
requests creating reading updating deleting but we're also need a place to
store stuff that's why we're using mongodb mongodb is the database that we
start off with we'll have a little bit of postgres at the very end of program

03:09
if we have time so mongodb is the database we're using right now mongodb
is wonderful because it's made up of Collections and each collection is made
up of documents and documents are really just what
objects they're just objects so if you know how to use objects you know how to
use mongodb that's what makes mongodb beautiful
we have the ability to Simply have these
wonderful documents we can pull them out of the database and use them just like
the objects that they are that's how we started off with reviewing objects
because if you understand how objects Works they have properties right they
have methods and we can use dot notation to pull stuff out of them or to consume

03:10
them you can use mongodb as your store right we're going to use ejs as our first
templing language right EGS is what we're going to use it's just a template
we can plug data into it and that will eventually render and spit out HTML
right it'll render and spit out HTML and so I like to think of ejs as just a
really fancy Mad Libs where you have like this template you plug data into it
and that's it and so ejs for some folks is really tricky at first but it's
really just understanding that it's HTML
that you can plug JavaScript syntax into and the way you plug in this JavaScript
syntax are with these Beast things here you can open a little bit of JavaScript
and close a little bit of JavaScript with these bee stings right
and we can actually plug in individual variables with these different beastings

03:11
here so uh once you get comfortable with those two bits of syntax opening blocks
right opening blocks of code and inserting individual variables you can
build out any site that you want right any site that you want by just plugging
in the data that we're getting that we're getting from our [&nbsp;__&nbsp;] DB
now let's talk through a simple application
I had here walking through the original rap names application that we had um

03:12
but I might skip to I might skip to a to-do list um
let's take a look at the original let's take a look at this this rap names list
um actually no I'm gonna skip right to the to-do list I think I think this is
part of the review we can save some time here uh by jumping right to the to-do
list I know that that's a little bit of a an extra step but if we look at our
to-do list we still have these uh we still have these uh create posts right
create read update delete and we still have
this normal structure so I'm going to jump past the wrap names and I'm going
to jump right to the to-do list yeah all right so if we're going to plan out
a to-do list right if we're going to plan out a to-do list right
I'm gonna point out a to-do list what are some things that we're going to

03:13
wind up creating what are some things are going to wind up creating
to Do's yeah if we have a to-do list we're going to wind up creating some
to-do's right some some some to-do's that are going to go on our list the
actual tasks the items that go on our to-do list nice so
our application is going to have some creating
and that creating to be simply creating the to do's now what about reading
what are some what is the read request going to be for our application
what are we reading what are we what are we getting
yeah we're getting the list of to-do's like we want to be able to get those to

03:14
Do's ideally probably from our database right and show them to our users nice
how about uh updating what could we update what are some what is something
we might update about our our list of to do's
yeah whether or not we completed that to do so we could have like a to-do that's
either completed or not complete right uh and so we could we could update our
to-do's as to whether or not they are completed right so we have a to-do list
each item will be either completed or not complete
and we can have a delete request what do
we when we're deleting what are we doing
what are we doing in our to-do list when we're deleting stuff

03:15
yeah we're actually like removing those to-do's like we're deleting those to
Do's uh from our from our application now
as we've learned with binary upload boom maybe we're not actually deleting those
things maybe we're just kind of like marking them to not be shown so that you
think they were deleted but we still retain all the data for nefarious I mean
for our purposes right but in this idea for a very simple
to-do list we're just like deleting that to do cool all right so
here is the structure right the structure of our application
we are going to have a client that is consuming the application from
their client-side device whether it's their laptop whether it's from their
their mobile phone whether it's from their desktop we have a client that's
going to consume right consume our application and from this client-side
device they're going to make what to our server they're going to make what's to

03:16
our server they're going to make requests to our
server exactly electric codes hey thank you for the for the tier three I
appreciate that uh they are going to make requests to our server right now
there is some code running on our server that hears that request what do we call
the code that is running on our server that is set up to hear those requests
yeah we call that the API there is some code running on our server that is set
up to hear those requests and we call that code our API our API right our API

03:17
is going to be set up to hear those get requests the post requests the put
requests which are our updates and the delay Tang requests which are our
deletes right and that code will be set up to do different things as those
requests come in we are in control of writing our API as the request comes in
we get to control what happens when we hear that request they are server Smurfs
exactly they are very very fancy event listeners they're listening for an event
however this event is a request when it hears a get request we get the code what
happens when we hear a post request we get the code what happened when we hear
our put requests we get to code what happens we're here to leave because we
get to here we get to control what actually happens so

03:18
if we were to walk through our very simple to-do list right let's talk
through what a get request might be what would be a get request for our to-do
list application we want to see the list right we try and
load the page we want to see the to-do's exactly just trying to load the list
would be a get request so maybe our server is running on localhost 2121
all right 2121 so we load that root page we just go to the server reload that
route that root page we make a request right we're going to make a get request

03:19
from our client side to our server the code that here is that get request
is a part of our what the code that hears that get request is a part of our what
our API exactly so that API code right that API code is sitting on our server
it here is that get request what's the first thing we get to write
all the code there's gonna be a lot of code right a lot of code that's sitting
with this get request so much code what's the first thing that code's
probably going to do when it hears the get requests where does it need to go to
get our to-do's yeah it needs to go to the database
right it needs to find its way from hearing that request to our database
and in the beginning we were kind of just hard coded we weren't using models

03:20
or anything like that we were just we were just raw writing these these
requests right we just were already these requests that would go to a
specific database they'll go to a specific collection and would find all
the documents right so we can hear that get request we can go
to our database we can find all the collections sorry I find all the
documents in that to-do's collection and once we have all these documents these
documents are really just what chat these documents are just what I get
hyped when I talk about this this is this is mind-blowing that you understand
even just half of what the [&nbsp;__&nbsp;] I'm
saying right now like if you understand anything that's happening right now like
just think about that right first time I heard this was so confusing
now not so much I love that yeah each of these documents are really just an
object so we heard the get request we went to the mongodb database right we

03:21
found all the documents now we have all these documents that are just objects
where do we send all these objects to we send them to the ejs right we pump
all this data into our ejs template our EGS template is just a template right it
has a something that says hello and then a space that we can plug data
in so this first person name was Bob this other person's name was John right
we're able to grab that data and plug it into our template so that it says hello
Bob hello John right so all it is is a template we're
plugging the data into so our ejs we know if we're gonna show a to-do list
somewhere in our ejs is the makings of a list right there's a UL

03:22
right a list right and we're just gonna plug each bit of data let's say this to
do was red this was milk this was peppers and this was rice right these were the
these were our to-do's what we're going to do is we're going to grab these
individual documents boom plug in bread plug in milk plug in
Peppers plug in rice and once we're done plugging all this data into our ejs
template what does our ejs template spit out it spits out h t m o

03:23
right it spits out that lovely HTML and once we have the HTML what do we do
with it what do we do with this HTML that we
just generated we just built from our template what do we do with it
we respond with it we respond with that HTML back to our user so our user
went to our website they just wanted to see the to-do list
they didn't know just by typing in that URL they had made a get request
from their client-side device that get request made its way all the
way to our server our server has some code running on it called our API that
heard the get request we got to write right we got to write the code that once
we hear that get request what happens just a fancy click event we said hey

03:24
when we hear that get request go to our [&nbsp;__&nbsp;] database find the
collection for our to Do's grab each document from that collection
and plug all that data into our ejs right our ejs takes in all that data it
builds out the to-do list as HTML and once we have this HTML that gets
rendered from the ejs we respond back to the user they hit enter and all this
stuff had to happen had to go all the way from their their client-side device
all the way to our server in Chicago all
the way back right and since we're using
[&nbsp;__&nbsp;] Atlas not only did they have to go
to our server then our server made a request to our mongodb our mom going to
be responded to our server our server took that data and then responded back

03:25
to the user and all this is happening in seconds right seconds
I don't understand but I'm still here watching almost five hours hey
I love what Rascal 2 said yep it's only a matter of time and effective study
you'll get there you already did the hardest part and started oh yeah
what I don't understand is why not loading the data thanks to fetch on the
front end um you can make fetches in fact we'll
use fetches for our update requests but we have to understand that there are
some other types of requests that we can

03:26
make simply entering a URL or refreshing a page is a request right is a request
not submitting a form is a request uh doing fetches is a request and our
servers right our servers our servers are set up to hear all these
different kinds of requests all right so to hear all these requests
how many mugs do you have well this is for my teen water or tea and water
depending where you're coming from and this is for the uh magical elixir of
Gogo juice um I gotta keep them separate first everything was objects and now
you're saying everything is a request but but Rascal too what are these

03:27
requests we've seen the request what the request what we we console log the
request what this is the request body the request the
object we console locked the request object which contains the body property
cool all right so we've gone to our to-do list we've loaded the list
um what would uh what would be an what would be a create request here what
could trigger a post request on our to-do list application
yeah adding it to do when we fill out our form to add a to do right

03:28
ah welcome Palazzo hey uh when we when we fill out the form we add a to do
right that is making a post request we fill out the form we hit
submit on that form that request the filling out of the form
leaves our client-side device it makes it to our server there's some code
running on our server that hears that request
and this time it wasn't a get it was a post request and so now we're gonna have
some different code that we've written right that we've written for what
happens when we hear that post request right different code that we're going to
write when we hear that post request will this be upload to Youtube yeah our
reviews get put on on YouTube so this will be on YouTube for sure
all right so that code for the Post request right that code that we heard

03:29
from the post request that code that we heard from the post
request that request that came through that code is going to do some very
specific stuff that code is going to do what we just we just submitted a new to
do what do we think we have to do when we hear that post request
yeah we have to add it to our database so the request came through
and with that post request right with that post request
right along with that post request came in text that to do right when we

03:30
submitted the form along with that request was all the data we submitted
for that to do and so our post request the first line of things the first
little bit of code that we're going to do is we're going to say hey
go to our mongodb go to our to Do's collection and what I need you to do right
right what I need you to do is create a new document with the data
that came along with that request all right it goes down in the DB exactly
so it creates a new document with that to do in our database right creates a
new document that to do in our database and then once that is done once it's
added that new document to our collection what does the Post request do
it took the information that came along with the form it went to the database it

03:31
created a new document it plugged that data into that document what's the last
thing the post request does it responds right it responds back to the client
telling them to refresh right telling them to refresh and when
the browser refreshes when it reloads it makes a new what
makes a new get request exactly makes a new get request that request comes along
to the server our API here is the get
request we go to our [&nbsp;__&nbsp;] database we
find all the documents but now there's one new document that wasn't there
before we take all these documents we plug them into our ejs it's in the game

03:32
right plug them into our ejs our ejs spits out some HTML but this time the
HTML has one new Li a part of our list which comes from that new document that
was put in there from our post request we respond with that HTML and the user
sees that new list with the thing that they just submitted in the form yeah
it's wild that that it happens so quickly super fast
remember it's so fast because we're we're building on top of
some really impressive technology https TCP IP we're sitting on top of really
fast no uh C plus and C libraries that make up node
I said I cut this down so happy beautiful this stuff makes more sense to me than
CSS I feel the same way back end just clicks in my brain better than front end
does I enjoy writing front endings I find it pretty creative but I also find
the back end really creative I don't think you should ever limit
yourself in the beginning like all of you should be full stack

03:33
developers but you will develop a preference over time
um but don't narrow yourself down for the job hunt I think that's a big
mistake that a lot of folks make they tell themselves that I'm better at front
end or they tell themselves a better at back end don't limit yourself like that
you'll have plenty of time to develop a preference now's not the time
would images go to a separate server and then yes so our images are being stored
with cloudinary uh or like S3 so they're being stored on Amazon servers so
there's even more Hops and skips yeah will react make the front end easier
react makes more complicated front ends easier and makes uh your code more
reusable um we're just doing a little bit of
review of our to-do list right now so we
did our get request our post request and we're going to talk about uh updating
and deleting very very simple full stack crud app nothing too complex

03:34
cool alrighty so we're building a to-do list and so far we have
add it to Do's we've created to do's we've read and got our to-do's but maybe
our to-do's have the ability to say whether or not they have been completed
right maybe when we put our documents into our collection maybe the
documents have a completed property that at first is false
but eventually we can trigger that to be changed to true and that way when we're
loading our to-do list maybe the items that have been completed can look
different than the items that have yet to be completed so how could we trigger
this updating let's say we have a list of things so we have bread milk Chez

03:35
right how could we trigger this updating so that we know that this has been uh
completed we've already got the bread yeah what's the only thing that can that
can listen for clicks all right what's the only thing I can listen for clicks
are Smurfs exactly uh we could make a check box we can do we can do a little
hackier right um we can have our event listeners so our
event listeners is client-side Javascript right client-side JavaScript
that's listening for that click and when the client-side JavaScript here's the
click what can it do to make a request to our server
we're going to see method override this week which should be pretty fun it's
going to change this up a little bit but what can we do what could we do we we
hear the click what what can we do in our client-side JavaScript to send that

03:36
request to our server what could we do yeah we we talked a lot today about
fetch right we talked a lot today about fetch our client-side JavaScript has the
ability to make fetches so we'll use that fetch that web API
that web API to make a fetch to the server right so we send our request to
the server there's some code that's part of our API
that is set up to hear that request and the beautiful thing about using fetch is
we can say what type of requests we're making so when we make that request from
our client-side JavaScript we'll say that we're making a put request we're
trying to update something so that request comes along as a put there's
some code as part of our API that hears that request and we have some code that
we've written for when we hear that request

03:37
that code is going to do what that code that hears the put request what's that
going to do what do you think we're going to do
not trying to make a fetch out I'm always going to make fetch happen
yeah it's going to update a document exactly we're going to go to our mongodb
database right we're going to find a specific
collection sorry to find that specific collection for our to-do's and we're
going to find a specific document right that we're going to update the completed
property that was false we're going to change it to true
all right we're going to change it to true
and once we've made that update in our collection right we can respond back to
our client-side JavaScript saying that everything went okay and that you should
probably do what in a very very simple app no no no no no extra fanciness here

03:38
to refresh yep to refresh right we heard the we heard we we clicked we made the
put request to the server our server heard the put request we went to our
mongodb we found that specific document we changed complete it from false to
true we responded to the server saying hey everything went okay we did the
thing you asked us to do and we refresh and when we refresh we make a new
get requests the server that get request
just like we talked about before goes to the document goes to our collection
finds all the documents however this document is slightly different we plug
all that data into our ejs that ejs builds out some HTML however in the list
that we generate from that HTML one of those documents well it's going to be
look a little different because it had a completed

03:39
property of truth that HD movie generation is slightly different and we
respond with that HTML back to the client beautiful all right last one last one
what can we do with our to-do app to delete stuff
what can we do with our to-do app to delete stuff
yeah we can delete some to Do's maybe next to each of our to-do items
we have like a little Trash Can icon and we click one of those trash can icons
um but what can hear us clicking on that trash can that delete that delete
request what what here's that that clicking of the trash can
yeah it's our event listener event listener here is the click on the trash
can and when it hears the click on the trash can it's going to make a fetch

03:40
request to our server and it's going to tell it hey we're sending a delete
request and it's going to send some data
along with the request what kind of data is it sending along with the request
we're sending a request to our server to
delete something but what are we sending to the server what data is coming along
with that request yeah go free exactly what to do to
actually delete so we grabbed that to do
we send that to do along with our delete requests and we have some code that's
part of our API that here is that delete request
right that here is that delete request and when it hears that delete request it
knows what to do because we've written some code for it and our code is going
to do what the code that here is that delete request is going to do what

03:41
yeah it's going to try and remove a specific document from our collection so
it's going to go to our [&nbsp;__&nbsp;] database
it's going to find the document that we need to delete and it's going to delete
it right from our database right and then the last thing that this does is we
respond back to the client saying hey everything went okay and you should
probably what you should probably refresh because when
you refresh you're going to make a new get request to the server the server is
going to hear that get request we're
going to go to the [&nbsp;__&nbsp;] database we're
going to find all the documents in that collection however there's going to be
one missing that we had deleted so when we pipe all that data into our ejs when
there was four now there is three our HTML is rendered it only has three
instead of four allies this time they're part of our to-do list and we respond

03:42
with that new HTML Bop Bam Boom you have a full stack web application
that can listen for your create your reads your updates and your deletes
beautiful all right so this lays the groundwork uh for some some complex code
on top of this one we have to understand
how all this stuff is happening right we have to be able to look at and see all
right how are we crafting the get request how are we crafting the post
request like how are we sending these different requests how does it all work
how do we write out our codes and it hears it on the server side like we
understand at a high level how this is working but the nitty-gritty of how we
actually write the code that's what we need to get into next and once we start
writing code we're also going to have to come up with systems to make our code
organized so we're going to see how to write this code we're going

03:43
to see how to organize their code so what are we going to add once we once we
know how to write this type of full stack application what are we going to
add on top of it to help us stay organized yeah we're going to add some MVC
structure so that we can keep our our views separate from our models separate
from the controllers that are in the middle all right so we need to add some
MVC to it and then we have to add just the we have to add a little bit of
Authentication I had to add a little bit of
authentication and then we have to add a little bit of these extra cherries that
a lot of modern web apps would have like image storage or video storage or
whatever um and once we do that once we know how to
add MVC structure once we know how to add authentication once we know how to
add a little bit of the extras like uploading files and things like that you

03:44
can really build whatever it is the heck that you want so on Tuesday we will be
finishing up binary upload boom we are going to see molter we're going to see
image uploading we're going to set up cloudinary we're going to set up all
these things that are going to make our application run once we get through
binary upload boom we'll come back next Sunday and we'll build it from scratch
so we'll see all these pieces come together right and build it from from
the beginning using our template build it up so we can see all right here's how
the controller comes into play here's how we use our views right and once we
have this wonderful full stack application working that has
authentication that has image uploading that's a full social media website once
we have that since we're already using MVC what can we start to swap in and out
oh Angel gave me the stretch hold on one
second let me get my stretch in you know it's not that kind of stream

03:45
hold on hold on you want to see me stretching out you know what to do
only a million Channel points oh yeah oh hey oh all right thank you cool
now since we have a beautiful full stack application
and we're using an MVC structure what can we start doing if we decide to
what could we swap out yeah we could use something other than
ejs right a good portion of you hate ejs
well guess what we can swap it out if we wanted to right we can swap out what's
handling our views with something like react right and if we have enough time

03:46
at the end of program we could even swap out mongodb and use something else like
postgres our application would still work because we separated out our
concerns right our views are in one area our models are another area our
controllers are in between so the beautiful thing about MVC is we can swap
out all these different pieces and that's what we're going to build up to
so next Sunday we're going to walk through the to-do list and binary upload
boom from scratch we'll see it all come together we'll ask tons of questions I
want to spend our last half an hour of our six hours together uh doing some
hunt stuff because that's coming up very soon something that I want to give
everybody a refresher on especially folks that are part of the catch-up crew um
this is stuff that you need to be start thinking about now anyway so let's talk
about it you can see all the slides are here so this is all the stuff we're
going to go through next Sunday uh so if
you want to take a sneak peek it's there in the slides we're going to go through
all this wonderful stuff but let's take a few minutes to look at all this crap

03:47
we're gonna do next Sunday oh boy uh let's talk about the hunt
and uh what you need to start getting ready to be prepared I know folks are
really trying to gear front Tober but if you're not gearing up for October these
are things you should be doing and incorporating into your daily practice
uh so that when you are ready for the hunt you're ready to Lock and Load so
the first thing is the checklist right first thing is the checklist the
checklist is a bunch of professional stuff that you need
right that you need right to help you build the Baseline for your hunt and the
good thing is the sooner you start this professional checklist and get this done
the more opportunities you'll see start to come your way once your LinkedIn is
done your professional Twitter blurb all that fun stuff is done right once this
is all done you're going to start to see recruiters hitting you up you're going
to start be taking a little bit more seriously when you go through uh your

03:48
applications so um I I recommend that you finish this as
soon as possible to let all this stuff start marinating right let all this
stuff start marinating because you want it to be showing up in Google you want
it to be showing up uh when somebody types in your name right and you can do
exclamation point checklist here in chat to get this checklist
uh my first inbound recruiter contact was literally the day after I updated my
LinkedIn it works I'm just telling you it works right you'll notice that a lot
of folks um that I've been posting in the celebrations channel uh if you're new
around these parts we have a celebration channel on our Discord literally
hundreds of folks have posted that they've gotten jobs and how they got
jobs boots on the ground information go check out that um celebrations Channel
but the the checklist the beautiful thing about the checklist is that once
you start doing it it starts to marinate and the longer you let it marinate the

03:49
easier it will be for folks to find you and for offers to come your way
and we do all this stuff so we can pass the
sniff test we all have a new engineer or the dreaded bootcamper smell and when
you go into these interviews you do not want to have that smell you want to be
treated as an entry-level engineer that you are and to pass this sniff test
there are some things that we can do so that people treat us like the
engineering talent that we are one of the things you can do to help you
stand out as an engineer and to pass the stiff test is to push code every day
some folks don't like to think that those green squares matter but they do
it's a mental thing when somebody's looking at your GitHub and they see that
you push code every day there's a switch that goes on in their brain that says
this person's about this life that's all you need you don't need them to see the

03:50
quality of your code you don't need them to see that you that you are a good
developer it's literally just the fact that they're there they'll go they're
about this life right and that helps you when somebody's trying to evaluate
whether or not you can code and they see
that you've push code every day it's one of the things that lower your smell it
starts to wash away the stink right your hit list one of the most important
things you'll ever do for your career and uh something that's due on Tuesday
it's finding the companies right finding the companies in your area that have
open applications if you weren't here for Thursday's class I I showed you some
Hit List magic some one thing that you plug in
to Google that will show you all the open roles that have been just posted so
if you haven't watched that VOD you need that one thing you'll find all the

03:51
companies that are hiring in your area specifically with the stocks that you're
using it'll remove all the nonsense of senior and all that stuff use that magic
right fill out your Hit List you fill out your hit list of the 60 companies
that you're going to be applying to with these open roles
and the reason why we add them to our sheet so we can keep track of it uh The
Hit List magic was in our most recent class so Thursday's VOD
um from Thursday's class has the the magic or you can check out the slides
from Thursday as well right 40 or do Tuesday yeah 40 or do
Tuesday you're adding these open rolls to your sheet right to keep track of all
these open rolls right keep track of all these open rolls and we're going for 60

03:52
recommended applications so that means once you add 60 companies
to your hit list sorry 60 we're going to say 60 60 open rolls to your Hit List
once you add the 60 open rolls to your Hit List your networking becomes focused
right your networking becomes focused you are going to start reaching out
right we're going to start reaching out right to pokes that work at those
companies we're gonna have a whole class on this we're gonna start reaching out
the folks that work at those companies with the end goal of getting them to
recommend us clicking apply is a waste of our time but if we can Network our
way in our applications are taken way more seriously right
are taking way more seriously right are taking way more seriously and

03:53
it helps us immediately immediately get past the sniff test
right helps us immediately get past the sniff test
and so the reason why we go for recommendations over clicking apply is
because all the things that you're worried about when you apply disappear
when you get recommended years of experience doesn't matter right
technology is in your stack don't matter when you've gone past the robot that's
filtering out resumes and you've gotten connected directly with the person that
is hiring your application is treated differently so we add the 60 open app 60
open roles to our hit list and then we're gonna have like two to three
classes where I show you how to contact those roles find people that work at
those companies and get recommended not apply
foreign I got a referral went straight to resume review with their HR no coding

03:54
outside of 100 devs let's go all right once you add these roles to your Hit
List uh you're gonna find a couple people to talk to
uh you're gonna find the hiring manager at that at that role uh you're gonna add
them to your Hit List you're going to follow them on Twitter you're gonna find
their email on Hunter i o You're gonna ask them for a coffee chat once you have
the coffee chat you're going to send a thank you and then you're going to get
the recommendation to the role right you have 60 open rolls you're
gonna try and find the hiring manager for each and every single one of those
roles add them to your Hit List follow them on Twitter find their email ask for
a coffee chat send a thank you get the recommendation we're gonna have a full
class on how to do this but this is what you need to start doing once you add
those companies to your Hit List you're gonna start finding the people at those

03:55
companies to interact with don't ever just click apply
don't ever just click apply it is a waste of your talent and energy this is
the way that works get referrals into these companies it will work well you
have the off chance where you randomly click apply maybe you get in yes but I'm
not talking about one-offs I'm not talking about one person that's been
successful I'm talking about hundreds of students that I have helped get jobs do
we have a few that get lucky click applying at the job yes when I'm talking
about hundreds macro level big picture the folks that get recommendations get
jobs 99 to 1 against folks that just click apply
eventually once we're done uh with our Hit List we found the companies we've
been networking Folks at the company we're going to create 30 high value
applications where you're going to have a custom resume for that application

03:56
you're gonna have a custom cover letter a custom story about why you're a good
fit for your the role and when you're talking to these real living breathing
humans at the company you're gonna show this stuff that shows and makes them
think you're the perfect fit that the role was built for you I'm going to show
you how to do this then you're going to have 10 premium
apps after you go above and beyond the call to make sure that you stand out in
the job search process you're going to do all the custom stuff in the previous
page you're going to make tweets about the the the the the industry they're in
you're gonna have a blog post about the industry you're gonna have a small
simple project that you do over the weekend for that company these little
things in the end pay off huge dividends I have so many folks that go to the top
of the pile because they spent three hours modifying binary upload boom to
look like to look like what company you're playing to

03:57
ending with Ollie hey thank you for the raid hope you're all doing well
welcome welcome thank you for the raid hope you're all
doing well hope you all had a good day we are we are five and a half hours into
a six hour review class on the back end and we are talking about the job hunt
and the things that we're going to be doing to get our jobs locked down
we're gonna have a whole class on premium apps don't stress
your hundred dollars project guess what you should be starting your hundred
dollars project already you all have the binary upload boom code to up to to use
as your your base for your 100 project you could start with the front end if
you don't feel comfortable with the back end yet you should be well on your way
to starting your 100 hours project don't delay start today all right
I recommend 100 hours projects that you're really passionate about something
you would want to build or at least something that ties your past into your

03:58
presence when we did our crafting your story interview one of the easiest ways
to explain gaps in your employment history to explain why you weren't a
developer for the past couple of years is by having a good 100 hours project
that ties what you were doing to what you are doing so if you were a server in
a restaurant for five years you build a new ordering system because you hated
the point of sale systems that you're using and you use your engineering
skills to change that industry right you can start off with your we're gonna
worry about this you start with wireframes but you should be well into
building your 100 project cool let's talk a little bit about
interviewing and then we're going to save some time for questions
there is a process to interviewing uh we don't click apply we either get
recruited or recommended you're gonna have a phone screen a behavioral screen

03:59
some technical questions maybe a take home maybe a live coding session either
in person or on on the interwebs and then sometimes you have like a wine and
dine interview where they know they want to hire you and then they make an offer
every company is wildly different and a big part of what we're going to be doing
during hunttober is making sure that we're ready for this process and
whenever comes our way once we get recommended because we've done The Hit
List process right uh we're gonna research the living hell out of these
companies we're gonna find every single thing we could find about this company
that has ever been published online you will be surprised the amount of time you
can find the exact interview questions you are going to receive on Glassdoor on
GitHub on blind whatever it may be I've shown this before let's go to GitHub

04:00
let's search Spotify interview not on mine none of my repo
I almost got myself got there all right take home task Spotify interview
Spotify interview from April Spotify interview right like there's just so
many there's so many this is just the first thing we typed in right like ah
full full day like full code like full answer right so you will be surprised
the stuff you can find by just researching the company like somebody's
gonna pay you six figures if you figure it out uh so the beautiful thing is a
lot of times you're gonna find stuff on Glassdoor get a blind you can ask other
people hell just ask your interviewer what you should be prepared for and nine
times out of ten they're gonna tell you exactly what to prepare
right we're gonna talk a lot about this we're gonna have full classes on how to
how to find this stuff and how to be prepared for those interviews but

04:01
something that you can start now so that
you're ready for these interviews is the bank so you can click the link or you
can do exclamation point uh bank here in
chat the bank has all the questions that you can prepare uh both behavioral and
Technical so you stand out in your interviews don't listen to me go into
the celebrations Channel and read the number of people that said my interview
consisted of exclusively questions that were in the bank
there are literally dozens of people that have gotten jobs that are in the
celebrations channel that say every question I was asked or pretty
much every question I was asked was literally on the bank you could be
prepping the bank you should be prepping the bank right
uh Fox yes fox has member of the shooting team has tons of streams where
they work through the bank so you don't have to work through the bank by

04:02
yourself you can do it live with the stream team you can do it live on
Discord jump into a voice Channel say you're doing the bank and work through
it together right the bank helps you pass these interviews
it's literally the stuff that's going to come up in your interviews that helps
you Excel stand out and pass the sniff test you can practice your behavioral
questions you want to cause action result for every question on that list
cause that my last company at my last opportunity action the steps that you
took result why you're the best thing the best thing that has ever happened
since you took that action we have a full class on cars on YouTube you can
watch that we've gone through this before like on how to interview so if
you need a better breakdown of cause action result the stuff you should be
practicing your technical questions EU explanation use example for every
questions on the bank EU for your technical whiteboarding you can be

04:03
practicing your code Wars using prep every single coding challenge you ever
do you should be prepping through that coding challenge don't ever solve
another coding challenge without walking through the parameters what's coming in
what am I returning what are some examples what is some pseudocode I can
write before I start solving the challenge because during the interview
that's what you're going to do coding challenges coding challenges in the
interview process do not it doesn't matter if you get the answer right I
have had people that have gotten the the complete wrong answer still get the job
because the interviewers love the way that they walk through the things they
were doing walk through the code that they were writing that they prepped
themselves through the process make sure you're practicing your prep
all right so your homework is to start prepping the bank it's the complete your
hit list because it's due Tuesday and to review the binary upload boom code that

04:04
we're going to walk through on Tuesday together we'll probably also do Thursday
because once we get through that you can
build whatever the heck you want and all these other things that I just powered
through become the thing that we focus on towards the end of September and
through October we're just going to add a little bit of react a little bit of
data structures algorithms bigger notation on top and we're ready We're
Off to the Races we need to start getting ready for the hunt so
uh we're gonna do that this upcoming week next Sunday we'll come back and
we'll we'll work more through the to-do list and binary below boom we'll see
that code come together but I want to end with some questions that folks have
been throwing in the slido um since I was here when the first car
cohort I have companies in my hit list from last year uh should I removed it
from my list yeah if the role is not open you definitely want to remove them
you definitely want to be making sure your Hit List stays fresh right make

04:05
sure your Hit List stays fresh uh you're welcome
uh how do you respond when interviewers ask what Dev top devops I said devtops
devops tools we've used um so you could say hey I'm not a I'm
not a devopsy person I'm a full stack software engineer uh I've used normal
processes when contributing code I mainly use git GitHub but typically I I
make my pushes I submit my pull request and the devops engineers that I've
worked with handle everything from there uh forward so it's not definitely part
of my expertise but it's something that when I'm working with a team I work
closely with the devops engineers to get that stuff done but what part of the
process what devops tools do you all use on the job and how have you seen your
your kind of everything from pushing code forward change over the past few years

04:06
right don't full stack devs no devops no no most full stack Engineers push their
code it goes live and then everything else that happens after like everything
that everything else that happens after you like you commit your code like
that's on devops to get it live to get it into production to get it staying up
and running yeah that's a whole different skill set
now do they do do a lot of Engineers know a lot about that stuff yeah but
devops a whole different career shout out uh Mastermind if you're
interested in devops stuff they do a lot of that on their stream
uh rec.body versus rec.params rec.body is all the information that's
coming through to nip typically with um typically coming through with like
submitting forms or information that came along with the request so you can

04:07
submit a form you can submit data with like a fetch or some sort of client side
um request that's all the information that comes along with the request will
be in the body when you make a request there's often stuff that's encoded in
the URL so we saw that last class with like the um
the ID names being in our URLs we can grab the stuff from the URL with with
our parameters so rec.body grabs data that's sent along with their Quest
coming from like forms or from our specific fetch request stuff like that
that's what the examples that we've seen and then rec.param's name was just to
pull stuff out of the URL circus there's no wrong way to do enki

04:08
you literally create cards and as you do that more often you'll find that some
cards are useful for you to remember and some cards suck and that's why you have
to make your own cards right as you do it more and more you get
better at it and better at it and then eventually you have your own way of
doing Anki everybody does Anki a little bit differently and so um
everyone think does a little bit differently and so it's really just
creating a simple card there's some good videos on our Discord of how to set it
up but there really is no wrong way of doing it and doing them by hand is
definitely not using Anki when you do them by hand there's no algorithm behind
what you're doing and so you don't flatten your forgetting curve because
you're going to review the material at the wrong time
that's why we used Anki because it has the algorithm behind it that's why you

04:09
don't use like regular flashcards but ask for help on Discord I'm sure it more
than half I'm sure more folks are more than happy
um to like walk you through on like a voice Channel
you just download Anki and you can create it's it's you just create a card
but yeah jump on a voice channel uh on Discord I'm sure folks will walk you
through it we also have there's tons of YouTube videos that show you how to set
up the cards as well so we've shared some of those videos on Discord watch
one of the videos that'll be way more important than um anything else yeah cool
when will we know if we got accepted into October uh if you submitted
everything on time you're accepted so there that'll be it uh once we get
once we start hunttober um we'll send out a message you'll get
added to a specific channel on Discord that you normally wouldn't have access

04:10
to there will be some special channels for like like inside of October there'll
be breakdowns of like resume portfolio that type of stuff 100 hours uh we'll
have a special voice channel for our daily calls
so you'll just get a role that says like hunttober and you'll get at it so
as long as you're submitting all your stuff and it's on time and it's not like
fake stuff you'll get accepted uh what if you were in the ketchup crew
then you continue on like normal like I said hunttober is nothing special
um it's just a group of folks that are ready to start the hunt right now that's
all it is all the materials are already on YouTube or will be on YouTube and
Discord uh we're still gonna have normal streams uh all October is is just for
folks that are ready right now to start applying so I can give them a little bit

04:11
of more attention as we go through October uh okay I've already answered that
about how many coffee tracks do we have so far
um I think I've been asking for at least one coffee chat a week so
like 30 plus and then you're gonna really pick up steam as we get into the hunt
we can't access channels about that role exactly yeah so it's just that folks
that are going through the hunt for that week for that month um have this best
like a place to do it mm-hmm uh do you ever know the time off your
head that will be for the dailies uh not sure yet we'll do a poll to see what
works best for most people I think during Mega summer last year we did uh

04:12
six o'clock every day six to six thirty every day um yeah
and then if we figure it out um we'll probably do like another
version of October in the future um like like I said no but nobody's ever
done this before we've never done this type of education at scale before and so
a lot of stuff I'm just trying to see if it works what doesn't work and so hunt
tuber will be one of those things but when we did Mega summer last year it was
really helpful for folks that just needed that last little push to start
actually going through the job process to do it uh so that's why I want to do
it again this time so I'm just looking at the questions on slido
what's a practical example when you would use set timeout or set interval
uh whenever you need something I mean it's set timeouts like whenever you need
something to wait before it happens sometimes there's like UI flourishes
where the user clicks on something you need to wait some time before something

04:13
else happens um sometimes you need to delay something
in the UI people use that I don't know if it's the best thing to do but
something I see quite often uh set intervals if you need something to show
up on a recurring basis you can do that are you still adding more people to
stream team uh yes we eventually want to add more folks to the stream team we
also really want to take time to highlight the folks that are already
part of the stream team um so we're gonna be rolling out quite a
few changes just to make it easier to find folks I'm gonna be sharing some
some special like bios and just really making sure folks know how to interact
with the stream team that we have it um and then once we've done that then
we'll kind of open up applications again for more folks to join us but
I think the stream team is the ultimate extension of community taught and so we
can do it in like a really nice sustainable way where we we highlight

04:14
folks that are doing good for the community uh yeah we'll keep it going
how would you recommend navigating the hunt while working 40 plus hours a week
uh so that's you right nobody knows how much time you have and what you're doing
with that time right but give me somebody that's really
disciplined with the hour that they have or somebody that kind of wastes that
hour every day and I'll take the person that's disciplined with that hour one
hour of really good focus a day is better than kind of doing something
every single day right and so uh I think most folks when they get into the hunt
spend two to three hours on top of work um to get prepared because it's a lot
right and a lot of folks are gonna have to take some time off the interview
anyway uh and so the the beautiful thing is that uh
the beautiful thing is that yes it's a it's a really hard month and you're

04:15
going to have to take some time during that month to do it but at the end it
could end up with a job right and so I think most folks during the hunt take
like two to three hours a day including weekends and then some folks uh take
a couple days off because they need to interview
um which is a privilege not everyone has but that's kind of the the normal
pattern I'll quit my job right now no please don't quit your job
um I don't like when people quit their jobs to do program uh I want you to be
gainfully employed because when you don't have a job you introduce even way
more stress right way more stress uh and that stress
impacts you from actually doing doing well in the interview process
um burn they're both there's only one direction yeah that's a it's a it's a
strategy some you know what for some people that works I will say uh for some
people that that works but for the most part for most folks it can be something

04:16
that could be rather debilitating um will there be still be streams after the
cohort ends yes absolutely uh I really I've been kind of dropping little hints
about this but there's a couple big things that are coming one is the job
board that we've been working on my my big step is finding and working with
companies that want to hire specifically
100 devs graduates because our graduates are amazing they can build full stack
web applications they can do so much more than a lot of folks coming out of
traditional CS programs can do and so I want to work with employers that are
good people to work with and get them on to um hiring you all directly so that's
something I've been working on in the background for a long time and working
with some good companies so far and the other thing is the agency and it's not
gonna be perfect when we first start it but the idea is to
have a place where folks can work on real code for real companies and get

04:17
paid to do it and so the vision is in my head that I've been
trying to figure out and I've been doing a lot of like weird tests and breaking
some stuff and the idea would be that we
would have an agency where folks come to get their development work done and we
turn the the issues on GitHub into issues that anyone that's part of the
program can do and when you submit your pull request and it gets merged not only
have you learned how to build production level code that will get reviewed by
some senior Engineers that'll give you feedback but when you close that issue
you also get paid right and so um I think having a truly Equitable boot
camp it's not Equitable just for it to be free but if you can also make some
cheddar as you're going through the program I think that's my ultimate goal
and so I think those are the the big things that are on the plate right now
that once once cohort's done I can really sink a lot of time into those two

04:18
things and I want to stream it I want though the work that we do in the agency
to all be public I want all the finances
everything to be public and so I imagine members of the stream team streaming
themselves working on the issues that are on the hunter devs GitHub repo that
have bounties on them and not only is it
a cool way to learn how to code but then once we're done that project I want it
to still be open I want anybody that's learning to be able to come and see the
project that we built for that client see the decisions that we made see that
um we've been able to do the things that we're able to do and so that's the uh
that's the idea and I'm gonna need a lot of help and so I think once we get
through cohort that's what I'm going to be leaning on all y'all to help bring
that to life so that once we get all that figured out the next cohort can be
even better uh you tell us the site uh so who should

04:19
we move to from Heroku uh so the cool thing is every company that does hosting
has pretty much reached out to me and what I'm trying to do is like finagle
something special for us uh and so I'm not ready to make my recommendation yet
uh travesty media has already put out recommendations on the the hosting
providers that they like so I think that's a good video to start with but
maybe we can get some stuff special for 100 devs and then that'll probably
impact my decision so I have calls with a lot of folks next week I had some
calls this week um and then based on how those calls go
I'll make my recommendation so we're not there yet we don't need our binary boom
on on Heroku right now we'll we'll get to that next week yeah
uh for The Hit List that's due on Tuesday do we need to find the hiring
manager each company by the 13th no it's
just the the open roles that you need to
find right it's just the open roles that you need to find

04:20
um and then it's gonna be up to you to keep building on top of that hit list
to find the hiring managers all that stuff
uh how do we respond when we've asked if we've tested code before uh if you've
been doing code words every day you've been using tests every single time
you submit your code Wars solution every
single time you submit your code it runs those tests to see whether or not your
code is correct so you've been using tests for most now uh we'll eventually
have a little bit of testing that we do during class that'll help you better
answer that question uh Haley I'm having trouble finding 60
companies I'm just shy of 40. I've used the the magic I've done local sites and
I'm still struggling uh you might live in an area that does not have local
opportunities and you're going to have to Pepper in some remote as well yeah

04:21
yeah you're at the pepper and some remote as well so if you know you live
in an area the thing I tell folks is if you live in an area doesn't have a ton
of jobs there's always there's always some for most folks right uh you you you
can select the next major metro area and add that as well and then you want to
add remote on top of that you always add remote last because being local is so
much easier to get a job right I just I just really need to emphasize that local
for most of my students is just easier remote you're competing against more
people and the process can be a little bit more difficult so you start local
and then you work your way up and you fill in the gaps with remote opportunities
uh we're gonna do some bug testing well we'll do testing and yeah we'll use a

04:22
little bit of uh jest uh if we're in the ketchup crew will you
be flexible for now the deadlines are kind of deadlines like I said
you're you're if you're it's just for folks that are absolutely ready to go
into the hunt right now um there's nothing that you're losing by
not doing October it's just so I have a place to get folks a little bit more
attention since they're ready to start the job search um
uh after going through all the local jobs would you start with remote jobs or
local jobs that require languages you don't know uh
I think if the company looks good and it's a company you want to work for and
you don't know the language that's still okay to put on your list I wouldn't
necessarily count that as part of your 60 but they should go on the list if
it's a cool company that you'd want to work for you'll go through the interview
process and like I said you can take a weekend to build something small that
uses their stack most folks will join a company that does not use the language

04:23
that they've learned here at 100 devs a job listing closes in four days how do
I speed run the hunt uh we have three classes on YouTube exclamation point
YouTube uh and you'll see my classes on the hunt you can definitely watch those
and learn how to speedrun the hunt uh what's the most important thing to
focus on if you don't have much free time and are also a slow learner uh
you're not a slow learner you just need better study habits uh every single
student that has ever told me that they're a slow learner just does not
have the appropriate study habit that works for them so what I would recommend
if that's something you're saying about yourself definitely watch Dr Barbara
Oakley's learning how to learn watch all of Ali abdall's videos on
um like evidence-based study tips and really incorporate them into your daily
practice until you feel differently about that um
it really is study habits right you have to understand that it's not something
intrinsic about you it's not your aptitude or ability to learn how to code

04:24
it always comes down to study habits and this is of course taking like like
non-norotypical stuff off the table everyone else it comes down to study habits
yeah I swear this is true if you think you're a slow learner you might want to
evaluate how you learn because schools do not teach us how to learn they do not
teach us they do not exactly 100 you do not learn how to learn in school it's on
you to find the study habits that work for you especially as an adult to
continue your career because this is a cumulative career
alrighty folks uh we've been we've been live for over six hours
uh We've walked through the foundations of everything we're gonna need for the
back end I have everything planned out for my MVP but I can't seem to make
myself do what needs done do you have any advice on dealing with mental blocks
like this um there's a lot to unpack there and kind

04:25
of only you know your situation uh as someone that has
pretty debilitating executive functioning when it comes to ADHD and my
bipolar disorder like I get you been there done that happens to me a lot um
for me it's therapy it's medication uh it's
getting good sleep it's taking breaks it's doing a lot of the stuff that we've
talked about since the beginning um but I feel like when folks get to
this point and program it becomes very overwhelming right and
that's something that's worth for us all to talk about for a second especially
before we get ready to spend the next three to four hours together working
through binary boom this point program is the hardest uh it is the most
grueling it is the most uh demanding it is the most in your head
um because everything feels like it's on the line uh it feels like there's so
much to do you're constantly getting critiqued as you're applying you're

04:26
constantly getting rejected like this is this is the the the the the the
part where you are tested the most and it's the thing that I showed you day one
when we looked at that trough of Sorrow right we looked at that trough of SAR I
don't know if I have the trophy sorrow on the slide so I have to start on the
slides oh here we go here we go when I showed you this trough of Sorrow
there's something here that was the secret right this is the secret right here
we draw okay here we go this was the secret right there foreign of ineptitude

04:27
that's where you're at right now if you didn't know this is where you're at
and so you've you sh slog through the trough
and now everything you've done becomes real you need real projects you need your
networking to come through you need your culmination of everything that we've
built to actually pay off and now you're tested right you're going into these
interviews you're talking to employers that are critiquing your experience your
resumes what you can and can't do and most people crash so it seems like
your blocker is the crash that is a very real situation that most folks find
themselves in uh when they get to this stage of program so know that you're not
alone know that that feeling is something that was planned know that
that feeling is something that you will have to work through and we're going to

04:28
spend time throughout hunttober and through our next few classes talking
through those feelings because it is the
thing that stops people from getting the job
right it is it is something that we lose a chunk of folks because that part of
the process becomes stressful and so the three things I asked you to do in
the very beginning were manager frustration be consistent and take care
of yourself hopefully by now you've you've realized
that you know what this stuff is very
frustrating but I can [&nbsp;__&nbsp;] do it right HTML is frustrating but I can
[&nbsp;__&nbsp;] do it now CSS was frustrating but I can kind of do it now basic
JavaScript functions variables conditionals Loops are [&nbsp;__&nbsp;]
frustrating but I can do it now right building a a back-end application was
really frustrating but I can I can do it now uh understanding what Express was
bringing the table is frustrating but I can do it now I can take binary upload

04:29
boom I can turn it into my MVP it was frustrating but I can do it
now so if if you've learned anything over the past months together is that
when things are frustrating you have the power to actually do them
and so when this part of the process gets frustrating just rely on the things
you've been able to do over these most
because you can actually [&nbsp;__&nbsp;] do it
so as it gets frustrating remember that you can still do it the being consistent
is where this part of the process needed most so making sure you've you're not
going into your days like an accident make sure you're not going into your
weeks like an accident make sure that you are planning out when you're doing
your networking your hit listing make sure you're planning out when you're
doing your code Wars and make sure you're planning out when you're working
on your 100 hours project like don't go into these weeks like an accident
especially once you start the hunt and you're applying to jobs and getting
recommended jobs like then you're you you really need you're like managing a

04:30
pretty intense schedule of stuff that needs to get done starting out that
consistency and then the last and most important bit was always take care of
yourself make sure you're doing Pomodoro make sure you're taking breaks making
sure that you're trying to stay healthy that you're trying to stay
um hydrated that you're doing the things they're going to help you have the
mental capacity to get through this crash of ineptitude right and so it's
not an easy ass it's a very hard ass just know that you're not alone we're
Community taught make sure you're jumping on Discord make sure you are
reaching out just for support and then also know that sometimes you need help
it's okay to get the help that you need whether it's the mental health providers
or things like that and you're a baddie yeah right if it

04:31
were anything we're baddies be right back code let's go cool
like I said I want to go through some of
these kind of quick questions here we'll we'll do the first hour of just kind of
like these questions so we got like 15 more minutes left of questions and then
we're just staying all back end from from that point on I just seem like
there's most people are uploading these types of questions so this one takes
some time to do it because we haven't had an actual office hours
um The Hit List networking method uh keeps being a fail people don't have a
Twitter or aren't active on LinkedIn uh tried with over 25 companies use Hunter
you should be emailing them uh most people won't have a Twitter and most
people won't be on LinkedIn you should still be
um you should still be able to find them
using Hunter which will give you the way that their emails are formatted it also
sounds like you're probably targeting too small of companies hmm

04:32
if you're targeting too small of companies and they're a 10 person team
there's a good chance that they won't have a really strong online presence
what do you say when you email them we're going to actually cover that we're
going to do Hit List live so we're going to do like how to build out your Hit
List how to actually start the hunt how to start reaching out to people I'm
going to show you all the messages that I would send the emails that I would
send um and so we're just not at that that class yet but yeah if you're like
worried about like how do you reach out to these people I got you

04:33
yeah it's not creepy it's not working exactly um
there are so many interconnected Parts in a project if you're building from
scratch what order would you make the files MVC order uh it's up to you uh
everybody kind of does things slightly different uh I like to think about my
data first uh so I'll often think about the different types of data how that
data is going to be connected um and then I'll typically think about my
My Views so I like to think about my data first and then I like to think
about my views and so I'll I'll code out maybe like my model first just to know
what type of data I'm going to be keeping track of and then I like to cut
out my view and then I kind of just walk through loading that view so I'll build
out the route I'll build out the um like the router file I'll build out the
controller and then I'll connect that controller to the model that I wrote out
first so that's the way that my brain works the best some folks do it the
opposite order where they do the view last it's kind of up to you and how your

04:34
team works can you walk through setting up Tailwind
on the binary upload boom code yes be a cool idea we can definitely probably do
that um with Tailwind though it's just linking the CDN that's it uh it's just
it's just it's wherever you're grabbing Tailwind from you're just adding that in
your head and then you have Tailwind so um where you see the bootstrap link you
would just replace that with a Tailwind link and that's it
especially if you're not like using it like as part of like react or anything
you're just like using the Tailwind classes you're just going to swap that
bootstrap line with the Tailwind line yeah and then yeah there's a script but

04:35
like the Tailwind website shows you exactly what to add yeah
uh what's the difference between principal staff and Senior positions and
which one should be a priority uh principal staff and Senior for folks
that have been coding for a very long time
typically when you're when you're at a company
um there's two tracks that Engineers can go down you can eventually go down like
a managing track where you're managing other Engineers or you can go through
like a principal engineering route where you're going to keep not worrying about
managing folks but just continuing to own more and more of the product in
terms from a technical perspective so you're not managing people but you're
the expert at that thing at that company and so once you go the decision to say
you know what I'm not going to keep managing you might start seeing other
titles that become staff engineer principal engineer things like that
where it's just kind of demonstrating that you
of our like the most senior person or one of the most senior folks in that org

04:36
for that particular thing um but I don't think there's something
we have to worry about for right now you won't be applying for like principal or
staff engineering positions if you're kind of completing the program
or maybe you will let me don't let me do your dreams be dreams I don't know your
life I had a recruiter reach out if I knew
react what would I say in that scenario of course I know react uh actually do
you want to see the project that I've built with react then you would show
them the projects that you built with react you could show them hey like I I
build very simple UI elements you could have literally showed them the Code that
we did on Thursday uh if you've worked through the Traverse media video then
you got something to show if you did the Kinsey Dodd course you definitely have
something to show and then if you come on Tuesday we'll build a simple app with

04:37
react and so yeah you you never answer you always answer those questions with
do you know absolutely you want to see what I've built like that should be or
just default yeah of course you want to see what I built with it right and then
you show them and that's why having a really good up-to-date GitHub that has
like a repo with that type of code in it that um has the readme template that we
always to fill out so they can see kind of like what it looks like what it does
maybe have it hosted um yeah is it possible for someone to work and
be in CS did the same for college at the same time yeah I've had a few students
do it in the past I don't actually recommend it they always were having the
most hectic of lives um yeah but if my my thing is like
a lot some companies will pay for you to go to school so that's kind of like the

04:38
only time I recommend University is like if somebody's paying for it and so
um this the my past students that went back to university is because their
company was paying for them to go so it just made sense
uh Spain said how would I showcase back-end stuff my portfolio since it's
not something visual uh yeah you can still take screenshots of the code you
can still um have any type of demo for it uh if
you're still following the readme template even if it is back-end code

04:39
welcome MP can we do Pokemon cards do we have time yeah
are we getting info for 10 premium apps uh once we get into the hunt we'll talk
more about those I'm still fumbling through my Js
understanding and still need assistance uh lots of Googling with code Wars is
all hope lost no absolutely not I mean welcome to learning how to code right so
if you're still following that's great right uh if you're still Googling that's
great just all the things that you're learning you should have in your Anki
and the only time that that fumbling or that that feeling of lost is warranted
is if you're seeing the same problems over and over again and you're not able
to solve them um that means that there's probably some
Gap in your learning how to learn that needs to be addressed so that when you
see the same problem or the same type of problem you're able to apply all the
hard work that you've done to that problem so that's the only time that's a
problem but a lot of times most folks adhere to the 20 the 20 minute rule

04:40
especially specifically with code Wars where
um when I do really Advanced code Wars there's a lot of times I can't solve it
in 20 minutes I don't beat myself up about it I stop I look at the solution I
make sure I never forget that solution for the rest of my life foreign
but uh you're gonna be Googling every day on the job like every day especially
as an entry level engineer you're gonna be Googling hundreds of things uh it's a
skill and so it seems like you're developing that skill in the appropriate way
the only thing that I find troubling is the all hope lost uh no the only time I
hope is all lost is when you when you decide to give up that's it
as long as you're not giving up you're still putting in the work and you're

04:41
you're developing skill sets to learn better you're in a good spot
all right we're gonna do like seven more minutes of questions we'll take our top
of the hour break and then we're jumping right into binary boom and spend the
rest of the time doing back end uh I've been struggling a lot with class
I've done every class twice done every homework twice I do Anki I do two daily
code Wars but I still feel like I don't know enough welcome to the club uh you
will never know everything there will always be somebody that knows more than
you are you progressing are you able to build stuff
um are you doing the things that are required of you you'll be fine
do we get Club jackets that I don't know enough Club yeah I mean it's part of

04:42
being a software engineer right like that that's that's the for some folks
that's the reason why they don't like engineering it's every day you sit down
to solve a problem that hasn't been solved before you have no idea how
you're gonna do it you maybe have some educated guesses you gotta send a lot of
research you got to figure it out you're gonna get stuck lots of books lots of
lots of like things like um and I that's just part of the the job
right and so uh definitely don't get down on yourself make sure that you're
still being consistent and and give yourself that Grace to pick up things right
um I think a lot of folks come to decoding right well we know this like a
lot of folks come to coding like like it's it's like joining a gym right most
folks join the gym and I'm off later they're no longer in the gym
right once you realize the amount of work that it takes once you realize uh
how difficult it actually is to to to learn anything you need to learn that
can be very overwhelming for a lot of folks

04:43
um but that's that's part of the the gig um eventually some folks find that the
most enjoyable part of the gig is the sitting down and having no idea and
coming up with a solution that could be the fun for some folks um and so
you wouldn't beat yourself up with like let's say like you are learning Japanese
for the first time right after a month of learning Japanese you said you know
what Leon I I went I I watched I watched my Japanese lectures every day I did
them twice I did my homework twice and you know what after a month I'm not
fluent in Japanese like what is wrong with me that I'm not fluent in Japanese
after a month right that's that's wild talk we would never expect anyone to be
fluent in a very hard language after a month we wouldn't expect someone with
daily practice for three years to be fluent in a language like Japanese right
like you you there there are some things that we can see for some reason like we
can see like language learning in terms of like a difficult language like

04:44
Mandarin or Japanese and say you know what like yeah it's gonna be a lifetime
of practice to reach fluency right but when it comes to engineering we're
like we got to get this done in three months right like if I if I don't have
this done in three months like if I'm not if javascript's not clicking if
everything's not making sense if if node's not making sense react it's not
making sense and and I don't get this done in one month like it's over no it's
the same thing it's you're on a lifetime journey of learning to code some things
are going to come really easy something's going to come really hard
and that's part of the process right so um I just don't like when folks kind of
get down on themselves about that it's not easy it's hard the trough of Sorrow
is real and you shouldn't expect that fluency to come quickly keep managing
your frustration keep being consistent keep taking care of yourself and it will
come always seek out better learning resources always seek out help on
Discord and it'll all right let's talk about binary people of Boom folks we we
let's let's uh let's take a look through

04:45
it uh let's kind of see all the bits and Bobs and functionality
and then uh let's take our our journey through make sure everyone feels uh
comfortable with the code I should be code along today no there's not any kind
of code along especially for this part um we're just going to try and talk
through all the major pieces and uh see if there are questions so
feel free to ask lots of questions in chat also feel free to use the slido and
upvote the uh questions that you want to see answered uh let's keep them more
back-end focused though foreign do uh Ron at ron.com cool
um what we have right here is that we have a nice sign up for we got a nice
login uh I can submit the the sign up or login uh I have the ability to have a

04:46
post I can add a title a caption I can choose an image to upload uh on my
profile I actually have the ability to see all
the photos from my specific profile I can go to the feed I can see all the
photos from the feed which is pretty cool and then on individual posts I have
the ability to like individual posts I have the ability to add a comment right
and I believe there is one that already had comments let's take a look I think
it's listen there you go and so we can see that there's already some comments
on this post so very very simple kind of social media application some very very
kind of simple functionality but right but it can be extended to do whatever the

04:47
heck you want so as we were looking at these MVPs coming in seeing everyone
that was able to take pineapple boom and kind of run with it uh it was great
because the core bits of rate that you need is here right the ability to have
user authentication user logins to have um
individual collections for the different things that you care about in our case
we have users we have posts we have um comments that we eventually built out
too and the ability to tie all these things together using IDs that were
inside of our URL strings like our parameters is huge and so we can
take a journey through this code base because at the end if you can get this
running you can you can understand how this works you can really build whatever
it is the heck that you want it really does have everything that you need to
kind of get started from most applications we have all of our simple

04:48
crud applications here are creating our reading or updating our deleting and so
um it's all kind of here for us Ron is Sarah's brother the same
for those there keeping up with the lore we see the MVPs uh we did ask if we
could share them publicly so there will be a thread that I'll post on Twitter
with all the cool ones that people asked that said they could share it publicly
all right so let's we kind of walk through the key bits of functionality I
want to take some time to whiteboard out the application uh just like we did
before so we have these different kind of views
here we had a profile page we had an individual post page and we had a feed

04:49
so let's start with an individual post uh and that post
no problem let me refresh this whiteboard there we go
all right so let's talk about an individual posts to start and
on this individual post there's gonna be a little bit of a little bit of data uh
so an individual post we're gonna have probably like the actual image itself
right so we'll have the actual image itself and then we want some other bits of
information here we want the caption right the caption and we want what else
chat what else do we want on this post page

04:50
I'm gonna catch something a little bit bigger so we can see yeah
all right I'm saying caption like it's just like the the actual like text for
the for the Post right text cool uh we want like the title I think
we have like a title for them as well so and we have like the title
like the title for the Post we have the text for the Post uh we also had the
number of likes so let's go ahead and put likes zero oh and then
we also had the ability to have comments down the line so we can just put like a
little place for a comment for right now so we'll have comments and then for our
comments to work we're also going to probably need like a form or something
but for now let's keep it simple like our post page will have a title number
of likes some text for the post and then there'll be comments down here at the

04:51
bottom um we're gonna need a button for the likes exactly let's go ahead and say
like there's like a button for the likes um let's just do a circle
this is like the like button pool and then if it is our post what are
we going to be able to do if it's our post what do we want to be able to do
yeah we'll be able to delay Tay so we're going to need a a delay Tay here let's
go ahead and just put like a uh a trash can
or delete cool so our individual posts are gonna have a lot of little things
going on here we're going to have a title we're gonna have the number of likes
we're gonna have some text we're worried about comments a little bit later we're

04:52
gonna have a like button and a delete button beautiful so like and delete okay
and if we're gonna have this type of post uh we're going to need a collection
for each post so each post will be its own document in our collection of posts
and since we know that this is an application that has users we're
probably going to need a few collections we need a user's collection we're gonna
need a post collection and then eventually if we have comments we're
also gonna need a comments collection and so I really like to break down my
applications into the different types of
data and each different type of data has its own collection I remember
collections are just groups of documents documents in in mongodb are really just
kind of objects they have a little bit of extra right a little bit extra but we
can think of our documents as just objects so let's go ahead and set up

04:53
those collections real quick let's go ahead and do users I need a
changes to a square we'll have our users collection
and inside of our users collection let's just go and put users on top of here
users cool so each user will be its own document in our collection
and what type of information are our users going to have
what type of information do our users need to have for this to work
uh when we create a document we know that what what is always created when we
create a document every single time yeah we get a unique ID just by default
so we know there's always going to be an ID that's created for each user

04:54
so we have let's just pretend that it was like um let's do 200 for that user
uh what else we need for our users username you say like username cool
what else do we want for our users email nice password nice
anything else that we should keep track of here
cool all right let's stop here for now we might come back and and add something

04:55
later yeah we could add things like display name here we could add things like
um like a profile picture things like that uh but for now we'll keep it simple
right so let's say that this uh this user is Ron their email is Ron Ron
dot com and their password was Ron Ron Ron but we're gonna be doing something
that's going to hash our passwords and so it'll look
something that's kind of just all over the place because remember we are using
hashing which will take the password we enter and do some fancy maths with it uh
and give us a a hashed version of that password where we can then whenever
somebody types in that password we can compare the hash of that password versus
that hash we have stored in our database if they're the same we know the user
typed in the right password um without having to store that password

04:56
in plain text so if we were to get hacked and all of our passwords were
leaked we wouldn't put people's other accounts at risk cool
um so this is just one user let's go ahead and create another
document that's similar cool so I'm just going to go ahead and copy this
I'm going to paste and so we know we have another user in here which is Bob
so we'll say that that Bob was user uh 201 we had Bob we'll do Bob at bobbob.com
and they would have a different password so it'll be a different random mix of

04:57
stuff after it got hashed uh if I wanted to sort input data
not just by users but with Department users were in
um should I go about signing each department its own collection
you could but if if the department is just an attribute of the user I would
just create a department uh property on the users right and then you could just
put like sales or whatever just in that user and then each user would have its
own department just as a as a property yeah I think that's the easiest way
would it be technically possible for two users to share a post
um the way that we're probably going to code this out no because each post
will be made by a specific user and each post will be unique meaning that when
the post is created it's also going to create that unique ID which will never

04:58
be repeated so the post could have the same title the same likes the same text
everything even the same comments but on our back end like in our database they
would still be unique because the random
ID that's created for that post would be different foreign
how would you add friending functionality to bub very quickly you
could add like a friends array if you wanted to right and you could just push
people into that friends array not necessarily how we might do it long term
but if you're talking about like an MVP real quick boom that's it
friends is an array you push people into it and call it a day
you just put their IDs in there that's also how we could restrict like

04:59
liking to one to to [Music] um just new users right
so you could push the people that have actually liked that post into an array
and then when they try to like it you check to see if they're in the array or
not cool all right so now we got our two users here and we're also going to talk
about posts let's go ahead and build out our post collection here cool

05:00
and our posts are gonna be made up of individual documents as well
let's go ahead and just put some documents in here and I know that this
process is a little it can be a little tedious especially if you're not the one
actively doing it but it really does help to plan out your applications like
this like if you're planning out your MVP please do this
um when you're like that first like when you're
in those first three months on the job do this for your for your the job right
like really sit down and think through the application and specifically the
area that you'll be focusing depending on what team you're on and a really good
way to try and get a handle on what's Happening is to like
sit down and do this type of architecture on your own even if it
doesn't match what's actually going on in the code base trying to think through
critically like how you would build the application that you're working on how
you would segment data and things like that and then and then going and looking
to see if it matches up to what you what

05:01
you thought can be really helpful and by the end of like your first two to three
months on the job writing out some really good documentation that lays out
like from beginning to end your entire application will help you but also
solidifies the process making it easy for anyone that comes after you hmm
all right so let's talk through our posts we know that our posts are going
to have uh an individual ID as well that's created automatically um
when the document is added to the collection so let's go ahead and do
underscore ID and let's just say that this ID started off

05:02
at the uh let's say I know 600 mark let's do 700. so start off the post was
a unique ID of 700 and then what do what do our posts need what's going to be in
this document what are some things are going to be in this document
yeah we're gonna need the title like if we're looking over here at this post we
need the title um so we'll just be some some string like cool photo
we're gonna need the uh text for the actual kind of post this was outside
we're going to need the image and in this case where our images going to be

05:03
stored are we like storing the images like locally on our server where are we
storing our images yeah we're going to use cloudinary and
so since we're going to use cloudinary uh we'll we'll upload our image to
cloudinary and then cloud and area will give us a image URL back
so we're going to say all right this is cloudinary
uh and it'll be some something URL and like it'll just be an image from
cloudinary and so we're not actually storing images on our server we're
uploading those images to a service called cloudinary and they're giving us
the link to that photo so in our database we're actually not storing any
photos we are just storing the links to where those photos are existing boom
uh we need a poster ID we need to know who made this post
uh so we'll say poster ID and so we can know who made each post by tying the

05:04
poster ID to a specific ID for a user so we'll say poster ID equals 200 and if
the poster ID was 200 what would I know about this post
the poster ID was 200 what I know about this post
yeah that Ron made the post if the poster ID was 200 we know that this post
was made by Ron boom we're also going to need the number of likes
which at this point right now is zero uh and is there anything else that we're
going to need ah Jedi says delete uh so when we delete

05:05
something off of Instagram is it actually deleted
wait I don't know I don't work at meta but what we could do is we could have
this set as just like a Boolean right we could say all right if they delete it
just mark it as true but don't actually delete it you know softly exactly so it
won't show up in their feed or on their post anymore but we're actually going to
delete it from the database uh do you have any advice on a user only
being able to post once should we store an IP well since they have logins
you could just restrict the idea of the logged in user if you're trying to like
stop people from creating multiple accounts and posting
um that's definitely something you would need to like invest engineering power
into figuring out there are definitely solutions to stopping that but

05:06
um probably outside the scope of our time together
why not actually delete it because I want the sweet sweet data to resell the
advertisers later on now there are like new regulations that
came out specifically through Europe about like actually being able to delete
stuff so things are changing but back in the day yeah probably nothing was ever
being deleted oh uh how could you stop them from licking
a post a million times we could have a um
users who liked and it could be an array just like keep it real simple right so

05:07
we have users who like and so we could put in here 201
right and so when I look at this post right when I look at this post we would
see Ron who's Sarah's let's just think about this for a second folks Ron
who is Sarah's sister made a post and Bob liked it
do with that information what you what you will but if we look at this we can
have this array of users who like right and what can we do with that information
like what could we do now now we know that Bob liked it uh what what could we
use this information for blackmail yeah we could use it for preventing uh

05:08
Bob from re-liking right so if Bob was to try and click that like button again
um what would happen is on RN we would check the CRA all right person who just
tried to like was user 201 has 201 already liked this if so don't
let them re-like we could also what else could we do like when we build
out the Dom right what can we do as we build out the Dom for this post
yeah we could we could literally just not show it right like we could just not
show the like button so if they've already liked it we could just literally
not show the like button again um we could maybe have some Style on it
if we wanted to keep it there but um we could we could once we know who's

05:09
liked it we we get control of what they see particularly in the Dom as well
[Music] and the cool thing is once you're using
these arrays I think somebody said in chat a little bit up there there are
methods built in um with uh mongodb that we've seen we've seen
like increment I think we saw was one set was another but there are these
other methods that make it easy to like push and pull and do all that fun stuff
into a raise and things like that yeah yep exactly peace oh
all right so we have our users we have our posts uh we we should probably have
like one more thing and that would be our comments which will definitely be
extra but let's just talk through it for now at high level

05:10
it's just to have like a high level overview just so it's in our brains
all right cool let's go ahead and label this comments
cool and we want each of our posts to to
have a comment when is your post to have a comment let's go ahead and put our
first document into this comments collection
pool and so we know right off the rip um it's going to have
an ID just like any other document that's created
we'll just go ahead and do our our random ID let's start these off in like
the 900 series we have a common id900 uh what's the information we're going to

05:11
probably need with comments yeah we're gonna need like the the text
right like the actual comment itself call it comment text oh and so I'll be like
cool posts bro all right uh uh we need to know who made the
comment so we could say like uh commenter ID
and right now if this all right what's the only what's the only commenter ID

05:12
that this could be like what's the other thing this could be right now
if you can't comment on your own posts what would be the only answer to this
right now yeah 201 right so let's let's take it
back and think through what that means right so we have a post
this post was made by whoever had the idea of 200 right so we can see that
this post whoever made it had the idea of 200
which means that this post was made by Ron so if Ron can't like his own post
sorry comment on his own post then the only person that could have
left this new comment would have been Bob and Bob has the ID of 201
and that's why we see the commentary ID 201 there's nothing right now that's

05:13
actually stopping Iran from commenting on their own post uh it's just a thought
I'm so thankful we are just not drawing this cool
uh Hey Leon One spec one thing is very specific but I can't figure out my work
uses MFA to log into their Terminals and have a self-hosted internal site when
you like someone's comment you can't like it a second time and when you post
a comment it shows your actual name how did they hook it up so we kind of just
talked about the comments right so we could have um
uh we we could have like a likes on the comments like like we we like we have
likes on posts uh but we could also have

05:14
likes on comments as well I guess and so you could have like likes and it starts
off at zero and then we could also have a liked by array right and
whoever liked the comment their ID would
go in here so uh if if Ron in turn liked this comment we'd throw their ID into
that array and now Ron wouldn't be able to like that comment again because it's
already recorded that they have liked it and so on our end we would have to do
some logic that would stop them from liking but we know who liked it already
mm-hmm so that would be the liking part and then shows your actual name uh that

05:15
would be what we would do is we would uh in the rendering of this View
right the rendering of this comment what we would do is when we load this
document we know the ID of the person who made the comment so we would load
the comment into the post View and then we would query our database again right
we require our database again to get who the heck 201 was and we find that 201
was Bob and then we'd be able to append that Bob into the into the Dom as well
mm-hmm so you kind of be doing and this like
and like I said this is like high level we're building MVPs right we're being
bad he's writing bad code uh that would be the two could think it was two
individual queries to our database um there isn't a login yeah there's
still some there's still some sort of way that they're authenticating you

05:16
um so whatever they're using to authenticate you is tied to the to the back end
just yes there's there's still some sort of authentication happening if they're
able to have that information it could be tied to your authentication scheme it
can be tied to your IP address yeah yeah a lot of big companies have a VPN
exactly so if you're already on the VPN they already know who you are cool
and we actually did um last cohort I did a class with Microsoft uh where we
showed uh Microsoft's authentication so kind of similar to like the homework
where we watched uh Brad walk through the Google authentication we did it with
Microsoft and the cool thing about using those types of authentications is that
you often get a lot of other goodies baked in so with the Microsoft off which

05:17
is free you can do like two-factor authentication like text message
verification like like either like a two-factor application or text messaging
stuff like that and they handle a lot of like the heavy lifting with user stuff
and so you might find for your MVP that you do some like local login but then
you might take the passport strategy and use a different strategy that gives you
some sort of other login if you want some other stuff like two-factor
authentication things like that and so that's on my YouTube if you want
to watch that same thing with like password resetting
and stuff like that that's not something that you would that you would
necessarily like know how to do uh it's something that you're just going to take
from passport right and so you're just trying a strategy that does that and use
it to your to your will um I've also shown uh in class things

05:18
like the hackathon starter kit right so like if you if you if you look at like
the hackathon starter kit let's pull that up all right guys on starter
right you look at like the hackathon starter the reason why I I actually kind
of like referenced this every once in a while uh because they have everything
here um let's look at their hosted site um cool so when you create an account
uh you can do like the local like email sign up
um but you can also log in with Google Facebook Instagram Twitter LinkedIn
twitch GitHub Snapchat uh it already has like the forgot your password and
everything set up um and so you could join these
strategies uh for the bits that you care about uh so that just that's just
something that if you cared about to do it you could pull it out

05:19
so I just like that because the strategies are kind of all there already
you might have to like see if they're completely up to date I know this is a
little bit older of a project at this point
um but it's a good good starting place for like if you care about those things
yep that's kind of like the timeline we're on good guitar guy oh
all right keep asking these questions like that's the point of today um
we're gonna be going over the code yep I like to whiteboard through the big
Concepts first and before you start jumping into the code I think it's too
much but yeah keep asking questions please um I'll keep an eye on chat uh that's
the point of today like we've already already done this right so we've already
built out this code base we've already um had what four to five classes on it

05:20
across um different pieces today is about kind of revisiting it seeing it
um being able to ask questions about it things that are still stumping you
please ask so we can go through them together that's the point of spending so
much time together today uh do you think three months of learning
10 hours per day is enough to get a job uh yes but you'll probably burn out
most folks can't actually do 10 hours a day of learning because learning is very
different than just like regular work have I seen people do it yes is it rare
yes Venture frustration be consistent and take care of yourself 10 hours a day

05:21
maybe not the easiest way to take care of yourself
everybody's different so I know some folks that can grind out 10 hour days no
problem I have some folks that after two it's rough and so uh it's a spectrum
like there's there's not one time fits all and if anybody tells you like oh 12
weeks XYZ nah it's all cap it's so dependent on you how you learn and the
community that you belong to that's helping you support you through your
your highs and lows hmm and everyone's different yeah everyone's different cool
alrighty uh so we have let's finish up these

05:22
comments real quick and then we're gonna start looking at the code so
we had an ID for like the actual comment so every comment will have its own ID
we said comment text select the actual text of the comment and we did a
commenter ID so we know who made the comment so the idea here is that
all of these pieces are connected through the IDS like that's that's the
trick here right and so our comments we know who made the comment
because the commenter ID is tied to an idea of a specific user uh we know who
liked the comment because that ID is tied to a particular user right the 200
to 200 but where I think people get tricked up by is like is comment or idea
thing is poster idea thing like is that something that's built into mongodb or

05:23
that is given to us through mongoose yeah no it's not built in we we made
that up when we built out the schema for our model exactly we made that up right
uh and so the the the the like those bits those words were
making them up and so that's kind of tricky for folks in the beginning
um but we're kind of making them up we can call it whatever we want
um there is something that we still need for the comments like what's what's one
thing that we need for this comments for this to actually work we're missing one
piece yeah we need to know what like post the
comment is tied to right like if we have like thousands of posts how do we know
which comment goes with which post so we

05:24
need something like uh like um a post ID
right we do something like a post ID and that post ID would tell us what post
this comment belongs to uh so what would be the post ID for this comment
yeah it'll be 700. right we only have one post
uh so it says there's only one post we know that this comment you know that
this comment is tied to this post with that post ID now like I said it's all
made up so I could call this um unicorn and it would still work
right it would still work that that text
has nothing to do with it it's just that when we are
consuming this data to build out the post and to build out those comments
we're not doing something like dot unicorn right that would be a little bit

05:25
hard for us to to understand what unicorn is supposed to represent we call
it post ID because when somebody looks at it they go oh this should be the post
the idea of the post that this came from yeah
can anyone hack data by underscore ID technically yes like if there's like the
way that we've built some of this up is that if they're able to manipulate like
what's in the Dom maybe they might be able to do some some tricky stuff in the
background um but I think that's that's something
that maybe after program we can spend a little time talking about
and each company kind of handles that a little bit differently cool
all right so now we have users we have post we have comments uh we have an
individual post page um one thing that I think is important
to note is like what would the URL be for this post

05:26
like if we had to come up with a URL like we're on localhost right now 2121
uh what would this URL look like yeah we might give it a route of like post
right and then what would be the what would we put the last bit here in this um
this URL yeah b700 right so if we're if we're building out
this post uh we give it like a post route and then the only there's only one
post that we have in our database here and that has the idea of 700. so we put
that ID in the URL all right you put that ID in the URL and
so that way when we go and load this URL we can make a get request to our server
to go and get all the information from that post that has the ID of 700.

05:27
this give it a refresh that's kind of the only thing you can do [Music]
yeah so now we're leaning really heavily into these IDs right this idea of 700
right is being tied to this post and so when we load this URL we're going to
have in our code base the ability to be like all right we're looking for
something on this post route you're looking for something that has the ID of
700 we're going to go to our post collection and find that post that has
the ID of 700 you like all this data to plug in what we see here in the post
cool uh so that's the post let's do one more post just so that we
have some other stuff to show here boom and paste that

05:28
we have another post let's call it 701 I'm going to call this AEO text we online
uh there'll be a different image from cloudinary
uh the post ID the poster ID let's say it was made by Bob so be 201
Bob's gonna have like thousands of likes so that's easy it's not deleted and who
liked it uh we'll say that Ron liked it so there will be 200 in there cool

05:29
oh man we can't control ourselves huh all right so now we have a new post has
a new ID because whenever documents created gets his own ID has a title has
some text uh has a new URL that came back from cloudinary has a poster ID has
a number of likes and we can see who liked it so once again uh this poster ID
right this poster ID is tied to the person that made the post in this case a bob
all right so the last thing like the last thing I think we do before we take
our break is let's plan out the uh feed let's find out the feed here so we're
gonna have boom let's call this our feed and so our URL just be uh localhost

05:30
2121 I'm able to say slash feed for now there we go and so on the feed
uh it'll be pretty simple what are we going to do in this feed
what we're going to do in the feed here yeah we're gonna we're gonna show all
the posts right we're gonna show all the posts so when we go to this route we
know that we're going to do is we're gonna make a request to our posts
collection and we're gonna grab each post and so if we were to go to this
feed we'd wind up seeing uh two posts here
right we can maybe just put them all and maybe in uh order here we end up seeing
two posts boom uh and those posts will be pulling

05:31
directly from all the posts in our collection so the feed is probably the
easiest we don't we don't really need to check for anything we just make a get
request to our post collection grab the documents and use those documents to
build out our feed we do also have a profile that we want
to build out and we still got like five minutes let's talk about profile real
quick so our profile is a little bit more complicated uh because our profile
we're gonna have a couple different things on here maybe we'll have like our
um like our username all right we have like our username
and then maybe we'll also have our actual post that we submitted um
so if this was if this was Ron so it's going to say

05:32
this is Ron that will show up right we know that this post
would be the post that had which ID what id is the post that's showing up in
the profile the post the post ID cool yeah post ID 200 right because we
know that this is Ron we're going to find all of Ron's posts
so we'd find the post that had the poster ID of 200 uh this one here has a
poster ID of 2-1 so I know Ron didn't make this post the only one post has the
poster ID of 200 and so Ron's uh post would show up now in terms of the URL
for the profile um there's kind of like two routes we
could go I think in the binary upload boom right now we don't actually have

05:33
individual profile Pages like we don't have something like localhost 2121 slash
profile slash 200 right like that would make it so
that we have individual profiles for Ron right so that means we could we could
have this would be Ron's profile if we want the 201 this would be Bob's profile
um right now the only way we get to a profile is by what
yeah we are once we're logged in and we have that session we're looking at the
logged in user that's a part of that session and so what we have to remember
is that when we're logged in every single time we make a request
we're sending all the information about that logged in user as well so

05:34
and we go to localhost 2121 profile we're able to see that we're logged in
as Ron and since we're logged in as Ron uh we are able to grab all of Ron's
posts so right now we're not actually having individual
profiles for individual users we're just looking at whoever is logged in
right uh whoever is logged in right um and grabbing their specific photos
how would you implement a public user profile kind of exactly what we just
showed right like we would just say all right slash 201
right and then when somebody makes it to that page
right when somebody makes it to that page what would happen is we would go
ahead and make a request to uh the users find out the information about the user

05:35
which will be 201 we'd grab Bob put it in there and we make another request to
our post collection and find any posts that were made by that 201 user so we'd
find the post Rd of 201 we grab that post put it in the profile and if we
were doing profile Pages for users what wouldn't show up on this uh profile page
uh there wouldn't be showing up like remember we have the ability to
um create posts as well and we put those
that that form on the profile page so if you are on your profile page you'd have
the ability to create a post but if you're just visiting anybody else's
profile we'd probably have some like ejs logic that wouldn't show that form yeah

05:36
it would just be the person's information in all their posts
so how do you do what LinkedIn does where you can edit the profile your url
to be something else there are a lot of different ways to handle that it could
still be the same concept right where the URLs are unique and so you could
just grab the URL and show that profile same thing
uh when you're working on a project like this building it out how do you
discipline yourself to not jump straight into the code I'm finding that laying
out my stuff on the Whiteboard first is overwhelming
um for me it's the complete opposite if I if I don't
um lay my stuff out like this I just know I'm gonna get lost in the sauce
and so I rather come back to the Whiteboard than go back to my code uh
because the the Whiteboard I can make changes really quickly I can think about

05:37
the problem from a high level perspective if I just jump into my code
I I'm lost in the sauce and I don't even know where to go so I always whiteboard
out all of my applications I actually have a big ass whiteboard on the wall uh
one of my walls is an entirely a whiteboard I do this for every single
project I will ever work on and exactly how I'm doing it right now this is why I
know I showed it during classes why I'm also showing it again I'm spending a
whole hour showing you Ohio white board through things because I think it's just
that important of a skill especially early on when you don't have that like
intuitive sense of like what different types of data should be their own
collections how you're going to link things through together um
taking the time to do this right um would be would be well
well worth your effort I think in the long run and it can be overwhelming but
I'd rather think about the decisions here than think about the decisions in

05:38
the code base because then you're adding a whole other level of complexity
uh do we need a collection for profiles if we decide to have public profiles I
don't think so because I think a profile
is just the combination of user data and post data so you'll grab information
about the user and you'll grab information about their post to put into
the profile so I don't think we need anything more than that
if you're thinking something extra then maybe
it's been at five hours doing the mind for your job probably this dope
yep and you do refactor this whiteboard a lot like a lot of the stuff that we
have here right now won't make it into our code base right like we're not gonna
we don't have liked by we don't have users who liked or anything like that in
our actual code but it gives us some next um

05:39
um next features to add like you will like this will come up you'll be in
you'll be interviewing and someone will say this is an amazing
project that you built referencing your hundred dollars project what
optimizations would you make what features would you add it's a very very
common question right very common question somebody you spent 15 20
minutes talking through your hundred dollars project with the potential
employer and the they'll end with being oh what optimizations would you make uh
what what features would you add and you'll be like well foreign [Music]
here my high level wireframe here and uh let me show you
exactly what optimization's about to make what features I'm about to add I
already got this planned out you're seeing day one of a long-term
Vision right and then you show them the Whiteboard
and you put that in the readme 2 exactly what other high-level diagramming tools

05:40
do you find useful um I don't really use anything else
other than kind of like white boards um I mean I I've done it all I've used
balsamic I've used figma I've used sketch um they're okay
I just like whiteboarding I think there's a there I I personally
fall into the Trap of trying to build better and better productivity systems
instead of just doing stuff I'm a person
that'll take like go like three weekends
to build a better productivity system to only not use it a week later
all right so now we have a good overview of our app uh we're going to be having
the ability to have posts a feed profile pages and so we're at the top of the I
went a little over so we're going to stop here we're gonna take a break uh
cranberry cat added uh two minutes to the timer so we'll do a seven minute
break when we come back we're diving into the code folks we're looking at

05:41
this pineapple boot from beginning to end uh we're gonna make sure we
understand all the bits and Bobs all the quirks and features and make sure we
feel really solid uh for folks that are still finishing up their MVPs keep push
in here so we kind of broke down the application we have our three major
views we have our three collections uh we're gonna have some data for each of
these tied to our users our posts and our comments
um let's go ahead and take a look at the code
so this is just the normal binary upload boom code that we've been running for a
while um throughout the URL just for folks that need it um [Music]

05:42
there you go I'm gonna throw it in chat in case you need it
am I sipping on anything today uh it's been it's been a long it's been a long
day already having been locked out and dealing with all that fun stuff uh so
I'm on the Diet Coke Wave today and a little Go Go Juice you know what I mean
cool um is the version with comments available yeah it was available since we
did it I just put it on a different branch um so if you go to GitHub
no not my GitHub and you go to the binary upload boom and you look at the

05:43
branches you see that there's the main branch and there's a comments branch
so I pushed my comments code to the comments Branch
um just so that because we did the class we had to build it yourself and so if
folks need to take a peek they could but it wasn't on the the main branch so the
comma code's always been there you want the comment code that I'll be showing
today you can just grab it from that branch how are you sure
I think I've drinked I've I've I I think a Rossi says I think that's the first
time I've ever seen you drink soda because I did a Diet Coke like a week or
two ago that's where I was headed yep all right
let's go ahead and take a look at should
we begin coating along it's not really a

05:44
coating a long thing today we've already done um
you kind of already done all this before so this is kind of review it's like a
chance to ask good questions it's a chance to see things again um
but uh yeah it's it's not so that you're gonna have like fingers on keyboard
today all right so uh when we take a look at this binary
upload boom code we have a quite a bit of stuff that's here I'm gonna kind of
kind of collapse all my folders here so we can see everything um
on the Whiteboard there was a third view
the feed the profile and the actual post the actual post itself [Music]
are we going to code from scratch the goal is to
um to go through understand everything that's here and then Whittle it away to

05:45
have a template that we could use to go forward and build it from scratch um
I think that's gonna be a little bit better of our
time and then I think I'm gonna do a part three cool
so let's take a look it depends how much time we have yeah if we can do it from
scratch today we'll do it from scratch today
um if not then we'll probably do a part three okay
yeah to kind of like code along yeah all right so let's take a look at the
the folder structure that we have here we have a vs code folder which is going
to show up on my end um you won't have that anymore I when I
pushed I re-pushed the code to not have the vs code folder uh the vs code folder

05:46
um the vs the vs code review the vs um Cold vs code folder uh is get timed out
uh the vs code folder is where I put kind of my settings uh so that when I'm
streaming I have a larger like screens like a larger text
size and my terminal is bigger and so that just makes it a little bit easier
for folks to see on screen but that's the only kind of that's the only thing I
have in my vs code folder all right and so we have a font size and
I have Auto cloaking turned on now and with the auto cloaking is going to do is
that when I show you my EnV file that didn't work
that didn't work uh it it kind of like tries to hide it uh it doesn't matter he

05:47
can't do anything yeah that's kind of the idea
all right so that's going to my vs code folder but what you'll notice is in my
git ignore uh it might get ignore it is um
not being pushed so the the git ignore will have the
vs code the vs code folder my NV folder and my node modules folder so none of
this will actually make it up to GitHub right um it'll actually show it it will
um show it on my end but on GitHub these these this folder and these files uh

05:48
won't be there cool all right let's go ahead one second
alrighty uh what else we have here I have my config folder which is going to
have a couple different bits of information in it uh and so we're gonna
just kind of work through all the stuff that we have here right
and so we're gonna have uh as we kind of
go down the list here I'm going to start the server.js uh the server.js is going
to be everything we need to set up our server
right everything we need to set up our server uh we're gonna have all of our
uh all of our different modules that we need for this to work uh we are going to
have a uh all the requiring and making sure that we have everything to get this
running and working we have our readme which we'll be using to on GitHub be
able to see kind of everything you need to get this up and running all the
different bits and Bobs you're going to need for this to work uh and this is

05:49
what will be showing up on our GitHub repo we have the proc file rip uh this
proc file was originally used for Heroku
but we'll be talking about other hosting later this week and so this is just to
let Heroku know like what what we should be what file you should be running to
set up the server of course that's the server.js our package.json includes all
the dependencies that we're going to need to make this project work and so we
have a lot of these different dependencies that we're going to see
specifically as we work through each of our files uh we have the packershot lock
which is created when we do our lovely like npm install and then we kind of
have the folder structure a nice MVC folder structure our views contain kind
of all of our ejs files right has all of our EGS files and it has all of the
um has all the EGS files and even has some of our partials that we're using

05:50
right has our partials that we're using so that we can um
we can kind of start to separate out things that we're kind of redo it like
they were doing over and over again like our headers our Footers stuff like that
very simple components exactly we're gonna have our routes which will help us
listen to the different requests that are coming in as these requests come in
we're going to be able to tell what controllers to use our public folder
will be all of our public assets things that we need for all of our different
pages to Lowe's like our CSS maybe some like logos and stuff like that if we had
them in this case it's just our favicons we have our node modules folder which
are all the the modules that we need for this actual application to work our
models will be modeling the different data that goes into our database our
middleware which helps us handle everything in between the request and
the responses right and so we have a request that comes in and we generate a

05:51
response and so this middleware is kind of the stuff in between everything we're
going to need for helping us with Authentication and getting our images on
cloudinary doing things and uploading our files using something called multer
and don't worry we're going to like see all these as we kind of go through I'm
just doing like high level overview our controllers which is where the real work
is happening uh we're following that MVC pattern the controller is going to know
when to talk to the model it's going to know when to pass stuff to the Views and
it's going to help us kind of return the final product back to the client and
then the config is just the stuff we need for this like to actually work so
um uh the link to our database the link to our passport.js all that fun stuff oh
so uh that's super high level overview we'll spend some time kind of going
through each of these bits and Bobs uh just to make sure we're all on the same

05:52
page and then we're going to try and get this down to a reusable template
all right we're gonna swap ejs for react
we're gonna we're gonna do the basics of react we'll build some small react
projects yeah yep if you're posting to Heroku you're
going to want each of your environment variables on Heroku as well so you can
do it as like a config um like you can do it directly in the
terminal if you would like but you can also just go on heroku's website and
type in each of your environment variables if you want to
um when we switch to a different hosting provider I'm going to stop I'm going to
walk you through step by step how to kind of make sure that your environment
variables get carried over to that hosting provider

05:53
uh would a react totally replace EGS in our MVC it can yeah [Music]
alrighty yeah we'll see some existing apps uh in react together too
alrighty so let's take a look starting with our server.js file
uh Express uh what we've been using since the beginning is going to help us
build out our API instead of having to constantly kind of require it to get the
run wherever we see app that's us actually using Express uh Mongoose is
going to help us talk to our mongodb database passport is what we're using
for our authentication remember passport we're using off-the-shelf solutions to
do our authentication passport is going to enable us to use different strategies
for the different types of login that we would like to produce so when it comes

05:54
to uh passport we can find all these different strategies these different
strategies will enable us to do different types of logins so I showed
the hackathon starter we could do Twitter we can do Facebook in this case
we're doing look also just email and password
we're going to have Express session our session is what we're going to need need
to make sure that our users can stay logged in as they move across our
application and so this session uses cookies and so we
actually saw in class that the cookies are stored uh on the lovely client and
so we're able to kind of see that cookie that stays there and we're able to kind
of like use that cookie because every single request we're sending all this
information about each of the users as we make the request and so with this
session we're able to keep our users logged in as they move throughout the
application across the different pages and we're actually able to see who is

05:55
logged in and we can use that to build out things like our profile Pages Etc
we also have the [&nbsp;__&nbsp;] store
uh what did [&nbsp;__&nbsp;] store do what are we
using [&nbsp;__&nbsp;] store for you remember what we were using that for Merc
yeah it's storing our actual session right storing our actual session in the
mongodb and why would we do that why why would
we why would we store our session in our database what is that doing for us
yeah it keeps you logged in even if you leave the application even if you leave
the pays you you come back maybe you maybe you maybe you close the window

05:56
exactly maybe you leave the browser window and you come back you can still
be be logged in so it helps us keep that
connection uh no matter what our kind of users are doing on their client side
then we had method override and this was kind of the last big addition
uh what we're realizing is that um what we're realizing is that the clients
we've been using aka the browser really only does which methods
yeah it only really does get in post so we've been using web API specifically
the fetch API to handle delete and put but we can use this method override to
not really worry about what the client exposes like what the client actually

05:57
gives us we can override the methods that are coming in uh to be what we want
them to be and so we can just use the get and post throughout our entire
application but treat them as puts and deletes as we need to to do different
types of things we want to do inside of our application so it does make sure
that your code Works across more clients that may not always expose things like
delete put Etc all right uh somebody said what is this extra
um what is this extra set of parentheses here and so what do we know by looking
at this syntax what do we know that this is what do we know that this require is
going to return acquire connect [&nbsp;__&nbsp;] what's it going to return
yeah it's a it's a function more specifically a method right it's
actually a function and so what is this right here

05:58
what is what is that parentheses with the session inside of it actually doing
calling it like it's running it right like and that means session is it is our
argument that's being passed in right so here's the session we're passing it in
as an argument so we know that this
connect [&nbsp;__&nbsp;] is going to return a
function and we're passing that value in all right so it's just kind of like a
way of like passing the correct data into the thing that you're using um yeah
it's not technically executing right here but that that's kind of the idea
all right now we have the express flash right uh we have the express flash which
is going to help us show us all of our like notifications so uh when they enter
in the wrong password or there's somebody already has the same email uh

05:59
those little notifications we're gonna be using that flash to do it for us uh
Morgan is our logger so you see all these like lovely logs that I'm getting
down here that's telling us like the different methods that are being made
what the routes are all of that is coming from Morgan
and then uh we are just kind of starting to set up our basic routes here so oh
sorry first we're grabbing our database uh so we're going to connect to our
database uh and then we have the basic routes the routes for like our main
routes like the home page the login the sign up we're gonna have routes for
individual posts so like when you try to
load a post page your feed and we try to load your profile and then we're gonna

06:00
have uh routes for our comments as well cool [Music]
we could name these variables anything yep you can name them whatever the heck
you want yeah you can name them whatever you want
all right I could have called this Bob that would have worked
um you just gotta make sure that if you're like running it or like running
it down below that you have the same name Morgan is our logger it's how we're
logging all the requests that we're making I'm kind of in the way
all right see how we're getting like our gets our posts
like we have like our gits our posts all that fun stuff that's all the logger

06:01
right here that's all it's all Morgan oh alrighty so let's look at the rest of
our server setup we have uh us requiring our EnV files remember
even though EnV files are such a crucial part of how our applications work uh
when it comes to to node they are not baked in by default and so if you want
to use your EnV files you need to require your lovely.env module and then
you need to tell it where to find your EnV file or else you just won't be able
to use your EMV files throughout your application
uh you can see that we are also requiring passport and it's kind of that
structure I was talking about where you are requiring the file and you can see
that you're calling or executing that file that gets returned so when we do

06:02
require config passport we know that this is returning a function and then
we're calling that function and we're passing passport in as the argument if
we were to go and take a look at our our config and we're going to look at our
passport JS file we would see that it does indeed export a function
right it is exporting a function and that's what that syntax is showing here
the syntax is showing hey you went and got a function great run that function
should this be memorized eventually um I don't think you need to have the
code memorized but what each bit is doing definitely yeah definitely each
bit what it's doing is what you need to know but like coding this from scratch
probably not no you shouldn't is Morgan a Dev dependency yes

06:03
uh you might so a Dev dependency meaning that like you would use the dependency
while you're in development you might not have it running in production so you
might say all right I'm going to use Morgan while I'm building my application
but once I put that live maybe I'm not going to include Morgan anymore because
I don't need my server doing that there are a lot of things that we might
use during development that we might not use once we pushed our code to
production mm-hmm [Music] uh is it okay we have a lot of comments
explaining what each piece does I don't think you should delete your comments I
think I think specifically if it's like your 100 hours project leaving your
comments in is probably really helpful because it'll give you something to

06:04
bounce off of during the interviews also you're going to forget right uh if you
if you're interviewing for two three months and you are like in the heat of
it it's nice to have the comments there because you won't forget the things that
you were doing now the thing is if you have comments
that are silly or something that you wouldn't want an interviewer to see that
maybe you want to get rid of those get rid of like your cursing and stuff
like that remember if you're if you're trying to play the game right um
most interviews probably won't care but there will be the one or two that do
cool uh we're connecting to our database right that connectdb uh is going to use

06:05
that config file so we're going to go the config folder we're going to find
the database file config folder database file
here is how we're connecting to our database
and so it's just a a little bit of a little bit of code here that helps us
connect to our database using Mongoose and that's it like once again not
something that you would have memorized something that you're just going to have
in your template and you'll reuse so we went ahead and connected to our database
we are going to head and say we're going to use ejs for our view engine meaning
that um our server now expects ejs files to be what we're using to spit out our
views in terms of like the HTML that's ultimately sent to the client
and we're going to use our public folder for any of our static assets so our CSS
our JavaScript files any like basic images or things that we would need for

06:06
the base application to run um goes in there
and then for our body parsing we use these two lines of code to be able to
pull stuff out of the requests that are being made so when you submit a form
you're sending a request we'll be able to pull this stuff out of those forms
that's where the body parsing comes in uh we're using Morgan so we're actually
telling it to do the logging so if you don't have this line even if you've
required it you're not actually using it
yet we're using the method override here and we're telling it hey when you see
any types of requests come in if they have this query parameter of method and
I'll show you that query parameter in a bit they have this query primer at the
end let's let's override it so we're looking for specific methods here so if
a post comes in and it has this query parameter and it has delete after it
well then we're doing a delete if a request comes in and it has this query
parameter and it has put after it well that's a put we're not doing whatever

06:07
the original request was so this method override enables us to override any of
the requests that are coming to the server right now our users are accessing
our application through the browser the browser only exposes natively the get
and the post like refreshing the page gives you a get submitting a form gives
you a post the puts and the deletes that we have done those requests have come
from our JavaScript and they use things like fetch to make those requests but
fetch is not something that natively comes from the browser fetches of what
yeah fetch is a web API so there could exist a scenario

06:08
there could exist a scenario where you are trying to run your code
and the place where your client is trying to access your site doesn't have
access to those web apis like maybe they're trying to run your application
on a refrigerator and the refrigerator is using some weird
browser that doesn't have the fetch web API well your your site just wouldn't
work your client's not going to expose the the puts and the deletes and so this
method override becomes client agnostic it doesn't care as long as your client
can make a request we can override any of the requests that come in and make
them the request that we want I get a post to put or a delete mm-hmm

06:09
all right we got our session uh this is just the stuff that we need for the the
session to to to be implemented and then we have our passport middleware just
saying hey we're using passport which is going to help with our authentication
we're letting passport know that we're going to have a session where the user
stays logged in um so if you want to use passport you
need these two lines we're letting flash get set up so whenever we have those
error messages we get the flash that shows up in the in the Dom and then we
have our main route so we're saying hey when these requests come in if it's just
a root if the request comes in on the root route we're going to use this main
routes uh file right so that if we look at Main routes main routes is a in the
routes folder the main file in the routes folder that's going to list all
of our main routes uh if the request that comes in is like localhost 2121
slash post but we're going to use this router which is the poster batteries and

06:10
if the request comes in and it's slash comment where we're going to use the
comment routes so JavaScript talks separately to the
server so that whole kind of idea of web apis comes from our class where we
talked about what it actually means to be running
JavaScript JavaScript is single threaded it can't block it can't do these things
that take time making a request to a server like a like a a put or a delete
request to the server it takes time JavaScript can't wait it it it it should
it would it should it should not work right and what we

06:11
found is that the reason why we're able to do these things we're able to do
stuff and keep moving and keep clicking and keep scrolling is because all that
heavy lifting is not actually JavaScript
JavaScript is handing off those requests to the web apis that come with the
browsers where we're executing our code now we could be executing our code in an
environment that doesn't expose those apis that doesn't give us fetch right
and so if we were in one of those environments and this is really a
thought experiment pretty much all all your users will be environments where
they have this stuff right but the idea still goes that we were using fetch
which is not natively come with JavaScript which only works because the
browser we are executing our JavaScript and actually had access to it uh when
you use the method override that doesn't
matter anymore if they natively have any way of making a request a git or a post

06:12
we can override them as they come in is there any reason why delete and put
do not have a built-in way of using them it's part of the specification right
when the specifications were built for HTML post was included I do believe they
tried adding post and delete and then like they removed it from the spec or
something like that but yeah it's part of the folks that have decided how the
web is built remember this these things are built by real people there are
committees that like approve these decisions and we live with those decisions
uh how do we know when we have to use something more complicated uh like this
syntax versus like a different bit of syntax uh the docs tell you
yeah so this is something that you would be you would read the docs on like npm
or something like that and it would show you how to like actually run it
so a lot of times when you're using a new module like like if you want to use

06:13
the npm package for Flash you didn't know how it actually worked well you
would go to that npm packages like page and it would give you all the
instructions on how to use it with pi script what happens to
JavaScript moving forward uh people keep using JavaScript because no one's going
to use it people have been trying to replace JavaScript for since JavaScript was
created uh it's just too big of a beast now
the swing lines 40th through 48 again so these lines right here is not
something that you actually need to know this is just setting up our session so

06:14
that our users can stay logged in and specifically telling it to store that
session in our database meaning that when someone comes to when somebody logs
in they stay logged in and they can even close the browser window and come back
to the application and they're still logged in so this is all the code
specifically that helps us do that mm-hmm can you remind us how to find our EnV
file I put my EnV file in the config folder I believe if you
clone down let's see let's then get ignore so if you clone down my code that EnV
file won't be there because I I don't want you to have

06:15
my credentials right so that EMV file won't be there that's why the readme
walks you through uh how to create your EnV file so you're going to put it in
the config folder and then you're going to have these following values the port
the string to your database um your your your cloudinary name your
keys and all that fun stuff mm-hmm so I recommend anything extra for
session management and single page applications
um I think once you run into an issue then you kind of research what you might
need for those additional issues I'm still using off-the-shelf stuff for
everything so it's not something I'm going to hard code myself I'm going to
use a specific strategy to solve any of the errors that might pop up
what does body parts are do again body parser enables us to pull stuff out of

06:16
the request so think about when you send a post request like when you submit a
form all the data that's in that form is being sent to the server well how do we
get that information out of the form uh the body parsing which is what enables
us to do that there used to be a package called body parser that was used for
years and years and years until Express Incorporated their own way of doing body
parsing we don't need that package anymore
how do you handle password resetting you would need to use a different strategy
to get that working so I showed earlier that you could use like the hackathon
starter to see how they implemented it using passport that's where I would
start if you wanted that uh The Culinary Keys change or I need to
put once for every project yeah I recommend separating your different

06:17
culinary instances for each project that way you're not
storing different types of media that don't go with each project yeah
that's just a personal preference though how much of the known modules will be
required to know for an interview and on the job nothing none of this has to be
memorized like having a good understanding of like what you would use
how you would use it um but like as terms of like what you're
like the day-to-days you Google right like over time I start to know like I
know what I'm gonna need I know that I'm
gonna need like I know that if I want to log something I'm probably going to use
Morgan if I want to use a session
storage I'm going to use [&nbsp;__&nbsp;] store
like I want these like I I know the like
I know to use these things right because
I've done it enough and I've put it into my Anki enough to know that these are
the things that I want to use but I spent a big part of like before like

06:18
like we walk through like the the setting up of this project
this is like a big deal like if I'm starting a project from scratch I'll
spend over a week just whiteboarding it researching the different packages I'm
going to use researching the best technology to do what I need to do
um before my fingers even hit the keyboard once you're on the job and like
it's a little bit more established like how you do things um
and you're kind of like fixing stuff or like adding stuff to like a framework
that's already there that's a little different because you're just gonna like
follow their guidelines their Style Guidelines their the tools that they're
already using and so that takes some of the the planning off of your brain but
if I'm starting from nothing I spent a certain amount of time on this um

06:19
on this uh on this like actual process really important
when you say production is that when the app is live exactly
uh quad I believe Adam is coming to end of life so I don't think they'll be
supported going forward he said so I recently heard so I definitely switched
to something else yes code is owned by the same company cool all right

06:20
so we walked through the beginnings of our server.js file what I want to be
able to do now is like think through from beginning to end uh maybe the feed
page I think the feed page is is um the easiest for us to to render out
because we can we're not really doing anything fancy there so let's go to our
application uh let's log in Ron at ron.com and let's go to our feed all right so
here in our feed uh we can kind of see all of the images that have been
uploaded and so look at the route here localhost 2121 slash feed
that's pretty straightforward actually Let's do an individual post so let's
look at um here we go loosen and when we look at

06:21
this individual post we got a little a lot of little things that are happening
here we're on localhost 2121 we're on a post route and we have this string of
letters and numbers here in the URL what the heck is that string of letters and
numbers that's in the URL yeah it's the ID right it's the ID
and so we know that when we hit refresh or we hit enter on this URL we have made
a request to our server right just by hitting enter here I have made a request
to my server that server is going to have to go
through a couple different steps to ultimately figure out how to respond right
and so if I want to load this page let's walk

06:22
through what those steps would look like very high level let's draw it out
so from the client side we're going to make a request to our server that
request is going to be a get request and when we hear that get request we're
going to do a couple of things we're going to have to um one
get the ID from the URL once we have the ID from the URL we need
to go to our [&nbsp;__&nbsp;] DB to find that specific post
once we find all the information for that specific post we need to pump all
that data into ejs that ejs needs to spit out some HTML
and once we have that HTML then we need to respond all right and so if
we are going to be doing this throughout our application we built up over time

06:23
in the beginning we just used raw modules fshttp
then we added Express into the mix and at first our Express was just one giant
server.js file and that works so does using the raw modules that works right
and so we could build our application that way but it begins to become pretty
hard to maintain when we're working with
other Engineers they don't know where to go to make changes and heck when you
come back to your MVP in a year right let's say like you go to work somewhere
you're working there for a year or two and then you're ready to start
interviewing again you're going to come back to your 100 hours project make it
look better incorporate the things that you've learned over those one to two
years before you move to your next company and you're gonna forget
everything and so having a better architecture like an MVC architecture
makes it easier even for yourself to come back and look at your past projects so

06:24
we have moved from kind of that massive server.js file to more of an MVC
architecture which means that we're going to have our models our views and
our controllers split up and the way that we have it right now is that our
server.js here's that requests come in it hands that request off the
appropriate router the router knows the appropriate controller to talk to and
that controller does what it needs to do
maybe sometimes I'm going to talk to the model so we can talk to our database
sometimes it's going to pass stuff straight to our views using ejs but the
end goal of generating that HTML and responding with it
does it make it slower technically like if you have to jump from one place to
another it does but we're talking like speed of light on the same server you
won't notice but at like a technical level yes possibly

06:25
so coding gets you models yes absolutely foreign
definitely asked your question on Discord I don't I don't know how you
generated that error but yeah cool all right so let's take a look at
this and then we'll take our top of the hour break so I'm gonna go quickly
through this one this one pathway we'll come back we'll spend way more time
digesting it uh so let's go ahead we we hit enter boom hit enter and let's
follow that so that request was low cost 2121 slash post and then the actual ID
of 631 and the end is eight seven four so if we look at our server.js file and
we look at our routes was that a main route a post route or a comment route

06:26
let me show you the URL one more time low cost 2121 post and then the ID was
that main post or comment yeah it was definitely a post route we
could literally see Slash Post in the URL right we saw a slash Post in the URL
so we that means we're going to be using our post routes
right using our post route so if we go ahead and we look post routes means that
we have to require our routes folder and we're going to find that post file in
there the requirements are saying hey go to this folder find this file so we're
going to go to our routes folder boom find the post file here we go
and we look at this posts file you can see that we're using a lot of different
stuff here once again we're using Express and specifically Express router
which is going to help us handle our routing we are asking for multi which will
eventually help us upload our images uh we're we're saying this is where we can

06:27
go and find our post controller and we're bringing in our middleware that
helps us make sure whether or not somebody is logged in or not so all
these bits will go through deeper as we need to but right now
we're really focused on ra we know that we are on a post route
and was there anything else in the URL after that post drought like is there
any other part of this path that we need or is it just did
I think some folks get tripped up on this a little bit because we look we go
to our server.js we know that we are on the post route so we don't need to say
post again we don't need to say posting we look at the post routes you don't
need to say post again it's it's assumed that you're saying post there
and so if we look at the URL there's nothing else after that post
except for the ID right and so if we look um

06:28
we have the different types of requests that we could have made when we hit
enter right when we hit enter and we made this request to the server by
hitting enter what what type of request was that again
it was a get request all right so we know that we're already on the post
route we know it's a get request so the only get request that we have here is
this one this is a post is to put this is a delete all right so this is the get
request it looks like the right route because there's nothing else after slash
post and what we know we're going to need to do is grab the ID out of that
URL we look at this URL I'm just going to paste it in here just
so it's a little bit easier to see when we look at this URL
we need a means of grabbing this string right here
right we need the ability to grab that string right there because that string

06:29
is the actual ID of the post remember we
go back and we look at our whiteboard we know that each post right each post is
going to have its own randomly generated ID
you know each post is going to have that ID and so what we need to do is be able
to yoink that ID out of the URL so we can go and find that post in our
database and so here we have this parameter when you put the colon and
then a name after it this gives you a variable that you can use inside of your
controller that'll grab this value it's as though we're passing this string of
letters and numbers into this variable and then we can use that variable inside
of our controller all right so we found the right route
we know that's the right method because it was just a loading of the page I said

06:30
General get request we know that we're on the right route and we have a
parameter just a variable that's holding that string of letters and numbers that
is the ID of our post what is insure off doing for us
making sure that we're logged in we don't want folks that aren't logged in
to be able to see posts right you could remove this and then anyone doesn't have
to be logged in could see it so I am just making sure that they are logged in
all right and then what I want them to do is if they've found themselves at
this route they're logged in let's go ahead and execute this controller and
specifically this method on that controller now where does it know to go
to find the controller well I've already

06:31
required it up here I said hey go to the controllers folder find the post
controller and so post controller is our post controller it's gonna have a bunch
of methods and we're going to use the get post method so let's go to our
controllers folder our post controller and we should have a get post
method get profile no get feed no get post exactly what I'm looking for boom
that lovely that lovely get post and we're gonna do some stuff here
I'm gonna do some stuff here right the first thing we're gonna do
is we are going to use post find by ID what the heck is posts find by ID
what am I doing there post what is post post find by ID
is checking the database exactly if we look up top

06:32
post is requiring our model so the model is how we're going to talk to the
database Mongoose is going to enable us to use this model to talk to our
database wherever we see post it's our post model that we required up top
all right so we're going to go to our post collection
we're going to find in that collection something that has the idea of
rec.params.id what the heck is wreck Dot params.id Rec Dot params.it
yeah we're yanking the ID out of the URL remember we looked at this route file
look at this route file we said hey this is going to be the variable that's
holding that that that ID that was in the URL that big string of letters and
numbers it's being held by ID so when I do

06:33
wreck which is the request params which is the parameters that it might be a
part of that request and I look for the ID variable or parameter we want to call
it I'm going to be able to grab that let that string of letters and numbers so
it's as though it says though I have grab this string right here boom grabbed
it it's as though I've grabbed that string and I've placed it right there
right so I had grabbed that string out of the URL and placed it right there oh
sorry let's get post in my bed foreign right there and also right here right
so we were almost done with the original getting of

06:34
a a generic post so we went to this page we saw that that request was a get
request sent to the server our server heard that request use the
post routes file there is a specific route for the get request and luckily
that get request route also included a query parameter so we'll be able to use
this query parameter uh this parameter sorry inside of our controller to grab
that string of letters and numbers so we can go and find that specific post so
when we look inside of our post controller we found the get post method that we
said to use in the routes right that get post method and that get post method
will have the ability to say all right using that post model using the Mongoose
ability to go to that collection find a specific document that has the ID that

06:35
came from the URL and so what we're going to be able to do is go and look in
our mongodb instance for right inside that post collection something that has
that ID so if we look this has the idea of 2874 if we look in our mongodb and we
look at our posts you should be able to find something that says 2874
a lot of posting there we go all right two eight seven four so we're able to
use that ID to find this specific post and we're gonna grab all this
information for the mongodb and we're able to store that
in this variable called post so we were able to go to our post collection find
the document that had the ID that was in
the URL and we stored that in post we're also loading comments and so on this

06:36
line we went to our comments collection and found found uh the the information
we needed for the comments but we'll hold off on this for right now because
uh it's a little too far so we were able to go and find all the information for
that post we were to store that in the variable post and then down here we're
rendering our post ejs we want that HTML to come from that ejs template and we
passed in all the information we got from the post uh with the name of post
into the Hat into that ejs template so if we look at some of our EGS we should
see the variable of post and wherever we see that variable of posts we know that
is the information that came back from the database for that specific post
so let's take a look at that post ejs we go to our views
go to our post ejs and here's our lovely

06:37
post ejs there's a lot of stuff going on here but if we look
we can see that we we were able to pull out from this ejs all right here's the
here's the post title as we grab that singular post we can grab the title
property off of it we can grab the image property off of it we can grab the ID
property off of it to populate our ejs if we look here we have the title
property of their name we have the image property of the URL that's stored in
cloudinary we have all this stuff that we're able to now use because we went to
this collection we found this post and we passed all of that we passed all of
that into our ejs so now as we're building out our ejs we can have an H2
that has the title that came from that document we can have an image that has
the URL that came from that document and we can start to build out the other
things too that we'll use later on like the ability to have the the like button

06:38
the ability to have the uh trash can as well that'll be some down here here we
go the trash can down there and we'll also be able to put in the
number of likes so we're able to grab all that stuff from that collection pipe
it into our ejs to build out the page that we see here questions

06:39
can you describe controllers so uh if you've been following along we've been
using an MVC architecture models views controllers the controllers are kind of
like the person in the middle they know the request that came in and can go and
talk to our database via the model they can go and help generate the HTML by the
views and they're kind of the the orchestrator in between that knows how
to go get the data if it needs it knows how to pass that data to the ejs if it
needs it and then once it gets the response knows how to get it back to the
client why isn't post-capitalized in the ejs because
for that for it to be capitalized we would have to have capitalized it here
you could do that and now you're going to be looking for capital P but we gave
it this name here of post uh if we change this to unicorn then anywhere we

06:40
saw a post in there we'd have to change the unicorn but since the posting just
makes sense to call it post what's the routes role in MVC the route
is just the the the server understanding uh what request was made and getting it
to the right controller you built something out like this what
parts usually start with the views of the routes I actually start off with my
model first and then my view I find if I have my model clearly laid
out and I have my view laid out then I'm then I'm pretty good um
can you give us examples of projects people have made I'm gonna be tweeting
this week uh everyone that gave me permission to share their um

06:41
their 100 project I'm gonna do like a big like thread with them in there I
think that'll be cool and uh yeah be able to see but there's hundreds and
hundreds of projects have been built off of this template uh that do all really
different cool stuff yeah definitely if you everyone just give the 100 devs tag
uh peruse on Twitter you'll see some really cool stuff
is there a way to encode the information sent throughout not sure what you mean
by that how does the Post ID get into the URL in the first place um so
what we're actually realizing is that when we build out like our profile or
our feed so if we go back to the profile or the feed as we're placing

06:42
as we're placing post into the feed if we use the inspector
we can see that these are actually links you can see these are actually links
if we look at the link the link has the post ID already in the link and so when
we build out the feed or the profile page as we're building out the
individual things that we're going to click on the idea is already there and
once again to build out the feed we need to go to the Post collection find all
the posts and then build out Li's that have anchor tags inside them with each

06:43
individual post ID uh bathing so bathing said why doesn't
mongodb have capabilities like cloudinary to store the images as a URL
um because it's two different types of data that you're storing like I'm going
to be is meant to be a database you could technically encode images into a
database if you wanted to uh it's not technically like you shouldn't it's not
very efficient but one is like raw Text data and the other is media and you want
to have those separate because media has to be stored on an actual drive right
like like that image isn't Magic it has to be stored somewhere right think about
like an image on your computer it's stored on your desktop that's actually
on your hard drive or your SSD so what cloudinary is doing is storing that
media on server for us so we can grab those files off of our hard drive and
then they actually do a lot of other stuff for us too like putting it behind
cdns and all that other fun stuff to make it easier to get those images back
and forth but a database is not really designed to hold that type of information

06:44
could it technically yes uh should we break the connection to the
original repo so it doesn't look like a fork of bub oh yeah absolutely you
should definitely um have like your own repo for your project cool all right
detective it just depends on what you want to do yeah it depends on what you

06:45
want to do all right so let's finish up looking at this post
uh by also just looking at the model at the end so we kind of skipped this part
where we're saying all right we're going to use this model of posts so let's go
to our models let's look at our posts and what we're going to see here is that
we are using Mongoose so Mongoose is what we're going to be using to help us
communicate with our mongodb Mongoose is helping us connect to our database and
it's also helping us uh use these schemas so we know what type of data is
going in and out of our database why do we do why do we use schemas
what is that bring you to the table for us because we didn't use them at first

06:46
or were using mongodb without any schemas at all yeah the database isn't a mess
so we have some structure so that we have a a format or a template for the
data that's going into our database exactly that's that maintainability
right it adds to that ability for us to know what the heck is going on in our in
our in our database now if you have a good
model with a good schema do you actually
even need access to the database to know what's going on
now I can look at this schema and and know what's happening
oh mid mule said also for Google uh your schemas is a term that's used in a lot
of different places when it comes to kind of programming there are schemas
that refer to SEO this is something different yeah
cool so yeah this we don't we wouldn't need access to the database we we know

06:47
that any post right any post is going to have a title that's a string it's going
to have an image property that's a string it's going to have a cloudinary
ID which is a string it's gonna have a caption which is a string it's going to
have a likes which is going to be a number it's going to have a user and
we're gonna be able to actually grab the
object ID of a user it's going to have a time that it was created I'm just going
to use that that current date uh as the created ad so we're able
right we're able to just by looking at the model know what's
going into our database so if you didn't even have access to my model to be
instance you could still be a developer working on this model working on this

06:48
information and be able to get your job done
yeah once we start using schemas we make it required that you use it if you try
to create a post document right now without using the model you're going to
get an error it's gonna like it's going to say like you can't do it it's going
to stop you from doing it because what that does is it makes sure that my
collection is clean right every single document in my collection will follow
this schema so there's no extra data on some documents that's not there on other
documents everything that's on this schema will be represented in that
collection with that document cool alrighty so let's step through this

06:49
and kind of talk through one more time beginning to end now we've seen all the
bits together let's start to break briefly and then we'll move on all right
so we're going to click on uh this various photo and when I click
on it you can see in the inspector that it already has an anchor tag that
has a specific route we can see that it's a post route with this actual
string in it and this string is the ID of this post so when I click it's going
to take me to that URL slash post and it already has the ID in the URL and this
is a get request this is a get request that get request makes it to my server
if we look at the server.js right that get request makes it to my server the
server just said all right you made a request on slash post use the post

06:50
routes post routes is saying go to the routes folder find
the post file so we go to the Post routes we find the posts file
inside of it we said all right well what type of request was it was it a git a
post to put or delete because it was just trying to load this page it was a
get request so we looked we have a get request yes we do beautiful we can see
that we're gonna be able to grab anything that comes in that URL after
slash post and it's going to have the value of ID so we're going to have like
this variable that's holding that string that that 631 all the way to 2874 we're
going to check to make sure that we're logged in since we're logged in we'll
continue we're going to find our post controller and use the get post method
so here is the post controller this is where we're going to find it we're gonna
go to our controllers folder we're going to find the post file and when we get
there we're going to run the get post method so we go to our controllers we go
to our post controller we have all these different methods that

06:51
are here on the controller but we're looking for that get posts method we're
going to use post which is our model if we look up top require the models in
post so if we want to look at it we can go to models posts you can see that
Mongoose is helping us with this model we also down here we saw in maybe two or
three classes ago I um that when we do this Mongoose model here what
is it going to do with post what is it going to do here
what's it going to do with post yeah it's gonna make it a plural by
default it's just what Mongoose does by default we saw something cool in the
class we went over this with like ox being turned into oxen because it knows
how to make a plural of awk which is wild uh so if we actually look in our
database we're gonna actually see that it's posts

06:52
that's where the name is coming from it's post uh and what we're doing when
we are using this model is we're saying all right go to that post collection and
find a document in that collection oops sorry go to that post collection find a
document in that collection that has the
ID and what id do we want we want the ID that came from the URL remember we we
looked at the routes it has this ID query parameter here we're able to use
that parameter wherever we see ideas the parameters in the URL if we look at the
URL we look at the URL it's there that 2874. so we're able to go into our post
collection find a document that has that
specific ID and store it in the variable post
all right we also actually do some other stuff here too because that post page
needs more uh we use our comment model right we use our comment if we look at

06:53
our comment model here uh models comment you can see that it's going to
be comments will be the name of the collection so we're going into that
comments collection uh we are finding something that has a post property of
the ID we just pulled from the URL remember each comment is tied to a
particular post so if we want all the comments that are tied to the post that
we're on we're going to use that same query parameter to get all the comments
tied to that particular post uh we're sorting them in descending order and
we're using that lean remember what the lean does
and get you you know you know what I mean get you a little yeah
yeah it gives you the pojo right the plain old JavaScript object

06:54
documents aren't one to one objects that we're used to using right
it's not it's not a one to one of an object there's a bunch of other stuff
that it comes with that's like five times the size of a normal object so
that lean kind of just gets rid of all this stuff that we don't need and just
gives us the raw object that we care about
um which can make this this faster right
so we found all the comments tied to the particular post that we're on by using
that same ID that came from the URL and then it's time to hand off all that
stuff to our ejs we're handing off uh the posts and we're giving it the name
of post we're handing off the comments and we're giving the name of comments
and then we're also handing off rec.user with the name of user

06:55
heck is rec.user what is that giving us what is rec.user
yeah it's the user that is currently logged in exactly we know that
sense cents we know that we had to be logged in for us to make it to this page
right we never would have ran this get post method if we weren't logged in so
we already know that we're logged in and
whenever a request is made with a logged in user part of that request remember I
showed that request something it was massive so much stuff in that request
object part of the stuff that's in that request object is info on the logged in
user and we could yoink it from that request and grab that information from
the logged in user and pass that to the ejs so going into this ejs template
is everything about the post it's everything about the logged in User it's
everything about all the comments tied to that post and it goes into this ejs

06:56
and this ejs is the template that we've built that takes in the title it takes
in the image it takes in uh and builds out all the things we need like our
likes and our deletes and um a place to put all the comments right we
have like a loop where we Loop through and we put all these lies that are each
comment into the UL so that way we can see uh for show and
Baddie as the comments that were on this post
and so that's the the lovely world of e j s it's in the game
and then finally once we're all done we've rendered that ejs we spit out the
HTML we respond with it that's what the res is for we respond
is the user passed through the request yes since we are logged in we have an
active session every request that is sent to the server has information on

06:57
the logged in user is rec.user also coming from the URL no
it's part of the request that's being sent to This Server remember when you do
any type of request whether to get a post to put or delete you're sending a
metric crap ton of information to the server with that request
how can we log the request body you can just console log request or right now
our request is in the variable req so you can just console log req and you'll
you'll console log every single thing about the request thank you man
those unsafe files make me Twitch uh it's because I'm I'm doing a lot of like
examples so anything I'm typing really isn't shouldn't be part of the code base

06:58
it's just like me typing the URL into spots and stuff like that so I don't save
uh can you explain [&nbsp;__&nbsp;] schema types
object ID please I tried to read the docs and I got lost in the sauce
absolutely so if we look in the post model there is some weirdness right here
uh we know that each post right each post is going to store the user that
made the post like if we go back and look at our original whiteboard each
post is going to have like this poster ID that we that we care about like who
made the post well that has to be modeled in our schema somehow right and
so here we have a user we could call this whatever we want but since it's the
users that made the post just call it user and
what you're noticing is that we get to put each different type like what type
of data we're storing so title is just a string

06:59
uh number of likes is obviously a number well what is a user like how are we
keeping track of the user as well we're keeping track of the users based off of
their ID so Mongoose just enables us to say hey
we're keeping track of the user based off of its ID so we don't do anything
fancy like turn it into a string and then parse the string to get the ID we
can just tell Mongoose hey we're gonna store that ID because when we look at
the IDS right when we look at these IDs they're not it's just not this number
right it's not just this number it's like this
object ID it's it's something more than just a string for the ID and so
Mongoose knows how to deal with that when you give it this information like
hey it's going to be this thing that's the object ID which is not technically
just a string it's an object that incorporates other stuff so instead of

07:00
having us to like encode decode and figure it out just treat it as an object
ID and uh the ref is just kind of letting us know where the data is being
modeled from so it can like know the use that user model which is how we're
creating our users hey Jesus hey what up Nick
yeah it's a primitive of mongodb so if you've read the docs you know that it's
kind of comes with it [Music] yep and then you can take this a step
further if you've read more about like populate and stuff like that Mongoose
does so much it can do so much for you right mongers can do so many things
we've just skimmed the surface of what it can do and so
um as you build out your hundred dollars project I'm sure you stumble into more

07:01
and more that it can do for you what I bring Rascal says yep Mongoose that
superpowers it really does yeah the Mongoose documentation is
overwhelming you know I used to feel the same way
and then I kind of just realized it's just big words
right like for me when I was first reading this was back in the day when I
was first reading the Mongoose documentation I I just didn't
I just didn't get it because the big words I didn't understand
but once I took time to like just like Google like well here's how it used to
happen I would Google what the word met and it would take me back to the
documentation where I was currently stuck right and so that's how that's how it
used to be right like I would Google like what the heck is this and then it
would take me back to the docks where I was currently stuck which is one of my

07:02
problems with documentation I wish people would just like break everything
down as though you'd never heard of what that topic was
um but once it matured a little bit and I was able to like look up things like
individual words I find the documentation like oddly comforting I
feel like it does tell I feel like I was
being blinded by the big words but now I think it's been filled out enough where
they do actually do a good job of breaking down the words with an example
and so whenever you're using something really like heavy that you haven't been
encountered before you have to run the examples and you have to spend time
dissecting the examples so I don't really get a lot of value honestly out
of the text and the big words but I get more out of looking at the code and
trying to figure out what the code is doing I don't know if I'm explaining
this well but I think it's just for me over time time you get better at reading
documentation and I actually think the Mongoose documentation does a good
example of showing but maybe not telling as well

07:03
yeah and so I I and that's why I assigned so much reading
right the reason why I assigned so much reading for homework is you get more
comfortable with it the more you do it like the reason why I didn't start you
off with like the video or the tutorial for react and I had you read the docs
first it's one the react docs are pretty damn good but that habit of reading
first and that being your primary way of
understanding is going to be a skill set that you absolutely need on the job
right like you absolutely need that skill set on the job and so I really
really encourage you to spend time reading through documentation even if
it's painful at first reading the Mongoose docs and trying to walk away
from it understanding what that's going on is a really good exercise reading the

07:04
react docs first before watching a video or a tutorial is a really good exercise
I can't stress how in a few months you're gonna well for a lot of folks
very soon you're going to be on a team by yourself there won't be a lot of
tutorials for the weird Tech thing that they're using you're going to have docs
you're gonna have to play with it and try and understand it and doesn't mean
you don't get help I spend a metric Craft Time on on communities where I get
help our Discord is amazing for that right but that act of reading I I can't
stress it enough how important it is yeah

07:05
cool all right uh we also have like a we also said like it's cool like you have
like a type that's like date right and you notice like this default uh you can
put defaults on any of your kind of your your properties here like title image
you're gonna have a default so like if something's not passed in so what what
what do you know about our post when I create a post uh what do you what
do you think's happening uh in terms of created at
am I passing that information along with the form that I'm submitting for
creating that post nah so when I actually create a post I'm
not submitting the timestamp myself uh it's the default is running so it's like
all right it didn't have that the default will be date now boom and so
um when I when I created when I create a post I actually don't pass a created

07:06
that property uh I'm just using the default
and what does that look like yeah and that uses like the normal uh date cool
all right so we walked through the ability to render a specific post right
we we rendered a specific post um I would like to render out
uh the profile and then look at submitting a post so let's render out
the profile let's look at submitting a post and then we'll look at kind of
updating likes we'll look at deleting and then we'll kind of regroup and see

07:07
where we need to go from there cool questions before we look at the profile page
going on rascal um why can't I just VIP from here
hold on let me try it on this side one second I just want to see if I can
I already have VIP why is it limiting you when you have VIP um
I'll figure that out after stream you should be able to post links thank you

07:08
for all the help that you provide and chat I really appreciate it cool
alrighty so let's take a look at the profile
we put this on our resume we're putting our 100 project under our consulting
company name it's up to you um I think it probably stays underneath
like your 100 devs section um your Consulting is probably the
Consulting that you did yeah but we'll look at that uh throughout this month
cool uh what would you say that models are
files that create data we need to do the server
we use the information in our views yeah
I think I think you're on the right vein there like the models are the structure
of the data that we'll be storing in our mongodb database and eventually we take

07:09
that data and pass it to our views to render the pages that we see yeah
I use the package moment.js that's very very common package folks use
uh the MVP ends up showing you Leon as a
contributor since it's built off the bub template should we do something about
that yes um clone it down and don't make it a fork um like don't Fork it
uh beforehand can we do a speed run on doing the models and views from scratch
I think that might wind up being a different day because we're about to hit
four hours right now and we're still not even done working through the entire
code base um so we'll see how far we can get but
that is my goal I do want everyone to be feel comfortable with the code base and

07:10
then I want to be able to like speed run it yeah like adding stuff oh
all right looks like we got through most of this stuff let's take a look at the
profile all right so here's our profile page for Ron uh so
far we've just loaded the profile page and so let's talk through how we loaded
this profile page right so we're at localhost 2121 slash profile so if we
take a look was it a post route a comment route or a

07:11
main route that we just went to I don't know if it had a confirmation on
that one cassava don't worry about it we're going to resubmit everything on
Tuesday anyway uh yep main route so let's go ahead and
take a look at our routes folder routes main.js
and we can see that there was a get request for profile which is great we
noticed that it's using ensure off so we know that we're checking to see if
they're logged in remember our profile is a little interesting right now it's
only the profile of the logged in user uh so we're checking that profile we're
making sure that they're logged in if they are logged in
now what we're going to do is go ahead and use this controller and specifically
with the the get profile method so we loaded the profile route

07:12
it it was a get request we checked see they're logged in we're going to use the
post controller and the get profile method so uh is our post controller
linked to correctly yes we're going to require to go to controllers find the
post controller and we're going to use the get profile method
so post controller let's find the get profile method boom here is the get
profile method what we're going to do is we're going to go using our post model
to find all the posts from that specific user
so right now does Ron have any posts no Ron doesn't have any posts we don't
see anything over here and so this line of code still runs it's trying to find a
post that has the ID of Ron Ron is a user
since Ron is logged in every single time

07:13
Ron makes a request part of that request body is a user property that has Ron's
ID like if we console log this we can it's console log wreck
dot user we'll save that and if I refresh what we should now see is
in my console you can see that rec.user that was console logged
right and so we can see that we got Ron's ID we were able to grab their
username their email and their hashed password all that came right all that
came with just making a simple get request you gotta think about this every

07:14
single request you make all this information is being sent and the cool
thing is we can yank it so we know that we're on the profile page we already
know that somebody's logged in what we're going to do is we're going to
yoink their ID from the request right so we grab the 633 1bd6 from the request
that was sent to the server and we're going to look in our post collection for
an document that has the user property of Ron so we can go and we can like look
in our post collection and we're we're looking through all the posts
and we're looking for a user that has Ron's ID and we're not going to find it
because Ron hasn't made a post yet so so
nothing happens in terms of uh rendering out the profile in terms of the post it
sends in a nothing burger and the ejs just doesn't build out uh anything for

07:15
the posts but if we were to make a post it would show up here cool
uh you can see that we pass along any of the posts that would have gotten from
the database which is zero and it also passed along all of Ron's information
into that profile.ejs if we look at this profile
ejs what we'll see is that there's a lot of goodies in here there's not only the
uh putting of the the the form for like adding a post
right like that you we can submit post on this page but we can also see all the
posts that were already submitted by that user we have like a loop for
submitting for for showing all the posts right now Ron doesn't have any posts
this Loop doesn't do anything um yeah so we have the ability to show
the post we have the ability to upload a post with that form and we're also
showing Ron's basic information the username and the email that we got back

07:16
as well so if we look at this post route sorry post controller you can see that
we passed not only the information about the post that they made but also all of
their user information to that ejs that when we look at the profile we can see
Ron and Ron's email all right so let's go ahead and create a post
uh let's go and give this post let's go ahead and say
um let me see real quick what images I have on my desktop let's see
I said like a lot of screenshots of people getting jobs that's pretty much
like a full like all of them it's just screenshots of people getting jobs
so I'm just gonna call it random job look at this job let's choose a file

07:17
desktop there we go boom all right so now we have a new post
uh that's a random random job oh no it's only drowning in all these
job posts oh we do I don't know all right so now we have a new post and so a lot
of stuff had to happen for this post to show up so let's take some time uh to
step through step by step how we went from filling out this form uh to this
post showing up and since we're already in the post ejs let's let's start with
that post ejs um so on sorry the profile ejs profile ejs
all right because we were already on the profile right this is already on the
profile what we'll notice is in this profile like we had places to put the
username to put their email we also had this lovely form here

07:18
and this form uh is doing the heavy lifting one of the things to know is
that we're using multer to help us upload the files
um the different types of files that we're uploading in this case image files
like the the code that's helping like take that file and and and eventually
get it up to the server is something called multer and we have to have this
ink type multi-part form data for it to work so a lot of times folks get pretty
uh pretty frustrated like they they have
everything working like everything looks like it should work but for some reason
the files just aren't uploading it's it's almost always you forget the ink
type so you need it uh you can see that we're sending a post just like most like
like we would send with this form before
we have method of ride where it could do a lot of other stuff so in this case we
are submitting this form it'll be a post
request and this will be the route it'll be slash post create post so when we
submit this form we know that it's going

07:19
to be a post route and we're gonna we're
gonna be using this as the the secondary piece in that route so we're going to
look for a post request on this route and if we look in the Forum we have our
input for the title we have our text area for the caption and we have the
input for the file upload and so we need this input type file and we have a
lovely Sim submit button so that we can submit the form
and we'll be able to upload our actual file cool
how do we upload update the multiple of my tablet short videos you would just
take off the check that's looking for images which I'll show you in a second
all right so um we have our lovely form it looks good we
know that this is the action of the route so let's follow that route we'll

07:20
start all with the server.js again is the submitting of the form a post route
yes it is right can the action route be anything
it could be anything you want it to be uh you could change it to to unicorn and
it'd be totally fine right and so in this case uh it is a post so
we're going to look at our post routes and we know that it was a post with the
create post route because we could have multiple forms that are all doing posts
right so we could have we could have one form doing maybe image uploading maybe
we have a different form for for video uploading whatever we want to build but
we could have had multiple posts on that page and so each post needed needed its
own route like each of those forms needs their own route and so when we look at
this profile.egs yes it's on the post route but how do we differentiate
between different forms well this is the create post form so that's what we're

07:21
looking for in our routes we're looking for a post route and create post which
is in there and then we have this upload single file and so if we look at the
upload single file we can see upload is actually requiring multi so multi is a
little bit of middleware middle where is the stuff that sits between a request
and response that helps us do our job and so if we actually look at our
middleware and we look at molter there's a lot there's a lot here
but this is just something that you can joink from
from either the npm package or now from this this bit of code here but the idea
is that motor is going to handle uploading the files for us and you can
see right now it's checking to see if it's like an image like if it's a JPEG a
JPG a PNG if I tried to upload like an SVG file this wouldn't work if I would
try to upload anything that's not a jpeg or PNG it just wouldn't work and so if
you want to do different types of files you can just get rid of this check or

07:22
change it to be the check for the stuff that you care about so once again do I
have any of this memorized no is this something that I could probably code
from scratch probably not uh this is part of all my templates I just know to
grab this molter is going to help me handle my file uploading so if we go
back to our post routes we can see all right it was a post request on the
create post route we have molter helping us grab that file that was uploaded and
we're going to go to our post controller and use the create post route right
yeah and so right now yeah this is this is like
oddly restrictive right this is oddly restrictive yeah cool

07:23
all right so we used molter to help handle that image uploading right now
all molters doing is helping us like get the image we haven't done anything with
the image yet uh we're gonna go to our post controller and the create post
methods let's go to our post controller let's look for create post
ah here's create post now this is where some of the heavy lifting starts to
occur what we're doing here the very first thing we're doing
is we are using cloudinary to upload the file that motor just
helped us upload so molter is what helped us grab the file that was being
uploaded through the form but what cloudinary is doing is taking that file
and putting it on their servers for us so cloudinary sees the file that we just
tried to upload it takes that file and it puts it on their server it puts that

07:24
file on one of their drives somewhere out there on the internet
right and so cloudinary uh we can see that we've required it we have this
lovely middleware for cloudinary and once again it's just trying to grab
you need like your Cloud name your API key API secret like you need all this
stuff that's coming from your EnV file to be able to use cloudinary to do that
uploading all right and so cloudinary the very first thing we do is
hey that file that you were just trying to to upload when you submitted that
form we're sending that to Cloud an area now
how do I know to do uploader upload Rec file path to use cloudinary V2 like how
do I know to use any of that stuff just from their Docs
right just from their Docs right you read the cloudinary docs it shows you
exactly what to put in it shows you specifically what to put in with with

07:25
motor so you copy and paste and that's kind of it
yep so it's not something that like you deduced somehow you read the docs it
told you how to do it and that's what I did and so now my images will be
uploaded to cloudinary cloudinary is going to do its thing and
it's going to send a response that I'm going to store in result and the cool
thing is once I've sent that image to cloudinary cloudinary sends me back a
bunch of information that I'm storing in result and I'm going to use that
information to create my document in my mongodb collection so we see that here
I'm actually going to create a new document in my posts collection that
document is going to have the title that came from the form remember we can get
the information from the form by using rep.body so I'm able to look at the form

07:26
that was submitted and grab the title out of that form right I'm storing that
in the document that I'm creating and I'm also storing the image URL that
came from where I'm going to store the image along in
that document and where did that image URL come from
yep that's part of the response that cloudinary gave back to me it's part of
that response that's stored in result I'm able to grab that URL that they gave
me and part put that as part of my document
they also gave me an ID for that image that I'm going to store a part of my
document why am I I want the IDS and not just the image URL

07:27
why don't I just want the the image like I have the image URL why do I need
anything else well remember we eventually want to be able to delete
these posts right and we want to be able to know like what image to not only
delete from our database but we also want to start deleting the images from
cloud and area as well because if we don't start deleting the images from
cloudinary as we delete them from our application our cloudinary instance is
going to become bloated so we have all this media that we're never going to use
and eventually we'll get past the free tier and have to start paying so we we
want to make sure that we're not only storing just the the URL for the image
but also the ID so we can eventually like delete it and do any other fun
stuff we need to do later on um it's 2K1 300 bits it's a degree in cyber
security web design development good um depends on what you need it for uh

07:28
you just spent 300 bits to ask that question that could be the last dollar
you ever spend and get an amazing job in
web development without needing to spend
anything more so we've been doing a free uh 30-week software engineering program
here that takes from everything you need
to know from xero to how to get a job uh you do not need a degree for that to
happen now degrees can be useful for other things especially if you're coming
from a country that requires degrees for certain jobs or you need a degree for
Visa status things like that but in terms of getting a high paid job uh or a
well-paid job no you don't need it oh yep and the IDS are unique exactly we
might have multiple images with this they might be used that URL multiple
times but that ID should be unique cool we're also going to grab the caption
that came from the form we're hard coding the number of likes

07:29
right we're hardcoding the number of likes at zero and then we're also saying
what user made the post by grabbing that rec.user that ID I love this right here
this right here this blows my mind like can we just stop and think about this
for a second right like if you if you can get to the point come on
let me highlight it if you can get to the point where just what I have
highlighted like makes sense think how far you have come
we're gonna walk through one more time because if you if you can if you can if
you understand what's happening right here this is like mind-blowing stuff
because to understand what's going on here with it we have to understand a lot
of key stuff all right one we made a request to a server
that server heard the request and told us to come to this controller controller
right to come to this controller and when we come to this controller the

07:30
first thing we're going to do is take that file that was part of the form that
we submitted and send that to a third-party service that is then going
to respond back to us with a lot of information can I say all right here's
the URL to the image that's stored on our servers that you can use that image
in your application also here's the ID for that image so in case you want to do
any stuff with it like delete it from our service whatever you can later on
right and then we're going to go ahead and create a new document in our post
collection so we're using this post model we're using Mongoose to actually
create a document in our collection we're grabbing the title from the form
like when we look at the profile ejs and we we look at the form
right that that form has a title an input with the name of title so
we're able to grab that title from that input because the input had the name of

07:31
title right so we're able to grab that title from the form that was submitted
and store it in our document with the name of title we're able to grab the URL
that came back for our image from cloudinary and store that in our
document the ID in our document we would have grabbed the caption from the body
of the form as well we're able to hard code a number of likes and we're able to
grab the user ID from the logged in user because we have a session and while the
user is logged in because we're in an authenticated route we're able to use
that session because each request we're making is also sending the logged in
users info and we're able to take that user's logged in users ID and store that
along with our document and when we go to our mongodb and we refresh

07:32
and we we go all the way to the end we have a lot let's go to the next one
and we have random job we can see that all that stuff is there the title that
came from the form the cloudinary link that came from cloudinary the the the ID
that came from cloudinary the caption that came from the form the hard coding
of the likes the the user ID that we got because the user was logged in the
default created that timestamp because our schema told it to use the default of
date now all of that stuff comes together to
create this one document that's inside of our collection and when we were done
creating that document we told them to refresh the page which made a get request
which used a whole different route which was on our main routes the main routes
for the profile we checked to see that they were still logged in they're logged

07:33
in we go back to the post controller we go to the get profile route
and this time when we go to our post collection and we try to find just the
post of the user that's currently logged in
we're going to find that new post we're gonna take all the information that's
from that document pipe that into the ejs pipe all the
logged in user information into the ejs and that's why on that reload of the
page we see the post if you understand that 10 second warning
maybe lights and music if you understand that you are in the
the echelon of echelon of people that have tried to understand this stuff and

07:34
did not get there so let's party [Music] let's go congratulations
that's [&nbsp;__&nbsp;] huge you should be overwhelmingly proud of the hard work
you put in to get to the point where ninety percent of that makes sense
you can still have 10 to 25 that doesn't but if you understood most of what I

07:35
said that's ridiculous absolutely ridiculous oh yeah cool all right
questions while we're here how does how does this take me to an individual post
how did that know to go to a specific post um
when we when we loaded this page right like if we go back and I look at our
profile ejs when you look at this profile ejs we're gonna see
that in this profile ejs is this link sorry sorry this Loop

07:36
we're building out Li's for each of our posts and what you're going to notice is
that each post had this this link that we hard coded I
hard-coded the slack I could have called the slash unicorn but since we have a
routes file for our post I wanted to make sure that I used that that route so
I said hardcode the route post and then I'm plugging in the ID that came from
the post collection this for Loop is going to run once for every single post
that we have and so it's going to create
all these allies that have an anchor tag for each post and so the actual anchor
tag is going to have the ID for that post in it and so when I inspect I can
see that let's take a look when I inspect I can
see that that that ID is already there so when I click I'm going to go to
localhost 2121 slash post slash this ID and then I can use that ID that's in the

07:37
URL to load this specific post like we did first beautiful
can any JavaScript be added to ejs yep you can link to any you can link to
anything you put it in your public folder if you have like individual files
but yeah um you can the ejs is pretty flexible
you can put whatever you want in there we want it to display text Fields
associated with the image with those ejs templates go inside the

07:38
UL you mean like on the profile page on the profile page yeah you would just you
would just put like inside that for Loop you would put uh whatever you wanted in
there so if we look back at this for Loop remember you you still have to use the
um array syntax because it is looping through the array of posts and so you
can't just do like post underscore ID you have to use the array syntax but you
can put whatever the heck you want in there you could put um
it was like title I guess we could do like title if you wanted in there
whatever you want so let's let's try it uh let's do h two
and we can just link this here and I believe it was title that each post has

07:39
cool and so now you can see that it has like the the title there as well
uh where did we get the array though so good question
uh when we inside of our post controller pass
this information into the ejs like so we went to our our post collection and we
find all the documents right we find all the documents and we store those in the
post variable back in the day before we were using Mongoose what we had to do

07:40
right laughs man it's Sunday we outside y'all we outside yeah we outside uh
it's Sunday as heck it's five hours in the mods are sleeping it's been five
hours [Laughter] [Music] um either of those would be fine
either those would be fine all right either those are fine my friend alrighty so

07:41
where were we oh boy uh we were talking about
oh this part right here this post all right
we were talking about this post so back in the day back in the day uh we used to
do things like DB dot collection post find and then we had at the very end
right at the very end we got the two array so before we were using
Mongoose and we were just working with raw mongodb right we had to say hey
whatever we had back from that that collection turn it into an array and
then send that array to the profile ejs so the beautiful thing is that we've
been building up right we've been building up to understanding what's kind
of happening behind the scenes so like if this is your first walk through this

07:42
code base know that we took like two three months to get out to this point
there's a lot of little things that we we we took Stepping Stones through I
hope you appreciate that like I hope that you appreciate that we started off
with like raw stuff raw modules then we added Express we added raw mongodb we
saw that we had to do two array to get an array and now we've sprinkled on some
magic and when we use Mongoose Mongoose knows hey when you get all this stuff
back from the collection you probably want it in a while you probably want it
in an array so we don't have to worry about doing the two array anymore or
anything like that like Marcus has already handled that for us and it it
already kind of has like this like implicit
array return so it already returns it as an array for you and so
I think when folks jump straight into Mongoose they lose that understanding
they don't really see that oh we actually used that to go back in the day

07:43
and like grab this turn it into an array ourselves and then use it mongers is
doing that heavy lifting for us that when we pass posts into our profile ejs
we're actually passing in an array already thank you alrighty
that looked at the post I think there's one other thing I want to see for today
like I said I wanted all this fresh in your mind I know we we had done this and
then we kind of like took like two weeks while you're doing MVPs and other stuff
we introduced react uh and so I know a lot of folks just from from people have
been reaching out like kind of forgot some of this stuff so that's why I want
to spend five hours today at least four hours going through it together and then
on Sunday we'll do the from scratch I really think doing it from scratch can
help solidify the last like final like neural connections you need for this to
link in um the last thing you want to look at

07:44
today before we answer some questions before we uh do a raid is the liking so
we're on this post right we're on this post and we like something
how the heck did that work right how the heck did that work
right and so when we look at the individual post ejs let's go look at
that individual post ejs we can see that we have a like a button uh that is
here oh this is for the comments sorry here is the delete and here is the like
so here we have this like button and what we're going to notice is that

07:45
the like button is actually a what the light button is actually a what
it's actually a form so before we had method override what
will we use we wouldn't use a form we would just have like a button that they
could clicked on and what did we need for us to hear that click
like what what do we need before we use method override
yeah we needed a Smurf we needed an event listener that was listening for
that click we needed some client-side JavaScript that was listening for those
clicks and when it heard the clicks it would make a request to our server using
fetch which we talked about earlier fetch is not something that's like
native like the browser has to provide that as part of the web apis for us to
be able to make the request at all to our server whereas a form that's making
a post that's native to any browser and so

07:46
we can have a form that submits a post but if we look we have a query parameter
at the end and so the this form when we submit it is going to submit a post
request to our server it's going to use the route of post like post but if we
look at the end and it's going to have the post ID that we're on right like if
we look it's going to have the actual ID of the post that we're on but at the
very end it has this query parameter underscore method dot put
and so what's going to happen is this request is going to be a post put to our
server but our server is going to see that query parameter and know to treat
this post as a what I'm going to treat this post as a what
as a put exactly so we don't need any client-side JavaScript we don't need any
event listeners we can use the forms that we're comfortable with however we

07:47
just add this little query parameter it tells it hey server treat this post as a
put and so let's go ahead and take a follow that through we know that's on
the post route like post and then the ID is in there let's actually take a look
at that in the inspector real quick we can see that it has the um
like so slash post like post and then the idea of the post that we're actually
on the underscore method equals put so when this form submits that's the entire
route that we're submitting the entire request is a post on slash post like
post the ID of the post that we're on with the method override of put so when
we submit this form that's the request that's making it to our server if we
follow that step by step starting all the way at the server.js it's a post
route so I have to go to our post routes
we know in this point in time if we look at the server.js
since it has that underscore method as the query parameter
the method override does what it needs to do it no longer is a post that is now

07:48
a put so when we look at our when we look at our post routes we're actually
looking for a put we're looking for a put on the like post route and we're
grabbing that parameter which was the ID of the post that we're actually on so
when we go and look at our post controller and we look at the like post
method we'll be able to link out the ID of the post page that we were on let's
go ahead and look at our post controller let's look for the like post method
all right here's that like post method and what we're going to do is we're
going to use our Mongoose model to talk to our post collection we're going to
find one post and update it we're going to find the post that has the ID that
came from our URL if we look the the actual ID right
here the CC cc5 ID for that post that individual Post Its ID was FCC five

07:49
right we're able to find that actual ID right we're going to find that actual ID
we're going to find that post and when we find that post we're going to update
it by incrementing the likes by one so the likes were originally zero we're
going to increment that Lex property from zero to one and then we're going to
redirect them back to the post that they were already on right so we're just
going to refresh that page and when we refresh that page we now see the likes
are one instead of zero look is it possible to restrict one leg to
one purse per per post per user yeah you just have to keep track of the users
that already liked um lots of ways to implement that maybe

07:50
we'll do that as part of our Speed Run next week
yeah so far we've only dealt with using the the actual parameters after the
slashes and we're not actually using any of the query parameters that come after
the question mark yeah if we look at our original like design
we actually said all right well we could have um like a users who like
property on our document and then just put in the users that have already liked
it and so if the user already liked it we just wouldn't even render the the
like button anymore so like in our ejs we could just have like a conditional
that legitimately wouldn't show the like
button if they'd already liked it that's one way we could go about it
are we gonna do any more 100 Dev search boy are we

07:51
it's October we got a lot of surprises up the sleeves you know
is using fetch not recommended I think it adds a lot of extra work and it
assumes stuff about the client that you're using right now
the client is the browser maybe we turn our code into what where
else could our code run where else could our code run eventually
yeah maybe we build a mobile application maybe we put on a refrigerator maybe we
put in our TI-83 Plus right and so running this code in different
environments means that you might not have access to fetch right and so this
is one way to kind of simplify a little bit yeah

07:52
and I'm talking client-side not server side yeah good point on Nick
give me some 100 devs coasters actually that's actually not a bad idea I think
that'd be a good one all right hey fernan good luck all right so I
think that kind of takes us through some of the trickier bits right
uh it took us four hours but we got through the big pieces we got through
the ability to to see posts to create posts to like posts to
um kind of do the big pieces here we saw the the cloudinary again we saw kind of
like what I think are the heavy uh the heavy lifts right the heavy lifts
so we got about a little less than 15 minutes left I said we'd go for another
hour I want to just kind of go through some of the stuff that's left here in

07:53
the uh slido just to answer some questions because we haven't really done
a true office hours in a little while so we'll take like the last 14 minutes or
so then we'll do a raid get those sweet sweet Channel points and then uh we'll
come back next Sunday yeah we'll plan for next Sunday for right now that we'll
do the speed run from scratch I didn't want to jump right into it just because
I felt like um too many folks would would get lost
without having reviewed it so review it if you need to watch back the VOD you
can to be ready for next Sunday and then we'll uh we'll just go from scratch
raisin a thank you for the hydration cheers to you
Izzy what the bro how you doing Izzy in a minute
uh what time you're planning for tomorrow's Discord session it's gonna be
later than we normally do uh most likely like 8 P.M eastern time
but I'm still finalizing like I said I'll share everything in the morning and
then we'll give we'll have more advanced notice for everything in the rest of

07:54
October mm-hmm all right let's look at some of
these questions here uh on average what uh cue will coding challenges be in
interviews I know this varies I just want to gauge where I'm at I think for
most entry level roles if you can do up to like six cues you're probably good
now if you're trying to get into like Fang or something else like that's a
whole different ballpark but like normal companies
if you can do six cues reliably you're probably in a really good spot
is MVC lecture requirement for October homework homework is required so if you
haven't submitted your homework uh that's a requirement uh
how do you grab a variable that was set in ejs now you use the bee sting syntax
to use any of the variables inside of ejs is it best for the controller to store
items diving have things sort on the client side yes I prefer all my like

07:55
heavy stuff to happen on the server as opposed to like rendering out the ejs or
that happening client side so but that's the preference depends on what you're
doing also uh I need more time for my MVP can I
work at my own pace and remove the stress from my life of course
remember this this is this is you always go at the pace that works for you we
always have the ketchup crew too that you can work through that pace with
others as well uh October is just a focused month for folks that are
absolutely ready that's it you don't lose anything by not participating
I have my first meet with a recruiter tomorrow nervous AF any words of wisdom
you're a boss why are you worried you're going to go
in you're going to show them all the
cool [&nbsp;__&nbsp;] you've been able to do all the
things you've been able to build you're going to talk your talk and you're going
to get the job that's it and uh it's 1-60. right it's 160.

07:56
that's it it's 160. why get nervous with 1 of 60. you could literally go in
slap the stuff off their desk and walk out on a 60. who cares
you got you gotta take the uh the pressure off yourself because it is
literally 1 of 60. um and in terms of recruiters don't ever
sign exclusivity that's the only thing I the only thing I have to tell you about
recruiters don't even sign anything that smells like exclusivity
um uh so like if you work with recruiters that aren't like in-house
recruiters sometimes they try to lock you into a deal where you can only get a
job through them don't ever ever do that uh people say the job is being a good
googler we have a class on being a better Searcher uh not really um

07:57
it's kind of on you to Google how to Google better
that's pretty funny but uh yeah it's it's what you've been doing you've you've
gotten better if you've been here since the beginning you've already gotten
better at it um there are like cheat codes with
Googling I showed them with the um the magic hack for finding open roles uh
those like that style of entering queries into
Google works so like there are like ways you can do to make your your queries
better um but you don't really need any of that stuff day to day yeah
yeah I would look into like the the different ways of like actually
searching on Google that would make you easier to find results that you care
about I use the timestamp thing that I showed you a lot like sometimes I don't
want to see tutorials from 20 years ago I want to see like something that was
made in the last six months right so often I'll throw on my Google queries

07:58
the like the timestamp piece so that I only get results that are recent
um stuff like that how do we manage sdks with MVC
um depends on what you're doing sometimes you just incorporate them as
middleware sometimes you do other stuff it kind of kind of really depends on
what it is I do code Wars in Anki daily and homework for methods I still have to
return refer to Google for syntax and looking up methods to technical
interviews let you use Google uh that's a really good question a lot of them
it's a bad look that's just true a lot of them it's a it's a bad look to

07:59
to it just increases your smell right like if I had an engineer that had to
look it up and an engineer that knew it of course the engineer that just knew
it's going to look better than the engineer had to look it up I don't know
why that is I don't know why people care
about that [&nbsp;__&nbsp;] you're gonna be using
Google all the time but it's just it's true some interviewers will hold that
against you some interviewers are
blatantly obvious Google the [&nbsp;__&nbsp;] like
they don't care right it really does it's a personal thing and that's why
it's better to have them memorized so that you don't
have to look them up because some folks will care some won't and you never
really know who you have in an interview and that's just the truth of it right
um I'm going to show you how to play the games with you if you want to play it
so the reason why I introduce Anki and why I always talk about Anki is because
these methods should very easily already be in your Anki I've given you methods
now for four weeks for homework and I've told you to put them in Anki every
single time so if you're getting ready for the hunt and you haven't done that
you're at a disadvantage already because
you should have been getting that review and with those methods already so now's

08:00
your your call to action to start now if you haven't already you want to make
sure that you are putting those methods in the Anki that you know the basics and
that you're doing the code Wars in series the practice of specific methods
it doesn't make sense to to memorize all of your string Methods and then do code
words that are array problems right like the reason why I keep telling you to
like do specific code Wars and specific methods is so that you're getting that
practice and by the time we get into our
daily classes for October you'll already feel pretty good mm-hmm
uh some people talk about like comparing yourself to others that's that's the

08:01
hardest part right now you have no idea what somebody's life is like and if
they're born on Twitter that's that shouldn't be something you take the
heart like doesn't matter like I I hope you read the celebrations Channel just
go read the celebrations channel so many people got jobs that didn't have baller
stuff like we had how many people get a
job just because they can code a [&nbsp;__&nbsp;] button
like it makes no sense at this point in time to compare yourself to others it
literally doesn't matter if you go about the job search process in the right way
it literally does not matter and so you should you should see other folks
getting jobs and get happy the other thing too about this being a global
program is none of you are really competing against each other even if we
do have like some strong stays of like New York or something that's such a big
area like like there's you lose Nothing by other folks doing well in fact it

08:02
makes it easier for us to say look at all these folks that got jobs from the
same program like that's that's the next level right the next level will be like
oh like if all these people are getting jobs and they went through the same
thing then you must be is equally good if you've also gone through it right and
so you got to look at it that way the people that are balling out are doing
you a service that makes your experience more valuable you know like
you're turning everything and you graduate you get the benefit of that of that
that juice uh is there another hunttober for ketchup crew well they get the same
um letter from you or is it exclusive for Hunter for now right now I am only
doing verifications uh for folks that are going through October

08:03
um so that that's it right now until we figure out how to do it well at scale
what the verification is like somebody says like hey did they go through the
100 deaths program and I go yes they did and I give you a letter that says hey
this person went through the program uh so you can use that as you're
interviewing that that's that's just for folks that are going through October
right now once we figure out how to do that at scale I figure out all the The
Kinks and things like that as other folks complete the work they'll be able
to get that letter and that that verification as well mm-hmm
nobody's ever done this before so it's going to take a little while for us to
figure out how to do it well um but we're gonna figure it out
and that's the other reason too right like that what we just talked about is
like the 100 devs brand makes it better for you like if you complete everything
so I have no interest in doing verification for folks that haven't
lived up to that brand right that's one of the biggest things that I noticed

08:04
with RC is that we have employers that come back time and time again because
they know the quality of Engineers that we produce at my day job
I want the same thing for y'all I want somebody to see a hundred devs on your
resume and go oh they must really know their [&nbsp;__&nbsp;]
right and I have no interest in letting people slide that didn't put in that
work because it does have a long-term impact right we had how many people go
to Amazon we have had how many people go to some pretty top-tier startups right
like over time the goal is that you turn
around and you bring more 100 devs folks with you the goal is that that brand
means something when folks show up on the job right like that that's the goal
and we saw blah do that recently blah just got another 100 member hired at
their company like like that's the goal like that that's the whole point right
we started because we wanted to help folks that were affected by the pandemic

08:05
and that's what we're going to do I really enjoyed using tailwind and
Daisy UI but how do I make it look more of my own
um that's kind of the downside of using the bootstrap and Tailwind is that I can
kind of look at it saying go that's Tailwind right
um just because if you're using especially like the default like
um components and stuff like that it kind of starts to look similar there was
actually I can't I can't find the study but somebody did like a usability study
where they actually showed using bootstrap increased your conversion just
because people were more comfortable with the stock like they it felt
familiar like because they'd already seen a bazillion sites that use that
kind of like stuff um so for a while like it actually
helped like boost your conversion a little bit I gotta see if I can find that
it's not a bad thing most people are designing the exact same

08:06
[&nbsp;__&nbsp;] these days anyway uh Jack tree Cinema mod mail
uh I had a super senior Dev that helps me out so people are having a hard time
filling roles hiring people is more often open jobs than there are people to
fill them is that true yeah I mean uh like we we looked at the reports
right it was a 50 30 year-over-year growth 300 000 Plus open positions like
it's out there and we're seeing that come to fruition we literally had what
two weeks back to back of 15 jobs each week
like literally like 30 jobs in two weeks that's wild
oh I like that most of the companies all have the same can as the content that

08:07
matters a um and I you can always join that
whenever you want but the October stuff is for folks and everything turned in on
Tuesday uh JavaScript and co-work still don't
make sense to me as a result I hesitate on doing them every day any advice
you're not doing enough review stop doing new problems and do the
problems that you've already done and review them until you don't have to
guess how to do them again and then do similar problems going forward so a lot
of folks mess up on code Wars by going too fast in terms of they go from like
eight to sevens very quickly you should start off with level eight cues
fundamentals and do the same types of questions string string string string
string strings then erase erase erase erase erase erase erase right once you
get through all the array problems stop go back and do all the array problems
again and do them again and do them again until it clicks you don't have to

08:08
guess should ketchup crew folks be turning in
homework for assignments for months ago yeah how am I supposed to know if you
did the work or not right like if in the end you want me to say this person went
through 100 devs yeah you need to turn in the homework
I mean you don't need you don't need me right like the like you don't need me
right like that's that's the thing right
you don't need me to get a job you don't need me you don't need my verification
you don't need our certificate you don't need any of that crap
but if you want it need to know that you put in the work
most folks get jobs without that stuff we didn't have that stuff until recently
right and so uh you don't need it if you want it then I need to know that
you that you did it all right let's get into it folks uh we we do have
the slido in the in the um in the newsletter they'll be paying
attention to we're going to take our time we're gonna have a little bit of

08:09
fun uh and so don't don't feel like you can't ask questions as we go through it
is it is our Sunday it is our back end super review and so happy to answer
questions as we go along even if they're not
totally on the mark so uh what I did here is I just grabbed a
copy of the binary upload boom uh so if you want to follow along all I'm doing
is using the binary upload boom um so you can go ahead and download
uh that that set of code from GitHub if I actually put the link in chat here see
oh slash 100 does cool so this is the code base I am starting with

08:10
uh that I will put into chat and what I want to do with us first is I
just made a copy of this uh and probably the first thing I'm going to do is
remove my actually I'm not gonna push anything so
probably one of the first things I want to do is just remove my my git um folder
um I could do something fancy but just to save myself a little bit of headache
down the line uh let's go ahead and let me just do an
LS to make sure I'm in the right spot cool oh let's Dash Olay
all right I do have this get folder so I'm just going to do an rm-rf dot get
all right ls-la uh I just want to make sure that yeah I don't have that get
file anymore so the reason why I did that is just in case I start pushing or

08:11
doing anything weird I want to mess up like my actual
um code that I already have on GitHub for y'all uh and I know there's easier
better ways to do that but I'm just saving time on Sunday what do you want
uh how much later are the YouTube videos I think YouTube is up to class 52 or so
um all the all the other ones are on Twitch for right now but
the next big tranche is cued for Tuesday and so by the end of this upcoming week
YouTube should be all caught up Is it wise to watch weekly videos if I'm
just starting yeah I think everyone takes the catch-up Cruise as their own
different um pacing so some folks really like the
two classes a week schedule and for some folks that's too slow for some folks
that's too fast and so the beauty of doing the ketchup Cruise you can go at
your own pace uh just make sure that you're on Discord so you can get help

08:12
when you get stuck mm-hmm yep and for folks that are just joining
us today uh this is like class well this is like part three of our back end
review and actually like this would be like class 15 of back end
right so uh if you're just joining us there's gonna be a lot of stuff that
we've already covered in detail and I'm gonna be skipping over that expecting
that you've already kind of gone to those classes so
um last back in review for example uh we covered with all these packages do so
I'm coming into it with the sense that you kind of already uh kind of know what
those things are that doesn't mean you can't ask questions but that's kind of
just so you know where we're at with this back in review so that we can be

08:13
respectful of people's time cool alrighty so uh now I know I'm not afraid
of messing anything up for everyone on the interwebs I have this lovely uh
starter uh and I was going to take a look at the package.json we have
everything going right we have the start command so I'm going to do npm start
uh server is running you better catch it but notice that I have not connected to
my DB and that's because I did not whitelist my IP address uh and so I
typically run on a VPN and so every time that I kind of
stream uh one of the things I have to do is make sure that the IP address that
I'm using uh matches the one that I've whitelisted in my server all right so
[Music] um I'm going to go ahead and make sure that
I go ahead and white list my IP address on mongodb side uh should we be coding

08:14
along that's up to you uh I think the first part is kind of us talking and
making a bunch of decisions about what stays and what goes in our template and
then we'll be coding uh I don't think you have to cut along with this stuff
though am I going to push this to GitHub yep of course
yep node 18 now has watch uh you don't need dodemon technically going forward
cool uh so I'm gonna go to my mongodb uh I have my my cluster I'm using with my
quick pound database uh the quick pen was the original name for this project
uh of course we had to change that uh so I'm going to go to network access

08:15
and before I do that let me just test over here all right Google [Music] I can't
all right I want to make sure my my VPN was running all right vpn's running so
I'm gonna go to network access and here are some of the older ones I'm
going to add IP address and I'm going to add current IP address
and I'm going to make this temporary for six hours uh that way if somebody was
able to get the same IP address or whatever reason it would stop working
after six hours you want to confirm it and then it's going to take a little bit
I'm going to delete these other ones because we don't need them anymore
cool and it just takes a few seconds for it to click through
uh should we update node then I always stay on the LTS or the long term stable

08:16
versions uh the versions that'll have the most support
um the versions that will have the largest window of updates so all my
stuff is always on the LTS version when the LTS changes I change and that's kind
of always a process for me but if you want the latest and greatest
of course upgrade and get all the goodies if you want mm-hmm
all right so IP address should be good now uh I've whitelisted the IP address
so that means as I'm making requests I should be able to add stuff remove stuff
lead Stuff Etc so I'm gonna do npm start
server is running looks like I connected
to the database and what I want to do is just make sure that it's working before

08:17
we start tearing stuff apart before we start kind of removing bits and Bobs you
always want to make sure that everything works right it would suck for us to
build on top of a template or build out a template that just didn't work from
the beginning and so um we're gonna go ahead and test that now
uh will this back-end superview be uploaded to YouTube yes eventually but
I'm going to combine all of them together
uh so I'm going to combine our six hour our four hour and whatever along this
takes into one big video cool all right let's go ahead and test it what was our
localhost 2121 all right looks like we're there uh login

08:18
uh I don't remember any of the passwords I think we got testy at testy.com
SD testy all right cool all right oh that was it
all right so it looks like it's all still working hey blah uh we still have the
individuals the cool thing is we added like the the titles last time which is
there still we have individual posts likes still work comments are still working
[Music] let's also trash one of these uh so let's go to new post
new post works it's going to test adding a comment hey yo
cool comments work and does deleting work

08:19
beautiful looks like deleting works too uh lasting the test we'll just test
uploading um uh title test choose file desktop um Great Hall there we go submit
all right beautiful looks like everything's working even on new posts comments
love it and I can delete all right cool so everything looks good
uh everything's good and uh I feel comfortable that since it's working we
can start to build our template from this and so I can't stress how important

08:20
this part of a process is uh and I do it all the time before I ever
um build on something old I always make sure that the old works cool
does the leading also remove the image from cloudinary yes so during the last
back end super review I showed you cloudinary I showed how
um the the idea is important because when we delete an image we're actually
not only just removing the the posts from our database we're also removing
that media from cloudinary because if we don't then we wind up having all these
images on cloudinary that we will never ever be able to use which can then
increase our bill over time and as we build a template I'm sure

08:21
we'll see that again all right should there be a comments on the file
link Leon put in chat uh yes but they are in the comments Branch uh so uh part
of your homework was to add comments and so uh for folks that
that that did that I didn't want to have it as part of the main repo uh so there
are two branches on GitHub there's Main and there is uh a comments Branch so if
you want the comments you need to use that branch
um but we're gonna get rid of the comments off of this anyway so I don't
it's not super necessary right now yeah um do we have an alternative for Heroku
yet uh not on mine personally I'm still playing with all of them I feel like as

08:22
I go deeper with each I find something that I don't like
um it's actually been pain in the butt um but I'll probably make my
recommendation this week because we we kind of have to pretty soon um
uh travesty media did a great video on Heroku Alternatives which was really
helpful um the big ones keep coming down to me being Railway render
um cyclic fly um but I keep running into like a weird issue
with each of them so I think it's going to be the uh
the best of them and I'm not ready to make that decision yet
uh so as soon as I'm done doing all my testing and I actually find something
that's stable and won't actually affect your hunt uh when folks

08:23
uh go to view your stuff uh then I'll I'll put that out there
yeah they all kind of have trade-offs I keep seeing
um and so I'll share what I think is my my go-to but any if you start with any
of the ones I just mentioned you'll probably be fine
I just know the one that I say is probably the one folks will use so I
don't want to go into that lightly because uh this is probably the only
time that uh it really matters because hiring partners and and companies will
be looking at your projects and so I would hate for them to be down or
something weird happen Mage Turk said why do programs tend to
grow long hair beard or both is it a cultural thing yes absolutely is
um programmers grew up in counterculture and long hair was considered being

08:24
counterculture and so a lot of folks grew long hair they grew beards
and it kind of stuck New Wave it's very different there's fun there's like um
what is it in in Silicon Valley they uh they talked about um
how every group of programmers has like the same five people in it
uh and like that's they're typically pretty true
um but it's times are changing times are changing things are no longer the same
as they used to be uh and I think it's it's all just silly right cool
alrighty so I feel like we're good we're in a good spot everything works uh what
I want to be able to do is take this let me stop the server for a bit right here

08:25
remember do is take this and and make it so it's something we can use
going forward and so first I guess while
we're here we'll change the name to like full stack template
and we'll call this a description we'll be uh starter template or future
projects cool uh Maine will be server.js we're still
using node mod because maybe not everyone has
um popped up we'll leave offer empty because that'll be whoever you you are
the licenses MIT most of my stuff is always MIT or GPL V3 and then all the
methods that we need so we're not changing any of these we're going to use
all of them in the template if you don't
know what any of these do you definitely want to watch back in super review part

08:26
two on Twitch vlog cool all right so let's start with the
server.js uh and see the things that we want to keep so the idea here is we
don't want anything that's specific to Binary upload boom we want a template
that we can use to build going forward and so all the stuff that I see right
here Express app Mongoose passport [&nbsp;__&nbsp;]
store flash logger all those will stay connecting to our database will stay but
here's kind of where we get into the first things that we might want to
remove and so I think we should keep main routes
um but we'll be a little bit more picky about what goes into the main routes if
we look at our main routes let's go to routes main.js uh we have a lot of stuff
here that is kind of unique to Binary bubble boom but a lot of stuff that we

08:27
probably want uh for for every project right for every project and so if we look
we're going to want sign up to always be
there log out log in like all that stuff that's on the auth controller that's
going to stay um and so I think all the stuff that's
on the off controller will probably stay
we're probably not going to need feed or or anything like feed I think is very
specific to this project um but profile will leave as an example
of using the post controller and I think the loading the home page is probably
okay so I'm going to yoink feed because I don't think I need that right now
uh so I'm going to comment it out for right now and then we'll get rid of all
of our comments once we're done cool um so if we were to have all of our main

08:28
routes we're gonna need a like being able to load the main page we're gonna
need to be able to load a profile or need to log in log out sign up sign up
sign in sign up uh the feed was using the post controller so there's nothing
here in our uh main that has to change I don't think
we actually have guest accounts enabled so we will probably get rid of that
eventually too all right so Maine looks like it'll stay
main routes is fine then we have this post routes and comment routes
um I think we could have a let's look at post routes to see what's in here
post controller create post upload uh I kind of like
having some examples for this uh and so I think we'll keep the posts
controller so that we have an upload example of our clouded area we'll

08:29
probably just call it something different right I want
people to know how they can upload media and so it makes sense that we keep this
um and maybe yeah I think I want this at least to
stay so we have an example that we can use for uploading the media
um but then the like liking and deleting
I don't I think maybe we can probably be simplified with that
and so the reason why we're doing this right is so that one it's giving us a
better intimate kind of understanding um of what's actually happening in our
application it's helping us rethink like what we want here going forward and so
that's kind of the the point of us doing this together it's just like all right
why is this useful to have what is it actually doing and we're kind of seeing
that again for the for the third time all right so I'm going to want to keep
some of my post routes uh I definitely know that I'm going to want to keep

08:30
the create posts and for folks that'll be using this so I guess I'll ask y'all
would it be helpful to keep a put in a delete so you can see it like I get a
post put and delete does it make sense to keep an example of each of these in
the template even if we like we um change the the lingo a little bit yeah okay
so it looks like we'll keep the post route then
uh in the template and we might kind of simplify it uh maybe these maybe these
aren't actually um fully fleshed out uh maybe they're
they'll be commented but having them it seems like a good idea
so maybe maybe we can even just comment each of these um
cool all right we'll come back in a second so post route looks good comment
routes let's take a look at the comment route so routes comments

08:31
uh I feel like if we have I feel like if we have posts and we keep the post
routes do we need the comment routes as well I don't think so
I don't think there's anything that's in
the post that's not here so post comment
we have the ID which is helpful and sure off comments control let's take a look
at that comments controller um yeah I don't see anything special in
this controller either uh so I feel comfortable eating comments
oh man I [&nbsp;__&nbsp;] up so I didn't eat anything

08:32
and I took my ADHD meds and now I feel like I'm gonna throw it
I'm good for right now but when we take our break I'll probably throw something
in my in my mouth all right so we got the um
we got rid of the comments route uh so let's go ahead and clean that up let's
get rid of the comments controller delete and the comments router as well delete
all right so that's gone and we know that we have to go down here
and get rid of the route so this is what actually kicks off the comments
throughout right uh we get rid of the the comment throughout here

08:33
um because we no longer are going to be expecting any of those
cool so that was what would be listening for the comments we got rid of the
comments router and we got rid of the comments controller I feel like that's a
good spot to kind of remove some of the stuff that's specific to Binary blue
boom um Rascal why can't you share links you should be able to a VIP
let me take a look at that I'll check afterwards

08:34
thank you for sharing it again though all right we got rid of the comments
is there anything else here that we don't need so we definitely want to keep
using our environment variables we're still using passport we're still
connecting to our database we still have
our view engine we still are going to be
using our public folder we still want to be able to see what's inside of the Dom
we still want to be able to log stuff with Morgan how we're using method
override because you don't know if our client will expose
um the things that we need are you still going to use sessions with
mongodb uh passport flash all right cool so I think everything here in the
server.js stays uh the medication is Strattera uh
Mr Terrace like something that like builds up it's not directly like a like

08:35
an Adderall like stimulant it's something that has to be in your like
you take it every day and like builds up in your system over time um
Adderall makes me go to sleep when I take Adderall I just want to take a nap
that's weird apparently it's like not uncommon for folks that have like ADHD
that um where it's not like necessary like hyperactivity but it's like the um
like your ability like not ability to focus on tasks once you take Adderall it
lets you focus on the things you want to focus on and my brain quiets enough and
I'm like [&nbsp;__&nbsp;] I want to take a nap now
cool all right so we got rid of the comments I feel like everything else
should stay uh let's focus on let's just review main one quick second here main
routes definitely staying profile definitely saying we got rid of the feed

08:36
um all right we'll keep all this let's go ahead and take a look at posts
uh create posts leg post delete post and so let's see if we can comment this a
little bit better so we'll say um for this uh we'll say nabels
user to create post uses with um cloudinary or image
uploads or we could say media uploads because it does right now it's images

08:37
but it could be media uploads cool the like posts uh user to like posts
uh and if we follow this through let's go to the Post controller
go to like posts we know that we're using the post model
to find what we're going to update um like posts in controller uses posts
model I'm just trying to put like why we
have each thing in here so if somebody's coming back and like looking at this uh
router they understand like I know it says like post so that's like
on the nose but I just want to make sure that it's clear to anyone that's using

08:38
this in the future like post and controller uses post model uh to update likes
bio one the thing I think I think it makes the routes kind of a little bit
harder is that you do have to jump to the controller find what you're looking
for in the controller so I think if we just have this in the routes it'll be a
little bit easier for folks to be like oh that's what this is going to lead me
to it's going to lead me to letting the user like a post and in the controller
uh it'll use the post model update likes by one I think that just makes it a
little bit helpful more helpful and then kind of the same thing here
enables user to delete posts uh in controller uses Outpost model to delete post

08:39
from mongodb collection uh I'm completely lost right now should
I just go back and review some of the other classes I don't definitely
understand back yeah you definitely need
to go back to other classes uh you could definitely welcome to hangout and go
through this but um this is the third third take of our back-end super review
where we spent nine hours so far going over this and probably another 20 hours
in class so you're 30 hours behind if you're just joining us today for the
first time there's no way that this is going to make sense what we're trying to
do is take what we've already built turn
it into a template that we can use going
forward and then try building some stuff hmm

08:40
how long are we going for today I don't know we'll see how long it takes us
all right all right delete post control use post
model it's elite post from mongodb collection uh I think anything else is
here uh is there anything else that you think would be helpful I'm going to
remove and short guests we're not using it so let's not confuse anybody use this
template um is there anything else that you think
would be helpful to have in this router file um that was always tricky for you
oh you know what would be helpful to have here um the actual paths sense linked
from server Js treat each path as post slash ID um

08:41
actually let's do all one line here posts slash create posts uh posts slash like
posts I think that kind of tricked up a lot of
people in the beginning but let's just all have it here cool

08:42
uh how do I do wrapping yeah you go to view word wrap exactly [Music] let's see
[Music] could you have a route that has like a
bunch of query parameters in the full URL technically you can yes
can you go over how you would change this project from react to egest not
today but if that's a class folks one I'm happy to do it
once we're officially done like The Bootcamp or program um
I still want to keep streaming and so there's lots of little things that I
would like to to do that seems like a good one

08:43
but uh I just wanted to be very clear that there are things you can do that'll
move the needle and there's some things that won't and so yeah
just not so they want folks focusing on as they're in the hunt
all right so anything else that we should put on here that you think would
be helpful oh Rask already did that's dope Rascal
can you send me the link to the playlist or the vods so I can share them with
folks give me a DM on Discord all right so we'll we'll keep this for

08:44
now uh post route simply from server.js treat each path as boom we have what
each thing will eventually do uh we got rid of the extra comments
let's check off real quick just because we also have um
before we go deep into the post routes let's check main real quick one last time
did I do uh let's go and check post routes I'm sorry I said main routes
uh we don't have any comments or anything like here we're still not using
ensure guests maybe we should keep ensure guessing these people want to use it
um let's look at our middleware our off middleware
we do have the ability to have the in-store guests
maybe we should keep it even though we're not using it we might need to

08:45
build out uh we haven't done guests and I don't
think I really want it honestly so I'm gonna eat this
and I'll take it out from Maine as well uh the travesty homework goes into the
insure guest uh we just haven't used it I don't think we need it cool
all right so we let's look at the main one last time here uh main routes
we'll get rid of feed we don't need feed specifically let's get rid of the

08:46
comment here um call this off routes or user login slash sign up cool
main routes we have like if you just want to load a main page and then
profile will keep because I think most applications that have user logins
probably have a profile yeah I don't think we need anything else here
uh one bit that we do need to do before we get too deep is since we
removed all of the comment routes controllers Etc um we didn't remove the model
all right let's remove that model delete

08:47
what's one thing that we also have to do is we don't run into trouble
yeah we need to remove it from the views exactly our ejs right now would break
um that's kind of and this kind of like we're doing so we can think through
these things um if we were to go to uh the individual posts
the posts right now have comments in them all right so let's go here
we have like this add comment we don't need that yep eat
and then we don't need to link to the comments eat okay save
and I think that takes us to the big remove of the thing that well at least

08:48
one of the big things we don't need anymore I'll remove the routes for comments
we removed the link to the router for it that router no longer exists the
controller no longer exists the model no
longer exists and we've added our ejs to no longer have it as well cool
let's go ahead and save all of this which we are and let's start our server
again and make sure everything doesn't break let's see what did we do
can I not find modules comment models comment
um so we're trying to load a model that we don't have where did that come from
uh the post controller we forgot that the post controller might the post
controller still might be needing to render the comments so I think let's

08:49
think through this for a second I we know the answer well I know the answer
but let's think through this why are we getting this error
we removed the router the controller and the model and we're getting this error
cannot find modules comment from controllers post why would this why
would this be an error is looking for something that doesn't
exist anymore correct but why was it looking for it
it's required in post.js exactly but why why did the posts need the comments
yeah remember each post had the comments on the post page so if you're rendering

08:50
the post you also need the comments as well so we can go to that post controller
we can go to the Post controller and when we go to the Post controller
you can see that we're requiring something that doesn't exist so yeah
all right so let's just get rid of that and we have to go to get post
get post is trying to find all the comments right it's trying to find all
the comments so eat and we're not gonna pass in comments to the ejs anymore you
cool so now we are no longer requiring the model
doesn't exist we're no longer trying to get data from that collection I save it

08:51
should be all good cool all right let's try rerunning it
servers restarted because nobody was on it looks like we should still be working
go to our profile let's go to Athea networks and the
comments aren't there anymore so it looks like our app is still working
let's log out log back in make sure all of our routes are still working
testy at testy.com SD SD I think I typed in the wrong
here we go we will still log in looks good all right so we cleaned that up we're
able to kind of yoink out the comments we're able to better comment

08:52
out our code so that folks that are using it know what actually the heck is
happening um when we come back from break I want to
continue this pattern of commenting make sure we understand what each thing is
doing we'll Venture into the post controller to make sure all that stuff
is well understood and then we'll go from there
also in delete posts let's take a look uh get post great post
like post delete posts uh no I don't see I maybe talk about
something else but I don't see anything straight the comments
cool all right let's put five minutes on the clock when we come back we'll keep
digging through this make sure we're appropriate commenting so folks can use

08:53
this as a template going forward um and we'll keep pushing thank you for
being here uh yeah I was able to get some food in real quick
uh can we try adding a post I'm getting an error all right let's try let's make
sure that it's still working mm-hmm take two testing
all right looks like ours worked fine see the title
see the Hat we're able to go to that individual post page yeah no errors in

08:54
our end did you delete the wrong model uh this is uh so at resilient coders
um after our hustle week which is where everyone has to get a client so by end
of week six during resilient coders uh resume coders is the non-profit I work
at during the day it's um it's a coding boot camp
uh week six everyone has to get a paid client uh if you don't get a paid client
you're redirected uh from program which means that you kind of don't continue on
program the traditional way you kind of go into your own learning plan and so
everyone has to get a paid client by the
end of week six and we sort you into one of four houses and so
um we kind of I kind of ham it up and I have like like everything set out to
where like we can sort folks into houses and I put the hat on and we move it
around yeah so that's why I have so much
Harry Potter related stuff on my desktop right now

08:55
all right so yeah so it looks like it's all working to me um let's go ahead and
go ahead and take a look at server.js uh I think the big thing here is that our
main routes look good uh we have our main routes you can say this is like the
home page which we know profile let's look at the home controller real quick
uh off I don't think we're going to wind up touching actually let's look at auth
controller real quick um yeah no I'm not I'm not touching any
of this uh is this something that like we would need to touch it all
like any of the authentication stuff do we need to touch that
nah we'll just leave it there um every app that we build will
hopefully have some like the authentication and so if you really
needed to you could go ahead and like remove it but I think most of your apps

08:56
can have authentication uh so we'll just leave this alone we're not going to
touch that at all uh the main controller let's take a look at what that does
um or sorry a home controller and the home controller is just rendering the
main page all right so I think this is totally fine to stay there uh where I
think this is a good helpful indicator of is like how you would load individual
pages that were just kind of like your like when you store its static but just
like your your pages that are um like that are just simple right so your your
home page maybe like your about page uh your contact uh stuff like that that's
not part of the actual application itself but are kind of the generic pages
that you need for a website cool I think this is a really good example to
have for that simple just get request and it's all in the main routes beautiful

08:57
all right last thing I want to take a look at is this post controller uh we go
to we have our post routes beautiful we have our post routes if we
look at our post router we kind of have that nicely commented
out and then they're going to use the post controller which I think is
probably our most serious bit of code here posts beautiful
uh we are linking cloud and area which we're still going to need if we look at
our middleware for cloudinary all right this looks fine the only thing
that this is doing is using cloudinary it's pulling in our keys from our EnV
file which is important to kind of keep the keys because the EnV file goes in

08:58
our what yeah it goes in our git ignore exactly
so we can keep all of our secrets in the EnV file the EnV file goes in our git
ignore don't worry about pushing anything uh to GitHub cool
we're using our post model uh so let's take a look at the post model
uh post model simple using mongoose I like this as an example because it's
showing a lot of different things it's showing just regular strings like title
and eventually image it's also still using cloudinary so if folks want to
have things that are that are incorporating things from other places
like culinary still there it also has a number as an example it also shows us
how to kind of make sure that we want to use things
that are coming from other models we can so in this case we have a user that's

08:59
really just a a reference to our user model and we also have the created app
which will use the date so I think this is a really good thing I don't think I'd
want to remove anything from here I love that this kind of has all the bits and
Bobs and it probably would be easy to extend from here um
on here I want to just leave a comment uh for how the collection is named uh
[&nbsp;__&nbsp;] DB collection named here will give plural
uh we'll give lowercase plural of name folks get tripped up on a lot on that
they don't they forget that this will give us posts in our manga DB we could
maybe make it the um like where you force the name like

09:00
because you can add like a third right you can add a third I showed this on
stream a third where you actually put the name and it doesn't like
automatically create one but I kind of like leaving it as they automatically
create as long as we have commented as such
um because I think some people forget to like do the plural so I actually like
the magic here so I'll just save it with the comment cool
are we going to optimize the data structures controllers using things we
learned in the algorithms class uh no absolutely not
um the only the only reason we have the data structures and algorithms classes
so that we can get through technical interviews

09:01
um but there's nothing here that we're going to really be applying because we
just don't have time to go that deep on stuff
um but a lot of the stuff you won't ever even really use honestly day to day
yeah not too yeah we're kind of using a lot of off-the-shelf stuff that's
already kind of optimized for us when we use this template to make an app
for an interview do we need to make it multiple additional Pages uh depends on
what you're trying to to prove yeah depends what you're trying to do
do we learn SQL or is mongodb enough mongodb is enough to get a job you do

09:02
not need to learn SQL but it it doesn't hurt
yep I agree 100 with my wolf it's not required it can be nice to have but
don't spread yourself too thin during the hunt and I say this as a sequel to
yeah yeah I think time management is the key right now if you have time
outside of all the stuff you have to do for the hunt if all of your 100 project
is done if your networking is done if your Hit List is done if all the things
that have a real measurable impact on your ability to get a job are done and
you still have time each day then yeah go go wild you want to learn more react
go learn more react you want to go deeper with SQL like you want to learn
SQL go learn SQL right like um it's up to you what you do with that
extra time what most people find is they have no extra time during the hunt the
Hunt is all encompassing it is consuming

09:03
and so what you do is you wait until you need to know something to spend the
weekend doing it so you wind up getting an interview with a company that only
uses postgres well guess what your job that weekend is is to learn postgres
if you've done anything with us at 100 days as you've learned how to learn very
quickly we're going to do a little postgres together but that won't be until
technically after program people have time cool
all right so I think that's the only tricky bit here is there anything else
that we should have added here that would have been helpful for you to know

09:04
when you were looking at this model yeah and also remember you're if you're
seeing it in job post that's because that's local to you right like
everybody's gonna be applying in a in a specific area first or Global remote and
you have to take that into consideration for your hunt right
there's no way that any program could ever teach you everything that you need
for the hunt in your specific area so if you're noticing hey Leon every single
company in I don't know Boulder Colorado uses Java
well guess what you should take a weekend to learn

09:05
right or if you're noticing every single company in Austin uses Ruby still well
guess what you should be taking a weekend to at least learn the basics
build something small with right so that's that's an important bit of what
you need to make some time to do uh just so that you can get enough in for those
particular interviews yeah when making new features it's easier to
start with creating routes first or controllers first uh it's up to you it's
a personal preference I personally like thinking about my
model first and then I follow the entire
path from the server.js to the routes to
the controller but that that's just kind
of the way I think about I like to think about the data first and then

09:06
pull all the glue together to make it work entire series one uses Global oh no
the first so weird the first engineering book I
actually ever like read read was a Fortran book and I wish I had stayed Fortran
because like there's so many so many people that
really know it well and there are so many like government like applications
and things like that that still use it and my one friend that knows Fortran
makes more than my friend that works at Fang is wild
there's also like the Cobalt meme right now that like if you want to make a lot
of money go learn Cobalt but um Cobalt's really weird it's very different than a
lot of other things I've ever seen I don't know how transferable your skills
would be afterwards but apparently there's money in it but I don't think I

09:07
would chase that that down I think that'd be uh
it's just it's just your it's too narrow right too narrow
yeah exactly brashless I like that as a Kobo Dev the idea that jobs are hugely
in demand is way overstated unless you can learn 30 years of experience exactly
cobolts like a like a from from the like the folks I know that do is like a dark
art it's like it's like all this stuff that you got to know that you kind of
really only learned by like smashing your head against the keyboard for 30
years there's no stack Overflow there's no there's no tutorials there's no books
uh it's just a bunch of people have been doing it for forever and so like that's
just not the path anyone should ever go down

09:08
so much easier to get a a a a decent well-paying job uh without uh
investing in the dark arts cool let's go ahead and take a look at
the rest of the stuff that's here anything else that would have been
helpful for us to know in this area you're getting paid to learn it that's dope
cool I think I feel comfortable with this and we also have the user model um
do we have to mess with anything in this user model

09:09
nah user model we're just going to use over and over again just so we want um
we want users we don't have to worry about anything in here we're just kind
of using it it's kind of just boilerplate for us here
yeah I feel comfortable with that too all right so we have our model
we're in our post controller uh we have a couple things here we have
like this get profile uh which enables us to load the profile
and get any posts uh for the logged in user so we see this
rec.user ID I think it's important to put a note here that um
since we have how are we able to get the
rec.user let me let me post the question
in this chat how how are we only getting posts tied to the logged in user like

09:10
how is that working yeah because we have a session right
since we have a session and we have a logged in user every single request yeah
I'm sorry about beatles I don't know why it uh delete it with Rec user ID what's
offensive about with Rec user ID I even know what what night mode I could
have seen oh it thought sorry it thought that wrecked.user.id was a domain
right so dot ID like it thinks that that's a domain name

09:11
interesting there you go um like a URL exactly like a URL
all right so we have a session uh and since we have a session each
request sends a user object along so since session is since we have a sense we
have a session each request contains the logged and users info cool

09:12
I like that I think that'll be helpful for folks to understand that hey we're
grabbing the login user's info grabbing just the posts of the logged in user
cool and also going to say here sending uh post data from mongodb
and user data to ejs template what if you want data from users that
are not the logged in user then you could just use their ID here so if you

09:13
want it if you want information on a specific user you would do ID and then
that user's ID which we'll probably see we could see that later on cool
get profile I think that makes sense I think this is the big thing that folks
need to know if they're using the template a session each request contains the
logged in user's info rec.user we're here to put like a note that says like um
console.log direct dot user to see everything oh I like that being there
anything else about the get profile that we should add

09:14
oh that's interesting dot ID is the the TLD for Indonesia that's pretty cool
why does post not need a wreck in front of it um where at you mean here
because this is the result of what came back from this uh request here so we're
using the post model to go to our mongodb and find all of the posts that
are logged in user and then all that data gets stored in post and so post
right here is actually tied to this variable here like these are linked

09:15
that's the variable that we're using [Music] all right get feed
uh do we need to get feed anymore now we got rid of our get feed um
because we could just if we went to find all the posts we could just get rid of
that I don't think we actually need a get feed to show how you would do this

09:16
it is nice to have the sort but you can find that from the um the docs oh
yeah I was gonna get rid of this for now all right get post
uh find by ID so now we can find by a specific ID this idea is coming from the
routes so here we go I'm gonna copy this so we can see it ID parameter

09:17
comes from the post routes comment this out example
URL would be let's go take a look at an individual post here
boom let's grab that all right go online okay ID would be equal to
this value here all right so all I'm saying here is that the ID
parameter that we're seeing here the params ID comes from the post routes I'm
showing the actual route and I'm just showing an example of the URL where

09:18
um it's the six three whatever so ID would be equal to that so that's what
we're doing here with this post is we're just joining that ID there's joinking
this ID um from the URL beautiful and once again we're passing that user
information but we already declared let's describe that up there we don't
need to say it again all right next we have the create post um
and the create post is coming from that post router and we're going to keep this
because it has all the cloudinary stuff that we need so all this right here is
your stuff you have to get from the docs about how cloudinary works and then
we're creating up using the post model we're creating a post that has
everything that we need for cloudinary um and
we have we have the URL that's coming back from cloudinary

09:19
and we have the public ID so I'm just gonna put a little note here that says um
images are stored we'll say media because we might do something other than
images media is stored on cloudinary um the above request response with
URL to media and the media ID that you will need when deleting content cool

09:20
hey Jay okay are you still streaming these days how you been
hope you're doing well hopefully give Jay a follow if you aren't already y'all
and different what's going on 23 months that's wild hope you're doing well um
the motor you can add MP4 MP3 acceptable types by cloudery upload vids and music

09:21
yeah right now our cloudinary is is restricting like we're restricting
the media that we're uploading um but we could change that
the Hiatus is over in two weeks let's go be sure to check it out
uh yep so if we look the reason why right now our media is restricted to
um just images is because of our motor middleware so let's go ahead and take a
look at our multi middleware and you can see that we're restricting it right now
we're saying it's not a PNG a JPEG or a PNG that you shouldn't be able to upload
it so one of the examples I gave is like
I tried uploading an SVG and it wouldn't

09:22
work so if you want it to be other types of media you just remove this check hmm
[Music] yeah it won't work for like capitalization or anything like that
it's pretty it's pretty explicit here it has to be has to be all lowercase yeah
[Music] so if you remove this part from cloud
and air everybody from multi the multi middleware then you can get around that
if you wanted to I think it's good to have some checks to
make sure folks aren't um uploading Reckless stuff

09:23
that maybe culinary might not support all right let's finish looking at this
uh meters during cloudinary the above request response to the URL to the media
and the media ID that you will need when deleting content um
if we don't have this ID and we're going to try to delete something just having
the URL is not enough because then anyone could delete it so we need the ID
and a bunch of other fun stuff cool everything else just kind of just simple
you know like rec.body that's always coming from um well we don't have body
parts anymore but we have these two lines of code that
enable us to look at what's coming along with those requests cool
let's take a look at like posts uh lactose is kind of pretty
straightforward we're gonna find one post we're gonna increment the likes by one

09:24
delete post I kind of already did this last Super review find a post by ID
delete it from cloudinary delete the post from the DB that's straightforward
cool anything else that you would like in the post controller
um that we don't have like anything that we should have here
that would help folks that are new to using the template
way to upload default photos oh like um um when somebody creates a user you

09:25
could have a default um I do have I have an example on my GitHub of this uh
uh let me look at my GitHub real quick I
think I already have that template built out uh GitHub profile
summer user profile images yeah this is like mad old but I do know I've coded
this once before for somebody uh uh let's look at the river.js

09:26
yeah so I have like a profile image on my user schema and then probably
checking is sold yeah there you go so when you create the new
user uh you're also uploading like a I just hard coded an image right so you're
not like uploading anything I just have a default image that I put into the um
into the user model so instead of having like like I wouldn't serve it up
probably by cloudinary I could I could just on cloudinary's UI upload a default
file right and then whenever I built out a new user um like a new user

09:27
where's my user model whenever I built out my new user model
um I could just have like that default I could have like profile and then just
like the link to that default image like hard coded
um and that would work and then you could have part of your profile uh you
could have part of your profile the ability to like
the exact same setup we have for post but instead of it being a post it's just
modifying that uploaded image so that's something you could do I don't think we
necessarily need that for our template but it's not super hard extension of
what we already have here could you put the default image in
public that would also work I would probably put it on cloudinary just so we
have the CDN working for us yeah uh gravitors are always cool they aren't
saved as images but are usually a hash of your username you know what I've used
gravitors forever I didn't know that's exactly what they were doing that's

09:28
pretty cool right about them all right so I think our post controller set
uh our post model we feel good about user model we're not touching uh let's
walk through the entire process here somebody wants to go to the profile
all right let's take somebody wants to see a post
uh so we have our post route here we're linking to the post router we go
to the Post router uh everything is nice and nicely
commented we have our get which takes us to the post controller
uh post controller is now nicely commented for each thing
we have our git post which we now have some document like some docs says all

09:29
right the ID comes from that post route that we're just on here's what it looked
like here's how we're actually grabbing the ID and so that's what's happening
here with this ID I feel better if like you're coming back to this like in a
year that you now know like where the parameters were coming from
uh we did some comments on The Culinary all right I feel pretty good about this
uh is there anything that we haven't we haven't looked at the views yet
um so let's just take a quick look at our views here
just closing some stuff here so we don't get overwhelmed
all right we if we look at our views we have our partials which are good to
remember so we're not redoing our header
and all that stuff we're not redoing our footer and all that stuff um and then
we don't need the few feed anymore because
just make sure there's nothing in here that's like really helpful

09:30
no actually the same thing in our um profile post
links to double check our profile real quick make sure that's the same thing
yeah post title yeah no difference we don't need the feed
well and that's the Last Remnant of that all right
everything else we already have index is part of our home routes
login posts login we need sign up we need um to do's ejs
what's that doing in here still we still have to Do's in here that's
hilarious I love this though this line of code right here with the ternary

09:31
I think this is so elegant because what we did is we we um we
wanted each of the to Do's to have a completed class or a not completed class
that had to strike through it not to strike through
um so I thought it was pretty cool but yeah we definitely don't need to do's
I told you I reused my templates I ain't doing anything I ain't doing that any
kind of coding it raw every single time uh so I reused my templates there you go
you can see it live all right anything else that we think
that is it hasn't been commented whether we think that is extra that we don't
need is there a big difference between aws3
and cloudinary not really I just find cloudinary a little bit easier to use
for beginners um I believe I don't know this is true I

09:32
think cloudinary uses S3 underneath the hood it makes sense that they did
we need a proc file um we need it right now if we want to
put it on Heroku but uh rip we don't need that for very much longer
uh should this Temple be on our GitHub as private or public that's up to you
uh is AWS AWS as you're worth learning for job interviews no
unless you're applying to Amazon which oh we've had so many it's so
ridiculous we've had so many people from this and last cohort that have gone to
um Amazon is pretty wild uh so if you do know that you're

09:33
interviewing there you should definitely know it or if it or if um
the role requires you to know like in some roles like that's the big deal of
what they're doing um so you probably want to be at least
familiar with the basics if that's like a big ask on their um description
the job description and if we say cloudinaries now on their
own service that's huge that's so good to know um
I I really appreciate that actually like knowing that there's competition out
there is is wonderful I love that they moved off uh do we need mongodb in our

09:34
package.json or just Mongoose all you just Mongoose for right now yeah cool
all right I think we're good let's just do a quick
run through everything and then I think we'll take our break and we come back
from break uh we're gonna try to build something with this I will just we'll
just kind of like pick an idea and try building using our template for that idea
uh so let's go ahead server.js looking fine
uh read me is fine I will leave all the package stuff for now views look fine
routes we went through we just have our main and our posts which are both now
well commented uh our public will stay public we just
kind of have like our default CSS and default like favicons and things in
there node modules of course models we just have our post and user model we
won't touch any of the user models because we always want people to like
log in stuff like that uh middleware we have our off JS which we're not going to
touch it's just handling our authentication

09:35
um we didn't get rid of the guest stuff because we don't we don't have guest
Scouts we don't need to um cloudinary um We're Not Gonna I mean this is just the
stuff from culinary dock so we can upload the cloudinary uh molter if we
wanted to you could remove like these checks but I I like having the checks in
there so that folks know that you can check for specific stuff
and then controllers off home and post culinary still uses S3 however S3 by
default isn't an optimized CDN okay that makes sense okay
we'll get there I'd be surprised if they didn't have big plans to eventually

09:36
fully hopped off oh size limits for molter I'm not sure what the theoretic
theoretical limit is for malter I think that's a problem that if you run
into do you find a solution for it right like like um
oh like you want to check the size I'm okay with that if somebody wants to sit
there and upload a 20 gigabyte file um they can
um because we're not really I'm not really sanitizing anything right now
um this is this is mainly for like your your your projects for kind of your
Hydraulics project or for your quick projects for um
for demoing to different employers these aren't these aren't like projects that

09:37
would be out in the wild probably for real users to be using every day if so
you'd probably want to spend time better sanitizing stuff I'm thinking about
security a little bit more but for the stuff that we're doing right now to just
get a job this is good enough yeah definitely a good thing to think about
uh and different said there is a very quick way to do it file size Max size
exactly yeah so all this stuff the the reason why I use multir the reason why I
use a lot of this stuff like we're not building any of this off like our own
we're using all the off shelf tools so when you want to make changes to multi
maybe you're noticing some Bad actors or some things you care about all this is
pretty easy just from the docs to change the docs have all the stuff that you
would need to make those changes should you want to
cool all right let's uh let's go ahead and

09:38
save everything saved uh I'm gonna push this to GitHub and then uh we will
yeah I'm gonna push this to GitHub and then we will
build something when we come back so so uh should I bother with a recruiter that
hasn't reached out to me for a position for a few days yeah people get busy
people get busy um you never know I keep I keep it like a month
like every other week I would I keep them on the list yeah
oh it would be difficult to add limits to what you some users can do
a single disabling post from guest to keep my demo apps clean from potential
employers um yeah I mean nobody's gonna find your link unless you
share it with them right uh it'd be very odd if somebody found your like your
hosted version of your app if you didn't share it with anyone um

09:39
you could also limit the IP address this on mongodb side just to to be sure
[Music] yeah all right what's a what's a simple
app that you would you want to see like what's that give me some app ideas
something something simple though ubereats Tinder for dog play dates
spider catalog what's that only Leon's instacart recipe postings

09:40
quick recipe app recipe app could be pretty good um pet play dates
Church story reviews app travel reviews it could be interesting a Goodreads
competitor calorie intake calculator I like a couple people said recipe app I
like recipe app I think recipe app can be pretty good pretty simple
Let's uh let's let's let's uh kind of get something on the board here for a
recipe app so let's go ahead and it's gonna open up um web whiteboard
all right so we could probably have like if we're going to do a recipe app
uh let's see no I don't need any of this all right

09:41
so what would be a main like a main like we have like our profile I think our
profile would just be easy our profile could be kind of information about us
like our info and then our individual recipes that we've uploaded all right
I'm just gonna kind of like if I can just quickly prototype what we might be
dealing with here oh boom [Music] um let's do two more
all right so like our individual recipes and then
we could probably have like a place to put like to enter our recipe enter

09:42
recipe I guess about recipes in my life cursing thanks for recipe
all right there we go into recipe it would just do like a form
and so we can just imagine having like a form for our recipe app here cool
I like that um and maybe some like profile info we wanted to cool
and then if we were to think through this I think there's like two things I
probably wouldn't be able to see like um maybe individual recipe like like an
individual post for a recipe and then maybe like the ability to like save your

09:43
recipes like save recipes that you like I think that could be good
uh so maybe we have like individual recipes so let's go ahead and
we have like individual recipes pages and then maybe we have like a page that um
just like your saved recipes now just have like the recipes that you
saved going down the page all right so like an individual recipe

09:44
page would maybe have like uh photo say like photo
that's right I did type f when I started to spell photo it's all that live folks
a photo you already know though you only live
once the model YOLO every day every day uh then maybe we have like the the name
like the name of the recipe and then what else does the recipe need name
ingredients and directions right long rambling story

09:45
oh man people get so mad over that uh don't ever
like there there was somebody that made a it's kind of like
having a site that doesn't have those stories is one thing like yeah like
maybe you want to create an application that doesn't have those those stories
and that's okay but there's somebody that made an app that like would find
recipe sites and remove the stories so you could just like go
and find all these recipes that removed all the long-winded stories from it
there's like one group of folks you don't [&nbsp;__&nbsp;] with
and that's that's that's mommy bloggers
don't ever [&nbsp;__&nbsp;] with Mommy bloggers and that person just just
that just riled up the wrong people and just had their life ruined because they
wanted to make a recipe website like just don't they got clapped up so quick

09:46
and they didn't they didn't know it was coming all right
so the the thing the thing is that like recipes aren't
um they're not copyrightable but the stories are
and there's also like an SEO angle to it as well
also some people just want to share like
that Grandma's the one that inspired the the recipe I'm not going to go to those
sites to get my recipes but I'm not gonna knock your hustle
yeah color color music that's who I'm talking about that was um is rough
Tick Tock has quick recipes now uh we're all it's over it's over

09:47
tick tocks here over all right so we have a profile
where we can enter our recipes uh we have an individual recipe page that'll
have a photo name ingredients directions and then we'll have like a like a saved
like our favorite recipes cool I like this is a quick app idea of
favorites individual recipes and a profile so there are certain apps that
um like if you think if you like extrapolate with Tick Tock could become
I think it's like the long the long form is like in China they have they have
WeChat which you can do everything inside of WeChat and I see Tick Tock
slowly trying to become that in the U.S um yeah

09:48
which I think is pretty interesting talks about through the new Google they
kind of already are there's there are some articles reading that
um there's like certain demographics of individuals typically that's you younger
that that straight up don't Google they type what they're looking for into
[Music] tick tock like that's it like they don't they
don't use Google anymore they use tick tock to find it which I thought was
interesting I tried it for a little while tried like I tried like getting
what I wanted through Tick Tock it's not
there for me yet but I could see it like if you're looking for I know I was
looking at I was looking for um foreign and this person had these like beautiful
like like gold rims on their Subaru Forester
that were clearly like off-roading rims I was like what are those like and I

09:49
couldn't like I didn't see like any like markings and the person wasn't really
hung around for way too long to see if they came outside
um but like Googling that wouldn't have given me anything but like Tick Tock
wound up giving me slightly better results for what I was looking for
because I could see the cars quicker like in the feed
I don't know there's something there yeah anyway
Let's see we have our purple sorry for waxing on there uh we have our portfolio
we have our individual recipes and we have our favorites
um let's go ahead and build out kind of our collections here
so we have our users collection so we don't need to build up the user's
collection we're just going to use what we have for our users
um I don't need anything else for my users collection so we'll just say that

09:50
that's like the default user collection cool but let's go ahead and get a
recipe collection probably it will probably be the next big thing
you might need to update users to have a favorite of some sort
I'm not sure I will do that let's see recipe
and on the recipe let's go ahead and give ourselves nice little box here
all right and our recipe collection would have inside of it individual documents
and each of those documents are going to have some important bits of information
we're going to go ahead and have let me put this to like an actual size

09:51
you're gonna have um IDs which are automatically created cool and
the IDS we're gonna have uh the image for the photo
we're probably gonna need the cloudinary ID for the photo
right so that we can like delete images once we have them uh we're gonna need a
name of the recipe we're going to need ingredients
and we're going to need directions cool and what else do we need for our recipe
we're missing like one or two other things here I think

09:52
is this brownies 2.0 yeah we started off by building our brownie recipe in HTML
now we're building a full stack recipe website
uh the user like the user that posted it right like the user who made the the
recipe cool I like that I think that's a good place to start
um then of course we would have a bunch of these
so this is what each recipe will wind up looking like nice
yo did you see how that jumped the right spot that's wild
once you like know code like there are some things that you just like how did
they do that like how did it know to jump there in a whiteboard
that's pretty cool um and then how could we do favorites
like what what's the way that we can so this would give us the users by default

09:53
we have the recipe uh how could we how could we do favoriting
yeah heart but like what are we doing for the favorites foreign
array of recipe IDs in the user model we could do that like a common ID from bub

09:54
like where you could like have a like a a a favorites favorites collection
or we could just have a favorite bike we just keep it on the recipe
no it doesn't make sense everyone the recipe or the user foreign user
okay so if we have it on the user you could have kind of all of our default

09:55
right we could also have like um favorite it by but then when we go to
like our favorites let's see if we go to favorites and we like we we see who the
logged in user is right let's let's think about this
so let's say like that we went to uh localhost 2121 slash favorites
we get the logged in users ID right we get the logged in users ID with that ID
we could go two ways right once we have the logged in users ID

09:56
we could find that user and then that user could have like an array of
things that they have favored it which then we would go and find those
individual recipes from the recipe array from the recipe collection
or we have that logged in user and we could look through all the recipes
where the favorite it by included that user so you have to like look through
like the array of favorite users or we could have a collection of favorites
right we have a collection of favorites where it's just a recipe ID
and the person who favorited it so that when we load this we could go
through the collection of favorites grab

09:57
the recipe ID grab the recipe and put it there what do you all think
what do you think it might be the the place to start here
favorite collection user ID I think they're all worthwhile attempts
is what you all want to do recipe user table with just IDs

09:58
favorite collection oh yeah let's do a poll um manage pull new poll
how should we add favorite on user model on recipe model on favorites model
all right there we go so should we started a poll
should we do it by adding something to the user
by adding an array to recipe or by creating a favorites collection

09:59
we're in a company meeting yeah we are all right I'm gonna do whatever you say
so let's see how it goes got about 20 seconds left
all right folks want to see it a favorites model uh with a new favorites
collection all right let's try it I I think maybe the user model would have been

10:00
easiest but let's have some fun democracy exactly
all right so we'll have a favorites collection I was gonna grab some text here
favorites and then favorites uh how do we do this let's see

10:01
each favorite would have an ID that's randomly created and then
on the ID we would have like the user that did it and we would have the recipe
that is tied to okay and so when we load this favor it's what we'll do
is we'll grab the logged in user's ID and we'll grab each recipe
will grab each recipe I don't even do that you grab each recipe

10:02
uh that exists inside of the favorites so we'd find where all the IDS all the
IDS that match but specifically what the recipe from each
all right we can make that work oh yep [Laughter] laughs [Laughter]
all right let's let's try it let's build it out

10:03
all right let's all right let's see where we go all right ID user recipe
so with each favorite so they'll click click click uh let's see
we'll click like a a heart or something and that heart will create a favorite
document uh with the user and the current recipe cool all right
I think we can start I think we can start uh so where do we
start let's let's save the favorites till the end because that seems to be
the more difficult piece here um I think this sounds a bit more
difficult piece so we'll do the profile and the individual recipes first

10:04
feel good that we can start with our template no problem uh I'm gonna close
this one and I'm just gonna make a copy real
quick I could just clone down I guess as well um copy
I'm gonna call this uh recipes a recipe app I'm gonna cause recipe app
and open it real quick I'm on the other screen all right here we go
so here's my copy of the template I just renamed it recipe app
um I should just cloned it I know I did this let's go ahead and do get rid of my

10:05
git repo for right now uh ls-la make sure it's there yep
Dash all right all right I get cool all right
so we have our version of the template up and running let's make sure that it
works npm start uh since I made the copy I
don't have to worry about setting up my EnV
um this should work I probably need a new mongodb in my EnV which I think
should be okay let's make sure it works real quick with everything that I have
running and then I'll get a new um mongodb connection string so we're
starting fresh all right we're connected looks good
bring a better I can probably just leave it the way it is now I'll start fresh
all right let's make sure that we're running localhost 2121
let's go ahead and log in all right everything's still working

10:06
all right we're good let's log out and let's go to mongodb
and let's go ahead and do new project recipe app yep create project
let's give it a second build the database heck yeah three

10:07
we'll do AWS I'll do Oregon so it's closer to me uh free uh let's do demo
great user local environment build my VPN add my current Mission close cool
all right it's gonna take a few seconds uh to deploy
and once it's done deploying I should be able to grab the connect
your application and here's my new string close
uh my secrets don't matter if I show them to you
um because you can't really do anything with them

10:08
so I was going to go ahead and do this um and I'm gonna go ahead and do demo
and then I'm gonna go cloudin area real quick oh let me log in let me log in
cool and I'm gonna bring up my big face for a second and I'm going to

10:09
just done this I don't know why I did it this way [Laughter] one second [Music]

10:10
um alrighty just uh things that I don't want to show [Music] sorry folks
one second just setting up some things in my end be right back all right

10:11
almost done alrighty there we go coming back
I just wanted to go ahead and reset my cloudinary keys
yeah this one just separated we wanted to redo my cloudinary keys just so that
um since I shared them they weren't still live cool so everything should be
uh disabled on cloudinary side uh and actually have all new keys so that folks
can't use my old ones pretty good all right uh uh let's take a look at our

10:12
little demo here all right whiteboard first we're going to do is
profile an individual photo uh so let's go ahead and worry about photos first so
I'm going to change our post model to our photo model
let's go ahead and change that from post to photo um
actually let's make sure this all works with the new stuff first because I have
a new I have a new uh collection like I have a
new mongodb and I have a new cloudinary so before we get into the weeds here
let's make sure everything still works you're noticing this is my theme I

10:13
always test before sign up do test at test.com test at test.com test test test
[Music] um let's make a post testing or test testing use a file
and do Great Hall submit all right all right cool everything's still here
everything still looks good uh even with the new mongodb new cloudinary and
that's it all right I don't know all you do is you just you
just log in you set up your account and it gives you your secret and your
your like key your key and your secret and you just plug those into the EnV file
I unfortunately can't share that part or else um

10:14
but it'll do weird things while we're live cool all right so everything's still
working let's go ahead and change our post to our sorry our post to our photo so
we'll start with the model I think the model is the easiest to start with I'm
going to change this to photo schema we're gonna need a title
um we're just going to call this name uh we do need an image we do need the
cloudinary ID we need ingredients and we don't need likes
you can keep legs it doesn't hurt to have not have legs uh we need the user

10:15
who made it and we also need directions right now I'm just keeping it simple on
myself I'm leaving it as a string could we get fancier yes um but for right now
you have name image ingredients directions let's make a look at our on our photo
here is there anything else that we're missing boom boom boom name ingredients
directions the user nope we have everything
we kept the likes uh let's save this and we're gonna we're gonna call this photo
save it uh we're gonna rename this to photo as well photo great and then
uh you can automatically update Imports no let's not do anything automatic I
want to walk through it together uh so if we go back to our server.js

10:16
let's go ahead and do we know that this I'm going to rename all this from post
to photo so it's gonna be our photo routes photo photo you already know though
come down here photo nice so we'll go to our routes now
this should be renamed photo photos cool and we'll make our server.js photos
cool the photos routes uh we're gonna change this to our photos controller

10:17
we'll change this to photos cool and then each of these will be photos as well
so um [Music] boom photos let's get photos photos controllers
we'll call this photos cool photos no all right so we went from our server.js
we're requiring the photos route our photos is now photos
uh we have a photo model cool let's go to our routes photos we're
calling the photos controller that looks good everything is renamed to

10:18
photos and then we go to our controller and it's no longer called post it's
called photo cool photo and then anywhere we have posts
we have to rename this to photos so photos we could do like finder in place but
I just I think this is a chance to show you each place that we had used the uh
the model and it's gonna be photos the name of the model not photos

10:19
oh photo photo photo cool photo then down here last one photo and photo remove
destroy photo alrighty why am I saying photo [Laughter]
why did I change into all the photo why did I get stuck in my head
all right let's change this it was just it's just to get the
repetition in just to get a repetition in I meant to do it

10:20
really because I can't spell recipe no recipe let's do it again server.js
you got got I did recipe routes recipes come down here
recipe route we're going to call this recipe slash recipe recipe routes
recipe routes um I'm gonna call this recipe routes recipe routes recipe
recipe routes let's call our routes here let's rename this recipe

10:21
and then down here uh what we call this recipe 's [Music]
I have to change the model too I'll go back to it um
once again we could just do like control find or like a replace all but I think
it's better to see all the places where this stuff gets touched
recipes controller we're linking the recipes controller
what happened here with the middleware oh I had a rebel somewhere else too um
so what happened there is I had accidentally already clicked somewhere

10:22
else and so I had to just fix this up recipes beautiful
all right so we have a recipes controller everywhere we have
calling the right controller recipes recipes
the model we're going to change this to recipe schema call this recipe cool
we're just two all right so we require recipes we have the correct
path for recipes our route as the recipes controller
or using the recipes controller we gotta change our controller to recipes

10:23
let's rename ICP controller our routes call it recipe
um recipes controller uses recipe we have the controller name recipe
controller and then what we're going to do is this no longer is not photo why
did I say photos so weird recipe models recipe
cool then each one of these will be recipe boom all right
then of course we're going to come in here and like fix like these internal
variables like called posts and stuff but that's actually not

10:24
a problem at the moment recipe liking the recipe oh
eventually like we'll change our routes and stuff but we're not there yet recipe
oh this photo.cloudinary ID recipe.cloudinary ID oh this will wind up being
recipe as well cool all right so we have all the recipes switched out

10:25
do we update the schema we're going to step through it I just did a quick pass
um and then we're gonna keep going through it this is exactly what I do if
I'm building out my 10 my 10 like Premium app this is exactly
what I'm doing the entire way through all right start server.js
we have our recipe routes boom routes recipe we have
let's make sure we're calling calling it down here
uh anything that has slash recipe in it we use the recipe routes
recipe routes it's calling the route the recipe router
recipe router looks good has the recipe controller we renamed our controller
recipe so that looks good recipes controller looks good
recipe control looks good we're gonna have to change like these get posts
create post all that stuff um but we don't need to change the names
right now RSP convertible or should be controller recipe controller for leg
post it looks good recipe controller for delete post that looks good

10:26
um our controller uses the recipe model we're awaiting uh recipe now because
we're using the recipe model no longer the post or whatever I called it photo
for some reason um recipe recipe cool recipe
and recipe looks good models let's check the model recipe schema
and we're going to call this recipe schema cool
yeah we're going to change like we're gonna have to change like
um the names of the like the the actual methods in the controller
um but there's no like we could still call it like there's

10:27
there's nothing that's like broken about calling it post there for
some reason I'm just making sure that all the routes and all the models are
correctly named cool uh let's look in here ingredients
Direction likes user looks good all right let's see what errors we're getting
all right controllers post routes server.js is looking for a post controller
I'm going to stop real quick and just let nodemon chill and let's start again
let's see what happens all right here we go cannot find module controllers posts

10:28
so we're looking in the main routes let's go and take a look at the main routes
the main route is looking for that post controller because that's what's going
to use for profile but this is recipe controller now recipes controller
and it's going to be recipe cool this would be recipes controller cool
that should solve that problem there let's see what else we got going on
all right so it looks like that fixed all the
looks like uh we fixed all of the bugs that were happening let's see if our app
works now still but we did change the model so what what what what wouldn't
work here um as we update the model here we're gonna

10:29
need like ingredients and directions for this to work um
so where are we where would we first add the ingredients and the directions
that's going to come from all right this is going to need
Alex hey with the raid coming through hope you all are doing well
thanks for coming through we are deep in our back end super review this has been
uh three Sundays in the making uh 10 plus hours now so we are we built out a
template that we can use and now we are continuing to use this template to build
out a new application chat decide to build a recipe app so we're kind of just
going through and making some quick changes to see how quickly we can make
this recipe app using the template hope you all are doing well thanks for
swinging through hope your hope your stream went well

10:30
what are y'all up to are we all working on hope you had some fun all right
we're deep in it we're about to take a break
that's awesome sudo hope you're doing well
preparing for the release of the trailer tomorrow hey that's awesome
congrats you like shared on Twitter and stuff I'll retweet it for sure that's
dope congratulations big deal these are the trailer all right let's go

10:31
that's pretty cool I'm sure y'all know but I'm gonna share it again
just grab the URL here my shadow command never works for some reason
not following them go ahead and give them a follow
if they're live and I'm not live I'm probably lurking in that stream I always
have it on the background while I'm working when I'm doing stuff like this
and I'm just kind of plugging it along I
like to not be by myself and so I always have their stream up because it's chill
they're inspiring because they're also working hard on stuff and so definitely
give them a follow if you're not already all right so we do need to add this
direction and and ingredients and that's going to come
from where where do we need to include ingredients and directions like where is
that going to come from like the users we we have are making posts before but
where are we going to include ingredients and directions if we're just

10:32
going to do it like real quick yeah the form and that form is on our
profile view so let's go to our profile view real quick uh here we have a post
now we have a label for a title caption and so we'll change this from caption
[Music] to this should be name right we'll change this to name
and input type text title ID name the name property is what matters here so
we're going to call that name and this won't be captioned this will be
ingredients and the name on this won't be caption it'll be ingredients
and then we need one more of these before we get to the image
and so I'm just going to copy this here and I'm going to change this to

10:33
directions and this will be directions and we'll change this to directions
cool now if there is now ingredients and we should change this from caption to
like ingredients and this should be directions remember
the name property is what matters the name property is what matters when we're
grabbing something from the form right so if we don't grab it directly from the
if we don't change the name property we can actually grab that value out
yeah I definitely wouldn't be typing along this is more like trying to figure
out how we're doing it all right because I'll share all my code
on on GitHub too if you want to try typing along that's okay but I'll share

10:34
everything on GitHub after all right so we have ingredients
we have directions is there anything else that we are missing
change directions and the name we change the name as well so name
ingredients directions when we submit this form we're making uh change the label
too good call um um label four name and that matches the ID um or
ingredients and that matches the ID and then four directions
and that matches the ID all right so now our form has it when we submit we're

10:35
taking what type we're taking when we submit this form what type of request
are we making a post request and if we look at this form
we need to change the action so I'm going to change this action to a recipe
and this is going to be create recipe so this is going to be a request to the
recipe route so if we follow the whole thing server
it'll be a request on the recipe route we're going to go to our recipe router
recipe router is going to have a post and we're going to call this create recipe
cool and so you'll use the recipe controller

10:36
and we'll call the method not create post anymore but create
recipe all right so it went from it was used to be called post we're going to
call it recipe now so we're in the right we're in the right router
we are connecting to the right action because we said the action is going to
be recipe create recipe if we look at the route create recipe
we're going to use the recipes controller and we're going to do create
recipes so let's go to our recipe controller
get profile get post create posts I'm going to call this create recipe
we'll create recipe beautiful Cloud narrow should still work
we're gonna we we're gonna change this because it should be named now to match
our model name and we're going to grab it from the
form we change the title to name in the form we have image we have cloudinary

10:37
captions no longer capture we're going to call this ingredients
and from the rec.body it was ingredients cool and we also need this again for
directions full directions oh all right that looks like that should be working
and we have a problem here let's see what the error is we messed up something in

10:38
we just did let's see let's go back ingredients boom directions boom
looks good create recipe using the recipe model
oh we didn't save this yet save that great recipe recipes controller create
recipe and we still have a post somewhere right
so uh it's post method boom recipes controller create recipe recipe controller
great recipe create looks good looks good and that fixed it yep it was just that
the route was wrong cool so right now if we were to run this

10:39
we probably should be able to make a recipe but what would be the main error
what will we run into like we should be able to create a recipe it'll probably
get saved to our mongodb but what we run
into very quickly what would we run into there's one last thing that we haven't
done yeah we'll never see it coconut director
because we have to fix the that profile view uh so let's take a look at the
profile views already have it open instead of it being
where do we view the post that was usually here so instead of it being like
um posts that we were putting in here it's going to be recipes now so we'll
call this like recipe oh and this will be recipes well and this would be recipes

10:40
dot name cool the image and then for the directions let's just put a
paragraph here and then directions we'll just do a paragraph eventually we'll
probably do um thank you for the extra s um eventually we'll probably do like
some sort of list or something but for right now let's just do a paragraph
and we're just going to yoink this and it won't be name it'll be ingredients
and it won't be named it'll be directions cool now we should be able to show
everything in the Dom we'll have the name we'll have the ingredients we'll have

10:41
the directions but we still haven't gotten we still haven't gotten the um
the get request so let's take a break because people are getting ads I will
take our break when we come back from our break we'll kind of finish up this
last little piece here hey Leon do I make myself look like a complete
I don't know what that word means by saying I'm a burn stack developer at
meetups as recruits reply I've never heard of it before I thought it was down
with the lingo um I mean I don't know if I'd call
myself a myrn stack I just say I'm a like I'm a full stack developer I'm a
software engineer and they asked me what I focus on I use the merge stack which
is can I explain what that is but no I mean
if you're talking to recruiters remember recruiters don't always code or like
most of them don't most of them have no idea what different things are except
for the things that they recruit for is if you're talking to recruiters they
might not have any idea what myrn is but I would say most developers probably
would at this point but yeah there's no reason there's no reason

10:42
to expect everyone stays um on top of all this different stuff [Music] cool
all right so we were just finishing up this last
bit here so we could actually see our recipes
we're changing the path here so that when we we eventually build individual
recipe Pages it's already there uh we're
pulling the name in for the recipe we're keeping the images there we have the
ingredients we have the directions and there's one other thing that we were
that we said we were going to change recipe recipes name
the image recipe ingredients recipe directions ah recipes dot length

10:43
there we go um because eventually we're going to pass in recipes into this ejs
template and so we need to Loop through how many recipes that we have
cool so now we should Loop through the total number of recipes and
here it looks good here all right so let's save this uh for this to work
we're going to need the get request and our recipe controller to work and so
let's take a look at our get request here
uh the get profile because that's where we're at uh we'll call this recipes no
longer post recipes we're gonna find all the recipes tied to that user
and you won't call it post we'll call it recipes
and we're going to grab the recipes from the request here
cool and we still want the logged in user info so that can all stay
uh this all looks good to me I think we're ready to try running this I'm just

10:44
gonna get rid of the stuff that's in let me just check my my database here
the mongodb all right so we do have posts which
we'll just ignore so that doesn't matter it won't mess anything up because the
new one should be recipes going forward all right let's go ahead and
let's go ahead and see how this goes what about multiple people that have the
same recipe uh in this case uh each recipe would be tied to specific users
so they could have the same recipe but it would just have duplicates in the
database but each duplicate would be tied to an individual user there's also
nothing stopping right now from each user uploading the same recipe bazillion
times but those are all things that you could solve later on I don't think we

10:45
need to to worry about like edge cases like that right now um
all right I feel good about that looks good all right let's test it and see
what errors we get all right now do I already have one running sorry
let's close that let's close that all right npm start
all right so it looks like it's running let's go catch it go to localhost 2121
let's go to Binary upload boom let's uh log in

10:46
we're already logged in let's try making a post uh name will be Pat ingredients
cotton and Magic directions uh say the magic words
all right and we're well we'll name it Sorting Hat choose file that
open and let's see if we get any errors all right so we didn't get any errors we
can see that we have the Sorting Hat that pops up we have the um
the ingredients and we have the directions so
I'm going to count that as our first try right first try uh so it is showing our

10:47
recipes now on our profile and it has the name of the name of the
recipe the photo of the recipe the ingredients and uh the directions it's
also have an anchor tag right now that's why it's doing like the blue underline
um but we can fix that later I don't think something to stress about right
now uh the problem though is if we click on it uh oh it actually is pretty solid
uh took us to the recipe page right like
we have recipe and then the actual ID of the recipe the likes are still there
um I'm actually I was expecting some of that to break let's take a look at the
individual git get post I guess there's nothing really
that's odd there for the get post meaning that um
we call it post ejs right and all that stuff but that still all works so
there's nothing too broken about that that's actually pretty cool so let's
focus on that let's get the individual posts working make sure we have the

10:48
ingredients and the rest of the ingredients and the directions on there
and let's start with the route so we have our get for the individual posts
we're going to use the recipe controller
we're going to change this from get post to get recipe cool get recipe
let's go to our recipe controller get recipe
cool we're going to call this recipe and we're going to pass it in as recipe
and recipe and we're going to call this ejs file recipe
ejs we have to come over here and change this rename it to recipe ejs so
basically we're just trying to build that individual recipe page now we have

10:49
the portfolio working the portfolio the yeah the um profile working we want to
be able to load individual Pages or individual recipes so we change our get
which grabs the ID we call the recipes controller
gonna change this to get recipe we're going to grab the individual recipe
based on its ID pass that to a recipe ejs let's take a rest look at our recipe
ejs uh we have to change this from post to recipe
um recipe that image we have to worry about like a for Loop or anything here
because it's just one recipe and then we'll change the we have the liking here
um eventually if you want to have likes on
the recipe we would have to change this anyway
so we can just go ahead and change that for now

10:50
like recipe we haven't modified the um we haven't modified the
like on the controller though something in mind that it won't work initially
number of likes would be recipe.lex cool and then
if recipe dot user equals user ID so we're seeing if the person looking at
the recipe if it's their recipe then they'll have this delete button that
shows up but if it's not their recipe then it won't show up p delete
recipe and recipe that ID I'm just changing this all the recipe looks good
and then down here we have the post caption um but we'll call this recipe

10:51
ingredients and then we'll have another one we'll just call for the directions
go let's save all this and let's see where we're at let's see
if we get any errors or anything like that let's try reloading this page
all right so we have the image we have the ingredients and we
have uh the directions all there the likes and the deleting won't work
until we update the uh the controller but for now it it looks good you have

10:52
the individual post Pages uh we have our portfolio so I can say our profile
that's working profile has the ingredients it has the directions I
would say for right now this kind of satisfies the the basics of
what we're looking for uh let's clean up the likes and let's clean up the
deleting just because that's an easy change right a couple easy changes and
we should be good so if we go to our routes um likes so we'll say like recipe
it's using the recipe controller and we'll call this like recipe
cool and the same thing with deleting we'll call this delete recipe
and recipes controller delete recipe cool so that router's all set up let's
go to our controller like recipe we'll change this to
uh recipe we already have it set up changing the likes and then we're just
going to change the redirect back to recipe because that's where we're at

10:53
already and then delete recipe as well cool
recipe find by ID that looks good recipe
cloudinary recipe remove send us back to the profile we'll just change this
deleted recipe cool so I think that's everything let's try this out
let's refresh click on it likes worked uh it's our post we're the logged in
user so we should be able to delete it worked let's go first try you
all right so I think as of right now uh using the template in under an hour

10:54
we were able to switch this from a site that was about making social media posts
to a site that was about submitting recipes right and
that's pretty quick like an hour it gets all the basics we could spend a lot of
time with like the formatting now it's just
the formatting right like we can come into
the uh profile ejs and say like how we want this to look or to feel uh we could
go into the recipe ejs and say all right well I actually want to figure out how
this looks and feels we could figure out maybe
that instead of it being just uh an input where they put the recipe in
directions maybe there's something more fancy there
um that enables it to make it look more like a recipe
maybe somehow on your recipe ejs you're taking that paragraph and using some
maybe client-side JavaScript to like format it somehow but that's also that

10:55
you could figure out like over your period of time like if
this is the project you're trying to build like it's pretty easy to go
through and like well not easy but it'll
just take some time but there's it's not that's not the meat and potatoes right
so now we have kind of the the core switched over we went from our
social media app to a recipe app all of the big pieces are fixed now you can
start adding stuff that you want to add and so you wanted to add
favorites and we wanted to do it with a favorites collection uh which is
probably not the easiest thing in the world but let's think through it
all right so we probably want to add a favorites button so we should do that
first let's go ahead and do let's let's add the favorites button
uh and that would probably be on the individual recipes themselves we don't

10:56
have a feed for recipes which is where I guess you would see all the recipes
um but let's just pretend that you have like I don't know individual recipe
pages that you got to somehow without going to your profile
uh and so on these individual recipe Pages we already have like a like button
so we could just kind of yank this and change this into a favorites
so we could say like favorite recipe and we can make it
well the legs are already a heart what's
another font awesome thing that we could do it's not a heart

10:57
well maybe we changed the the star yeah this star one I'm sure star is one but
let's just check yeah of course fa star cool all right so let's come back here
f a star and that should work um since it's a recipe route we go to a
recipe routes uh instead of it being a like it will be a favorite

10:58
and we'll go to recipe controller and we'll say favorite recipe cool um
I guess it shouldn't be a put it to technically be a post which is
ridiculous all right let's make this a post actually nevermind let me delete
this real quick eat um this will be a post we're doing it for funsies okay posts
favorite recipe we don't need any of the upload stuff though

10:59
and so let's go back to our profile ejs or sorry our recipe ejs and
we don't need to have the method override cool recipe favorite recipe
take a look at the um recipe controller real quick so a create recipe
is grabbing stuff from the rec.body so we don't need anything like in the ID
necessarily uh when we're submitting this stuff right
we don't need it in the URL or anything like that we can just take it from the

11:00
body let's go and take a look foreign so here would be our form
we're submitting a post what we want to do with that though uh [Laughter]
because we're doing this in a really funky way I'm just thinking through a
little bit here all right all right so we have a post
we're gonna send that through We're not gonna pull anything from the
form though because we don't have anything in it what do we need what did
we say we wanted to send the ID which will be automatically

11:01
created a user and a recipe ID um maybe we treat it the same as the method
override but we just keep it as a post um yeah I think that makes sense
either recipe because that we can get the logged in user just based on who's
logged in and we want to be able to grab the um
I'm gonna be able to grab the action so maybe we can just do it off the action
maybe we don't need to do anything fancy I'm just going to plug in
with the action yeah with the action we'll do that all right so favorite

11:02
already kind of have that favorite recipe ID is already there it's still a
post that looks fine this should still work we're going to
paste in the ID we need to grab that yeah okay let's take a look at our look
at our routes here uh we're gonna have a post
but we're also going to have on the post the um
the ID as well like the recipe ID this should still work should I still be
able to favorite it we should still be able to have the ID right now
uh we have the ID we have the post we have the ID all right we should do this

11:03
so our controller so instead of a create recipe we're gonna favorite recipe
let's just copy this whole thing boom favorite recipe
favorite recipe we don't need any of the cloudinary stuff [Music] um
boom we're gonna do favorite dot create oh
did we even create our model yet no we haven't created our model yet have we
[Music] um favorite judge yeah so we're gonna have
we're gonna use a favorite model and then just real quick while we're here
the favorite will have the ID we don't need that then it's Auto Magic

11:04
we know we're going to need a what did we say one more time user and a recipe
so user will be wrecked dot user dot ID so just like the logged in user
yeah Rec user ID that looks fine rep user ID and then we're going to need the
recipe which we should be able to get off the
parameters so you should be able to say um dot params dot ID
all right so let me walk you through my thought process here
we're gonna have a post that's going to call create well

11:05
it's going to call favorite recipe cool and what we're going to want to do is
grab the ID because if we look at our our actual action is recipe favorite
recipe and then the ideas here we're gonna be able to Joint that ID if
we look at our routes favorite recipe IDs which we'll we should be able to
grab this inside of our controller we're grabbing the logged in user and
we're grabbing the ID from the parameter we don't need any of this other stuff
here and we want to redirect back to uh recipe
and we want to do the whatever the recipe ID that we're in so it'll be

11:06
let's just go ahead and do uh template literal here and we'll do
wreck dot params ID so the idea here is that I'm getting this ID out of the URL
and this is from the logged in user and that's kind of the two things that we
said we wanted in this favorites collection cool all right I think this should
work now we just need our model so if we look at our model
we have a recipe model I think we should just copy this
cool and we'll go ahead and create a new file and we'll call this favorite.js

11:07
and this we'll call this favorite schema we know we're gonna have a name
so we're just gonna have user and I keep forgetting user and recipe
so user we already have down here get rid of everything else
I'm just gonna call this recipe oh I'm going to check on my little one real
quick be right back one second yeah I hear a little one crying a little
bit so I'm going to let's put three minutes on the clock I'll be right back
alrighty alrighty Let's uh let's quickly get through this last bit here uh and

11:08
then we'll call it we'll probably go all right we've been going for we
started at two so we'll go into like six that's like four hours
let's see if we can get this done within the within the hour alrighty
so we have recipe we have user and we can just leave created that that
doesn't doesn't ah we don't need it and it'll leave it it doesn't matter all
right so favorite schema favorite we'll call this favorite alrighty
favorite favorite schema here at schema let's look in our recipe controller

11:09
uh we're gonna need favorite now as well cool
all right so we should have everything now let's see favorite favorite
we should be able to store the favorite in the
great recipe favorite recipe should be creating a favorite there so let's just
save this and see if it works all right let's add a post hat ingredients Magic

11:10
directions say the words oh yeah we gotta change the reference as well the call
uh no users fine oh yeah we want to you want to use this based off of a recipe
right so um we'll say um and we'll change this to ref recipe good call thank you
all right look at this controller one last time favorite recipe

11:11
full user looks good uh let's go ahead and try to see if this works
so I've restarted server we serve restarted beautiful let's refresh
all right let's do a name here hat ingredients in magic directions say
the magic words beautiful let's choose the hat photo again submit
we have a lovely hat we can go to the Hat page we have the star all right
so we did something there all right let's look real quick and we
we knew we wouldn't we did we redirect well let's see param's ID
should have taken us back the recipe route but let's see what

11:12
happened in the mongodb did anything happen there let's refresh
oh it's in the views like I put something weird in the views
let's go and take a look I'm sorry it'd be in the recipe reviews let's see ah

11:13
like that close to oh I didn't close the quotes good eyes good eyes I love it
I didn't close the quotes beautiful and that's why we got all this extra
spacing here that's hilarious I love that all right
let's go back and refresh our page and try again
all right so we got redirected back to the right spot but did it do anything
for us post was triggered post has been added so
that means that if we look at our controller
um this says this actually ran right the favorite recipe ran post has been added
um but we need to change this to favorite has been added
a little favor has been added if we look at our mongodb

11:14
we look at our manga DB and we refresh we should have a favorites collection we
do and our favorites collection has the user that made the post the recipe the
object that like the idea of the recipe and when it was created cool
all right so now we have the big three that we said we wanted to start off with
we have all of our recipes working we have favorites working uh the last thing
we need to do is have like a favorites route so let's take a look um
we can just have like a normal get uh recipe dot we can just do recipe slash

11:15
favorites cool and we'll just say slash favorites
we'll make sure they're still logged in because we're going to need that we're
going to show their favorites so make sure they're stayed logged in and we'll
say get favorites cool get favorites uh favorites get favorites and
maybe this should be on the main routes actually I think they should be on the
main routes yeah let's let's take this back
it's not like a recipe uh it could be a recipe routes recipe slash favorites
kind of main route favorites like profile favorites
yeah I'm gonna say it's a main route uh you could you could you could put it
wherever you want but I I'm gonna say main just also to show something else
somewhere else let's go to our main routes

11:16
and let's do because I don't want to be like slash recipes controller
yep recipes controller get favorites um we however don't have a get favorites
inside of our recipes controller let's go ahead and do we have like our
git recipe we have our get profile that's kind of
probably more close to get profile than it is anything else let's copy that
we could also add favorites on your profile yep that could work
like just have like a favorite section we could also make a favorites

11:17
controller down the line too but we're trying to do a little bit faster
get favorites and all right now the weird stuff starts we need a favorites ejs
cool all right so let's just check our routes real quick uh we can go to
slash favorites we'll make sure we're logged in we're going to run the get
favorites method get favorites we're gonna eventually run our favorites ejs

11:18
so let's let's copy um maybe copy the profile ejs and do a new file
favorites Dot ejs let's paste the profile in here and
let's just get rid of all the stuff that
we don't need username email we can keep that
you don't want any way to like add posts we don't need that
cool he's gonna be able to see the recipes this is probably the only piece
that we actually need I don't need to return to feed uh we'll
just leave it for now we can get rid of it later all right so it's the only
thing that we're gonna actually need like where we put the the um the recipes
so I'm cool with that for now all right if we go back to our recipe controller

11:19
get favorites now this is the hard part the hard part is
we have the logged in user and we have this favorites collection um so let's go
what could we do you can get favorites all right we go to the favorites
right and find all the favorites where user matches the logged in user
and for right now I just went to console log favorites real quick
yeah we could do that we could use populate right

11:20
let's do this in a quick step real quick just so folks let's just do it
so we could do find and then we'll populate recipe let me see if this will work
[Music] actually forget these are just recipe like that
let's see let's go ahead and use mongoose populate I always forget the syntax no
foreign that's always weird all right string recipe

11:21
and let's go ahead and console our favorites real quick just so we can see it
cool and we favorite that fine good call we'll worry about this in a second down
here for the ejs I just want to see if loading the page does anything
uh in our console log once it works I'll explain how it's working
all right let's refresh real quick the favorites you shouldn't see anything yet
all right let's see if we got anything in our console all right beautiful so

11:22
we have an array here and that array has one object in it right this array right
has one object remember we only like we only favored it one thing
right so populate enables us to grab the information oh why should I close
that it was just to grab the information coming
from the recipes array so it's kind of like doing would be what would be very
very fancy in like sequel or something that is very
easy when you're using Mongoose so we were able to find all of our users
oh sorry we're able to find all the favorites where it matched the logged in
user and then we were able just to grab the recipe value so instead of having to
do like another query to the recipes uh collection we can just populate all that

11:23
data from recipes just by saying populate recipe yep
instead of doing like two queries uh we can just use populate and it grabs all
the data for us and so we saw that it was correct it had the um
it had the one thing that we favorited in it so we know that it's working and
we can just go ahead and do uh favorites.ejs we'll pass in what did
we call it one quick thing uh we did call them recipes because I
guess they are still recipes technically uh so let's go back to our controller
uh we'll still call this recipes to not have to do anything weird
also be recipes we'll pass in recipes we'll pass in the logged in user if we
look at this favorites ejs we're still using the recipes

11:24
all right this should work let's go back to our profile
we have our hat let's add one that we haven't done um Great Hall Stone Magic
directions say the words cool we'll upload Great Hall and submit
all right so now we have two different uh posts we have hat we have great hall
we know that we favored It Hat already if we go ahead and do favorites
I pass in everything correctly let's see oh isn't that is it still running let's

11:25
see what ours did I get they're not save Maybe oh let's see
there's our controller recipes let's see boom all right let's restart
refresh this page all right let's walk through it favorites
we have our main routes oh do I not have my route yet
I know it's a main route so main routes let's see if we go to server.js main
route since it's slash favorites it would be triggered by main routes

11:26
uh main routes calls calls favorites we use the recipe controller which looks
good recipe controller would be get favorites looks good favorite we find we
find the recipe uh let me pass that through recipes recipes and let's see
I might be I might need a different name here yeah
I think because it's using the populate let me just console log it real quick

11:27
and then let's look at the favorites real quick um recipes recipes it looks good
let's see yep let's just cancel out real quick so
we can see it everybody can see what I'm what I'm thinking here
um all right it should be console logs let's just go and refresh this page
all right let's take a look at our console log all right so if we look
look at how this console log is set up all right it's a little bit different
than what we would normally be seeing uh we have the recipe which is one level
deeper right so see like how see how it it has like the ID and the user first
and then the thing that we're actually looking for is one level deeper with the

11:28
recipe and so we get out of use that so it'd be dot recipe so
we go back to our controller uh it's not actually recipes that we want to use we
want to do recipes Dot recipe and bring that back up just so folks can see it
I'll leave it here all right let's save we did
yeah we already have a bunch of themes running
cool all right we're running already let's refresh and recipes let's see
oh we don't have to do it that way actually yeah my bad uh let's go back

11:29
real quick I don't know I did it that way let's still send recipes like normal
that makes the most sense and then in the ejs we will do that recipe
because that would that wouldn't work long term let's go ahead and do here
[Music] we're going to do our favorites ejs and here it would be
that recipe there we go because it's one level deeper we showed
that in the console log um I still feel like I'm spelling recipe wrong

11:30
all right I still feel like I'm spelling recipe wrong
and let's look at our controller real quick sending recipes people have ads
let's refresh all right it's working uh so let's go ahead we'll take five
minutes on the clock when we come back we got it working third try uh I'll walk
through everything one more time that way we all know that it works and
then uh we'll end it there let's take a peek
um I want to show you this console log because this is this is kind of the I
had a brain fart but this is this is what we're looking at here so with the
populate we have the recipe information but it's one level deeper in this recipe
so we still want to be able to Loop through this array so we're just going
to pass the array like we always normally do it's just that when we pop

11:31
off each object we're going to do the dot recipe to get the information that
we care about right so we're going to do the dot recipe to get the information
that we care about so that's why in our favorites ejs
we're doing the recipes I just we normally do when we're moving through
the array that we sent to the ejs but we know that the things we care about are
one level deeper with the dot recipe that's why we're adding dot recipe
everywhere cool all right I feel pretty good about this
in what less than two hours we were able to take our template and
build out the core functionality of what we wanted right we said we wanted a
recipe website so we had to modify our posts to include ingredients and
directions we now have ingredients and directions showing up we have individual
ingredients pages that show the ingredients in the directions we kept
some of the stuff the quality of life stuff like the likes and the the

11:32
deleting of deleting of recipes we also have like this favoriting functionality
too where you can favorite your post your favorite your recipes and if you go
to favorites which is the new thing that we added we have just the things that
you favorite it so notice Great Hall is not here it's just the Hat that's
showing up so uh I love that I think for your 100
hours project this is exactly what I would do this is how I would start right
and once you get more and more comfortable now the next 24 97 hours are in CSS
exactly once you get more and more comfortable with the template you can do
more and more things um you can start to spit these out pretty
quickly and so the thing that I will notice is that if I was applying I was
thinking about my 10 premium apps this is what I would do I would take a

11:33
weekend I would say all right I want to apply to I want to apply to I don't know
what's a big recipe website like all like um
Food Network or something like that or or what's what's the big one I always
wind up using any of the big food recipe websites right boom you now have
something in your portfolio that's legitimately building a recipe website
Epicurious exactly right I'll Eat Right any of those companies you're applying
to you make this look a little bit prettier you put some
um some some some basic data in here so it looks decent and there you go now
when you apply to all recipes or Epicurious you have something in your
portfolio something on your GitHub that's like exactly uh what they would
need you to build and so I would even use that in like the communications the
things that I would send to the different folks on the team I'd be
linking this app along with it and of course you make it look a little bit
spiffier use a better template in terms of like the design or you use Tailwind
or something like that if you want to to clean it up even faster this is using
bootstrap but that's it and then you could take a weekend and say all right

11:34
what are the 10 companies that I really want to apply to and over that weekend
build out at least five of them right of like these apps using the template that
you customize to the things that you needed to do and that's going to help
you stand out during the interview process and so uh that's that's the the
idea here is that you now have this template I walk through how I would
modify the template to do exactly like what you asked me to do I didn't have an
idea what we were going to do going in he said recipe websites that's what we
built and you can start to modify it so this
is something maybe as you go back you read through or watch through the super
review you'll be like all right Leon change this then this then this and I
hope just by me showing you the changes that I made
that you see that it's not like a really wild thing you kind of rename a lot of
stuff you see what errors you get oh I forgot to rename this part of the
application you go back you change that and then you have maybe a little bit of
all right how do I how do I pull the data I want we learned

11:35
about populate today you might go read the docs to better understand what
that's doing but it's really not that that difficult to build out a bunch of
apps now that makes sense so this was let's see
going for a little over four hours so we did what six hours originally then four
and four so ten plus hours of back-end review that I hope gets you feeling a
little bit more comfortable to jump in and start making some of these
modifications on your own alrighty folks how we feeling cool
ready to go great all right so this week don't forget folks uh this week we have
a lot of stuff planned uh we have of course our sessions tomorrow with
Stephanie uh where we're gonna come back I'm gonna show you the actual templates

11:36
that you can use to send the folks I riddle them off during class there's so
many templates we're gonna talk through real scenarios when you would send them
wonderful things like that and then we are going to move on to um
we're going to move on to our stand up every day of this week as
well Friday we have another tea spill uh
Tuesday we have more Big O notation data structures algorithms Thursday we're
building a Hit List live
