
00:00
let me show you how to build a full stack node app from beginning to end i
don't care if create read get post put delete doesn't make sense i got you by
the end of this class you'll be able to build a full stack web application all
the code and all the help you need is available on our discord leonwell.com
discord let's get into it yeah hey hey does this work
hey let's go good morning good afternoon good evening no matter where you're
coming from let's go am i late aaron now you're just in time let's go
how's everybody doing welcome through rascal 2 with the raid
27 before stream let's go turn up alrighty folks we're getting into it
get right into it i'm going to keep the chit chat to a minimum tonight we're

00:01
gonna do some celebrations we got a bunch of jobs that came through so i'm
gonna throw up the ones i can we're gonna just do a quick uh a quick
celebration quick thank you and then right into the crud uh we've been
we've been delayed a little bit and so i
want to get right into it i want to make sure that we go over this uh to-do list
this crud app get through it really go into detail ask any questions you have
and then we're going to add the layers folks we're going gonna add mvc to it
which is some of your reading for homework tonight then we're gonna add
authentication to it and then you can build anything you you can build anything
once you can once you can do the authentication there's nothing stopping you
nothing stopping you from building whatever the heck you want
all right folks glad you're here ah let's do that let me get the little
leon here i always like to ask some questions we'll do one

00:02
one question tonight always got to start with a question one question and then
right into celebrations right into cred we called in the big guns
billy hey thank you for the gift that subs pulled in the big guns
needed some help i needed some help i was i was working hard
i was working hard in the agency you know i was working hard in the agency
but need a little help so we called in we called in grandma so grandma's here
tonight grandma's helping us out so we'll get
through a full class tonight we're going to do all right
all right we pulled in the big guns so we're set for tonight we're getting
through this crowd we're getting through this application uh we're going to make
it happen thank you grandma exactly all right
i want to answer one question then we're going to get into it
how long will class be today we're gonna

00:03
go normal time about three hours try and go as deep as we can with the with this
crud if there's more questions good if we finished a little early that's all
right definitely going over time nah nah we're going to be good
also good afternoon the simple card app i hope you felt that too
uh boxing there said just getting into coding or all the previous videos on
youtube absolutely you can do exclamation point youtube uh when you do
that you'll see all of our past videos on there and all the materials
everything's on discord shout out to the ketchup crew for folks that are working
through those videos and child rascal ii rascal two who did the raid today um i
don't know if you noticed but every single youtube video they do the time
stamps for us i appreciate it all right we got our question let's get right into

00:04
it checking in uh when i sent the discord message today i
linked the wrong tweet so if you're trying to check in
i can do exclamation point check in when you do that you'll get the link to the
tweet today and so make sure you go ahead and like and retweet that that's
how i know that you're here that's how i take attendance uh it's also how more
folks find us so if you click the link in the discord
message in the beginning that was wrong it was last it was last classes so make
sure you have this class is in there uh and make sure you check in cool
i'll give everybody a second to do that i was wondering yeah uh some folks let
me know whenever that happens just let me know
vape juice jordan what's going on with the raid let's go how are you doing
what are you all up to in a minute we gotta we gotta i heard i heard you're

00:05
starting a podcast i'm i'm pumped i'm pumped
trash that too hey let's go i'm pumped i'm gonna uh i i'm pumped i'm ready for
it i need it in my life so i'm glad you're doing it
thanks for the raid hope you're doing well what are you all doing today what was
the stream true hey what's going on congrats on the new gig gang's all here
uh when that podcast drops let us know we'll we'll we'll pump it on uh on the
hundred devs discord as much as we can hope you all are doing well cool
thanks for the raid all right thanks for checking in folks hope you all
had some chance to do that all right let's get into it health first

00:06
all right health first we're about to go through a a a
monumental amount of work in terms of the hunt
getting the job is the hardest part of the process
there's gonna be lots of things you have to do lots of doors you have to open
right and as you go through this part of the
process we talked about it before this is probably the most difficult the most
mentally demanding put your health first
if you need to take a night take a night if you need to not open a door don't
open it right take the time check in on yourself check in on each other
community taught right make sure we're all doing well because this is the this
is this is go time this is this is where the the rubber meets the road where we
gotta we gotta do the things all right so please
make sure that you're taking care of yourself health first always
i took time you take time if you need it cool

00:07
uh just in case folks are just joining us tonight uh this week this month full
stack apps we're adding mvc we're adding authentication we're doing all that
wonderful stuff then september is a little bit of react some data structures
algorithms really starting to hunt and everything you're going to need for that
job search process and then october is living the life really doing the hunt
projects prep all that fun stuff and then agency life afterwards cool
i'm gonna say it again i'm gonna sing it from the mountaintops folks are already
getting jobs don't let that be the thing
that distracts you i'm not asking you to start the hunt yet i haven't asked you
yet right but remember this is this is your this is this is your your life your
thing to do right some folks like to start sooner some folks like to jump
right into it all my past videos from last cohort guess what they're all on
youtube if you want it to go faster pop over to youtube boom you got it you can

00:08
go as fast as you want right um but when you see these jobs coming in
right understand that different folks have different privileges of time they
have the ability to focus on things we're not i'm not asking you to be ready
for the hunt yet i'm asking you to start doing the things
that we've been saying in class we're talking about making sure you're doing
your daily code challenge make sure you're doing your banky make sure you're
doing the little things that are getting us ready for the hunt and then we go
hard right then we go hard but folks are already starting that's
okay we're all in the same roller coaster we're going to get there
eventually together um know that as we go forward you already know enough
you're already ready you are already software engineers
you are already software developers i i can't stand it it gets my goat
when people say aspiring no you're developers you write
code you understand the code we're about to go through tonight

00:09
you've built projects some of you have clients some of you are already
interviewing you're a developer you already know enough you can go out there
right now and get a job we have folks and i showed you last class
i showed you all last cohort half our folks weren't doing technical
interviews to get these entry-level rolls don't let it get twisted in your brain
that there's all this extra stuff that you have to latch on to when folks get
to the end they start latching onto all these things that are not the things
they're going to help move the needle double down on the things that we know
work the bank making sure your checklist is is
complete making sure you're doing your coding challenges make sure you're
keeping up your networking do that and by the time we get to the
hunt i promise you will be ready i'm going to lay out all the secrets all the
tips all the tricks i know to help you get the job but we have just a few more
things i want on your plate to open those doors

00:10
right i want to add some organizational paradigms i want to add a little bit of
react i want to add your data structures
and algorithms so we can open up as many
of those doors as we can and when you do that enables more opportunity to come
your way but you already know enough don't let anybody take that away from you
don't let anybody on twitter say that you're aspiring no you're [&nbsp;__&nbsp;]
software engineers you're writing phenomenal code you're doing big things
and folks it's already working hundreds of folks last cohort we're
seeing dozens and dozens of folks already from this cohort you're good
hang in there this is the hardest part this is where you're gonna be tested the
most but the other side is so so sweet now we're spending a lot of time
together a lot of time and voice calls a lot of time working in projects it's a

00:11
reminder to be kind that's all i ask be kind you can't be kind if you can't
leave the the weird conversations off of discord
uh you'll probably get a ban that's okay you can always be requested to be
unbanned we're trying to build the best community
online to learn how to code don't care about any of the other stuff can't be
kind deuces bye all my content's free online uh you can get all the assignments
everything you need and voice channels were watching you
some of you all like to be a little reckless no more be careful watch your mouth
and help me with the sale cool all right could i start a band band to be mean to
each other all right uh let's let's power through these and

00:12
right into the cred like i promised uh there's so many folks getting jobs or
clients um that i'm not adding them all like just the ones that like if you like
if you look at me on twitter or like you at me in the celebrations channel
there's probably a better chance of it um but
there's a lot of y'all and so i put a tweet out there i was like this is
getting a little getting a little wild getting a little out of hand here but
there's so many y'all coming through that it's it's amazing to see i'm just
gonna put a small subset of them here um i love this one imagine getting a
six-figure offer and not being sure about it what sort of monster have you
created a let's go let's go uh through my networking exercise i got
a paid client uh and another interview for october i love it remember y'all
could still be freelancing y'all could still be freelancing uh
we're moving into the phase where folks are starting to ask for like references

00:13
and um and for like employment verification all
that fun stuff which we're going to talk about
probably next week because it's starting to become a lot um
but the best reference you could have is your clients right people that have
actually worked with your code that have paid you money like that's
that's huge if you still haven't gotten a client keep working at that people are
on their third fourth client now for folks that kind of kept up with it
if it's something that you weren't able to achieve earlier in the program you
know way more now try again all right uh
getting a wonderful internship at pmc uh the the beautiful thing is that if
internships pay do them they're they're great like like
some folks get it twisted like no getting your door your foot in the door
uh at a paid opportunity where you can learn and grow phenomenal uh holy cow

00:14
had a second interview today first round interview tomorrow
and another first round on friday i get down my second round interview today and
got a call shortly after with a job offer let's go let's go job offer let's go
uh good time to announce i accepted associate software developer role with
sas i'll be starting next week 100 devs let's go
and i love that uh they shouted out the community we got some some good folks
here love to see it accepted an offer from apple uh now i'm not a i'm not a
i'm not a fan peddler right but uh it's pretty cool to see they got
an offer from apple they did have an internship at nasa so i
i think we were there to help a little bit but they put in work before they got
here um i love that people are still getting
clients uh newer clients agreed to my proposal and set a 20

00:15
payment for a new website always get paid up front folks
uh i love when folks shift from one part of the company to another we
have a lot of folks that are customer service representatives that are in
different parts of a tech company that make their way into the developer round
and so i love to see it happen here uh a few months of hard work practice
preparation let you know i got a full stack dev rolled a really cool company
love to see it um love that they shouted out the community as well uh
made it after the trough i've made it after after the trough has come a signed
sealed contract for my first full-time developer role uh grateful and i love to
shout out the mods the mods do all the heavy lifting if you like the community
it's because the mods have helped mold it to be that way and so uh shout out i

00:16
saw i saw some folks i saw blah in chat already but uh always please
give some big thanks to the mods right we have we have 38 000 people in that
discord can we can we just take a pause for a second 38 000 people
in that discord and the fact that it's not a complete
flaming mess that it's not just like exploding and and just filth everywhere
is because of the mods doing an amazing amount of work and i can't tell you like
some of the stuff that folks like the mods do it's it's it's not fun work
it's not fun work let's just let's be very clear right it's it's oh no

00:17
the threading tool that we use broke and div kirk goes through and clears out a
hundred threads manually so that when you log in it just looks normal right or
having to have really tough conversations with folks that
don't understand that we're all here to learn right like that's a lot of
emotional labor that falls on the shoulders of the mods
and i am forever uh thankful so i love that they shouted out the mods if you
love this community if you like this community if you get anything from this
community shout out to everyone that's here but shout out the mods for sure
so that's my thank you uh the other thing too it's at the beginning of my slides
it's it's uh it's a beautiful drake lyric i don't care about going milan or the
met i just want to make these songs for the set that's how i feel about 100 does
i don't care about any of that crap i just want to make a good course that can

00:18
help folks get jobs and it's amazing to see so many other folks participate and
and help with that that vision right there are folks in the world that just
want to help that show up to 100 devs to put in the work to help you all to help
each other and they that you see them right
you see them right the folks that just show up
that that that jump in discord voice channels to to do data structures and
algorithms classes the stream team that is streaming six
plus hours to help you cover some of the homework shout out wolf pack right like
that that's that's rare that's kind of that's kind of it's kind of
kind of wild that that happens right it's kind of while that happens that we
have folks that come up that aren't trying to sell a book that like that
happens all the time the number of people like leon do you do
you ever have guests on your street no i don't just put in the work
come help if you want to help just help and the fact that we have folks that

00:19
show up day in and day out that just help that help
push folks into these amazing jobs that they're getting that help people learn
how to code that give up their nights their weekends their mornings their
afternoons i love it and so a huge thank you to
everyone that does that um a huge thank you to everyone that just
shows up that wants to help i love it cool
we're jumping right into the crud folks uh the thing i need you to realize is
that right now it's still just lego it's all it is a lot of folks get
they get really anxious they get really nervous around the syntax guess what
we don't need to really understand every bit and piece
of the syntax right now that's that's not the goal
the goal is to understand right all right how's the web built

00:20
what are the requests when the requests come in what are we doing what are we
putting stuff into a database what what's happening right
and that's where i need you to be i need you to understand like how all these
pieces all these building blocks come together how all these lego pieces come
together don't sweat the syntax you could always copy and paste
right the code's not going away casual said oh my oh my god that's
what's killing me right now it's so different from traditional learning yes
right like you can you can always google the next
lego piece that's what we're doing we're building legos
right now i don't need you to understand every semicolon parentheses it's just
not it's not the wave right you're taking these lego pieces and
putting them together and as long as you know where you put

00:21
your lego pieces you're good so as long as you have your your repos you have
your code that's saved in in good folders right
we're just going to be taking those pieces right we're taking those pieces and
putting them together right and so i really want you to lean into that
because i'm going to show you we're going to work through the code tonight
that you've seen that you've tried to comment already like we've already seen
this code let's focus on understanding what's happening and don't don't code we
need the syntax right then we're going to add a an organizational paradigm on
top of this code again don't don't stress about the syntax understand like
why are we putting this type of code there why are we organizing it in this
way and then we're going to add authentication and when we add authentication

00:22
are you a cyber security expert maybe you are maybe there's a few of you
there's a few of you right i'm not i don't think most of us are
so we're not coding that from scratch we're we're not we're taking that off
the shelf and plugging it in to our code we're not putting in that work right
we're not putting in that work to to to to do all that research to make our
application secure doesn't mean we don't understand what's going on
but that's not that's not our domain right so as our applications
get more complex as our applications get more complex
what are we just adding more of we're just adding more legos

00:23
into our beautiful beautiful castle that we are building right and so you can't
stress that you don't know what's like how that
lego brick was made like when you're playing with legos you're not stressing
over uh this injection molding i don't really understand how injection molding
works like i wonder how what color dye they put in to get the red bricks
right like like maybe one or two of us had like that
existential crisis when we were like six or seven
uh where where we were trying to like figure out injection molding and and the
color green but most of the time we probably just
built a castle right and that's what we're doing we're taking all these
bricks that others have already put together that have already made for us
and we're building with them so over time you get past the understanding right
some people hear this and they they take it the wrong way once we get past the

00:24
understanding which is the tricky bit you're going to build your ass off
right once we get past the understanding you're gonna build your ass off you're
gonna put a hundred hours into building a project and as you are building that
hundred hours project guess what you also pick up along the way
believe it or not the syntax right right believe it or not
the syntax the the curly braces the the where stuff goes
but that's not where we need to be right now we need to understand how it all
comes together we understand all right how do we organize it how do we add
authentication to it like we have to do all these things that are understanding
exercises and then we are going to build build build the best way to learn is
building if you just turned off the stream right now and went and built i'd
be a happy camper i'd be i'd be fine with that
we're going to get to the point where we

00:25
understand and then we build build build build and that's where all the syntax
and all the pieces come together if you start right from the beginning um
with understanding a little bit and i'm not talking like
we're gonna do this for a couple more weeks like we're gonna do this for like
a couple more weeks that's it and then your build build build build build right
and so keep that in mind you're playing with legos take some of the stress
some of this stress off your shoulders right make sure you understand what's
happening make sure you understand the concepts when you don't understand
what's happening when you don't understand what the concepts are
boy do i have something amazing for you we have the stream team that's often
covering these topics in detail if you're doing the homework and get stuck
my wolf has been going through the homeworks on stream like go watch those
videos like what are you doing you're getting stuck with the homework go watch
those videos and then we cover that in class again
right we cover it in class again remember you have our our videos that

00:26
also go on youtube remember that we have the past cohorts video on youtube and
then also know that you have discord come to discord and ask questions right
come to discord and ask questions cool all right
before we jump into it we gotta bring back i i just i said but first so i'll say
but first uh how does the internet work right we're going we're going to talk
about a cred app tonight we're going to we're going to see the to-do list in
action right we're going to see the to-do list in action right
we're going to talk about how does the internet work first cool all right so
we have wires how's the internet work yeah it's it's a wire it's a tube it's a
connection of two different kinds of devices right we have our lovely

00:27
client side devices and we have our lovely server
side devices you missed my handwriting i know you have whoa now
our client-side devices make a request and when they make requests those
requests wind up heading all the way over to the server remember our clients
and our servers are both just computers but there's some code
running on our server that can hear that request what is the code
running on our server that's set up to listen for our requests
yeah we're calling that our api our api is set up
to listen right it's set up to listen for certain requests
and when it hears those requests we have coded it with what we want to have

00:28
happen right we are coding it with what we would want to have happen
we are in control of what happens when we hear those requests that's what
we're building out we're just building out really really complicated event
listeners right well not really complicated somewhat complicated right
we hear those requests right and then we get to decide what happens
when we hear those requests when we hear those requests we can make it
when we hear the requests we can make it fire a rocket chip when we hear the
request we could make it call dominoes well i can't maybe you can right when we
hear the requests that come through we can make it store something in the

00:29
database you get to control what happens when you hear those requests now
it just so happens that there are some really common things
that we're going to do on the web right a lot of times we're
going to hear a request and we need to like store some data in a database
sometimes we're going to hear a request and we need to get some data right get
some data from a request right i mean from the database sometimes
we'll hear a request and we gotta update something in a database sometimes we're
gonna hear a request and we just need to say hey we couldn't find what you were
looking for right so what we are going to do tonight
is look at a very simple application a very simple to do list
and we're going to look at some of the common requests

00:30
and some of the common things that we're going to do when we hear that request
and we're adding these legos right we're adding these legos into our repertoire
by the end of tonight's class you should at least be familiar with each of the
different pieces that we've done and be able to say you know what i might not
be able to code this from scratch i probably couldn't right but i know that oh
in my to-do list i was able to store something into a
database with my to-do list i was able to get something out of a database if i
ever need to do those things again i know where to start
all right i know what legos to play with no stress we're playing with some legos
really like leon i stressed my ass off playing with legos they had to get the

00:31
perfect the perfect castle if it wasn't perfect i was stressing right cool now
the common requests that we're going to see are our cred
requests right our create creating our reading our updating our delighting
right these requests where we're typically saying hey make something
get something change something remove something right these are the common
requests we're going to see across all pretty much all web apps right
right coming across pretty much all web apps right and so
what we're going to do is break down these requests
into a to-do list see the creating see the reading see the updating see the
deleting see the making the getting the changing the removing and see the code
associated with it cool all right now some other things we're putting into

00:32
the mix that we've seen in the past couple of classes right
mongodb is the database we're using for now right someone will use for most the
program we'll see a little sequel at the end as well
the reason why i like mongodb right is because if you've used objects
you know how to use mongodb right if you've used objects you know what the
heck you're doing we don't have to make it any more wild than that
in mongodb we have collections inside of our collections we have documents and
those documents are just objects just think about that for right now right
if we know that we're dealing with a grouping of objects we could start to
add objects to that group we can update objects that are already
inside that group we can remove objects from that group right and
so the wonderful thing here is that we are able to

00:33
use the things that we should feel a little bit comfortable with at the
moment to have all the wonderful benefits of being able to store stuff
long term right to have a database where we can put stuff get stuff update stuff
delete stuff too using just the stuff that we've been already comfortable with
now the bane of some folks existence is ejs i love ejs i really do
it just in my brain makes sense i understand that that's not the case for
everyone that's okay we're going to introduce a lot of other kind of
templating languages and some other stuff we'll see and then we get to react
you can you can let it go if you want right
egs to reason why i like egs is because once you learn two things that's it
right it's really just two things right it's really just two things

00:34
one thing is this code block right here which is this like carrot
the modulus equals right that's just how you plug in stuff like you plug in
variables it's like a very fancy um it's a very fancy mad libs right you
just plug something in you're dropping a value in right you're just plugging in
some sort of variable you're plugging in some sort of value and that's it right
it's a template rule exactly it's just like a template literal right
i'm here for fancy mad libs it's just a template literal exactly
we've used template literals so much in javascript already
just think of it as that way as well right you're just plugging something in
just like you would use in javascript right then
you have this block right here the carrot modulus

00:35
right carrot modulus modulus carrot right right that's just a code block
you can throw in any type of javascript that you want right
you could throw in any type of javascript you want you want to throw in
conditionals you want to throw in for loops you want
to throw in pretty much anything that we've learned thus far just throw it
inside a set of these right and you're done that's it
and so i like egs because if you can just keep those two things in your brain
right you keep those two things in your brain
then you're just kind of like reading html with some javascript mixed in and
maybe that was my my bad for for for uh hammering in separation concerns so
early we could talk about presentation logic versus others but for me

00:36
i learned those two things and it opened up a world for me right i
use other things now right i use other things now of course
but when i first understood that to write ejs i'm just writing html
if i want to plug in a value or a variable i use the equal and if i want to have
like a code block where i'm like doing a little bit of larger
uh javascript inside of it i just have this little block here and i open it and
i can close it do whatever i want those two things i think opened up a
world for me i went i went wild i was building apps on apps on apps anything i
could i wanted to do i could i could throw in right and it would just work i
could plug things in i could i can plug in code right
and uh it just it just worked is it pretty eye of the beholder right

00:37
but does it work yes so don't um don't let the the code block versus inserting
kind of mess you up inside it's really just those two things and as you see it
more and as we go through it tonight hopefully it makes a little um
a little bit more sense you said it had to be pretty i want things to be pretty
yeah all right so here's what we're gonna wind up seeing
most of the apps that we build going forward right
we're going to have our client which can make requests
we're going to have our server which has our api code on it that's
listening to the requests that are coming in
and when we hear those requests we're going to do different stuff right
so many times right so many times i'm just going to
put stuff into a database get stuff out of a database right so this kind of

00:38
layout or system is what we're going to use over and over again right
beveren said there are so many options handlebars views next so hard to know
what to use just build build that's that's the biggest answer right
i think it's a really important question especially at this point in time
at this point in time i i work were and and this is from my own experience too
right from my own experience i felt like i was
i felt like i was a fish in a really big pond chasing anything that was shiny
right when i was first learning to code i'd be like oh and i would run off right
or oh and i run off and i do something else right
and what i was doing is i was getting myself in a in a trap
where i wasn't like actually doing stuff that would get me my goal right
if your goal is to learn something new every other week go for it

00:39
chase the shiny thing don't let me stop you if your goal is to get a job stop
build an application using express which we've already learned
mongodb which you've already seen right ejs which we've already seen and there's
you only have to learn two things and build as soon as you hit a roadblock
where you can't do the things that you want to do
right when you hit a roadblock you're like this is too limiting
then add that other thing that's it that's what i wish somebody would have like
i wish they would have like grabbed me and just like stared deeply in my eyes
and told me you know enough you know mongodb you know express you know ejs
you can build whatever you want with just those things and an employer

00:40
is going to be way happier having seen a hundred hours project where you've
learned and built and three other smaller team projects where you've
learned and built then seeing the tutorial that you did
in that shiny thing over a weekend you know enough right
jdb says bro i wish i would have known this too right and and so
like i always say don't let some person on the internet tell you what to do
right don't let some person on the internet tell you what to do but
the stuff that we've covered and the stuff we're finishing tonight is enough
to build whatever the heck you want right get out there build build build
build and i guarantee some of you will hit a point where you're like this is
frustrating or i can't really do exactly
what i want to do or i'm doing something over and over again and that feels icky

00:41
because i'm a software engineer and we don't like to to redo stuff right and
when you hit that point then you'll go oh that's why that tool is so popular
and you'll incorporate it into your project
most 100 hour projects start off with just ejs node express mongodb
you get 75 hours in and you're like oh crap i would be really happy if i
incorporated this other thing and then when you're in an interview not only can
you show the project that you've built but you have a real world use case as to
why that thing you added was beneficial i can't tell you how much
realer that sounds when you're talking to another engineer and you're like you
know what i hit this roadblock i hit this like um
i hit this i hit this point where i just felt like i wasn't being efficient and

00:42
that's why i added this this framework right that comes across so much better
right then i decided i want to pick up this thing and i ran with it right
get there get there get there and then feel like if you need to bring it in
all right my project is kind of too big for one person
build an mvp every project i don't care how big it is has something small that
you can start with right something small you can start with every
idea every project right figure out what that is for your project

00:43
right your minimum viable product right figure out what that is for your project
and start there every single project could be started with just
these simple tools that we're talking about right and
then evolve into something more my country is picked up by a tech
company they still ask for an mvp and w smith said is a project with a
political slant a bad idea to showcase um remember how we talk about having as
many doors open as possible when you do things that are
going to make one group of people really
happy and another group of people really unhappy
you might close some doors but it might close the doors that you don't care
about right um so i had a student i think i've
talked about this on on um i've talked about this on stream i had a student

00:44
that wanted to build uh a weed delivery app there's like an app to deliver weed
and i was like it was like and i was like okay that's that's great
can we do coffee instead like can we just can we just like make
it a coffee delivery app and like wink wink between me and you like we we know
what it really is and they were cool with that right they were they were cool
with that they're like all right we'll just make it it'll be a coffee app and
then when they were done they just like had their own internal version that was
like the thing they actually really wanted to build local commodities
delivery app right and i thought that was a really good compromise because
they got to build the thing they really wanted to build but to anyone that was
like looking internally um they saw a coffee delivery app
and then like three years later some another student had the same idea right
student had the same idea and i was like
hey the person that passed made a coffee app they're like nah

00:45
i'm like what do you mean they're like nah i was like okay like that's cool you
know your clothing doors are like great i want those doors to close like we had
that conversation and it boiled down to like i want the places that aren't
comfortable with me like smoking to to to like i'm just not going to be a good
good fit for me and they went on to have
a phenomenal job right so i've seen both tokens it's up to you how you want to
play the game i'm going to show you how to play the game it's up to you to
figure out how you want to play it right always
always up to you to figure out how you want to play the game
and so you got to think about that that's like an internal um
that's like an eternal like i can't make that choice for you cool all right so
um we're going to build a to-do list we're going to build a to-do list and
the to-do list is going to follow this pattern so let's take a look at our
to-do list here the code is already on discord if you

00:46
are new around these parts uh discord is the best place to kind of figure out
what we're doing day to day i can do exclamation point discord uh to join 38
000 other people we're now discord partners let's go um so yeah if you need
the code or you need help as you're working through this code definitely
join us on discord that's where it's all at all right so here's our to-do list
on my to-do list right now i have get oat milk and get fancy bread uh i can i
can remove stuff i can add stuff most bread is horrible these days i
don't know how we've messed up bread so much
but it's really hard to find good bread [Laughter]
true i couldn't get that so i joined a staff hey

00:47
turn up any means necessary let's go [Laughter]
congrats on the new gig again they're so lucky to have you mess it up
help us out is is poised to be amazing and so i'm
glad you're there to help make it that way cool all right so we we added items
right we removed items um notice that we have something really beautiful here in
that it tells us how many things are left to do
and we can even mark things as kind of complete
right so when i mark it complete notice my to-do's have dropped
right to-do's have dropped right and so last thing we can do is we saw that we

00:48
were able to add remove update and delete that sounds pretty pretty cruddy to me
[Music] got him [Laughter] it's like uh my my child was born and i was like
ah dad jokes my um my sister got me a a dad jokes book it's
lit i'm i'm all about it you got good dad jokes send them to me
that's the only dms i want the only dms i want are like good dad
jokes you got good dad jokes blow out my twitter dms please all right
so we have our fancy to-do list it's working uh what i want to do before we
start really getting into code right before we want to get really into code i
want to break down what's happening here like i want to i want to talk about the

00:49
requests that are coming through what's happening and
then we're gonna look at the code okay all right
so we're looking at our to-do list what are some crea what's the create
request that we're seeing we're talking about crud create read
update delete what's the create request that's coming through
yeah when we're adding an item right we're adding an item uh to our list and
so if we're adding an item to the list there are some steps that are going to
come through um how are we actually making that request like how are we
saying hey get fancy bread how did i make that request chat
yeah there's a form right we have this lovely form

00:50
and we're submitting this form and when we submit the form we are
sending a request to our server right so if we were to draw this out
we have a client side we have a client side and on that client side is a form
right and when we submit that form we are sending our requests to our server now
there is some code running on our server that is set up to
hear that request and what is that code what we call the code that set up to
hear our requests yeah we got our api right and there's some code running on

00:51
our api right and when we make that create request
we're actually making a very specific kind of request
right we're making when we submit that form we're making a post
request right we're making a post request right that's just the the method
that we're using right that's coming from that form submission is a post request
that request is making it all the way to our api
and our api set up to hear that post post and don't worry we're going to dive
deeper into the code after we like walk through how all this is coming together
okay here's that post and once it hears the post what do we do
like when we hear that post what do we need to do once we hear that post
respond is the end we got a lot of steps in between hearing and responding right

00:52
a lot of things that we got to do uh once we hear that request
all right so we're going to set up our application right
our application is going to grab whatever whatever came along with that
request we're going to grab the thing that came along with it remember we're
trying to like add something to our list so we're going to get
i'm going to use a different word we're going to grab the item
that came along with that post request right when we submitted that form we
sent a request and along with that request was all this data including what
was inside of the form yeah the rec.body had all the information about what was
inside that form and we're going to grab the value out of the form
all right once we have that value that was in the form it was in the form

00:53
what are we going to do with it we have we have the the fancy bread that
was in the form when we submitted it what are we gonna do with it
yeah we're going to add it to our database right we're going to add it to
our database great and then once we've added it to our database
what are we going to do next what's the what's the last thing we're going to do
here for the fancy bread yeah we're going to we're going to tell
the the client hey everything went well we're going to respond
saying everything went okay and that you should probably refresh

00:54
all right everything went okay and you should probably refresh all right and so
that everything went okay you should probably refresh goes back to the client
the client's like okay everything went okay and i should refresh
and it refreshes and when it refreshes what type of
request does that actually make it makes a get request and a get request
is a whole other separate set of instructions remember we got our smurfs
on the block by themselves holding it down we have a smurf that's listening
for a post request we're gonna have a smurf that's
listening for a get request and they're all going to do different stuff
right they're all going to do different stuff so our app.post
grabbed the value that was in the form and added it to the database right
the get request is gonna hear that request it's gonna go get stuff from the

00:55
database right so each of these requests are gonna do different stuff
and when we come back from break we're gonna see it in action so let's go ahead
and take our five minutes on the clock please
when we get back from the five minutes we'll look at the next request which is
our get we're gonna look at our our put we're gonna look at our delete and once
we feel comfortable with that's actually happening we're going to look at the
code right we're going to look at the code and make sure we understand what's
happening in the code base as well when we come back we'll also we'll look
at when i'm not going to say it because then people will do it but uh when we
come back we might look at a look at some i don't know it might have been a
secret raffle or something i don't know maybe maybe maybe all right um
[Laughter] i'm getting dissected in interviews oof
the hunt is rough i'm telling you the hunt is rough it's the hardest part of
the process right hardest part of the process
yeah somebody said who are they they're exactly

00:56
amazing tech folks who build right build stuff in public uh really just
fun people to hang out with while you're
coding i i like streams where i can just kind of like
be entertained but i'm also like motivated at the same time because
sometimes that's what you need sometimes i sometimes you don't need me
showing you how to code sometimes you just want to watch somebody just
ball out or just have fun with it like you sometimes you're just in that moment
where you're like you know i just want to have fun with it and so i always
watch them because it helps me have fun while i'm coding um
and uh it's a good community too i'm literally just watching you work and
watching you right now yeah i'm glad we trade off that's awesome
uh i got lucky the only tech question i got was explain double equals equals

00:57
triple equals [Applause] you know enough folks you know enough
you know enough see and when i try to tell people this they think i'm just
like the wildest person i get like these like like weird dms
that are like you're you're leading people astray like this is not the way
to do it i'm like bruh have you seen them people have gotten job like they're
just like they can't believe it right most people only have like
the microcosm of their experience interviewing
and they think because they had to delete code their eyeballs out they were
applying for the wrong jobs they weren't connecting they weren't actually
networking their way into opportunities they were just clicking apply when they
see someone that has double equals versus triple equals as their interview
question their whole like internal system just like shuts down
exactly they're big mad and so when i get out here and i tell people

00:58
look half the people had interviews when half people i'm telling you get
interviews that's it that's double equals versus triple equals i got what's
the difference between while and do while exactly like these like simple
like like you kind of got to know your stuff like
to get these but they're not like the the things that are just like completely
out there that you're like grinding away from no
network your way into applications study the bank know
how to talk about yourself have strong projects that you can show folks right
right and then we'll add all the other stuff but
you are enough you know enough you have the skills to get a job the hunt
is the hunt for a reason every time you go on a hunt you don't
get in you don't you don't get a you don't get a kill
right every time you go out on the hunt you don't get a kill right and so
sometimes you come back to feed it sometimes you come back hungry

00:59
right sometimes you put you put a lot into these interviews and you come back
hungry part of the process but i'm telling you
there's so many opportunities that you are ready for
you just gotta keep pushing along with the process pretty cool yeah
crispy nugget what's going on been a minute good to see you
discord asked very practical front end questions i had to build two things out
you could use any framework but i picked react and typescript that's dope
my wife rufio had a great stream on learning how to talk about yourself
positively last week let's go all right everybody let's take a look at
this again and uh i'm going to delete this here
leon we've done this all right i know we've done this already we're

01:00
we're we're hammering it in because this is the most important stuff right like
this is it if you can if you can understand what's happening in this
to-do list you can build whatever you want
yeah you're gonna you're gonna have to google a lot you're gonna have to like
use other frameworks libraries but like this is it this is this is this is the
the the taking the lid off the cookie jar and you can have as many cookies as
you want scenario right and so we've been away for a little
while we were on a break right i want to make sure that we're transitioning back
into the stuff that matters give me a class to transition back into
the stuff that matters let's get our space repetition in and let's do the
stuff that's actually going to move the needle as you start to build your
projects i want lots of cookies um i don't know if i talked about this on
stream uh but my uncle one time was sitting in the kitchen eating cookies

01:01
out the cookie jar and my grandmother says uh what are you doing those are dog
biscuits and my uncle just looks at her and goes
and kept eating the dog biscuits [Laughter] they're good they're good right
and apparently most most like i think it's like a i don't
don't quote me on this don't don't don't go out eating dog and cat food because
somebody on the internet told you that it was true
but i've heard that most cat and dog food is actually like human safe
because people do eat it like it's a thing like during the depression people
ate dog and cat food like people are out
there and they they use it as a means of
sustenance so apparently in the us it is
a real deal so my uncle was a g and just ate the dog biscuits because

01:02
he liked them yeah all right cool let's go ahead
i so true i don't know if you're still here or not but
there's something very different about streaming versus like trying to do
youtube videos like i've been trying to do like i've been like building up a
backlog of videos before i start releasing them like shorts tick tocks whatever
it's been a lot of fun but the amount of edits i have to do to
get like one video as opposed to just talking on stream is just like it's just
astronomical i have no idea what the difference is my brain just talks when
i'm on stream and does it when i'm trying to record a video and sometimes
we wind up with silly stories so i'm sorry you have to deal with the silly
story sometimes but it's just how my brain works if i don't if i don't do it
then we don't get class so all right let's get back into this
talked about crud the creating right the creating so we're going to add biscuits

01:03
to our to-do list and when i add the biscuits i have created i submitted
this form i submitted this form and out here in the internet was my server
right when i click submit on that form what type of request did i make chat
what type of request did i make when i submitted that form
people forgot about the engagement thank you for the engagement
it's a post request exactly so we make a post request to our server now
there's something on our server that hears that post request
right that here's that post request and then knows what to do yeah that code

01:04
is our api api cool there's some code on our server
that we wrote that we wrote that's on our server that here's that request
and when it hears that request we've coded it to do something very specific
so that code said all right if there's a post request
right if there's a post request what i want you to do is
when that post request came through there was a bunch of data that came
along with that post request right somewhere in that data that was sent
with the post request somewhere in that data that was sent
with the post request deep in that request body exactly there was
the value that was in that form of biscuits so what we're going to do is

01:05
we're going to grab that value out of the request body
all right we're going to grab that value
out of the request body and once we have that value
what are we going to do with that value yeah
we're going to put it in the db we're going to put it in our database we're
going to take that value and put it in the database beautiful
and then once that value is in our database
right once that value is in our database we're going to respond
we're going to respond saying everything was okay and that you should probably
refresh right everything was okay and you should probably refresh

01:06
and when that page refreshes right when that page refreshes
what type of request have i made just that simple act of refreshing gotta
be careful with that one the simple act of refreshing right
makes a get request right so we have our server
have our api code that's listening for these requests and we we make that
get request to our server and the api code is listening it says
all right app dot get this is a little different
a different smurf here is that get request right a different
a different smurf here's that get request right and it's like all right that
smurfs on the block by himself they know what to do

01:07
here's that get request right right here's that get request
and what does it do what do we what do we do when we hear the refresh the get
request what's going to happen yeah we're going to go to the database
we're going to go to our database the smurf is going to get every single thing
that is in that database right it's going to get
oat milk it's going to get fancy bread it's going to get this cuts
right it's going to get the oat milk it's going to get the fancy bread it's
going to get the best cuts all right and once it has all those things
from the database what are we going to do with all that data all those things

01:08
that we got from the database what are we going to do with it
we're going to throw it into our egs we're going to render out some egs remember
our ejs is a template right it's a template and we're gonna plug some stuff into
that template we're gonna take the things we got from the database and
we're gonna start plugging them into our template and when we're done
rendering out that template when we've taken everything that was in our
database and we've plugged it right we've plugged it all
into that template what gets spit out of that template what gets bit out of that
template you all ready to work at the agency we
don't we we can we can we can you're all ready to work at the agency we could uh

01:09
fresh coffees in the coffee machine go for it uh feel free to go grab you some
you deserve it go get yourself some coffee we'll come back we render it out
right we render it out we get html right we render out the html
and then we respond with it right we respond with the html
right and that's how we can see what's on the page we're responding

01:10
with that html right so now we've talked about the creating and the reading
and i want to stop here i want to see that code i want to see the creating i
want to see the reading i want to see the database i want to see how it's all
right i want to see how it's all coming together and then we'll do the updating
and deleting as well right so if you don't have the code
the code is on our discord exclamation point discord if you're new
around these parts right gametech said hey newly joined how do i
catch up exclamation point 100 devs will tell you everything you need to know
about the program that we're running join us
amazing community to learn how to code online all right so let's go ahead and
take a look at our code here we're going to ignore all this stuff for
right now and we're going to look at our get request

01:11
and we're going to look at our post requests which one should we start with
let's do get or post hit post one minute start pull
all right i'll let you decide get her post that's what we'll start with your
dealer's choice well chat's choice yeah chat's choice
bob we are voting on whether we look at the gets or the posts first gets winning

01:12
i think post maybe a little easier to start with but we'll go again
all right we're we're approaching the the minute end here 65
in the lead with get post is creeping back up the gets have it all right get one
let's go ahead and take a look at the get first all right so
here's our get code real quick what are some ways that i could trigger
this get request what are some ways that could trigger my get requests
refresh is probably the the way that we're going to see it right now so if i
was to refresh my page on localhost 21 21 21 21 21 and i got to record that 21

01:13
21 21 21 21 hey does this work 21 21 21 21 21 hey does this work 21 21 21 21 21
[Music] hey does this work 21 21 21 21 21 all right all right we're back we're
back we're back all right all right we're back sorry i'm a little too much fun
all right so we refresh the page we refresh the page right we refresh the page
and that makes a get request to our api code right let's see how our
api code is coded to hear that get request let's take a look

01:14
here's the get requests now i have some stuff commented out here
this comment that code out here is if i wanted to do like an asynchronous
function which we definitely want we're going to move towards that but i want to
show you the slightly kind of older school way our our lovely promised
chains right and so the the idea here is like we'll we'll do this in the future
because it's cleaner and easier to do but i want to show you everything right
and the async is still there it doesn't really matter right cool so we are
listening for a get request and here is our route
why is it a forward slash like why is the route forward slash
what is that telling us yeah it's telling us the root yeah it's the root
exactly the main page the root page right so we could listen for get

01:15
requests on any of the different pages any of the different routes but the home
page the main page the root page is always represented with the forward
slash or is typically represented with the forward slash so
we could have many get requests and eventually our applications will have
dozens and dozens of get requests but we're listening for the one on the root
the main right great when our code here's that get request
we're gonna do some stuff the first thing we're doing on line 28
is we are going to our database now above our ap like our above like our api we
connect it to our database i'll show you connecting to our database in a little
bit right but we can just trust that the db
right db is holding that connection to our database so wherever we see db we
know that we're already connected to that database and that's what we're

01:16
talking about we're talking about the database our mongodb database great so
we heard the get requests we go to our database and we find the collection
in our database called to do's now remember our mongodb databases are
made up of collections and inside those collections are what
what goes inside of our collections documents nice so we have our
collections and inside of our collections are our documents right
and our documents we're going to say find them all
so we're going to find all the documents inside of our to-do's collection so
let's go ahead and look at our database let's look at the to do's collection

01:17
and see all the documents that we're going to find
so here we go this is my [&nbsp;__&nbsp;] database right
it's not refreshed let me refresh it just make sure that we have all the
latest information beautiful and we can see here that i am in the
to do's collection right we see that we're in the deuce collection and here
are my documents that are inside of that to do's collection
right we can see right now right we can see right now that there are three
documents inside of my to do's collection so when
i'm looking at the code and i say all right go to the database
go to the to do's collection and find all the documents we're going to find

01:18
three documents inside of that collection now what's something that we can
use to hold all three of those documents
remember those documents are really just what so those documents are really just
objects so what's something that we can use to hold all three of those objects
right is an array exactly i see a lot of you
saying those documents are objects which is correct and we're going to put them
into something that can hold all of those objects which is an array so
that's why we say to array right we're saying hey go to the database
find the seduce collection find all the documents we found three of
them in that to do's collection and now we're like trying to juggle them and we
we can't juggle them so we put them in an array that makes sense
right we went to the database we found the right collection we found the

01:19
documents and we put them in an array cool
we put them in bill gates toaster got it exactly man we
we should i wouldn't do that i wouldn't i've been
trying like i i i like when i set my mind to something i do it right and so i
really want to do more like shorts content because i i think that's where
i could add some value to folks and so i've just been consuming
way too much tick-tock and youtube shorts and stuff like that so my brain's
a little mushy but i think it'd be really funny to do like videos
that were just like our memes so like we're teaching but we're only teaching
using our memes right like we put it into bill gates toaster
right we didn't get got we went and got right we carried some boats and logs we
put it inside the toaster and just just like

01:20
this 100 memes that only we would get but it would make sense right the smurfs
heard it right like there's we got enough to do it all right cool
so we went to our database we went to the to-do's collection we found all the
to-do's all the documents in that collection we put it in an array and
what we're going to do is pass that value that array
that array that is holding right that array that is holding all of the to do's
we're gonna pass it into this then underneath the variable data and this is
where it gets a little it gets a little tricky right does two array return a
promise right well let me ask that's a good question to ask

01:21
does this return a promise good question does that return a promise
we're gonna say yes and um we can see that it does
because we got the then chain right we got the then we got the catch
right and so technically underneath the hood that's kind of what's happening we
don't have to know that though we don't have to worry about that at all like
let's not like get let's not get deep into it but what we're gonna have happen
is that this is going to return an array and that array is going to be held in
the variable data or the the the parameter data so wherever we s yes
because the documentation says it does exactly
wherever we see data right wherever i see data inside of this den what is data

01:22
it's the array all right that's the biggest jump i
think it's where i lose the most people so i'm going to say it again
right i'm going to say it again we went to the database
we went to the to-do's collection we found all three documents right all
three documents in that to do's collection
and we put all three of those documents into an array
so now we have an array holding all three of those documents we said that
those documents are really just objects we have an array holding three objects
and we pass that array into the parameter of data so wherever i see data
it's really just that array holding those objects cool

01:23
now we got some other complicated stuff that's happening here
i'm going to ignore this line for a second i'm going to ignore this line here
and this line here just for a second just to take a look at line 32
take a look at this line so i went to the database i found all
the to-do's i put them into an array and now i have to take those objects and
what am i going to do with those objects that i got from the database right my
objects are sitting in an array what am i going to do with those objects what am
i going to pass those objects to yeah i'm going to pass all those objects
into my template into my ejs right so that's what this
line here is saying this line is saying hey i am passing data into my

01:24
ejs template right i am passing all of those objects that are inside of my array
into that template now i've given that array of objects a name
that array of objects that i am passing into my template i've given them a name
and what is the name that i've given them
items exactly i've given it the name of items so when i am looking
in my ejs template i'm not going to see the word data anymore
i'm going to see the word items and wherever i see items that is my array

01:25
of documents cool so we went to the database we found the
news collection we found all the documents in that collection we put them
in an array we pass those documents that are inside of our array into our ejs
under the name of items why rename it this pattern
has more use the deeper we get into this stuff right
it's a key value pair we could have we could have kept it data and been fine
but getting used to this idea of key value pairs being passed in
is helpful it can help with readability there are some benefits of doing it this

01:26
way but for now we don't have to big brain it we can just say all right
we gave it a new name of items that's it went to the database
found the collection found all three documents in that collection put it into
an array now we're going to pass that array
into our ejs template with the name of items so if i'm ever
looking in this ejs template and i see items i know that it is my array of
documents cool so let's look at that ejs template views views from the six
running through the six with my wolves i was running through this with my wheels

01:27
all right cool here we are here is our ejs template
here's my egs template i'm gonna see some things in here i'm seeing items items
items items when i see items what is that really
what is items holding what is items holding
i was running through this six with my code that's great
it's our array of data it's our array holding all of our objects that came
from the [&nbsp;__&nbsp;] database exactly let's go
we out here learning so wherever i see items it is really my array of three
objects right wherever i see items it's really my array of three objects

01:28
so what am i doing in line 23 what what what am i setting up here
i'm setting up a for loop that's going to run how many times
yeah i'm iterating over the array all right
how many times is this loop going to run yeah it's going to run three times
because items.length right if items is my array
holding all of my objects and there are three objects inside of it
right and that means that this loop is going to run three times
and the cool thing is each time it runs i is going to go up by one right so the
very first time this runs we have this item zero here this items zero here
right this item's zero here and item zero is going to enable us to

01:29
grab the first what out of the array exactly going to enable us to get that
first element out of our array our first object out of the array
and once i have that first object i can access all the properties on that
object let's look at the first object that we know would
be in our array where can i go look to see the first object that would be in
our array [&nbsp;__&nbsp;] exactly mongodb let's go back and take a look

01:30
here we go here we go all right so we have get oat milk
and if we look here is the first the first object right the first object
in our database and so that's the first object that
would come out of items right item zero is this get oat milk right we can see
that it has an id property a thing property and a completed property right
so if i did items zero thing what am i gonna get
if i do item zero thing what do i get get oat milk
all y'all getting oat milk ads all y'all getting oatmeal cats now

01:31
oatly gonna be all up in your twitch feed [Laughter] y'all got got you know what
i was in the 100 devs boardroom right and i was trying to get new sponsors to
help the community and so uh we we've came to conclusion if oatly
you want to sponsor any of the major oat milk manufacturers
we'll take it to the board we'll we'll get you involved let us know i'm happy
to to help you come to the 100 devs agency if you need help with your your
your your web presence we got you right so just saying all right now the first
document the first document that came out of this
this array would have an id property a thing property and a completed property

01:32
so let's go back and look at our ejs right
let's ignore like this complicated bit right here and let's just look right here
items zero thing right items zero thing would excuse me would give us
get oat milk right items zero thing would give us get oat milk
that's the first right we have three it's the first document
and it has a thing property so if we're really talking about an array of objects
right an array of objects this zeroth index would be this document right here
right would be that document right there and so when we are looking at our ejs

01:33
that first document item zero thing would actually be get oat milk
right would be get oat milk beautiful and what we're doing is we're putting
get oat milk into a span and when we put it into a span
that's what enables us to see it inside of the dom here right
i'm still a little confused about the thing property i made it up
all right when it came time to put the values into the database because
remember we decided to do the get first you chose the git first
you chose to get first right when we put
all that data into our database we chose to give it the thing property that's it
we could have called it lord of the rings right and it would have been lord

01:34
of the rings get oat milk right that we just chose thing okay
now is that a good naming convention absolutely not
bad naming convention but i threw up tina where were being bad as you're
writing bad code right so we saw that items zero dot thing was get oat milk
what would items what on the next run of this loop i will
be one right i will be one so what would items one dot thing give us
yeah that would totally give us fancy bread right the next object in the
lovely array that we got back from our mongodb would
give us get fancy bread and then we could also say all right items

01:35
two dot thing would give us what items two dot thing would give us what
we can take a look this cuts right would give us this cuts
right this cut all right this cut would would be the third thing
that would show up and we can take a look and we can see like all right we
got like a span it's inside of an li so each time this loop runs it's going
to run once for each item right it's going to run once for each item that's
in our collection and each time it runs it's building an li and that li has a
span in it and that span has the value that we got out of the database right

01:36
cool choco pie with the prime thank you missed you too i appreciate that
all right uh somebody said wait isn't items.length three it is right
um it is so what what happens what happened here
so we're on two right so we did zero one two right we did zero one two
and now we're at the end of our loop and we try to add uh 1 so we're at 3 is
3 less than 3 no so our loop stops right our loop stops and we never get to
the three good question good question because it's the less than right you add

01:37
the less than there cool all right now there is something
slightly more complicated happening here right there's something slightly more
complicated happening here and it's this conditional that is inside of the li
it's this conditional that's inside of the li now what is happening inside of
this conditional what is this conditional helping me to do well what is it doing
it looks like it's the same thing we're saying all right add a span here
or add a span here it has the same content in each of the
spans so why have a conditional there yeah it is the
giving it of the completed class so i'm saying hey if this property is true

01:38
then i want the span i build to have the completed class if
this value is not true i don't want it the span just doesn't
have the completed class so i'm either building a span that has the completed
class or i'm building a span that doesn't have it and if we look at our
css go to our public folder go to our css go to our style.css if we look at
our style.css the completed class gives a gray color and a line through right
all right and so eventually what i can do eventually what i can do
as as this page is building i can always just check
hey has the task have the value of completed or does it not because if it
does we're going to make it have the line through and if it has been

01:39
completed it's just the normal span right we're just toggling it now
somebody said when do i know to include this in javascript or something like
this we're we're still kind of in the early stages of seeing some of this more
advanced stuff but the thing i'm asking myself is i want to store this over time
right if it was just client-side javascript that was doing this stuff
what problem would i run into if i was just keeping track of this stuff by a
client-side javascript what would happen yeah no data persistence every single
refresh right every single refresh poof i wouldn't know what was completed
or not completed so where am i actually storing

01:40
whether or not a task has been completed where am i storing that
yeah i'm storing that in the database we
could use local storage i see some folks throwing out local storage that's true
i am storing whether or not the task has been completed in the database and it's
just one very simple thing if the task has been completed
i change this from false to true right and if it's not complete uh if it is
complete sorry if it's not complete it just stays false right so if i have to
complete the task it stays false if i have completed the task i change it to
true and this sounds like a really good case for what type of request to our
server what type of request to our servers gonna handle this like completed
or not yeah our put or our update exactly our

01:41
put or update's gonna handle this stuff cool alrighty so
that's everything for the get right so we let's go back and take a peek at this
we went to the database we found the to do's collection we found
all the documents in the todos collection we put all three of those
documents into an array then we pass that array into the
variable or the parameter data we can see that we then pass that array
into our ejs template underneath the name of items so wherever i see
items inside of my ejs wherever i see items inside of my ejs
that's really just the array that's holding all my objects uh since there
are three objects in my array this lovely for loop in our ejs is going to

01:42
run three times and then i'm gonna build an li for each
time this runs and i'm either gonna build a span that has the class of
complete it making it like gray and strike through or i'm gonna build a span
that's just normal right and so whether or not it's
completed or not just happens has to do by looking at that document or that
object and seeing if it has a completed class of true we'll handle that
completed or not when we get to the update and that'll be a little bit
further down the line cool questions while we're here about the get
oh where's the response coming from that's great so once
when i say render like i just highlight this piece here what is getting rendered
what is getting rendered when i say when it says render ejs what does that mean

01:43
what is b what is being rendered out yeah the html so you can think of all
this rendering winding up being an html file great
and what the heck do i do with that html file i respond i respond i respond

01:44
i respond with the html file i respond with the html file okay got that cool
somebody said does this thing work my version works your version doesn't
if you just clone down this repo it won't work because you haven't connected
your database hey does this work no you would have to do like your mpm
install you have to create your env file
all of that all those steps can be found in the what
all those steps are at the end of our what at the end of our slides
the slides have like the step by steps on how you're going to do that um but
somebody actually submitted a pull request uh for an updated readme that i'll
approve the pull request after class that had like more detailed instructions
on how to get it running so i love that i love to see it community

01:45
taught folks community taught thank you cool all right so we respond with that
html file that came from the ejs and that is how we see everything
that is now on the page in the dom questions before we take our break
we're going to walk through how to set up the env file we're going to walk
through um how to do the rest of this yep minewolf already did it too mine wolf
can you dm me the video where you walk through that just so i can link you
after class please someone please tell me to make my vs
code smaller you mean like the text you can change the font size inside your
settings is the database to do's and api it's part of our api the api is all the

01:46
pieces right the api is the the get the posts
the put the delete like all the code that we wrote to hear
what's happening in our application right
all the code i wrote to here like those requests and then the stuff that i do
that's our api like we get to write the code that hears those requests and we
get to decide what happens all of that is our api
oh if you have my code there's probably the vs code
settings.json and you'll notice that i have my editor set to 42 and my terminal
set to 42 so that folks can see it easier on the screen when i'm streaming
but you can just change that size or do it in your settings
delay that folder that folder should technically be in my what i just forgot it

01:47
that folder should go into my what my git ignore yeah so when i when i uh
push changes i'll put it in my git ignore so it doesn't pop up
all right any other one more question before we take our break
db's like i got this seven minutes on the timer
cool all right uh get ignored somebody said let's get ignored get ignore is a
file that you can put the things that you don't want to be pushed to github
right so i don't want to push my node module folders because it's typically huge
and i don't want to push my env file because that's where all my secrets are
right and i don't mean like my deep dark secrets i don't want anybody to know

01:48
about i mean my like my connection to my database or stuff like that
so i put that in my env file i'm going to show you how that works uh
if we don't get to it tonight we'll do that on thursday i'll walk through how
it works and all that stuff but i don't want those going up to github so
people can't can't yank them i keep my emotional issues in there
all right folks let's take our break should we do leak code over code wars
uh i think you should do code wars until you feel pretty comfortable
um with code wars and then once we hit the hunt we switch delete code so
for folks that are like data structures algorithms ah right we were like data
structured algorithms ah we're not there yet i'm i'm gonna
we're gonna do daily data structures and algorithms prep i'm going to walk you
from like very simple code to another coding challenge to another
coding test another coding challenge and through these coding challenges we're

01:49
going to build up from kind of like no data structures and algorithms knowledge
all the way through like hash mapping with the best of them right and so we
did it last cohort and it was my it was probably my one of my favorite parts of
the whole cohort was just like being in those discord voice calls working
through the code together and so we're going to do that you're going to work
from like just very basic like functions all the way up to the
complex data structures algorithms that you'll need for your your interviews so
we're just not at that point yet it's coming for now i think code wars are
good because they're easier to get into uh you can do one a day but if you're
already done i just like somebody's tweet i'm gonna retweet it later
they did all the eight keys like there's
no eight cues left so if you've done all the eight cues you're like done the
seven cues like you're halfway through and you want a little bit more of a
challenge start throwing in some of the leak codes as well
like i'm asking you to do a coding challenge every day

01:50
you don't have to make it hard on yourself do the easy ones for right now
right like do the easy ones get the habits the important part the whole part
of this right is the habit right remember we are going to be software
engineers for our career right and so we want to we want to develop these habits
so we can do the heavier lifting when it
comes to data structures algorithms leak codes stuff like that right we want to
be able to carry these these concepts into like our day-to-day life
as a software engineer so when you're working on
code at the agency these data structures numbers might pop up and so it's not
something that you want as like a one-off thing right develop the habit
now of doing the coding challenges so that by the time we get to the hunt you
feel comfortable ramping up your data structures and algorithms knowledge and
then that knowledge stays with you like once you understand certain concepts

01:51
right once you understand certain concepts they just don't they don't
leave you as a software engineer once you understand i'm going to say
hashmap again but once you understand hashmaps like the the funny thing that a
lot of my students do is every problem solved with a hashmap for like two weeks
right like i don't care it could be like a css problem and they're like how do i
hashmap this right like um and so those those like it's it's like a it's
like a it's like it's like a level of in i don't want to say enlightenment but
it's like it's like like a whole new level unlocks in your brain
once you start to add these data structures and algorithms to your
repertoire and we're just we just don't need them yet so don't
burn out and don't push yourself if you don't need to
right they're really fun they are really fun cool all right
let's keep pushing here so we did the get first now it's time to do the post

01:52
uh so let's go back and take a look at our post and i'm going to add something
to the to-do list and so let's go ahead and oh yeah
hold on one second let me pull that up there was a raffle today
so i am going to grab those responses from the raffle real quick
all right let me pull up the raffle raffle names name picker
all right so we have 819 people that opened the uh

01:53
that opened the email and filled out the the form for the raffle um one of the
the interesting things i find myself doing uh is kind of
i have a lot of time where i only have one hand
because i am holding baby with the other i've gotten really great at like
responding to like emails i've gotten really great at um
like even like doing some mild coding uh but a lot of times i'm just by myself
like in a dark room holding my child and they're knocked out of sleep right
and so i was like this would be a really good time for coffee chats to keep
myself awake to help some folks that may be
struggling with uh things as we get into
the hunt uh and so to help me stay awake and to uh help
folks that might need it i'm gonna open up some coffee chats i'm just gonna do
i'm gonna go slow but coffee chats are one of my favorite things to do with uh

01:54
last cohort i really want to incorporate them uh with this cohort so
uh the people that win this uh raffle will be the first pers people
that i will um do coffee chats with so let's just pick three for now and uh
you'll get a message from me on twitch about setting up the coffee chat and
we'll make it work so three for now pick random names all right chapel zrt
and james congrats on the win uh you'll get a message from me on um
twitch uh i'll try and do it after stream but um probably tomorrow if i if
i can't write after stream so uh you'll get a message from me let's do our
coffee chat congratulations on the win let me put this over here so i don't
forget it and um we'll start the coffee chats up again
back in the day i was doing like like 10 20 a day i don't think we're
gonna get up to that level but i do want to incorporate them back in so super
excited to start talking to some of you all one-on-one happy to talk about

01:55
anything that you want to talk about sometimes folks want to um uh just kind of
get some help with crafting their story
or just want to shoot the [&nbsp;__&nbsp;] that's
cool with me uh folks that have redeemed the
portfolio reviews and things like that through the channel points i'm gonna
start reaching out to you all now that i'm back in the mix okay
all right so let's get back into this um let's get back into the mix with this
to-do list and so let's go ahead and do our post how am i going to
how am i going to submit this post thanks grandma exactly thanks graham

01:56
how am i going to do this post yeah i'm gonna submit the form
yeah i'm gonna do submit the form and when i submit the form it's going to
make a post to my server so let's say we put in something let's put something in
here put in coffee because we were talking
about coffee chats i click submit when i click submit i make a post request
to my server so post request leaves my client side goes to my server side
on the server is my api code part of that api code was an app dot post
and where does the route come from where does the route for the post come from
yeah if we look at the form let's use our inspector if we look at the form

01:57
there is a action on the form sorry it's kind of hard with
the stuff on top of it there's an action on this form called add to do
so that's going to wind up being the route for this post
request coming from this form the action is what express which is handling our
api is going to listen for to know which post we're talking about because we
could have 20 different forms on this page that are all making posts right and
so the action exactly grizzly is the route in this case so
let's go ahead and draw that out again so we had uh the post requests
that made it to our server server had some api code right
it's beautiful and then we had an app dot post that had the route of add to do

01:58
and that came from the action that was on the form now when i sent
this post request to the server what went along with that post request
yeah that request body goes along with the post and part of that request body
is like we're studying a lot of data i showed it before i'll show it again but
a lot of data goes with these requests and in that request is going to be the
request body and part of that request body is
going to be what was inside that form so
in that request body there's going to be some coffee
right that was what was inside that form uh in that request body we're going see
we're gonna see coffee and how do we know
which input we're dealing with like how do i know like what if this form was

01:59
like 40 inputs deep how would i know which input i cared about like i just
want the thing to do input i don't i don't want any other the inputs that
could be in our form yeah we inspect we're gonna see that our input
has a name property of to do item that's how i can
differentiate between all the different inputs that may be in a form is by
looking at their names so the names on the input so this has to do item so what
i'm going to wind up looking for is rec dot body dot to do item
right that's how what i'm going to look for and in that
to do item input was the word coffee and so that coffee got sent along with my

02:00
post cool now once the request makes it to the server
and the smurf that's on duty to hear the post request right the smurf here's the
post request what's the first thing my smurf is going to do
what's the first thing my smear we all know what coffee means yo [Laughter]
oh i got a vip hold on [Laughter] where's where they at oh you all went too fast

02:01
y'all went too fast there we go all right maxwell wins gets vip you make
me giggle out loud on stream you know what that does oh all right
coffee chats whole new meaning where's dab shout out dab
where's dad when we need them coffee chats have a whole new meeting all right
where are y'all finding these coffee chats all right
leon's coffee jack gonna be lit all right so we made a post request
along with that post request was all the information that was in that request
body including that word coffee that was in our form right

02:02
and all that gets sent to our server the first thing that our smurf hears right
right the very first thing that our smurf hears is that post request and the
first thing it's going to do is get the value right it's going to grab that
value of coffee so it's going to grab that value from the request body it's
going to look at the request body not to do
item that came along with the request and we know that that is coffee
so once it's grabbed that value of coffee what's the next thing the smurf
is going to do once it has that value yeah all right sage i see you
is going to add it to the database right it's going to add that value to the
database so we're going to go to our database
we're going to add that value to the database add to db

02:03
and then once we're done adding that value of coffee to the database what are
we going to do yeah we're going to respond we're going to respond
and we're going to say everything went okay
we're going to respond thing everything went okay and that you should probably
refresh all right you should probably refresh cool and once we refresh
what's gonna happen once once this refreshes what's gonna happen
what type of request what type of request are we gonna make
yeah we're going to make a get request right and that get request is going to
go to the database it's going to find all the documents
that are in our database but now instead of there being three documents in our

02:04
database there's going to be four right there's gonna be four
all right and that's why we're seeing four items in our to-do list
cool all right let's break down the code uh behind what's happening with this
post let me refresh the the db here um cool
you see that there are four in here it makes a little bit smaller
well that there's one of four so one two three four
documents now in our uh to do's collection cool all right so
let's look at this post all right the post app.post on the ad to do route

02:05
one more time chat where did the route come from where did the route come from
yeah that route comes from the action on the form
that made the post request right comes from the action
on the form that made the post requests beautiful so we could have
plenty of different forms that could all be making requests and we could
differentiate between the different forms based on
the different actions that each form had and then our api set up to hear a post
on that particular forms action cool so the smurf here's that post
request come through and we go to our database that we're already connected to
we find the to do's collection and the reason why mongodb is so beautiful is we

02:06
don't have to big brain and we can we can just go ahead and say insert one
we don't have to learn some fancy querying language we don't have to learn
some some dusty documentation that we have to read through now you want to put
something into the database insert one into the database i love it
baddies friendly exactly baddies friendly all right so we
went to our database we found the to-do's collection we insert something
into that collection why does this why does this look like
we're inserting an object why does this look like we're inserting an object
because we are exactly documents are just objects right and so
we're going to insert that document into our to-do's collection we're inserting

02:07
that object into our to-do's collection and we can tell right off the jump
what properties that document is going to have because we set them up here right
this now is going every single document that goes into this collection
is going to have a thing property and a completed property
i could change these to whatever the heck i want right i could change this to
great rainbow unicorn attack right and now when i insert a document right
when i insert a document into my database right
it's going to have a property of rainbow unicorn attack so instead of it saying

02:08
thing it would say rainbow unicorn attack right and i could change this
to to complete it to something else i could change that to
i can't spell it pretend i spelled out zaboomafoo just percent just pretend i
spelled out zaboomafoo right i could put zab in there right
right and that would work and then each of my documents
inside of my collection would have the property of rainbow unicorn attack and
it would have the property of zaboomafoo total control of what we put into our
mongodb right but that's not really best practice
so i'm gonna leave it at thing for now we could probably find a better name for

02:09
thing maybe like to do item or something like that and complete it right
is this how we make user accounts and such bev it's going to be the exact same
process when we have user authentication and we're storing those users into our
database we're going to have a collection called users and each user is
going to be a document in our collection the only thing that would be a little
bit different is that we're going to do something called hashing so we're not
storing their password like in plain text in the document but it's the same
same idea whatever type of data we're trying to store we're just going to make
a collection for that data right and we're going to have a document
for each piece that we care about cool uh has anyone seen a good article

02:10
explaining schemas we're not there yet we're gonna we're gonna get into mvc and
then we're gonna talk about once we have a basic idea of mvc like model view
controller we'll get really and we'll get into like schemas and stuff like
that in depth at first you don't really have to really worry about it when
you're first building but over time it makes it way more maintainable to have
that type of stuff cool all right hey just started can you start
at the beginning uh catch the vods the vod is always immediately available
after stream and then all of our classes make their way over to youtube as well
exclamation point youtube if you get stuck or have questions come to our
discord exclamation point discord this is clicking more tonight glad to hear
that fairy i'm excited for you good for all of us but that's great to
hear that it's clicking more for you all right all righty so
we had that to-do request sorry that post request that came along

02:11
when that smurf heard the post request we went to our database we found the
to-do's collection we inserted a new document a new object into that
collection and that object had a thing property and a completed property now
the completed property we hard code it right there's there's no way that we
could change what this was like we just hard coded right we just hard code it
false so it doesn't matter what the user submitted in the form it doesn't matter
what they did every single document that we're creating is going to have a
completed property of false right so there right now there's no way for
somebody to like submit a to do that's already been completed we've just hard
coded it however the thing we can grab from the form right so
when that post request comes through right when that post request comes through

02:12
um we can grab from the request body the information they sent with that form
right so if we look at our ejs we can see that our input
has the name of to do item when this form submits a request that request
body is going to be sent all the information that was inside that form is
going to be sent and we can join it we can do request
dot body and grab the value that was in that
grab the value that was inside of that input by using the name right so we see
it has the name of to do item we can grab that value should we want it rec

02:13
dot body dot to do item will give us the value that comes out of the input cool
let's uh let's see if we can um console log this actually
so let's go ahead and just do a uh console.log and we're gonna do
we're to do rec i'm sorry i'm so used to shorting it with wreck request stop
well let's just do the whole request and then let's console log
the uh request.body just so we can see it cool so i'm going to show my server
restart it all right port 21 21 21 21 all right
and let's go back here and refresh all right and let's add something to our

02:14
uh stream to-do list watch mine will stream tomorrow tomorrow
there we go beautiful cool so i'm going to submit it
and so i now have on my list watch mine will stream tomorrow and if i look at my
it's gonna be wild if i look at my terminal here
look at all this crap that was sent with the request
i'm not even going to scroll all the way up but there's just a lot of crap here
right all that stuff is being sent right all that stuff is being sent with the
requests right look at all those chickens right all that stuff is being
sent with that request and what i was able to do was then to
just look at the body part like we can see that the body is here like here's

02:15
the body that was part of like th this up was the request
all that crap is set with every single request that you're making let's just
think about that right you're on your phone every single request you're making
sending all that data whizzing around the internets through the wires through
the tubes around us going across the ocean going out through
starling satellites right like all this stuff is being sent with every request
every request every request right and we're able to
pick apart the piece that we care about pick apart the piece that we care say
that five times pick a part the piece pick a part piece
uh request.body right so we just grabbed we yinked the body
and we can see part of that body was the to do item right the to-do item

02:16
and the value of watch my wolf tomorrow right so we were able to grab that value
that we wanted right out and then we can go a level deeper and
say to do item like i want from that request body i want the to do
item property and that is what gave me watch mine wolf tomorrow right
we're able to dig through and grab the pieces we want out of these requests i'm
going to delete these so we don't have the request each time
blowing up my terminal let me restart real quick all right 21 21 20. and so
we're able to grab the piece that we want and we're then able to create a new
document right create a new document in our collection
that has a thing property and a completed property and now we know
what's also going to be stored so if we go and look at our mongodb

02:17
and we refresh you can see at the end we have a new document
thing with watch mind with tomorrow completed false
can you talk a bit about preventing adding duplicates to the db we're not
there yet we're not there yet uh there are many
ways that we can do that down the line it's not something we want to think
about right now um there's tons yeah there's upsert there's all that fun
stuff we can get into it's just it's just it's a little too
much for right now um i'm happy to do it
like during an office hours or something like that where you can go a little bit
deeper i just don't want to confuse people right now but yeah so we'll get
into it and eventually one of the easiest one of the things that we're
going to eventually do is um right now we are actually

02:18
like modifying and making changes by grabbing stuff from the dom what does each
individual document in our database have what does each individual document in
our database have it has an id so to kind of answer your question
eventually we won't really be using the data itself to find stuff in the
database or anything like that we'll be using the ids
and ids will make it so that we can um edit individual things right
to be able to make sure we're targeting that document and only that document and
then there'll be some other strategies we can use to stop duplicates as well
all right questions about the post oh sorry we did
the post right let's finish it up we added the document to our to do's

02:19
collection that then fires i have a nice little handy dandy console
log so i can see that something happened
and then my response to the client is to do what
my response to the client is to do what my response is to refresh
exactly my response is to refresh when i refresh i trigger a what
when i refresh i trigger a what i get exactly a trigger uh get request wonderful
wonderful wonderful wonderful all right questions about the get in the post
i know we're spending a lot of time on this um but it's really important
this is honestly like the most important stuff that we'll cover because if you
understand how to do a get a post and then a put and a delete

02:20
you can build whatever you want and it's super powerful so if you're if you're
already leagues ahead with this right and you're feeling really comfortable
with this stuff great hop and discord help folks that are little that are that
are struggling with it a little bit right um
and if you're if you're just catching up tonight that's great like that's what i
want you to be i want i want this stuff to make sense we're going to spend
significant time on it because it's just that important once you get crud down
the world is yours can you explain the add to do route
again sure major so the ad to do like how do i know what form is making the post
well if i look at my actual forms they have an action called to do and very
clearly a method called post so when this form submits like when i either

02:21
click the submit button or hit enter it's going to make a post request to my
server right and how do i differentiate between
which form is making the request well it's the action
the action is what i use to make the route for this post if i had another
form with a different action i could have a different post for that
i was having a lot of trouble finding the crumbs going back and forth between
server and egs but tonight's been so helpful for that that's good to hear
um some concerns about how like we're editing the database yeah like right now
like our our updates are like really they're
they're not like how we do it eventually we're gonna be using the ids um that'll
make it a little bit easier we'll be sanitizing all that fun stuff we're just
not there yet let's get the crud basics down and then we'll do all the stuff

02:22
that makes our applications a little bit more robust yeah
uh what does it mean that uh complete it false i want to keep track
of whether or not i have completed the items on my to-do list so i got oat milk
yesterday i got fancy bread yesterday i got biscuits yesterday i got coffee
today so all those things are already done or completed
right so the way i'm keeping track of whether or not they are completed i can
actually show you um when i look at how they're all false right now
right but as soon as i refreshed my view of the database
you're gonna see that all of them are now marked true
except for watch mine will stream tomorrow
because that hasn't happened yet i just haven't marked it as true yet it will be
true but i haven't marked this true yet right and so that that completed is just

02:23
is this what i'm using to keep track of whether or not the user has marked that
value complete and when i insert my documents i'm just hard-coding it
completed of false and eventually when we get to our updates right when we get
to our updates we'll use the update to change this from false to true in the
database or what we can do is if i click it again the complete it goes back to
false and so then it just shows like normal
is manga to be reliable for productions or just for learning purposes super
reliable for production lots of really big companies use it
effectively i think it's great for mvps i think it's great for simple apps
you're trying to get out the door my speed using mongodb is like next level

02:24
for a lot of my like more robust apps i i use postgres but i'm no stranger to
using mongodb for stuff in production i love it um
some people some people have quirks with it but i'm a i'm a person that likes to
get [&nbsp;__&nbsp;] done uh and if i can get it done faster
that's always a good thing for me i'm not gonna try and
write the best most performant code in for an mvp you know um
can always refactor later refactorings for closers
but for teaching i like teaching with mongodb because it helps it's way more
visual you can see what the heck's happening and yeah we'll do a little bit
of postgres at the end um a little bit ahead are we going to
learn passwords are we going to are we going to use something that
hashes them for us yes anything that has to do with like

02:25
passwords or user login we don't want to get got so we're going to use tools off
the shelf that do it for us um b crypt things like that right we're
we're not going to ever write that from scratch unless like you go do your phd
in cyber security or something like it's just not it's not worth it
my husband works for a bank and they use mongodb yeah it's used all over the
place it's a really wonderful tool and that's all coming down the pipeline
folks where like i said we're going to add mvc on top of this then we're going
to add user authentication on top of this and then we'll add
new ways of doing the front end basically with react on top of this we
got some other fun stuff that we'll do some other projects that will build with
all the pieces uh and then we'll move into our data structures and algorithms

02:26
[Laughter] major said shroud is live got to go all right me too [Laughter] hey
[Music] let's go good morning good afternoon good evening no matter where you're
coming from hope you all are doing well hello is rufio with the raid let's go
rufio rufio rufio rufio what is going on everybody
welcome back happy thursday we online let's go we online
hey rufio thank you for the raid i appreciate stream team pulling in huh i
love the stream team folks you just gotta love it
makes me so happy to see the raids makes me so happy to see
all the hundred devs community hanging out uh even when we're not live on

02:27
tuesdays and thursdays it's it's wonderful to see rufio fox my wolf gotta
love it we outside we online hey everybody
welcome back we got some crud to finish we gotta finish this api cause we gotta
get the mvc and authentication because once we finish the mvc and the
authentication the world's ours but whatever the heck we want nobody can
stop us let's go yo indifferent in the house a different
ghost how you been man how you been good to see you thank you so much
for being here hope you're doing well it's good to see you all right everybody
we [Laughter] we got to get we're getting right into it
slides are the same from last class so don't worry if you have the slides
you're ready to go if you need the slides exclamation point slides they're
really just a tool for us to think and move through our code together
we're going to add the updating the delay tang we're gonna look at all the

02:28
glue a lot of folks are kind of asking questions about like the env files and
stuff like that so we're gonna see all that come together we're gonna make sure
you understand all the bits and bobs of the to-do list then you got some
homework which is to look at the mvc version of this code i updated it on
discord so you have that take a peek you have a video to watch on mvc and you
have to finish the traversing media course if you have not already so you
got a action-packed weekend ahead of you uh my wolf will be doing their office
hours on sunday as well they sent me a message so you got some extra help if
you need it as you're doing the homework and then next week next week the mvc
oh the authentication oh i can't tell you like it's it's super powers it's
super powers you are about to unlock some of the most amazing superpowers you
will ever unlock in your life the idea to build an app that can create read
update and delete after today you'll be able to do all those pieces you'll have
the to-do list to start with whenever you want to build that and by the end of

02:29
next week you'll be adding mvc and authentication like what
i love it so i'm glad you're all here to to to partake to get into it uh to work
through this in detail so we can see it ask all of our questions and then we're
going to start picking up the pace a little bit because we got to get through
the mvc we got to get the authentication we got to build some apps and then we
got to get on the hunt i met with uh blah yesterday
i don't know if they're ready for this blow i don't know if they're ready
uh for for for for huntober what huntober
we got a lot that we're planning for you a lot of fun stuff that we're going to
get into i i we're planning me and blob i'm putting in work

02:30
you ain't ready but we're going to get you there all right so
as always as always if you got questions i got answers always like to give folks
a few seconds to get in here none of my lights are on what am i doing hold on
wait a minute there we go hold on this is dark mode exactly there we go
there we go i need my my beauty light it smooths things out you know all right
anything to catch up on if it's my first
time yeah you got about 44 other classes
to catch up on uh you can do exclamation point discord uh and when you join that
we have a catch-up crew that you can join i can do exclamation point youtube

02:31
and see all of the past 44 videos of our cohort 2 playlists there we go
all right i'll do another couple of questions
before we get started we're just getting
right into the crud tonight so we're not even we're just going to skip right to
crud so let's give folks another minute or two to get in here i'm going to
answer some questions and we're right into it i loved um
we saw something the ketchup crew was doing which i thought was really neat uh
they they created a thread for the month like if you're starting in august you
joined that thread uh so that's something we're going to make official uh blonde
we were talking about that yesterday about like having a specific thread with
some extra goodies in there so that each month as folks are starting in the
ketchup crew they have like a place to latch on and if you go faster you join a
different thread if you go slow down you join a different thread and so we're

02:32
gonna help organize that a little bit yeah some some some good changes uh
coming to discord because we made we're a discord partner now which is it's
actually not super easy to get um i actually think that was the heart like
one of the harder ones to get because we're now twitch partners
youtube partners and uh discord partners which is pretty cool so
you know no big deal let's go all right we don't get got we go i'm thinking of
doing a hundred days of code and i'm catching up would i stitch to myself if
i do the challenge because a recruiter seeing um so what i say is like once
you're ready for the hunt right like once you're ready for the hunt you kind
of chill out the stuff you do on twitter no recruiters like digging through like
months of your twitter history to like see oh they did 100 days of code also
anyone can do 100 days of code like you don't have to be um
like new you could be like senior and picking up a different language or

02:33
something like that so the only thing i say is if you're going to be public
about your learning journey that's one of the best things you could ever do
because you get encouragement you get other folks that are that are willing to
help and support you and then once you're like really ready for the hunt
you start kind of smoothing stuff out on your social profiles but i'm going to
help you with that we're going to bring up some examples too like when i tell
you i'm going to get you ready for the hunt i'm going to get you ready for the
hunt right there's a a lot of a lot of stuff that
past 100 devs folks have done that really moved the needle and helping them
to get a job and it's a lot of stuff that's not really out there it's really
hard to kind of come across this information because not a lot of people
have been like on the ground helping hundreds of people get jobs at
in different places locations stuff like
that so there's a lot of stuff that i've picked up and
i've been privileged to pick up because i've been doing this for 10 years i try
to bake into a few classes and so we'll get you there but we're not
really ready for it yet i wouldn't stress about it

02:34
building in public learning in public is one of the best things you can do
schrute said your resume helped me get a job hey congrats that's good to hear
the resume is lit some people like people don't get it right there's a system
and if you don't if you don't do the system
the stuff by themselves often doesn't work uh so like every once in a while the
resume will go like viral on twitter and they're like ah it doesn't like the
robots aren't able to pick up this like specific thing in the resume i'm like
yeah because if a robot is looking at
your resume you've already [&nbsp;__&nbsp;] up
like why would i optimize for robots when that's like not the way to get the
job right like we're here to network our way into opportunities so i'm going to
optimize for the thing that actually works i don't know
how good do the projects in my portfolio have to be to confidently start the job

02:35
hunt you want one really meaty project if you have one really meaty project you
can talk about from beginning to end the things that you had to learn the things
you had to do the things you had to build that's better than like five
tutorials that you followed off of youtube
right that's why we really switched to you building projects and this whole
time you've been building small projects right because just following the
tutorial is never enough you always want to do something that's your own from
beginning to end that has your own flavor your own personality baked into
it and that's the point of the 100 hours project that's what helps you set apart
from other candidates when they're comparing two candidates and there's a
candidate that's done 10 tutorials and you can clearly see that the code is
following a tutorial versus somebody that sunk 100 hours into their own
project the person that sunk their hundred hours in their own project is
getting hired every single time i didn't even apply a recruiter reached

02:36
out to me it works let's go let's go i wish i could actually get interviews
to talk about my hundred dollars project i'll get you there uh we haven't really
started the process to get the inbound interest from recruiters or the
the outbound polls that we'll be doing uh so don't
worry you're you're in the place you need to be when we get there you'll be
ready here this is uh class 45. and the other thing too is
i'm not the biggest fan of like right now there's a lot of recruiter spam
and one of the things that i see a lot of students get
caught up in is they lean into the recruiter spam
before they're ready for the hunt and when you lean into the recruiter

02:37
uh the recruiter spam before you're ready for the hunt it goes nowhere
and you get demotivated right like you have these like some really big
companies reach out to you you get really really really excited
you're like oh my gosh aws just reached out to me you spend three weeks like
getting prepared for that interview and then they like ghost you or you like do
the first round and that's it so i see so many folks at this point in
the process that stall out because the recruiter spam is really um
enticing when you see a big company that you know reach out to you're like whoa
like i gotta respond and it detracts from their process that if they would
have stayed the course in a month they could have reached back out to that
recruiter and had been a better spot and would have been a better experience so
just be careful with the recruiter spam um i see a lot of folks that really get

02:38
their hopes up um and not that if you're ready you're ready right like don't
don't let me say that you're not ready but if you're ready for it it's great if
you're not ready for it it can be something that really distracts you and
something that can really stall your forward momentum and your
motivation like the hunt is so much about managing like the first things i
ask you to do is learn how to manage your frustration the hunt is all about
that managing your frustration and those first couple
big interviews almost never go your way and you don't want that to stall you out
and make it so you can't continue on in the process so be careful um know that
the spam is off the charts right now um and don't don't over invest in
interviewing at just one place invest in yourself to be ready for
multiple places that you'll be interview ready for

02:39
this is so true my first rejection hurt real bad took a week to recover yeah
it's this is a really sensitive time and
so just be careful take care of yourself and um just keep investing in yourself
right like making sure right now you should be investing in understanding how
to build full stack web applications and
the reason why that investment is really important is because in a month when
we're really starting to think about the hunt you will stand out
from all the candidates that can't build full stack web applications which is a
lot of folks that are looking for jobs that can't build a backend cred api you
will be able to do that you will have projects in your portfolio that prove
that and it's one of the puzzle pieces that's going to open a door for you
that's where you should be you should be
investing in that part of the process so you can open those few doors that would
be closed to others that didn't we'll have time to get the other pieces
we'll have time to get those interviews coming your way um but like i said

02:40
it's you we're all on the same roller coaster we all get there at different
speeds some folks really do have to jump right into the hunt like time is of the
essence they don't have time to wait until we get there
all of our past classes are on youtube right like if you're somebody that
really needs a job tomorrow and the pace that we're going is not right for this
moment that's fine still join us for class when you can but all the past
classes on youtube go go full speed ahead but for most folks that i think are
going at the pace that we've been going we'll get you there give me another
month cool [Laughter] alrighty thank you for the questions
was getting a lot of do you want to own your own business venture no please stop

02:41
i get that when i go to ikea when i go to ikea my wife and i always
get approached by these um like people that are like oh do you want
to own your own business so like i'm like i'm trying to get a couch bruh like
thanks i guess but no i'm good i don't know what it is about ikea these days but
maybe out there leon versus the odin project what do you
pick uh the odin project because leon's just a person
a hundred devs that's that's the bee's knees i've heard
all right let's get into this [Laughter] if you haven't already please go ahead
and check in exclamation point check in um please go ahead and do that i'll give
everybody a second uh the link was in discord and also remember checking
doesn't actually check you in you still have to click the link to twitter to

02:42
like retweet uh it's something that whenever like right now
where blonde i met to start talking about how we're handling kind of the
influx of like verifications and reference requests um
and so that's something we're working on right now
one of the things that we look at before we say yes is all right were you
checking in were you retweeting were you actually here
have you submitted the projects all that fun stuff we'll be talking about that
more next week and we'll be letting you know what that
process looks like so you can get the support that you need
all right remember health first health first this part of the process is a lot

02:43
uh every day and this is something i'm trying now what oh what no that's wild
sipsy with the 50 gifted subs that is wild tipsy thank you so much i really
appreciate that whoa ballin that's wild thank you so much
you know if you all just got a sub from sipsy can you throw some
emotes into the chat please let's show uh sipsy some love
thank you for the subs i appreciate that that's wild
50 bomb wow i don't that's i don't i haven't seen a 50 bomb in a while at
that that's something that might be the most there we go
hey sipsy i appreciate it thank you so much thank you for being here hope
you're doing well that's how we start off a stream [Laughter]

02:44
that's wild yeah and thank you everybody for the
the primes and a lot of folks are resubbing and all that fun stuff i
really appreciate it uh probably next week i'm going to show you
what we brought in last year for rc um it's it it's it it's
it was substantial it really does help i appreciate everybody cool
all right let's keep pushing here i'm not going to go back through the slides
i just want to make sure that we're talking about putting your health first
and there's something that i've been experimenting with um because i think i
might want to make it a recommendation for students but whenever i give
advice on what i think you should be doing in terms of like productivity or
learning to code i always trial myself so here's something that i've been
trying that has been really successful for me
in the past week or so especially as time's been at a premium

02:45
every day there are certain things that i'm asking you to do
i'm asking you to do banky i'm asking you to do your code wars i'm asking you to
network i'm asking you to start on your 100 hours project unofficially
officially very soon i'm asking you to do reading i'm asking
you to watch some videos i'm asking the comments of code um there's a lot of
a lot of little things that i'm asking you to do pretty consistently
and it's a lot what i'm trying is listing out all the things i have to
do every day and only doing like let's say there's
like let's say there's six things i have to do i'm only doing four of them
and every day that four out of six can change i have to hit four out of six
right but the four out of six i i have to do

02:46
i get to like pick and it enables me to whatever i have the energy for that day
to do right and to me that's been a lot more freeing
than trying to be super regimented with a um
a set of six every day because sometimes i just don't
right like sometimes i just don't have the energy to do all six
and what i find is if i go a day or or worse like two days without doing all six
i feel really bad um like i feel really bad and then that
like negativity carries over into the next couple of days right and so
i've been experimenting with this like four out of six idea
like it must be a minimum of four but if you do five it's okay right minimums

02:47
like yeah around 70 percent and it's been like really successful like
way more successful than i've been in a very long time because i i can say you
know what i really don't want to network today or i really don't want to
do x right and that having that like wiggle room
uh has been very very freeing uh and so i've been really productive using that
method over the past couple of weeks and so i'm going to keep trying it and then
i think that maybe would be a recommendation to the core i don't know
if it's 100 recommendation yet but if as all this stuff is coming up make sure
you're taking care of yourself make sure you're evaluating your needs giving
yourself some room and grace to to to get through these next few months
that are asking a lot of you yep yeah it doesn't matter what you do all
the time it matters what you do most of the time yep i i really like that bit of

02:48
advice um and somebody i was watching a video the other day um
it was like consistency is like doing something more often than not
right and i was like okay that makes sense
but yeah so as as i keep doing it i'll update but
do what you need to do to take care of yourself in these next couple of weeks
because it's really important you get a lot of stuff done now there's one thing
that i think is really important to do every day and that's pushing your code
to github so you get those delicious green squares but
if you missed a day hello it's rufio had
a wonderful stream on showing you how to backfill your github history uh to get
those delicious green squares should you need them cool
all right i'm gonna skip everything here
and we're just gonna get right back into the to the code here so we went through
the beginnings of crud last class right uh we went through the creating the
reading and now we have to get into the updating and the deleting so i'm gonna

02:49
skip here to the updating and let's look at our wonderful to-do list here ask
what is that uh it's actually in the um follow along materials channel um but
rufio if you're still here if you message me that video i'll put it in the
follow-up to discord today yeah cool yeah i'll make sure that it goes in
the in the follow-up from in today's class on discord
alrighty so here is our wonderful to-do list and we have two things we have
the we saw the creating right the creating was adding something to our

02:50
to-do list like um i don't know get oat milk get fancy bread um
what's something else we should do we should uh get pickles
i like pickles all right get pickles right so we create it right uh when we
create it we made a request to our server the server had some code on it
called our api there was a smurf listening for that create request when
it heard the create request it took the data out of the form that was sent along
with the request it sent it to our database and then told our browser to refresh
when we refreshed we made a get request which made a request to our server the
smurf heard that request it went to the database found all the documents plugged
those into our ejs and then spit out html from the egs and then sent that as
a response right so now we have two last things that i want to walk through

02:51
before we get to the glue and that is updating and deleting so should we do
updating or deleting first let's do a poll there we go new poll started
u or d update or delete what do you want to do
i think delete's harder to spell than update so i think that might be the
a lot of people are spelling delete wrong it's okay i don't i can't spell it
either ah y'all woke up and chose the hard ones today
that's not even close the update's coming in clutch first not even close already

02:52
about 20 seconds left here you want to thank you for the hydration cheers to you
scam vr a thank you for the posture check get in here be good there we go and
with 77 the update has it all right so chat what is the update here in our
to-do list what can we what what can we update here
we are here for the challenge exactly yeah we can mark stuff as completed or
not so if i click on get pickles let's say i
went to the store and i got my pickles we can see that it is strike through
it's grayed out and also like our to do's like left went

02:53
down that's something separate that we'll see in a second but the idea here
is that we can update whether or not something has been marked completed or
not so if i click on pickles again um what will eventually
did i click on it there we go when i click on it we'll see that it is no
longer grayed out right and the strikethrough is gone so i
can complete something like market completed like i did that to do and i
can uncomplete it i can mark it on complete and so we have two different
things that we're really doing here we're completing
and we are uncompleting like we're saying hey i didn't i didn't do that
like let's bring it back so if we were to start with what's actually
happening here before we look at the code let's see if we can talk through
what's happening what's the only thing that can hear me clicking on pickles

02:54
it's an odd question but what's the only thing that can hear me clicking on
pickles yeah our client-side event listeners our smurfs are the only
things that can hear us clicking on get pickles remember our application is
still two parts we have a client side and we have a server side in fact we can
just do this because this is our client side client side makes requests
to our server beautiful and so when i am clicking on pickles
i am actually clicking on something client-side so the only thing that can
hear that would be my client-side javascript
yep the the javascript that's running in our browser right so it doesn't matter

02:55
what's happening over here just yet we need to write the code that can
listen for that click and once that code hears the click
then we get to decide what to do with that click we're probably going to make
a request to our server but that that's an extra step right so the very first
thing that has to happen is that we need some javascript
running client side that can hear our clicks now once that javascript
hears the click what are we going to do like what what
what is what are we going to write that code to do
yeah some people are saying it yeah we're gonna we're gonna make a fetch right
we're gonna make a fetch and the cool thing about making fetch happen
right the cool thing about making a fetch happen from the client side

02:56
right is that we get to describe what type of method we want it to be
so we could say make a a put we could say make a delete and
when i say put i really mean what update exactly so i can say to my fetch hey
make a put request which is an update request
which is an update request anybody got like a skillshare class on like
handwriting is there a udemy course on like how to write i need it [Music]
all right it's hard on the ipad i wish it was the ipad bruh i i really do

02:57
i wish it was the if i had it eight the only so i did very well academically
uh all throughout my schooling uh the only time in elementary school
i didn't make straight a's uh was third grade penmanship
uh they tried to give me a b for for my handwriting and my mom tore them i
i still feel bad for that teacher i still do like at now as an educator
i i just i feel bad but my mom my mom went in
how dare you keep my son off the the honors roll like yeah
it was not pretty that's all i'm gonna say not pretty
but hey my handwriting never got better anyway so yeah all right so we can

02:58
we can click we can click on pickles there sometimes it's just too ridiculous
we can click on pickles there is some client-side javascript right some
clients guide javascript that could hear that click and when it hears that click
right when it hears that click it's going to send a request to our server
all right right it's going to send a request to our server so that that click
right that click is heard by a smurf and that smurf says ayo make a fetch
and make that a put request all right so the smurf
here's the click on pickles says ayo all right makes the fetch
says make a fetch and that fetch is a put request

02:59
right it's a put request to our server so it leaves the client side
and makes it to our server right now on our server there is some code
that is running that can hear this request
what do we call that code that can hear the request yeah we call that code our
api right and over there it can't be smurfs we can't have smurfs
on the client side and smurfs on the back end so we got smurfs on the client
side what do we have on the back end that's doing the listening
gnomes i'm feeling no gremlins oh we were using gremlins before we'll stick

03:00
with gremlins yeah so we we got the smurf that heard
the click on the client side said hey yo sent a fetch request
right sent a fetch request right that said hey make a put there was a gremlin
right there is a gremlin that was listening
that heard that put request there was an app put right
and when it heard that put request it did some stuff
so what are the things that's going to happen server side that's going to
enable all these things to happen like what do we need to do

03:01
on the server for this put or this updating to happen
yeah eventually we need to update the database that's good right so when we
made this fetch this put request we probably sent along some data
uh we probably sent along the fact that we had clicked on pickles so pickles
was in that set of data that came across with the request
and when our gremlin heard that request on the server side and it triggered the
app.put the first thing it's going to do is grab that pickle data
out of the request so it'll be like all right i have pickle now
now that it has pickle it's gonna go to the database and find the document
that has pickle and when it finds the document

03:02
that has pickle what's it going to do what's it gonna do
it's gonna change yeah it's gonna it's gonna update that
it's going to update that this is this needs to be refreshed one second
it's going to update that get pickles property of completed to true
we saw on tuesday when we created a document it starts off as false right
when we create a document it starts off as false so
when we did the update we found get pickles and we changed completed from false

03:03
to true right from false to true and then once we have changed it
from false to true then what do we do yep we respond
and for now we tell hey why why don't you refresh so we'll say all right we'll
respond and we'll say you know what you should probably refresh
right you should probably refresh and when the server refreshes
right when the server refreshes what type of request does it make sorry
when the client side refreshes what type of request does it make
it makes a get request exactly a get request goes to our server

03:04
and this time when the app dot get runs right when the app dot get runs
it goes back to the database right it goes back to the database and this time
this time when it looks at all the documents it's going to notice
that the pickled document is different the pickle document used to say false
and now the pickle document says true that's going to change what happens
right this is what's going to change what happens
when we try and pass all that data into our ejs
now things are a little bit different and the ejs is going to render a little
bit different right meaning that our pickles are now going to look

03:05
crossed out because it gets that class that we saw before
so i think the really really hard thing here especially for folks that are new
to this crud and the way that we're really breaking it down eventually we'll
we won't we'll use things that make this like not needing the page refreshes and
things like that but i still want you to see the request and really have them
broken down right and so we had to do two requests to see
this pickles get updated right we had we had to see two requests
to see a change sorry in the dom right we had to make a put request which
actually changed what happened in the database
and then we had to make a get request so that the user could actually see it in
the dom if we had just triggered a put our database would have changed but the
user would not have seen anything does that make sense

03:06
we're going to walk through it we're going to see the code but it's really
two different things that are happening here for us to see this change cool
all right let's take a look at some of the code all right
let's take a look at some of this code and
when we look at this code we're going to start off with our ejs
and i'm going to take a look right here because this is again
this is where it can be a little tricky right this is eventually what will be in
the dom that we will be clicking right so this is my index.ejs
if you need the code make sure you're on
our discord exclamation point discord uh the starter code for today is in our
discord announcement before we went to class all right if we look at it
we talked yes we talked on tuesday about how

03:07
this page gets rendered out basically we find all the documents
in our database right right now we have we have one two three documents
inside of our database so when this runs this for loop will run three times
meaning that we will have three lis that make it into the dom eventually
now when we look at each li there is some conditional logic here
that is really really important we are going to look at each
document to see if it's completed property is true
if it's completed property is true then the span that's going to hold that
text like the get bread the get pickles the get oat milk right that will have a
completed class and that completed class is what makes

03:08
it grayed out and the line through right however
if the completed class is not true right the else will auto magically run
and the span that we put into the li will just be a regular regular span
there will not be any class added like we have here this class completed is not
there so it's just a regular span cool so let's play a little little game here
if just by looking at our database we should be able to make some guesses
about what's going to happen in the dom okay so when i look at this first
document in my mongodb database i can see that get oat milk has a completed
property of false what does that mean in terms of what we're going to wind up

03:09
seeing in the browser in the dom what does that mean what what do we know
about get oat milk yup it's going to be visible it will not
be gray and it will not be strike through it's just going to be plain get
oat milk cool same thing for get fancy bread right no style on it
completed is false that means it's going to be exactly a
span with no class of completed which means that it won't be gray and it won't
be strike through it'll just be normal texting get fancy bread however
when we get down to get pickles when we get down to get pickles we can
see that get pixel not this again if you're a real og you know what that

03:10
where i was about to go all right center all right when we get down to get
pickles right we get down to get pickles
we see that completed is actually set to true so what do i know
about how this is going to be visualized in the dom
what's going to happen what are we going to see yeah
we know that when the ejs renders this out this get pickles is going to be
strike through gray right it's going to be very
different looking than the other two beautiful all right so let's go ahead
and see if we can follow the whole path of what is happening when we click

03:11
on these bits of text so i'm gonna start um with get pickles
being i gotta change this it's gonna get me in trouble let's change this to
get donuts there we go oh get coffee i like get coffee better cool get coffee
there we go get coffee all right third grade leon's coming out i went
from pickles to donuts all right get coffee safe easy
oh [&nbsp;__&nbsp;] we all know what coffee is never mind can't do coffee either
get pizza there you go pizza safe get paid all right there we go get pizza

03:12
all right so we have get pizza here in our to-do
list i'm going to click you ready i should go i should come this way i'm
clicking boom there you go the click the click happened right all right now
what did i just click on question for chat what the heck did i just click on
i clicked on a span that is inside of an li we can see that
when we look at our ejs right there is this li that was going to be created

03:13
and inside that li was going to be a span did that span have a completed class
when i first clicked on it no it did not have a completed class it had
just been added to the list it did not so it was this span right here this span
was the span i actually clicked on that had get pizza in it
right it was get pizza that's the span i actually clicked on
now if we look at the end here this page has a
script tag a javascript file that is running
so when we see that we know that there's
something that might have been listening for that click
on that span inside that li there might have been some client-side javascript

03:14
listening for that click so we have to start by looking at that javascript file
and since we are using express where would this javascript file probably exist
if we had to like go find that javascript file where is it going to
exist because we're using express going to be in our public folder
remember all of our static files that are going to get served up our css or
javascript are all going to be in the public folder
so we don't have to hand code a route for those files we throw it in the
public folder and express magically handles all of it
right so we can see in our public folder here i have a js folder which is the
path that says go into the js folder remember this means like go into the public
find the js folder and then find the main main.js so here we go js folder

03:15
main.js beautiful here we have our client-side javascript that's listening
as listening for these clicks right listening for these clicks right and so
we actually have uh three what are what are these we have three what
we have three what chat yeah we got three smurfs right
three event listeners that are listening for those clicks now did we click on
a delete button no so that didn't work did we click on a span yes
and so this is very specific we're saying find
all of the spans inside of something that has the class of item

03:16
let's go back and look at our ejs real quick span all right here we go span
oh the li has the class of item right so we are actually able to listen four
clicks on the span that are inside the li that had the class of
item and so here we grabbed all the spans inside of the li's because there
are at least three lis that are on our page right now and so
we grab all those spans and we actually loop through them adding a smurf
right we've looped through adding a smurf adding an event listener to each one
of our spans that we can click on right this line right here line 9 through 11

03:17
goes through and adds a smurf to each of our spans all right so that that loop
ran through three times adding right adding those smurfs those
event listeners that could listen for the clicks clicks
clicks don't come for free right there are some elements that have
stuff built in like forums can submit on their own but when you're clicking on
regular text there has to be something that's listening for that click
and so we set up our client-side javascript to hear those clicks right
all right so now we can see that every single one of those spans
all three of them wind up with an event listener

03:18
that runs a function called what every single one of our smurfs is going
to follow a specific set of instructions when they hear the click what set of
instructions is going to run you got to earn this click exactly yeah all right
i wanted to see who see who's there we have the mark complete we can see right
for every single one of those spans winds up with the event listener and
that event listener is going to call the
mark complete function so let's go ahead and take a look at this mark complete
function and then we'll take our break so mark complete function delete item
not what we're looking for mark complete all right here's what we
are looking for boom mark complete function and we can see that it does
what we said it was going to do line 37 what is line 37 doing here
it's really complicated i'm going to show you how to clean these up a little

03:19
bit later i hate using the child nodes parent node stuff but i want you to be
exposed to it so you can at least see it once and then
we'll we'll move away from it what's it doing it's grabbing
the to-do right it's grabbing the text right it's grabbing that to do so this
is the thing that grabbed the text of get pizza right is the thing that grabbed
the text of get pizza how did that get past how did that get past the moderator
rip that's funny all right we were able to go ahead and grab that

03:20
text of get pizza right get pizza out of
the dom right so item text is gonna hold get pizza
and then what am i gonna do with that get pizza text
what am i going to do with that get pizza text
i'm going to send it with the request exactly if we look here
we can see that i'm going to make a fetch that fetch is going to be a put method
and i'm going to send along that item text
that item text is right now the text of get pizza
right when i clicked on get pizza that client-side javascript heard the click

03:21
and it ran this function it ran this mark complete function
the very first thing we did is grab the text
we need the text right because we're going to update something in our
database we need to know what we're going to update
if we don't have the text that was clicked on if we don't have the get
pizza there's nothing we can do on the server side right there's nothing that
we can actually we just don't know what to update right we won't know what
to update right so i am sending along this right here and i'll show it when we
get back for break how it does it but this right here grabbed get pizza
all right this grab get pizza now wherever i see item text it's actually pizza

03:22
right it's get pizza so i am now going to put going to make a put request
to the server and i am going to send along the request body
that now has get pizza what will be the name i have to use
if i want the text get pizza on my server side
what's the text i'm gonna have to use if i want get pizza on my server side
exactly it has it has a property here it has a property of item from js so
when i look on my server side and i see request dot body dot item from js
that's what is going to be holding get pizza and so this request

03:23
leaves the client side and makes it all the way to our server
where there is a server set up to hear this request and if we look here we go
app.put we said it was a put request we can look at our main js that we made a
fetch to mark complete that's our route right that's our route
mark complete is our routes we made a we made a request to mark complete it's a
put so we're able to find app.put with the route of mark complete
and when the server when the gremlins hear that request right
when the server hears that mar that that put request is gonna do some stuff and
we already know that we have to go to the database and update something so
that's what we're gonna do we're gonna go to our connected database

03:24
we're gonna find the to do's collection and we're going to update one thing
we're going to update the first document that has a thing property of what
we're going to update the first document that has a thing property of what
get pizza exactly remember we said if we looked
for a request stop body dot item from js that was get pizza so now
we've gone to the database we've looked in our to do's collection and we're
gonna update a document that has a thing property of get pizza
and when we find it we're gonna set the completed property to true
so it was false but now we found it and set completed the true if we look at our

03:25
our database and we refresh we're going to see that get pizza now
has a completed property of true right has a completed property of true now
there's a lot of other crap here that we'll talk about when we come back from
the break but we set it to true and then all we do is we respond saying what
we respond saying what we we've updated a value in our database and we respond

03:26
saying what it is not mark complete all right so let's go back
where where is that response going to be sent though
where is this response going to be sent though
yeah it's going to be sent back to the client that made the request let's go
back and look at our javascript our client-side javascript right
well console.log hey mark complete and then what does our
client-side javascript do it refreshes the page and when it
refreshes the page it triggers a what it triggers a get the get goes to the
database however this time the get pizza document is different
so when it goes to to build out the the html it now has to have that completed

03:27
property which is going to make the get pizza look different
so i think a lot of folks this is the trickiest one
right because there's a quite a few steps that you have to be kind of up on
right you have to understand that the client-side javascript is hearing the
clicks then you have to understand that that makes a request to the server
you have to understand the server hears that request
update something in the database and then responds back to the client
and still at this point nothing changes for the user
nothing has changed for the user until what happens until it refreshes
when it refreshes then the browser has permission to go back to the server

03:28
ask for all the updated documents and now the document has changed our ejs and
what we show the user can change and that's when we see the results in the dom
right so when we come back from break we'll run this back so we'll see this
the whole process from beginning to end again
and i'll explain some of the little extra things that are in there like the
upserts or all that fun stuff so let's go ahead and put five minutes on
the clock here if you're new around here we like to
take a break at the top of every hour to stay healthy
if you are able please get up move around hydrate and i'm gonna run some
ads so that folks don't have to sit through commercials when they come back
to class and i will see you all in five minutes
all right folks be well see you soon all righty uh so we did have a uh lovely

03:29
raffle uh that was in the newsletter exclamation point newsletter if you do
not get the newsletter it's where all the good stuff happens first all the big
announcements all the the cool sponsor stuff all of the raffles all go to the
newsletter first um so if you haven't please subscribe to newsletter xbox
newsletter uh it really does help out the community all right so we had a
raffle for coffee chats we're gonna do three more coffee chats
uh for folks that went on tuesday you'll get a message from me today with these
three and then we'll schedule them for next week so we had 716 people that have
already filled out the the newsletter raffle which is wild uh so i'm gonna go
ahead and run i'm gonna pick three three two one
beautiful not a big deal mel and eddie a
there we go you'll get a message from me later today books that one tuesday

03:30
message for me later today too and uh we'll set up those coffee chats
let's go congrats alrighty let's keep pushing folks so close [Laughter]
congrats everyone right so let's see here
we're talking through the update or the put request and let's
run through it one more time there's a lot of little steps here right there's a
lot of little steps here um but what we have to realize is that

03:31
there's kind of like two big pieces here the updating is actually separate from
what the user actually winds up seeing like the updating happens but it's the
refreshing that makes another request to
go get the changes right and so it's not until the request go gets those changes
that the user only actually sees something and this is actually really
hard for a lot of people to tackle because it looks like it happens
instantly it looks like we click and it immediately changes and that's just
because it's so fast we sit on the shoulders of giants that have gone
through the muck building out iptcp building out the http protocol making it
so that our broadband speeds can go to a server and back and it looks instant
but we have to get good at at breaking down step by step what is
happening uh i actually just saw this there is um

03:32
so i've been watching a lot of like youtube because it's one of the things i
can do i have little one and uh i'm like
getting it's like these like really like i don't know i just like i'm like in
weird youtube holes right now but i've been really into like
cool like computer science-y stuff and uh there's this one person bob
metcalfe uh they invented ethernet like they're the person that invented
ethernet and i in boston especially in the tech
scene uh they would always start off their talks with like hey i'm bob
metcalf i invented ethernet they invented ethernet can you imagine
inventing ethernet so shout out bob metcalf for inventing
ethernet so that all this stuff can happen super fast right cool so
what we have to do is realize that this is actually two really big steps and a
lot of other little things that are happening so i'm going to

03:33
i'm going to refresh and uncomplete this there we go so it's uncompleted and so
right now if we were to go and look this is a tricky question if i was to go and
look at get pizza in the database what do we expect that document to have
like what do we expect that document to have what properties and values do we
expect the get pizza document to have right it's going to have a thing of get
pizza and a completed of false exactly and so let's go ahead and uh
refresh the page i didn't know that in different kept it
secret for 10 years that's wild all right so if we look at get pizza all
right we're doing good it had a thin property of get pizza

03:34
and a complete it of false we are in good shape now
when we click get pizza again boom some big steps happen
oh give me your suggestions i'll keep an eye out for those i want those right
two big steps happened right two big steps happened
one step was updating the database and the other step was getting those changes
so we could see what happened in the dom right so the first step the updating
right it heard that click on get pizza what's the only thing that could hear
that click on our client side what's the thing that heard that click

03:35
on the client side our smurf our event listener in our client side
javascript exactly there's some client-side javascript that heard that
click on get pizza let's take a look at it here it is
we set up the click event we grabbed all the spans that were inside those lies
with the class of item and we gave every span the ability to
run the mark complete function that means get oat milk if i was to click on it
would run the the mark complete function if i was to
click on get fancy bread it would run the mark complete function and before i
clicked on it so would get pizza right so when i clicked on get pizza

03:36
that marked complete function ran all right that marked complete function ran
now if we look at that mark complete function
it's really doing one really important thing
it is grabbing the thing we just clicked on this
dot parent node child nodes one inner text
it's going to go and grab the thing we clicked on so if we look
the thing we clicked on item was the span right the thing we clicked on
was the span now we're going to do some complicated stuff while we're here
let's look at the ejs we clicked on the span what would be the parent node

03:37
of the span what would be the parent node of the span good
parent note of the span would be the li beautiful
and then if we say all right the li is the parent node
and we say all right parent node is the li child node 1
what would be the child node of the li what would be the child node of the li
the span right if we look back in this ejs it's going to be the span now
remember it there's only ever going to be one span here it could have been this
one or it could have been this one based on the conditional logic where we're at
right now right where we're at now this span is the child node one right

03:38
now why is it one instead of zero well it's because all the stuff that takes up
space winds up being a node um so there's things like bullet points there
could be carriage returns could be stuff that like gets in between what's
actually being rendered in the dunks remember the dom is really
like this weird thing that's not directly just your html right it's like
all these nodes that are being connected that we can go deeper into later but
there there's things that are just the text is not zero it is one right so
we have the span which we know is the child node of the li
and then we're going to go ahead and grab its inner text right
we're gonna go ahead and grab its inner text so if we had clicked on get pizza
we went up to the parent node which was the li

03:39
then we went into the child node 1 which was the span itself which would give us
the thing we just clicked on and then we got the text
which would give us get pizza right which would give us get pizza so now we have
the text of get pizza what does this do again
it's the thing that we're clicking on right
cool so this is the thing we're clicking on and this this changes context but in
this case the thing we're clicking on so now we have the text of get pizza right
jazzy pants said this is clearly not the best way to do it leon's getting ready
ready for us for terrible legacy code yes this shows up all the time and it's
super confusing so i like to show it at least once before we start doing
things a little bit more optimally right now

03:40
we have clicked on the span we went up to the li we went back to the span and
we got the text out of it right we got the text out of it
so wherever i see item text it's really what in this scenario
it's as though we kind of cross this out and item text is actually what
it's actually get pizza yep great so wherever i see item text
it's actually get pizza so it's as though item text here is the string get
pizza now remember we are trying to make a request to our
server and here's us setting up that request we are going to make a fetch

03:41
with oops sorry this is delete item not uh mark complete there we go we are
going to make a fetch all right we're going to make a fetch
that is a put so we are making a put request to our server and when we make
that put request along with that request comes the body remember we saw on
tuesday that the request has all this information it's wild
so much information goes along with that request including the request body now
here we are har coding the request body we get to construct the body where else
have we seen a request body come from where else have we seen a request body
come from on tuesday yeah all right chad i see you
the form right the form on tuesday when we made that post request

03:42
along with the request came all the info from the form so when we make this put
request we're sending all this information along with the request
including this body that has that's an object right it has
an item from js property and it has a value so when i send this request
right when i send this request to my server the server can look at the
request body and it can look at the item from js property and it gets us what
what what is the item from js property in our request body actually holding
what is its value it's get pizza we're exactly we're sending along get pizza
if we were to console log this we would see

03:43
get pizza coming along with that request body to the server right now
that request makes it all the way to our server
there is a gremlin that is ready to hear that request it's a put request
and it's on the mark complete route we got the mark complete route because that
was the name of the fetch the fetch here and the route here half the match right
cool now gremlin here's the request checks that
it's a put checks that it's the the right route and so we get to do all the
stuff inside of this lovely put and we are going to do a few things
we are going to go to our database we are going to

03:44
go to our to-do's collection so let's go to our database
let's find our to-do's collection here it is all right we went to our database
we found our to-do's collection and we are going to update one
so when we use update one we have to find the document that we want to update
right the cool thing for right now is that there is only one document that had
the text of get pizza so that's what i'm gonna look for request
dot body that item from js was actually get pizza so i am going to look
in my database in my todos collection i'm going to look for a document that
has a thing property of get pizza so let's go ahead and take a look all right

03:45
all right uh get oat milk that thing get oh milk that's not it
thing get fancy bread that's not it thing get pizza match winner winner
winner winner chicken dinner right that is a match
so what do i do oh i'm going to update that document and how am i going to
update it well i'm going to set its completed property to true
going to set its completed property to true and so
if we were to refresh our database here we would see that our completed property
goes from false to true because we told it to do that
right we told it to do that right we told it to do that

03:46
yep these are methods built into mongodb exactly all right
so we told it to set that completed property to true now there are a couple
other things that are here and once again please hold on i gotta get big for
this you know what let's let's let's go to the boardroom please all right please
when you're looking at all this syntax i do not need you
to have this syntax memorized that's not where you need to be right now
all right i don't need you to have all this the
semicolons the the curly braces i i don't do i get a chair heck yeah you get the
big one you get the you get the nice one see
i like to sit i like to sit i can't draw on this screen but

03:47
i like to sit with my back to the wall so hold on that one
that one's mine i have to have my back to the wall that's mine and then
in different that's yours right there right there yep there we [Laughter]
go so i don't need you to have all these curly braces
all of these parentheses i don't have to you don't have to have this memorized
it's a lego brick know where you put your legos away right
it's really important we've been a lot of you been training your whole lives
for this right mom dad parental guardian told you to put the legos away
because they wanted you to get used to knowing where to go and get your legos
at the end of the day i need you to know where to go and get this code right

03:48
so that you can use it i don't need you right i don't need you
to have this memorized right this is too much right now to have memorized
eventually as you build your 100 hours project and you're doing this crap over
and over and over and over and over and over again you'll get comfortable with
it you'll understand it you could probably do most of it from memory but
right now we just gotta know where we put the legos away
that we can go later on a week from now grab the legos that you need right
grab the legos that you need and put them to work now
inside of here are some things that even if you didn't know what the heck it was
doing you could have still used this totally fine right now we have a problem
and our problem is that our [Music] sort sorry our problem right now is that
there technically could be uh two things called get pizza

03:49
right there could be two things that have get pizza right and
if there were two things that get pizza what thing am i updating and right now
right right now i am sorting in a specific order top to
bottom you can sort top to bottom or bottom the top right and so it would
just grab the first thing that had get pizza eventually we're going to use ids
eventually we are going to use um very specific things right but for now
right for now we are going to just say whatever one
came first that's the one we're going to update all right that's it cool now the
upsert false if you set this to true does anybody
know what happens if you set this to true

03:50
something really interesting can happen if you set this to true yeah
exactly so if you set this to true uh what can happen
is that if you tried to update something that wasn't there
it would just create the document for you which can save you a lot of headache
especially if your um if your templating language is a little bit more stiff
right if it's a little more stiff and always requires something to be there
and so the outside would just literally create the document for you that had the
thing right so if i tried to update git duck right there was no get duck in the
database so it would just literally create get duck with a completed

03:51
property of true so that exists do you have to know how to use it right now no
but there are these types of things great so
we updated the document that had the thing property of get pizza we changed
it from false to true at this moment at this moment we have updated our
database but would the user have seen any changes yet
would the user have seen any changes yet not yet
we haven't even responded back to our client side yet so let's do the response
we're going to respond with some json that says marked complete so that
response gets sent back to our client side
our lovely main.js is set up to actually handle that it's going to grab that
response as data we will console log to the client side

03:52
that it was marked complete and then our client side is going to do the heavy
lifting for us here and do what and refresh exactly so it will refresh
and when it refreshes we are going to make a what type of request a get request
that get request will trigger the gremlin that will go to our to do's
it will find all the documents however one of our documents is different this
time when we pass those documents right when we pass those documents into our
ejs to be rendered well this time the ejs is going to render out this span
with the completed class for get pizza as opposed to this span which means it's

03:53
going to show up as the strikethrough line through when
when it responds with that updated html it's going to respond with that updated
html and finally finally our users can see
the strikethrough grayed out get pizza questions while we are here
uh how how do you decide whether to refresh from server or client side um so
it depends on what you're trying to do none of this is like actually
100 how we're going to do it in production right now this is really
demonstrating how requests and responses are being made i really want you to
understand that there's there's these requests and these responses right
and as long as you know that there are requests and responses being made

03:54
uh then you can start getting deeper down the rabbit hole into like all right
how can i do this without having to force to refresh how can i do this so
that it happens a little bit more seamlessly and we're going to get there
we're going to build up to it but for right now this is kind of just so we can
see all right we have a concept that the web
isn't magic that it builds off of these requests and responses
we can trigger the request ourselves on the client side and we can build our api
to listen for those requests it's really fancy event listeners and once that
clicks you can do whatever the heck you want
you can you can eventually make it more optimal you can eventually add more
layers to this but at its core you're still doing that fundamental thing and
for most folks they could leave tonight's class and build whatever the
heck they wanted they can now create read update delete next week we're going
to add the mvc to give us a little bit more structure and we'll be adding

03:55
authentication so that you can have users log in that's it that
welcome to the agency sit down start building some code for real clients like
that that's it that's all we got to do right and so you're closer
than you think right you're closer than you think
and so we're going to get there we're going to keep adding some more layers on
top we're going to add some other stuff that makes our lives easier
but the building starts next week next week you're ready to build that's it all
oh right god did i just get hired all right uh
does a checkbox status update worked the same way it can you could code a

03:56
checkbox to do exactly this in fact like if you're like i don't know
i'm dating myself i've been on the web for a long time
back in the day the way we used to do check boxes
and this wasn't like accessible at all but they weren't actually check bot well
they were they could be check boxes but we would put images in them
and so you would have an image of a check box and then when you checked it
it would add a class that showed a different image right
and so you were actually just toggling images for it to be checked and unchecked
yeah i'm glad i'll do that anymore will you add more help channels for
backend credit etc we already have a node.js channel for all your backend
needs you should use that channel uh also uh for folks that are using the help
channel uh one thing that's really difficult for folks to help you is if
you're posting like lots of images some folks will like post

03:57
tons of images of their like code and that doesn't help somebody that
wants to help you right if they don't have like your repo or a gist where they
can copy and paste code it's very difficult so please if you're using the help
channels try and limit the number of photos that you're sharing and instead
share the actual code uh github just are really easy to create um replits are
really easy to create the the the less friction you can give between somebody
looking and playing with your code and helping you the better especially as we
get deeper into this stuff um not that you can't always use that
you can't use photos to to show stuff especially like html css stuff but as we
get deeper and deeper into code especially when we get into like data
structures and algorithm give somebody a reply or a gist or something like that

03:58
that'll be way more helpful you can use markdown and discord exactly yeah
yeah cool yeah if if if the the photos don't kind
of slow down in the help channels we might have to turn off embeds because
they're they're really taking up a lot of room and it's really hard for folks
to get help when they share them so try and try and
emphasize code instead of instead of photos yeah
mr said thank you i try to help every day i prefer they post repos exactly
repos gist and replits are super easy to set up
dreaming hey thank you for the hydration cheers to you
markdown discord helps a lot yup you can do shift enter for next line and back
ticks for code exactly could we cover those in office hours

03:59
that's a good idea to cover in office hours yeah um
just they're really easy just from within your github like you don't have
to use the terminal or anything you can just like click the button to create a
gist where you can it's just like it's like a paste bin basically
um and then replied you just create an account and you can put in your code like
um i don't know if i should share this idea
yet i'll share and then we'll move to the delete um
for the agency i was thinking like through i was like thinking through i
was like all right what if we did a hundred projects
and each project got more expensive right like for the agency like i want
everything to be in the open how much money we're making how much we're
what we're doing like i want all the codes maybe even be open source if
we can get clients that would want to do that and i was thinking like all right
what if we start off at like a thousand dollars
and then every project goes up by a thousand so like the first person that
comes to the agency pays a thousand dollars we build their project the next

04:00
one's two thousand three thousand four thousand with the goal of a hundred
projects right uh and so early on people jump in to do
it because they want to get it cheap right um
and then i was like well how much money is that
right i was like i don't know what like what's the like is there a way to use
like gauss's summation to figure out how much money that would be and i was like
i don't want to stay here and like i don't want to sit here and like add it
in a calculator so i just i just i just wrote
the code in a reply right i just did a reply with a simple loop and i was like
oh boom got it and that was it right uh so like code helps day-to-day
uh which is pretty pretty fun yeah exactly people are throwing gauss's
summation in chat exactly sounds like a code word yeah

04:01
life just boils down to practical code wars what else is it
all right so we did the updating i just want to make sure we don't have any
other questions about updating and then we'll do deleting so
updating any other questions before we move on no questions too simple here
next week we're getting into the real meat folks mvc authentication you
definitely don't want to miss next week uh is there a difference between put and
patch sort of i guess but in this case not really there's like different things
that it should technically be doing but nobody really uses it correctly
um i wouldn't worry about it for right now all right

04:02
nobody uses it correctly exactly indifferent
all right cool let's go ahead and do this delete
um maybe we take our break a little earlier let's take our break a little early
um we'll take a break a little early that way folks can get a mental
relaxation to then come back and do the deleting we'll finish the deleting and
we'll if we have a little bit of time maybe we'll do a little bit of um
just kind of office hours type stuff until we're we're out of time let's go
ahead and take our five minutes on the clock when we come back we'll finish up
our crud we'll be done in the crud let's go we'll be done in the crud let's go
uh and different said put syntactically means that we need a whole object to
update and patch is just to update a part of the object but no one ever cares

04:03
yeah exactly yeah aka codeweeny stuff alrighty and god's your asti
uh with the two minutes added to the timer we're getting one of those
luxurious seven minutes folks a seven minute break let's go
man i need to be fired all right let's go ahead and
we're gonna do the delay tang and we're done our delay tang we are going to look
at the glue how all the little pieces come together
so this actually runs and then if we have some time we'll do some questions
all right the funny thing is like this song is not true
that's not what was playing right yeah no it's always stream beats by harris
heller i don't know where that comes from all right

04:04
let's go and take a look at this deleting then we'll take a look at the glue
all right so here we have this get pizza and i
want to eat it so i'm going to click the trash can yoink gone now
what we learned from the updating is that deleting actually happened across
two steps right what two requests were made for this made to the server to
get the result we see on the screen right now yeah exactly it was a delete
request to the server and then a refresh that triggered a
get beautiful all right let's go and take a look at this what's the only thing

04:05
that could have heard the click on the trash can
yeah our client-side smurf our event listeners the only thing that could have
heard the click on the trash can so let's start there we can see in the ejs
that there is this span of trash can here
and the interesting thing is we're going to have to go from this trash can
the thing that's being clicked to the text that was inside the span
right so we're going to use that pattern that we just saw with the update to go
from the trash can up to the li and into the child to get
the text that exists there right cool so let's go and take a look

04:06
at the client side javascript remember this egs spits out html and the html
linked to this client side javascript if we look at the client side javascript
we have selected all of the trash cans we're using that font awesome for the
trash cans and that's the class that came with the trash cans we went along
here and add it all right went along here and added a
delete uh an event listener to each of the trash cans called delete item so
every trash can now has this function that we're going to call called delete
item so when i clicked on the trash can it ran the delete item function
and once again we clicked on the trash can right we clicked on the trash can so
this was the trash can that we clicked on
we went up to the parent node which was what chat what was the parent node

04:07
the li exactly went up to the li from the span to the li and we looked at the
first child node which had the span that had text inside of it so we grabbed
that span we grabbed that text that text was
get pizza there was text in there and as though we crossed this out we just had
get pizza right yet pizza was the text once again we are going to make a fetch
to our server that fetch is going to have the route of delete item and it's
going to send along that request body that has the item text of get pizza right
it's going to have that item text of get pizza and so that request
leaves our client side goes to the server where there is a

04:08
gremlin ready to hear that request all right app.delete app.delete the route
matches the route from our fetch so we are good
we are going to go to our database we are going to find the to do's
collection and we are going to delete one so beautiful i love it so beautiful
no querying language want to delete something delete one

04:09
you want to update something update one what that easy let's go
uh leon somebody had a good question leon why don't we have to put the full
url there why is it the route for each of these fetch requests
uh why don't i need um like the full route like i don't need
a url here why don't i need a url here because we're we're already running on
our local server right like it's already running on our server
so we're already at the root like if we look we're already at
localhost 2121 right and so we're already there so we're already there and
everything else is just a route off of that um when we put things on heroku
things might be a little bit different as we get a little bit deeper into it
but we're already connected yeah yep express is doing the heavy lifting

04:10
for us the express knows to like all right take that and then append the
stuff after it cool all right so back to the api here
we went to our database we went to our to-do's collection we're going to delete
one well what one are we going to delete the thing that has the request body
items from js which is in this case get pizza so we are going to go to our
database we are going to find something that has
the thing property of get pizza and when we find it we are going to delete it
brilliant it's beautiful you want to learn anything else we just
say we want to have happen and it does it that's amazing all right so delete one

04:11
let's go to our database let's find the one that has the thing
property of get pizza i found it and so once i found it i'm gonna delete
it so if i refresh ye gone there's only two documents left
only two documents left the other one was gone yeah it's gone it's gone
it's deleted beautiful uberfly said i really can't believe i
understand this let's go hold on 10 second warning
10 second warning for uberfly storm getting this 10 seconds five four three two

04:12
one let's go [Music] so [Music] for you [Music] hey does this work
let's go let's go y'all right here understanding how to build full stack full
stack web applications you know how to make
create read update delete request next week you're gonna know how to organize

04:13
it using mvc you're gonna add authentication let's go come on now
so many of us started off the beginning of the year not even knowing
what javascript was and you all are out here
building full stack web applications let's go look at you look at you [Laughter]
all right so we deleted it and then we just responded back to our client side
all right we're out here delay tang right we're out here delay taying and we
just responded hey the to-do was deleted our code knew what to do
it said all right let me console.log that we deleted and then we refreshed
and when we refreshed we made a get request to the server

04:14
our server was set up to hear that get request it heard that get request
it went to the database it went to our to-do's collection it
found all the documents but this time there was one less there used to be three
now there is two from three to two right and so our array
just had the two documents we passed those two documents into our ejs and so
now when the egs renders and it sent back that html
it was missing the document that was deleted beautiful
gisha you're looking at it you're looking at it this is the template for you
boom if you need the code it's in our discord all right
so that's the deleting so now we've gone

04:15
ahead and we've been able to do git post puts deletes
there's actually something pretty interesting here let's let's make sure
there's any questions and then i want to show one other thing before we talk
about the glue should we use this file as a template
hell yeah this is your start um we're gonna add we're gonna have a better
template next week once we get to the mvc um so you can definitely use this
this weekend please this weekend build something
don't ever just watch a tutorial and then go home and be like that was great
leon was on one tonight but it was a good class like i feel great and then
like you don't do anything until tuesday no take this code and build something
make the to-do list do something different tweak it make it a little bit
better make it your own don't make it a to-do list make it a done list i don't
know take this and make it your own in some way shape or form right

04:16
please at this point in program don't just consume you have to do
right you have to do at this point you should feel a little bit more
comfortable with the creating the reading update and deleting now is the
time for you to actually learn by getting in the code playing with it
breaking it when you get lost or or stuck jump on discord jump into those voice
channels get help don't suffer in silence get the help you
need build it break it play with it what if i break it clone down a fresh
copy i can't tell you how many times i've utterly destroyed my code and just
pulled down the most recent push to github that's it
i've done it i've done it hundreds of times throughout my career where i've
just gotten so lost in the sauce where i'm just like [&nbsp;__&nbsp;] it
and pull down the last place i was at yeah you can roll back and all that fun

04:17
stuff but back in my you know what i used to what i did for the longest time
was i would just i would delete the whole repo i'll just
delete everything and just clone down the repo again i don't care i just
delete everything right i was a point where i was like keeping
zip files on my computer before i knew how to use github and i would just like
i would get lost and i would just delete the whole folder and unzip it again and
be right back where i started cool all right questions about the delete
ants asked a really good question is it best practice to delete from the
database in most crud apps or keep the data and just remove from the client
side render we could all do that right now that's actually really fun

04:18
a really cool like extension to the to-do list would
be to build a to-do list that never deletes the data from the database
think about that right if we're looking at our [&nbsp;__&nbsp;] database
right now we're setting like this complete it to false or true there could
be like another thing that we're keeping track of that's like deleted
and set it to false or true right soft yeah and different things soft
leads are a popular pattern so what i could do is i could just set the deleted
property to true and when i render out my like get
request i only show documents where the deleted property is false so all of the
to-do's stay in my mongodb database but the users are only seeing the ones that
they haven't they haven't deleted yet but all i get to keep all the data so
that's a that's a interesting pattern but you all could do that right now just
by extending this idea of complete it uh to being deleted as well or like a

04:19
deleted one know kind of freaky welcome to how
all the social media apps that you use work when you delete stuff it's not
actually deleted i'm sure like the eu regulations are
gonna start changing some of this but yeah a lot of stuff is like not ever
actually deleted that blew my that like if you think snapchat is like deleting
photos i don't know y'all have some trouble some of y'all just got got
and then the act of deleting something too right like we talked about this i
think at the very first like how the internet class works like when you
delete something like in a lot of computer systems when you delete

04:20
something you're not actually deleting anything
you're just marking that space and memory to be overwritten so even if it
was deleted that data is like still sitting there until the space gets
overwritten with new data right like that that's that's going a
little deeper but like like on like phones and stuff if you ever have people
that were able to recover deleted stuff on off of like hard drives and stuff
like that it's because the space was just marked for
to be overwritten but the content was never actually like deleted yeah you know
cool all right so i think that'd be a really cool extension
right i think it'd be a really cool like
if you're going to try and like build on top of this make this app your own if
you want something cool to try try deleting it so the user doesn't see
things that were deleted but you keep the data right
that's cool like that'd be fun to try but do something with this app this

04:21
weekend please please do something with this app as well cool all right
so we walk through the creating the reading update deleting there was one
other interesting thing here and that other interesting thing was
that there are actually there's actually a third type of click that we were
listening for and that third type of click was if we were clicking on something
that had the completed class right so if we're updating these things or if we're
looking here and like i click on get fancy bread
that changed it to the um strikeout but then i can i can i can change it back
to the um i can change it back to like without the strikethrough right
and i can do the uncomplete right and so those were actually two different
clicks one click was marking it complete the other click was marking it

04:22
uncomplete and so what i have is another click
event that's listening for like one that's listening for things that are not
completed and one that's listening for things that are completed and they're
slightly different requests right one's going to mark something complete which
means i have to change something on the database to true and then mark
uncomplete is very similar but when this request makes it to the
server the server is going to mark it as let's see
false right so we can see that mark complete sends it to true and mark
uncomplete sets it to false so we actually have two different puts here in
this application one to handle the completing and one to handle the uncompleting
so just in case you were kind of a little
confused about what that was that's just going to help you to see those two

04:23
different routes cool all right so if you look at the slides
there's a quite more bit here in the slides that i really recommend
um that i really recommend that you look through
in this slide there's a breakdown of each of the key steps so
if you were trying to set up this project here are some of the steps you might
follow if you're going to do it from scratch
connecting your database you kind of just copy and paste this lovely
set of code here and what you'll notice is that in my code
i don't have the [&nbsp;__&nbsp;] connection string just like chilling
in there so if you if you look at my code you can see that i'm using my
environment variables we've done this in a past class and members of the stream
team have walked through this as well and so i'm actually storing my

04:24
connection my db string in my env file right so that when i push this to github
my [&nbsp;__&nbsp;] connection string doesn't get pushed up to github and i have
my mongodb set so that it only works with my ip address so even if you did
have my connection string you wouldn't be able to write to this database at the
moment right cool so we do have like me using the emv
files and so i'm just going to walk through i'm just going to show the other
slides that are here and then i'm going to walk through everything
so if you want to use the emv files there's some slides on it the database
with the env file is here setting up the server stuff is here
creating public files like all the little the little steps are here like
piece by piece should you need them but let's look through this code base yeah
and uh mine was that we linked to uh has has walked through

04:25
kind of all this step by step and we've linked to it in the discord as well so
of course we're using express we're setting up apps that we can use express
um we're using the the main way we're going to talk to mongodb we're just
using this [&nbsp;__&nbsp;] client eventually we
might use things like mongoose to talk to mongodb
um we're setting up our port at 21 21 21
21 21 all right and i am setting up that i'm going to use my env files right i'm
going to use my env files and so the reason why i use env files
like i said is i don't want to put my
connection to my [&nbsp;__&nbsp;] database on
github let's say i whitelisted all my ip
addresses then anyone could start making changes uh to the the database so i put
that in my env file and having this line on line five is what enables me to use
the env file um otherwise what you see here is not something that you would have

04:26
memorized you would just copy and paste this so it's not like something that
like you would pull out your your brain and be like oh i gotta do this this no
this is a lego brick right it's a lego brick that you want to
connect to a database you grab this lego brick and you put at the top of your
file but the best thing is you don't need to even know where to go to get those
lego bricks anymore because you could just start with this template
right you could just start with this template and everything is already here
for you the only thing that you would need to do would be to do an npm install
right would be to do an npm install and then to have an env file um an env file
that lists the mongodb string you have those two things you can just
use this template and off to the off to the runs there
somebody submitted a pr on this actual repo so i'll approve that that walks
through step by step how to do all those things but once you have it you're

04:27
connected to your database we have this lovely variable called db which is the
actual database that we're connected to so wherever you see db inside of your
um your your api here you know you're connected to the actual uh database cool
we're using ejs this is a lot of stuff we've already covered in the past so i'm
just going to go into it quickly we're using egs as our templating language we
have one of my favorite lines of code which just means that we are
using our public folder to hold all of our static files like our css and our
javascript files and then we have our lovely
code that helps us kind of do what body parser used to do we're able to look at
the requests that are coming through and pull the data out of those requests
that's how we're able to get the text out of the request so that we can update
our database or delete stuff from our database cool

04:28
and that's kind of the big stuff here no other really big glue except for the
app.listen we've talked about in the past how we have this like line here so
it could be using our port or eventually if you put your stuff on heroku you're
going to use the environment variables when we get through mvc next week the
glue changes a little bit so i'm not going to spend too i don't want
to spend too much time right now going through all this glue because it is
going to change a little bit next week and so once we get through mvc next week
we'll spend like a whole class talking about the env files and the connection
strings and all that fun stuff because it does change a little bit and so um i
don't want you to stress about this right now just
copy and paste it for now and know that it will change a little bit next week

04:29
and then we'll go deeper questions while we're here let's do um
do a slido real quick we got some time so uh
i will not be holding office hours on sunday but mine will be doing office
hours on sunday so let's go ahead and do a little bit of just
like mini office hours for me if you got questions uh i got some answers for you
let me go ahead and just open up a slider real quick one second i'm gonna go
let me go while we're here doing this um what is office hours office hours is
just a time for folks to ask questions and so um

04:30
normally i do office hours every sunday it's probably gonna be like another one
or two sundays before i'm back doing office hours i'm probably gonna do
um like discord call or something else like that and replacing my office hours
for the next two weeks and then uh once once i get through like next week or two
they'll come back and we'll have our normal office hours so
no need to worry they will come back eventually i know a lot of people really
get a lot of value out of them and really like them um so we'll do that soon
i was not logged into it one second folks i definitely recommend sticking around
for the office hours a little bit a lot of folks ask a lot of really good
questions that kind of you would want to know in terms of the cohort so

04:31
let's do it get a new one here class all right so we got a new slido that i'm
that is open right now i'm going to post it into our chat a few
times here so you can grab it if you need to boom
there we go all right so if you got some questions i will be able to answer them
there go ahead and bring your questions if you haven't also take a look at chat
all right well office hours be held in hundreds of
agencies we'll eventually leave cat space we'll come back to earth
and uh we'll be doing it in the dr dev's agency space
we need channel points for leon to shave

04:32
his beard i shaved it went down it's way smaller than it was before
i wasn't taking care of it [Music] ejs is the frustrating part can i jump
straight to studying react templating languages are hugely popular
and different is saying especially in like ruby php yeah you definitely want
to make sure you understand the basics of templating languages um the
the thing for me is like there are some things that i i
have a heart i've been doing it for so long there sometimes things i really try
to like check my like beginner biases but for me ejs just makes so much sense
it's just html that you can plug stuff into
right and so when you're trying to build
really basic stuff you only need to know how to do like the open and close

04:33
and then like the open and close with the equal sign and then you can do
whatever the heck you want like to me that just makes a lot of sense like
templating languages just like it did they just work right
you don't have to like learn this whole other tool chain all this extra stuff
like you don't have to spend like a month learning something else to just
like get text on the screen right um so for me like i it's one of the hard
ones where it's like templating languages just enable me to do stuff
pretty quickly now i love react like it helps me do a lot of stuff like but when
you're just starting out just get it to work you know
hey never got a chance to say thank you my program helped me get a job at amazon
as a software developer engineer 110k with a 10k sign on i'm in my second
month came back to support the channel a seahawk i appreciate that thank you so
much for swinging by see walker can you send me um i'll grab

04:34
your name but send me a dm send me a dm on discord i would love to talk to you
and see how things are going congrats that's huge
let me grab your name here before i forget it yes i mean dm
um we gotta we we're gonna need to start like uh an employee resource group at
amazon because there's a lot of 100 devs folks there now
here we go we got to like get you all together to hang out or something that'd
be fun quite a few uh leon are there any productivity apps
that you use that you would recommend um i live through my google calendar
notion and probably forest if i'm going to use

04:35
a pomodoro timer and that's about it pen and paper occasionally
i don't really like any other things than that at the moment i try to
like narrow it down to like one place to dump my brain
one place to like actively work and like one thing to keep me
keep me focused so right now notion is like my brain dump pen and paper is like
my like active work and calendar is like what i have to do every
day so my entire day gets put in google calendar if it's not
my google calendar i'm not showing up i'm not going to be there um and so that
helps me just like my brain doesn't work unless it's in the google calendar
is it notion a paid application no you can use notion for free for like a very
very long time it's only if you're storing like a lot of really big stuff

04:36
in there so they don't like store like videos or like images in there otherwise
it's free um like i have like a couple of them
that i don't pay for and i have a lot of stuff in them
uh some other things too that people use or like get book is becoming pretty
popular because you can just like use markdown inside of it there are a bunch
of other tools find a tool that like doesn't make you think right
i like notion because i have a lot of templates that just make it so that i
can just type and it organizes stuff for me yeah
uh when is the office in cs go opening uh i gotta get somebody else to work on
it the person that was working on it disappeared um but i'll add that to the
to the the weekends musings cause i really wanna i really wanna get it up too
yeah i just gotta find somebody else to work on it
we have everything working except for the 64 people
like it everything i wanted to do it does it just doesn't have all 64 on it yeah

04:37
is there any free domain hosting um every once in a while you'll find
something but typically not sometimes you can get your first year free
um but you can just use like netlify and like use whatever your project is
netlify.com i just that i just recommend that in the beginning just throw it on
netlify's domain uh do you think we should be able to
solve these coding challenges from fang companies with what we know now
absolutely not um no we haven't done data structures
and algorithms yet also like fang really shouldn't be the goal like if that's
your goal sure go for it but there are so many other amazing companies that'll
pay you really well treat you really well and you'll have a way easier time
getting into um than fang bang is because some youtuber sold you in a dream

04:38
which is okay to have those dreams but you could probably be supporting a
really wonderful lifestyle and then work up the thing
one of my one of my students i was just literally talking to i'm gonna get them
on either we're building out the agency site and
there's gonna be a section for like students um but one of my past students
they took their first offer was 60k um and then the 60k turned into a hundred k
uh after their three month trial period and then they jumped up to
i i think it was 140 it was like a bigger jump than i was expecting it was 140
and then the company opened a new office in san francisco
and they asked if they wanted to be one of the first engineers to work out of
the sf office and they say yes and they got bumped up to 220.

04:39
and this is in under three years this is like two and a half years
starting at 60 to 220 at the same company [Music]
and so there are tons of companies like that and they had really great
mentorship like they got trained really well they were able to work on really
exciting projects so like there's so much opportunity out there
that you don't have to go for these like super hard leak coding your brains out
type companies to get the things that you probably want if you're looking at
those types of companies um i feel a lack of this is another
question coming from the slido i feel lack of inspiration or creativity when
thinking of projects or just coding in general lawson ideas for the 100 hours
project any advice uh the advice for your 100 hours project
is to make something that you wish exists or something that

04:40
like something that you want or something that you hate and want to fix
right so i always say like build something that you want and div ker one
of our mods all you said or you can like build something that fixes something
that you hate right and so one of those two things are going to be the best
product project you could build because you'll be passionate to build it um if
there's like nothing that you are passionate about right like it could be
something simple too like it could be like you love to play cs go and you have
a really hard time finding other folks that want to play cs go with you so you
create a site that helps gamers connect right beautiful idea for 100 project
brings your passions into it you'll probably sink 100 hours into it some
people think it has to be like these really big grand ideas it just doesn't
have to be it's up to you what you want it to be if you really really are stuck
and you really have no idea what you want to build
just build something that you think a lot of companies might hire for
build a e-commerce experience so many e-commerce companies are hiring

04:41
to build something that's like an ecommerce shopping cart type experience
right so if you really can't come up with an idea of something that you love
or something that you hate build something that a lot of companies
would find useful um and also when we start applying when we get into the hunt
you're gonna be building like a lot of mini projects for those companies like
we're gonna have 60 companies that we network our way into our top 10 you're
going to build simple node apps for those companies so if you are applying
to shopify you're going to build a simple music player if you're if sorry
spotify if you're applying the shopify you'd build a simple shopping cart if
you were applying to adolescent you build a bug tracker like jira right like
we're going to build a lot of mini projects for the top tier companies we
want to work at or not top tier but the companies that
we want to work at the most will you be posting the answers to banky

04:42
uh someone actually started a github repo with all the questions and is
crowdsourcing the answers um so curtis bernard is the person
curtis did it so uh i you can just look at my twitter feed and i retweeted it um
i will link to it in discord um next week i
actually don't want to link to it like i like
it's a catch 22. i love that people are doing it
i still think you should write your own answers
so if you're not going to write your own answers you don't have the time that's
okay look at my twitter but i still think you're going to get
the most value out of writing your own answers
it just does something different in your brain that actually helps you remember
and remember in your own words so that you interview better but if you don't
have the time just look at my twitter and you'll be able to find it
uh can we do pokemon cards soon when we do office hours i'll do the next batch

04:43
and um i have somebody helping me now with kind of like admin stuff the
agency's going to make it's technically just made our first hire
because there's a lot of little admin stuff that i just legitimately
i keep getting backlogged on uh and so i'm gonna have somebody helping me with
all the a lot of these like smaller stuff in the background yeah
so we should see a lot of that stuff go out soon
uh how do i make my projects look pretty use templates
what's the make the best way to make or place to find good ui
templates um on top of templates you can use any ui stuff
um bootstrap on like the old schooler way tailwind anything that you think could
just help with your ui material whatever you want um when we get when we get to
react it'll you'll open up a few more ui things that could be helpful
but in the beginning just use a plain old html css template yeah or a really

04:44
good ui library like indifference saying uh what's your favorite pokemon ever
bulbasaur i want to incorporate scrape data from other sites into a project um
do you recommend any libraries like axios um
yeah i mean axios is amazing we'll use it towards the end of program um
depends on higher scraping data beautiful soup stuff like that can help
with scraping it depends on what you're what you're trying to do
uh can you tell us more about the 100 devs agency yeah as we get a little bit
further along the idea is that um i want to have an agency
that helps support the the program uh in two ways one

04:45
i eventually would like people to be able to be paid for working on code like
i think it's great that so many folks want to give up their nights and
weekends for free um but if there was a way to get paid
while you learned i think that's the ultimate [Music]
equitable way for folks to learn the cool thing about rc is that we raise money
[Music] we raise money as a non-profit to pay our students
and there's a lot of upsides and downsides to it i would love if there
was a for-profit entity of a hundred devs that helped
with stipends for folks that need it and also gave real world experience to
developers that just completed the program i think a lot of bootcamps are
really good at like zero to learning how to code
i don't think a lot of folks have really cracked like
i've been coding for a year how do i become like a senior developer and i

04:46
think that could be the agency pathway i think like once you've graduated boot
camp you could be in an agency surrounded by some really
amazing developers uh indifference are you looking for hires yes uh so you'd be
surrounded by really good developers like indifferent that help you really
grow as an engineer and takes you from that i know what i'm doing to becoming a
really good senior developer and then the money that's coming in could help
fund the boot camp experience for folks that need it um
also it's pretty expensive to run all this stuff like like really expensive
and so there needs to be some way to do it sustainably and i don't like taking
money from students so i'm never going to take money from students to help like
run stuff and so the agency i think is a little bit more of a sustainable way
to do the things that i want to do and make sure that i'm just not eating

04:47
significant costs costs yeah yep oh let's see
uh what is all the job verification stuff that you've been mentioning
recently uh yeah so when you apply to jobs you
need to like verify what you've been doing
and so all of you are part of an agency that has a training program you were all
in the training program and when you start applying to jobs some
jobs are going to ask hey can someone verify that you were in this training
program and so a lot of my time right now is is
verifying that yes they were in the program and then probably hopping on a
call and talking about the things that they were able to build learn and do
and so last cohort that was pretty easy it was

04:48
a couple hundred people right so i can make that work but now we're looking at
a couple thousand especially with the ketchup crew coming
behind and so that's the reason why i needed to to bring on a higher because
managing thousands of requests coming in um
verifying that everyone has been part of the program and
like responding in a timely manner just won't happen so
blah and i are working on a really good process for that so that when you do
need those references or you do need those verifications there's a system
that you can follow for it and then on the back end we're gonna have somebody
that's helping me to like set up my calendar and make sure all that stuff's
happening and going through it yeah yep and a lot of people are saying like leon
i'd volunteer to do it i i love that people want to volunteer so many other
things i'm gonna ask you to volunteer for but something that important like
that that should be equitably hired right like people should be getting paid

04:49
for that uh atlas pug said what's the best way for
us to volunteer at time we went up 100 devs and different handed out the park
yep answer questions in the in the in the discord
uh so many folks come and say they want to help that's the best way to help jump
on discord answer people's questions when they get stuck jump in voice
channels to help people when they're stuck um
sometimes that's not sexy enough for folks but that's what it that's what we
need that's what that's the thing that could help the most
uh a potential employer asked me how many years of experience i have what
would you say to them if i only touch code for the first time at the beginning
of this cohort um so it depends what if you really have never coded anything
then you would say you could say one year you could you would never just say i
only have one year what you would say is i've been involved in technology for a
number of years first doing x y and z um but way back in the day i started off

04:50
with myspace i would always customize my myspace page i customize my neopet page
so i've been writing code since i was little but i've been taking it very very
seriously since the pandemic i wanted to switch careers
so i went to switch my focus into web development and so i really went deep
into building really robust applications i went really deep into building
applications i thought would help other people uh here are the projects that
i've built here the clients i've worked with so you would never actually just
say one year because then you get dismissed but you say oh no i've been in
technology for this long you highlight the things that you've
done a lot of folks have gotten clients a lot of folks if you did the homework i
asked you to build something that helps others well guess what you can bring
that up in interviews right and so if you did all the things that we've been
asking you to do once we get to the hunt we spend a lot of time
on how to talk about your experience that's like the biggest part of the hunt

04:51
is like actually talking in a way that gets you past the gatekeepers and to the
folks that are going to actually care about your code quality
will there be a next cohort who knows uh we might get so busy with
the agency but there's always the catch-up crew you can always join right
now get the support you need work through the classes and get up to
joining us live hey jason carr that's amazing congrats let's keep pushing
uh for the homework with the pr i trouble linking my repo with the 100 des repo
um can you go over how to link it uh just fork my code and make your changes
that's it um if you're having trouble with that i've
actually linked on discord in the follow-on materials channel

04:52
members of the stream team doing exactly that step by step [Music]
in dire need of work by the end of august on how soon recruiters are all
over me many from agencies that provide 1099 contracts should i hold out hell no
if you need to work work especially 1099 that's not a you're not committing to
long-term work get the 1099 get paid and when you find a
a better position or a more long-term position take it yeah don't ever turn
down to 99 work especially if you need monies also i'm not one of these like
i have no loyalty to companies i really i don't give a oh at the end of
the day they don't care about me i don't care about them and

04:53
i'm there to make money i'm not there because i like them i'm not there
because i i love what they do i'm there because they pay me money and
i show up to do the thing that i'm there to do
and the moment somebody else wants to pay me more for the same thing i'm doing
deuces because when the pandemic hit or when the layoffs happened recently
they didn't give a [&nbsp;__&nbsp;] about us so nah nope
i'm there to get mine and everyone understands that they just don't want to
hear it so when you're interviewing you never say any of this stuff
you never say any of this stuff when you're interviewing it's all about how
passionate you are how much it aligns with your values
now but everybody knows what's up we just can't say it get the bag
uh is there a way to look at a website's server-side code using devtools no
some servers will expose apis or you can look at their api documentation

04:54
but a lot of time you don't you don't want to expose what's happening on your
server because that could lead to some really bad security stuff yeah
so a lot of times they'll open up they'll expose certain api endpoints
that you can use but anything else is typically not available for you to see
um you can see different stacks and technologies they're using sometimes
based off of how they respond to stuff yeah how long are your coffee chats uh i
believe right now they're set to 15 minutes normally i do 10 to 15 minute
coffee chats uh i must have phrased it right i repo
with a project how do i set my repo to yours i forked it uh you got to submit a
pull request submit a pull request oh yeah and difference that's so much so

04:55
that some apis will remove info headers to prevent letting you know the
framework they're using uh is there a way to download an entire
website like on github to study um you can download like the full client
side code for a lot of sites but you won't be able to download like back ends
unless they have it on github or something like that already uh
can you go through the end part of update and delete you went through fast
what happens once the client side hears the request how does it update the ejs
so once the change has been made on the database
we send the response back to the client telling it to refresh the page
when it refreshes the page that makes a new request to the server

04:56
where it gets all the data out of the database plugs that into the ejs and
then that ejs spits out html that is sent back to the client so if you missed
that part on tuesday you definitely want
to go back and watch tuesday's class and look at our get request because the get
requests are how we get data out of the database plug it into the ejs ejs spits
out html and then we respond with that html uh highland do you have any offer
negotiation tips in your previous cohort
yeah we had a whole class on negotiation like legitimately a whole class in
negotiation um here's the big heavy hitters about negotiating an offer
when you get an offer you should say thank you so much for this offer this
company is the company i want to work at i'm so excited to join the company i

04:57
want to be here for the long haul so that means that this decision
affects me and my family for the next five years like this is where i want to
be this is where i want to grow i'm over the moon
can you give me the week to talk through with my family
my loved ones and i will get back to you on friday
just making sure i could read through all the details and really know what the
next five years of my life are going to look like i'm super excited to join your
company they say yes you immediately follow up
with an email saying super excited um really look forward looking forward to
talking to you on friday at 8 00 a.m i'll send you a note leading up to it or
calendar invite that gives you some time to think about
the offer and when you get an offer the only thing you want them to think about
is how excited you are to join the company but also knowing that it's a big
decision for you because if it wasn't a big decision then
maybe you don't really want to work there so emphasizing it's a big decision

04:58
for you that affects your family but you want them at the end of the day to be
believing 100 that you're joining that company
like you you you need to to get that across that like you're super excited
you love the offer this is where you want to be you want to hammer that in so
that's what they're thinking about then when you go back and you say
hey i'm super excited to join this company right i had a chat with my my
loved ones we're we're super excited like i'm all
on board uh to join this company however the starting salary is a little lower
than what i'm seeing in the market is there any wiggle room
on the starting salary and that's it that's all you say right
is there any wiggle room on the starting salary you don't make any demands
you don't give a price you just say wiggle room and the reason
why you say wiggle room is because they really don't have any wiggle room

04:59
they'll say no i'm sorry we gave you our best offer and then you get to make a
decision as to whether or not that's the price for you
it's a it's a phrasing that doesn't make people scared that you don't want to
work there right and then it gives them the ability to
say actually we don't have any wiggle room and then they say no or they say
actually we do have some window room how about x right and then they'll sit
they'll give you the counter and then you could take that if you want
if you have multiple offers you can say i really want to join this company
this is the company i want to be at however i have an offer from another
company that is that is higher than the offer that you have made to me
is there any way you can get me close to x and x is like 20k more than what they
offered you right is there any way you can get me close to that this this other
number and the phrasing of is there any way you
can get me close to that number is really important because it gives them
the freedom to say you know what we couldn't get you all the way there but

05:00
we can get you here without triggering that reflex in their brain that says um
oh they don't want to work here no no no is anyone can get me close this is the
company i want to work at can you get me close to this other number that i'm
seeing right now right and so if you use these very specific phrasings
the world is yours you will get better offers you will get
better counters and we have whole classes just on this stuff
i've been doing this for 10 years i know how to have these conversations i know
how to help folks negotiate better offers and so if you're excited about
this type of stuff boy do we have some classes coming up for you
uh when we get into authentication will each user have their own database or
collection no we will have a users collection with all of our users in it

05:01
and then we tie users to other data and other collections based off of their ids
uh how much does hiring slow down after the first year
um how much does hiring slow down after the first year
i'm not sure what you mean by that like after your first year on the job like
how how often do you jump a lot of folks will jump every two years in the
beginning two to three depending on if you really like your company
because it's just often easier to get more money by jumping
oh you mean like at the end of the year like uh so there's like a gap
like december very few offers go out in december um
yeah very few offers go out in december and then it picks up around like

05:02
middle january where like they kind of make up lost time yeah
yeah it's very rare to see like that's why it's huntober like huntober is
really important because like that's where a lot of the last kind of offers
of the year start being formulated into november and then december
everyone's on holiday yeah so it's hard in december
we've had we've had cohorts of rc that graduate in december and did okay
but it's definitely like that's kind of a hard month um [Music]
how do you phrase your expertise to convince an interviewer that you have
the same experience as a two-year candidate uh i mean years don't matter
nobody really cares about the number of years if a company really cares with the
number of years they just they're just they're shooting themselves in the foot
they're not going to get good candidates what they're using is years as a proxy

05:03
for how much you might know right so if you can show them that you have
paid clients you can show them that you've volunteered for non-profits if
you can show them that you have built stuff that helps others if you can show
them that you've built a hundred dollars project if you can show them the agency
projects that we work on at the end of cohor if you can show them all the
little things that you've built you have a really good github you have a really
good linkedin a good resume a good portfolio you have all these things you
can just go boop like i don't have to tell you i can show you
everything that i'm able to do that's how you do it um
and then the actual interview process is how we beat out people you can give me
you can give me all day long people that have more experience but don't know how
to interview and i will run circles around them
because knowing how to interview is a whole skill of itself and if you know
how to interview and you know how to do it well you will constantly beat folks
that have way more experience than you and so that's why we spend a big portion

05:04
of the end of program on like how to interview how to network your way into
positions and how to stand out in the job search
uh it's end of program thailand being extended since we had a long break yeah
a little bit we're like a month over so a month over where i it to be because
i'm going to make up some time we're going to chop some stuff
that i did last cohort that we're going to do this color because it wasn't
really it was more like sponsored stuff so i'm chopping out some of the
sponsored stuff to make up the time so we're kind of like a month off by the
end um but we're at class 45 of around 60. yeah cool
uh when were the agencies that be live very soon
we have it on staging we just got to push it
uh codeword is really helpful for me to learn javascript syntax are there

05:05
similar ways to learn ejs express building and breaking the code that i
just shared with you so the code i just shared with you
tonight build it break it play with it you can add those pieces to your anki
deck at this point you need to be building
that's where you're going to learn the most build break troubleshoot errors get
lost in it like that's that's how you learn back end
similar to how you would do like code wars s stuff
um eventually it's all it should be project based more going forward cool
all right let's uh let's see we're almost at our time right now so
let's go ahead and do a raid let's go get those sweet sweet channel points oh
juice box hero is on so let's go ahead and rate juice box hero
