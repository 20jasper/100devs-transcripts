
00:00
yo hey yo good morning good afternoon good evening
no matter where you're coming from hope you all are doing well
what's going on everybody good to see you on a sunday for a lovely super review
what's going on everybody dang i missed it now no worries no worries
finally catching a live stream on sunday hey
there you go after doing half of the vods that's awesome welcome glad you're
able to join us live took saturday off back to the grindstone a glad you're here
super hyped me too rascal me too what's going on everybody

00:01
how are you doing today leon do you feel ready for this i feel ready for this
yeah i feel ready i'm excited i always really like these
reviews taking some time to go back to html css javascript to make sure things
are maybe clicking a little bit more making a little bit more sense
and taking our time with it today today is a day where we can spend time
answering questions digging a little bit uh spending a little bit more time on
things than we normally would and so we're going to spend a lot of time today
going through html then going through css and then going through all the basic
javascript that we've covered so far so if you are new
this is a great kind of class to dip your toes into the water if you've been
here uh since the beginning it's a good chance to get that space repetition in
maybe clear up some things that weren't fully making sense so there's a lot on
the table for no matter where you're coming from this experience so we're
going to talk about that we're going to talk about kind of all the goodness we

00:02
can get into uh i did do a check-in today we don't normally do check-ins on
on our sunday sessions but since we're doing a review and there are a lot of
folks that might have joined a hundred devs late i want to make sure they see
it so if you want you could do exclamation point check in
the differences i've been here since last cohort hey turn up
uh that link is also always of course in the following materials channel
or if you're just following me on twitter you always see the link as well
there you go all right folks if you haven't already go ahead and give
me a check in just so that other folks can see that we're doing the review now
today is like i said review and it is for both sets of folks new and
returning the thing i will say is that if you were brand new like if this is
like your first 100 devs experience or maybe you've caught some of the vods but
today's your first like day live in class what you're going to notice is
that we're going to go through some stuff fast we're going to take our time to

00:03
explain things but you got to realize that we've done
up to this point about a dozen classes on this material and then we had some
other classes like um like our mini kind of project nights and
our networking nights so there are about a dozen classes that cover the stuff
that we're about to cover in this session so don't don't get down on
yourself if everything doesn't click today if you're new
that just means that maybe keep a list of the things that gave you trouble and
you can backfill those through the the vods that are on youtube all of our
classes always wind up on youtube you can always go back and watch them ad free
cool so i wanted to put that out there that hey
you know what give yourself a little bit of grace a little bit of breathing room
if things if it's your first time things
will click they'll get there as we go on if you've been around for a while use
this a chance to ask a lot of questions i'll be keeping tabs on chat and then we

00:04
also have our slido like normal you can do exclamation point ask if you want to
throw some questions into that slido but as we go along
we'll be answering our questions we'll be taking your time through each of the
material and we'll take our we'll take the day to get through it all
no idea how long this class will go for no idea it goes as long as we need it to
go those folks have questions we're going to keep answering questions if
when you take a little bit a little bit longer on the css take a little bit
longer on the css that's it cool alrighty let's get into it
like i said we're covering html fundamentals css fundamentals
javascript fundamentals and then more review
i would like to start off with questions and the question of the day
is what do you want to review the most do you want to review html css or

00:05
javascript the most let me see you put css html or javascript okay
team css is the winner here well a lot of javascript too everything all right
css and javascript it is done cool all right we'll focus on we'll get
through our html a little bit faster we'll slow down at the css and we'll go
deep in the javascript today thank you thank you thank you
all right we have some other questions here too uh i like to use the slido
i like to use the slido early on um let's just give folks a few seconds
to get in here and let me answer some of these top questions in slido before we
jump into our review today all right for the socially awkward among us
what advice do you have for those of us who are getting through the homework

00:06
fine except for the networking part so if you
all are following along with 100 devs you'll realize that this is not really a
coding program it's a jobs program and so we put heavy emphasis on networking
working with others and building projects that help us get a job right and so
that networking piece is often the hardest part of this experience
for some folks it's not the coding part that's the hardest it's the actual
networking meeting folks and then locking down referrals to jobs one of
the most common things especially if you're new is that you'll see folks that
say i applied to 200 300 jobs and i didn't get it i didn't even get an
interview well that's because they applied wrong
we never ever click apply we network our
way into jobs we make sure our resume is
in the hands of a living breathing human being and we spend
the entire time we're learning also networking so when we are ready to apply

00:07
we have dozens if not hundreds of people we can go back to and say hey i noticed
you have an opening at your job can you get me in touch with the person that's
actually hiring that strategy is leaps and bounds more practical and more
useful than you will ever get out of grinding leak code that you'll ever get
out of even grinding projects which is what or even just applying so that
networking piece is super important now i think when a lot of people think about
networking and we first talk about it they they they have this idea that they
have to be like at meetups talking to people no
you have to find what's comfortable for you and that's different for every
single person some folks will never go to a meetup but they will have better
they will have a better network by the end than folks that are always going to
like in-person events or things like that because you can network just as

00:08
effectively via text you can be in slack channels discords irc communities you
can be on twitter you can be in these places that don't require you to be on
the spot on demand maybe a little bit more asynchronous to where you don't
feel the pressure of having to respond in the moment there are plenty of places
to build connections that don't have to be just like face to face right and so
there's a lot of things that you can do but you have to find what works for you
and so when folks tell me that they're having
trouble networking yeah i think there's a lot of things that can come up there
but one of the things i i really try to push folks is to to not just try one way
to try a bunch of different ways and maybe half of them were just absolutely
horrible experiences you never want to do them again but maybe you find that
one thing that really does work for you so trying different avenues in our
networking class we just we talked about
a lot of different places to find people go back to that class make sure you try
all those and then the other thing that can be really helpful is uh buddy system

00:09
right make sure if you know that you're having
some trouble grab a buddy right somebody from the 100 devs community
maybe you're in a specific study community or maybe you just posted in
one of the 100 dev channels on discord and just say or maybe we'll create a
thread for this later um but if you're having trouble networking it's way
easier with a buddy where you both kind of agree that you're going to help carry
conversation right they're both going to help carry conversation
and that can be a little bit less stressful and a little bit more easy to
kind of meet a new person and then you both kind of get a connection at a time
and so i don't recommend bigger groups but pairs can be often very very helpful
so buddy up uh and then try many many different ways
to network it doesn't have to be like face to face or on zoom or anything like
that it can be text based as well cool i remember the point of this is to
find folks that are already in tech so things like a megel somebody asked uh it

00:10
could maybe be fun but it'd be hard to find folks that are already in tech
already engineers is what you're really aiming for yeah cool
how long after this cohort is finished will discord channel still be available
it ain't ever going away what are you talking about that's here to stay
yeah discord will always be available can we go over m etc and css yeah we're
going to get that stuff today no worries all right let's do two more of these
uh let's do two more of these and then we'll jump into starting our review just
wanted to give folks a few seconds to get in here yeah
will this session be on youtube later i'm not sure i'm not sure the vods are
always available on twitch so the vod will be here for at least 60 days on
twitch but i don't know i i kind of like

00:11
giving folks the incentive to show up on sundays also we spend more time
we spend more time talking and giving like answers to stuff so we'll see
that's how many people we have at the end how many people we got here now let's
see oh here we go boom all right we're at almost 2 000 right now we're
still at 1 500 at the end i'll put it on youtube alrighty
uh what went into the 50k client i can't even wrap my mind around what

00:12
happened what kind of timeline and deliverables they had all right so
that 50k client was for for a conference and so they built an
app for the conference so it was a full stack web application and it wound up
being 70k i don't know if nia is here right now
but yeah they shared that with us um so yeah it was it wasn't like something
that was quick it took a while to build it was a full full full stack web
application um for a conference all right one more and we're going to
get into it um well actually too can you go over the
css layout trick with flexbox yeah we're going to go over flexbox today so we're
gonna do three simple layouts and then we're gonna do three simple layouts with
flexbox uh just to kind of show that the two different ways of doing things so
we'll see a little bit of flexbox today and we'll see a little bit of layout
with floats today too and last one before we kind of jump into

00:13
things today folks why are we supposed to be labeling ourselves
hey stephanie thank you for the thousand bits i appreciate that
thanks for being here why are we supposed to be labeling ourselves full
stack engineers we don't know any back-end right now because it takes a
while for your profiles to simmer right it takes a while for you to start
ranking in google and for all your profiles to to kind of boil up to the
top right and so if you want your stuff to be picked up by recruiters
by bots things like that you can't just the day you learned node put full stack
and then expect it to be kind of picked up by all the filters so we do it now so
that your profiles can simmer and by the
time you're actually interviewing uh you have kind of
you you've kind of been around long enough for that stuff to get picked up yeah
the other thing too is that like you're not actually interviewing yet so it
doesn't matter what you call yourself because you're not running into anyone

00:14
that like it would be a problem right so give your
profiles a chance to simmer and then in a month or so when we're at the back end
you'll be ready to go when we start looking for jobs once we
get through the back end yeah once we get through back end is when we start
focusing on that cool alrighty folks let's get into it
a lot of fun stuff to get in today uh but we're going to start off at the
beginning cool so if you're new around these parts or if
you've been around these parts we have a
few kind of really important things that we did at the beginning
and one of the most important things we did at the beginning is we went through
a coursera course called learning how to learn
by dr barbara oakley and so this course kind of lays well lays the foundations
for how people learn and so if you are trying to

00:15
learn how to code if you're trying to learn html css and javascript you owe it
to yourself to develop effective study habits guaranteed most of us do not have
effective study habits most of us have gone through traditional schooling
without good habits and it was maybe some of the reasons why
certain subjects didn't come easy or certain subjects were very difficult for
you and so starting off and laying your foundation
with learning how to learn right will help you set up the rest of your
time learning how to code do not sync hundreds of hours and trying to learn
how to code thousands of hours and trying to learn how to code but not
actually having good study habits you'll just be beating your head against the
desk over and over again you'll be you'll be taking up more
uh more and more time than you need and so just um
make sure that you're putting time into that before you put time into anything
else deez hey thank you for the thousand bits i appreciate you thanks for being

00:16
here right so one of the very key things that we also
did in the beginning was we watched two videos by ali abdal
and one of those videos was active recall right and then something called spaced
repetition if you listen to nothing else today like
if you just go off on the rest of your rest of your life without ever coming
back to 100 devs this is the thing that i want seared into your brain
this idea of active recall all active recall is after you learn something
you recall the things you just learned typically like out loud to yourself so
you could read a chapter of a book right and then once you're done reading
that chapter of the book you say out loud all the things that you
learned and the reason this is so important is just that simple act of retrieval

00:17
is better than re repetition of that material four
times right so if we looked at this right here
on this little sheet we have here one second we pull up my
demo pro there we go so here we have in one session repeated study in one
session is important we're going to cover that in a second and then retrieval
and so what you're seeing here is this was a study where they gave a group
of students i believe it was like a chapter of a biology textbook they had
to read the chapter and then a week later they had a test on it right and so the
first one here is just where they read the chapter once and then a week later
they did this they did the test here they re-read the chapter four times in
one sitting like they just sat there read it rewrite it read it reread it and
then here they read it once and then said out loud
to themselves what they just learned right they they recalled what they just

00:18
learned and what you'll notice is the students did better with
reading and recalling once than they did by re-reading four freaking times
so could you imagine doing a quarter of the work and getting better results
that's when we talk about like learning how to learn and learning the real
mechanisms behind how your brain works how it stores information how it learns
new material you can literally be doing a quarter of
the work and getting better results if you're active recalling so for those
that are going through the reading this week
i hope you've been doing your active recall there's a lot of meaty topics in
the in that in that reading this week a lot of like
honestly painful reading to get through and if you're not stopping and doing

00:19
your recall you're setting yourself up to not learn as effectively as you can
for me i recall sometimes every couple of paragraphs for me if i if i kind of go
more than two pages without recalling i i kind of teleport to fantasyland i'll
get i'll get to the end of the chapter and be like
what just happened to me right so for me i actively recall very frequently maybe
every couple paragraphs or so and then i i recall at the end of the chapter as
well whenever a senior engineer tells me anything at work i always i always okay
let me recap and i repeat everything back to
them it's been working really well hell yeah dab
it's a really good tool even on the job alrighty next
as you're putting in the time to learning all of these concepts guess what

00:20
you're going to forget them you are trying to cram in
hundreds of hours of learning there's no way that's going to stay in your brain
without utilizing some very important tools this was a study of one it's been
somewhat replicated in other studies but it was just a person that tried to
remember three three letter combinations and they would
give themselves a three-letter combination and then they would ask
themselves to kind of recall that three-letter combination
20 minutes later and it was like a 40 chance that they forgot that
three-letter combination just 20 minutes later and by the end of 31 days
there was almost an 80 chance they had forgotten that three-letter combination
just three letters not all of html not all css not all of javascript just three

00:21
letters and so if you right if you are putting in all this time to learn
knowing that your brain is going to forget about 80 after 30 days that is a
fool's errand you you you are setting yourself up to fail so there is a
beautiful way to flatten this forgetting curve and it
is probably hands down the most important thing you will do
on your learning journey and that is resetting your forgetting curve we can
space out some repetition meaning that we'll cover a topic
and then a day later you can cover the topic again a day later you can cover
the topic again and so on and so forth and what happens when you review this
material when you review this material multiple
times your forgetting curve starts to get shallower and shallower what used to

00:22
be you would forget it in 30 days becomes 60 becomes 90 becomes 120
becomes almost you'll never forget it ever again and so we're able to reset
our forgetting curve by using a very important tool called enki inky is flash
cards with an algorithm behind them a-n-k-i and what it does is you can put the
things you're learning into anki and you can review them
and this algorithm will show you the material when you need it most right so
uh if you've been kind of acing html every single day you'll start to see
that it'll stop showing it'll start showing you the html further and further
along so meaning that you'll go from seeing that html topic every day to
maybe once a week to maybe once a month to maybe once a year and so this idea is
that you want to be putting everything that you're
learning into a tool like enkei so that you never forget stuff

00:23
don't put everything don't put all this time into learning and then not use anki
yep and anki is completely free you do not
have to pay for it it's free on android it's free on windows mac os etc the only
thing that the only place you have to pay for anki is on ios but you don't
even need to do that you can just use the web browser and and view your cards
on anki web if you're on ios so yeah everything you learn goes into
anki all the things that you want to remember all the things you think you
need to recall go into anki if you are trying to learn
how to code and you are not using active recall and space repetition
you are doing so you're putting you're you're making so much more work for
yourself and you're going to get frustrated way more often i can't tell
you the difference between folks that use anki and that don't one of the one
of the very first things that i always ask my students is when they say leon

00:24
things aren't clicking for me things aren't making sense my first thing i
always say to them the very first thing i say every single student that says
leon things aren't clicking things aren't making sense is show me your anki
that's it that's the first thing i ask because if i can see that you're doing
review every day if i can see that you're putting good good good stuff into
your anki deck right then we got some other problems to to solve
but nine times out of ten when a student says leon i'm lost things aren't
clicking things aren't making sense they're not doing anki they're
definitely not doing it every day and they're not putting they're not taking
it seriously so if you've been having trouble with javascript you've been
having trouble with css you've been having trouble with html anki inky inky
anki inky and there's no way like people kind of
get stressed out about how to use anki there's no wrong way to use anki make

00:25
cards put them put stuff in there and if it's easy stuff you'll you'll remember
it faster if it's hard stuff it'll take a little bit longer but there's really
no raw right or wrong way to do anki uh the only real change i make to anki
the only real change i make to anki i have no idea where my itunes popped up
um the only real change i make to anki is that i do a study session
i do a study session of a hundred cards that's it for me that's like the only
change i've ever made in anki is i do a studies i do i do a study deck of 100
that's it that way i'm just reviewing more cards each day but nothing else
special just get in there get in the muck and do it if you need help with it
watch a youtube video there's plenty of youtube videos on how to set up anki
there's nothing special to it the things that i learn and i read i throw into
anki and then i recall them the stuff that's too easy i won't ever see it

00:26
again like i showed you some of my cards that says like i'll see that card in
five years from now the stuff that's harder you see a little bit more
frequently no wrong way to do it 100 new a day yeah when i'm grinding i
do 100 new but nowadays i don't really have as many new cars as i have review
cool my goal is to have a five-year anki card
it happens quicker than you would think especially if you kind of like get it
right all the time what are you anchoring today my anki is mainly
like courses that i do so i've been working through a lot of mit's open
courseware stuff uh they have a lot of really great stuff on python advanced
algorithms data structures math my big thing right now is trying to get

00:27
better at math there's some bigger type of projects i
want to work on and my math ability is just not where i want it to be and so a
lot of my anking is around math and going through a lot of mit's open
courseware stuff related to math and math for programming programmers yeah cool
i used anki for learning japanese yeah that's kind of like the original use
case for it was to to learn languages you know cool
now the reason why we do this space repetition why we throw everything into anki
is because here's what happens when you do space repetition
here's if you just study something once that's how likely you are to be able to
remember something later on look at that look how pitiful that is if you just
went through a reading like like we had to read
like eloquent javascript and i need to hear like all right

00:28
you had to read eloquent javascript oh god no god please no no no
right so you have to read eloquent javascript right and
if you just read that like paragraph once that's it like this is this is how
likely you are to like remember the things that you read look how small that is
right that's how likely you are to remember the stuff that you've read in
that book however if you were just to recall once to like read it
and then say out loud the things that you just read
look how look how much more you're able to actually recall stuff right you went
from like what like below 5 it's almost like 25 30 percent
just from out just from reading out loud once right that's recall once it's not
recall a thousand times it's recall once look at that jump oh my god i just want

00:29
to like want to grab all of you by the shoulders and shake you and say like
look at that jump from reading to reading and recalling once like look
look at it just look at it right recalling once gives you that much more
of an impactful learning than if you just read it like it just doesn't make
sense to not actively recall look at a 20 jump you're getting in remembering
stuff what would you do to be able to remember 20
more stuff like like people would pay people would take if i could give you a
pill that would make you remember 20 more you
would take that pill all day long this is the pill folks you recall once and
look at that jump right look at that jump it's huge
now something that a lot of people do is they'll they'll sit there and they'll
reread right they'll re-read in one session so they'll read the chapter and then

00:30
they'll read it again that repeated study in one session doesn't work
right so if you were to like reread that chapter four times look it's worse
like rereading is worse than reading once and then recalling like
how is this not on the front page of every textbook that reading once
and recalling is better than rereading multiple times
it's criminal that it's not on the front page of every textbook
and then where it gets really wild where it gets really loopy is if we look at
the repeated repetition that's spaced meaning we're using a tool like anki to
see it when we need to see it look at that jump folks
we went from reading it once and never recalling it to almost an 80
chance of recalling just through a little bit of space repetition
these are cheat codes these are cheat codes to your learning if you are not

00:31
using them why look at the differences folks look at
the differences it makes no sense to go through this experience and not
actively recall and not space space your repetition you're not doing those two
things you're just wasting your time now all of this
and the reason why we have 100 devs is to help folks get jobs
right now there is a window open i have no idea how long this window will
be open for but right now there is a window open
where you can get a high paying job that is one of the happiest careers
you don't need a degree and you can learn it for free one more time

00:32
high paying job one of the happiest careers you don't need a degree and you can
learn it for free i have no idea how long this window is going to be open for
i want each and every single one of you to experience what it's like to be a
software engineer to to command a good salary with high growth
right there are a lot of jobs out there you can get to have decent salaries but
software engineering is a high growth career the more money you put into it
sorry the more time you put into it the more money you can make one of my
favorite things seeing in the celebrations channel was i got a 15k
raise i didn't ask for it what i got a 15k raise
i didn't ask for it i got a five thousand dollar rage i didn't ask for it
like if you just been in the in the following if you've been in the

00:33
celebrations channel these past couple weeks you've seen
a bunch of messages along that same vein
15k more 5k more didn't even ask for the raise they just got it so when i say
high growth that's what i'm talking about right
it's a good paying job it's a happy career you don't need degree you can
learn it for free and the growth is there the more time
you put into it the more you learn the more you do the more that that career
will grow with you and so one of the things i ask all my students
is what do you want you want a good paying job with high
growth do you want a happy career all right
do you do you want something that can give you
uh the freedom to do the things that you want to do
and if you want it go out and get it we're laying a path

00:34
right we're laying a path that i have seen help hundreds of folks get jobs
this is what i do been doing this for the past 10 years
teaching people to code and for the past
five years i've laser focused on helping folks get jobs
i'm gonna lay down a path that has helped a lot of folks
a lot of folks get jobs you look at our last cohort you don't have to take my
word for this you can go into our celebrations channel and see all the
jobs folks got from following this path right but as always
to follow this path takes a certain amount of privilege you have to have the
privilege of time you have to have the privilege of being able to learn right
so i don't want you to think that everyone can do this i believe everyone
can learn how to code it's one of those things that like what's the thing that
you'll well what's the hill you're willing to die on the hill and one of

00:35
the diamonds i think anyone barring developmental delays can learn how to code
but it might not be your time to learn how to code but if it is your time if
you have the privilege to learn if you have the privilege to invest this time
don't waste it and then the other really big thing that
will that we like to say around here is that it's a marathon not a sprint
some of you are gonna hit classes to a t right some of you are gonna be like yep
the classes were absolutely paced perfectly
some of you are gonna go faster than the classes and some of you are gonna go
slower than the classes one of the beautiful things is that we have the
catch-up crew here at 100 devs where if you're behind or if you're joining late
or if you just want to go at your own pace right if you just want to go at
your own pace you have a group of people that are doing something similar it's a
marathon not a sprint things don't have to come
perfectly as classes going along you can

00:36
take your time whether it happens in 300 days or 200 days who cares this is for
the rest of your life right you're setting yourself up for a career that'll
last the rest of your life hopefully and so if it takes 150 days versus 300 days
who cares go get your pace make sure you're learning make sure
you're investing in yourself with active recall with space repetition and you
will get there i promise i really do you put in the work you ask
lots of questions you do the things we say the active recall the space
repetition you will get there i have seen hundreds of folks from all walks of
life from every challenge you can possibly imagine get there if they do
the things that we lay out now the last thing i'll say before we move
into our review is this path might not be the path for you that's okay there are
many many amazing resources out there free code camp the odin project there

00:37
are other boot camps that you could join
right like you're like my like you might not like my face right you might not
like the way that i teach that's okay don't let that stop you from an amazing
opportunity when there are so many other free amazing resources out there right
there's a window open where you can get paid well have a happy career
you can learn it for free you don't have to pay a dime you don't need a
certification you don't need a degree and you can learn it for free
thank you thank you everybody loves my face that's okay alrighty so
if it sounds exciting to you if this idea of a high paid happy career where
you can learn it for free you don't need
a degree buckle in we're going to review our html css and our javascript today

00:38
we're going to answer as many questions as we can and we're going to take our
time we're going to go through it remember this is something we've done
over 12 13 14 classes so if there's any topic that we go over a little too fast
you need more time on it you can always go back to
that class on youtube you do exclamation point youtube always here in chat or
leonwell.com youtube will take you there as a well big topics left
uh this is we're cramming all of our all of our motivational learnings into the
beginning of this class i i know that we're spending a little bit of time on
this but i think it's really important especially for folks that are new to
hear all the the big things we've talked about so give me give me like another
three or four minutes and then we're gonna jump into the actual code

00:39
a lot of folks when they first start trying to learn how to code
they get down on themselves they feel like they'll never be able to
learn it they'll feel like they'll never be able to actually get a job they'll
feel like they that they just don't have it in them and
they'll start to let all these insecurities like all these um
doubts all these things creep into their
brain telling them that they can't do it and it happens to pretty much every
student i've ever taught and there's really two different types of people
the folks that let that stuff get to them and the folks that push on
knowing that they will eventually get there and one of
my former students and now expert in residence
really talked about this one concept that's always stuck with me
and they equate it learning how to code to a baby learning how to walk

00:40
babies don't sit there having an existential crisis about learning how to
walk they see other folks walking around them and go you know what i'm gonna
learn how to walk too for some reason when we get into coding
people look around and they see all these cool projects they see all these
people slinging some good javascript and instead of saying i'll get there too
they start to say to themselves i'll never get there babies don't do this
babies look around see people walking and that's encouraging
that that's motivational and they eventually learn how to walk
that's the mindset you need going into learning how to code you can't compare
yourself to others you can't look around and start to feel bad
you have to look around and go holy [&nbsp;__&nbsp;]

00:41
that's really cool i'm gonna get there too so learning the code is half
really hard work and half believing you can do
it as soon as you believe you can do it the life life changes you'll be able to
study more effectively you'll be able to put more hours in
and so you just have to make a decision am i going to get there or not and
that's one thing i can't do for you i i can't make that switch flip in your head
other than to tell you i have seen every type of student possible folks with
adhd dyslexia folks that are returning citizens parents
every walk of life that i can think of some of them didn't make it some did the
ones that always did were ones that said you know what
i can do this i will get there eventually i'll go at my own pace and i
will get there i won't give up they didn't give up and they all

00:42
got there hundreds and hundreds and hundreds of them that told themselves i
can do this i will get there i don't care how well you did in school
i don't care if you have a degree it's all nonsense it comes down to hard work
and the belief that you can do it you can do it we'll stop
this also leans into this idea of imposter syndrome
for a lot of us this idea of i can do it is a harder battle than for others
some of us have this idea of imposter syndrome where
no matter how good we do or or what we do do it's not good enough and that's
one of the primary things that happens to not only new developers but even
developers have been doing this for a really long time it's one of the things
i struggle with the most i've coded some amazing products i've

00:43
worked with some amazing teams i've taught at harvard i've taught at mit i
i've i i think i have a pretty good rolodex that proves my
engineering muscle but still there's something in the back of my brain that
tells me i can't code i don't really know what i'm doing
i don't know where that comes from all i know is you have to squash it
you can't let that monster be the thing that drives your learning
journey uh we we did the we did the david goggins quote where sometimes you
have to open up that closet yell at the monster and say what's up that's what i
have to do with my imposter syndrome that's what a lot of my students have to
do as well knowing that it's a thing and then
working to get over it or to to work around it right
for some of you this imposter syndrome will never go away
so if it's never going to go away and you still want to be an engineer we got
to come up with strategies to work around it and the strategy is knowing
that you're building great things that you're on your own learning journey that

00:44
you're doing things right you're doing your active recall you're doing your
space repetition you're getting your reading and you're showing up for class
if you're doing those things you are doing what you need to be doing and you
will get there in time imposter syndrome or not cool
the last thing that makes learning how to code super super difficult
is not even the belief it's not even the imposter syndrome it's this idea of the
trough of sorrow most folks come they want to learn how
to code they're like high paying job leon i saw so many folks get six figure
offers last cohort i saw so many folks get jobs where they can work from home i
saw so many folks change their freaking lives
right i want that and so they they come to us having gone up udemy hill where

00:45
they bought all these courses because buying courses feels good oh it feels so
good buying courses feels like you're doing stuff even though you're not right
and then you're at the very very top of udemy hill
and then eventually you say to yourself i'm going to actually start learning i'm
going to actually start trying to build projects
and quickly the wearing off of novelty happens and you plummet into the trough
of sorrow and then you're in this trough of sorrow for months
months where you can't see the end months where you're wading through the muck
and this is what stops people from learning how to code
once they get into the trough the imposter syndrome creeps in that
feelings if they can't do it creeps in and know this is the process that has
battle-hardened every engineer that has come before you i don't care how
intelligent or smart you think you are you're still going through the trough of

00:46
sorrow it's a lot to learn there's a lot of things to remember
there's a lot of things to learn how to do you will get through it
and there are a few ways that my students get through the trough of sorrow
and it's really only these three things that i've ever seen across thousands of
people that i've taught to learn how to code and hundreds of folks i've helped
get great jobs the three things that my students do well
is they know how to manage their frustration they know how to be consistent
and they know how to take care of themselves so what the heck do i mean
for adult learners life is somewhat in our control
we can say when we want to go to bed when we want to wake up
maybe what we want to eat what we want to do right we we kind of have control
over our days children really don't have that control

00:47
and so it's easier for them to learn and not get as frustrated there was a study
where individuals looked at when adults learn sorry lose the ability to become
fluent in languages and what they found is that they didn't really ever lose the
ability it does somewhat diminishes you get older but they didn't really lose it
what they realized is that as adults got older they just lost the ability to
manage their frustration when it came time to learn a new language they didn't
make time for it they got frustrated and they never actually learned it so the
biggest thing that's going to stop you from learning how to code is not being
able to cope with your frustration they're going to be weeks where nothing
makes sense let me say it one more time there will be
weeks where things don't make sense where you're trudging through the trough
of sorrow and it just doesn't nothing's clicking
it doesn't it doesn't make sense you're you're doing your recall you're doing
all things you're supposed to do and it just it just won't make sense i've i'm

00:48
in that i've i've done that before like i've as i'm learning new things there
will be weeks where i'm i'm trying i'm grasping on anything i can grasp on i'm
i'm i'm on i'm on discords i'm on youtube i'm reading blog posts i'm on
stack overflow and it'll just be a week or two that goes by where i just nothing
makes sense but i don't give up because i know that
eventually it will click i have a belief in myself
and i can manage my frustration long enough
to get to the point where it does click most folks give up because they can't
manage their frustration and they don't want to give themselves that time
give yourself the time the marathon not a sprint
the other thing is that people when they're learning most often not consistent
and one of the worst things you can do is chunk your learning onto like a
saturday right a lot of my students go leona i'm
not going to study during the week but i'll study i'll study 10 hours on

00:49
saturday yes you're not going to study 10 hours on saturday you might do it once
and then next week comes and you got a baby shower the the week after you
i don't know grandma needs some new flowers right
and so what happens when you're not consistent daily is eventually life gets
in the way right eventually life gets in the way and so
if you want to learn how to code you have to be consistent every day
we know why consistency works we we just saw the charts on space repetition if
you're studying every day you're building in that repetition so it just works
right so being consistent every day gives you that repetition but also make
sure that you are getting that time in and that if you do
have an off day or two you're not really super behind so for most folks

00:50
you're looking at an hour to a day trying to find that hour to a day is
really hard for a lot of folks but if you can you can be consistent that could
be the game changer for you i'm a couple weeks behind on javascript
it's too late for me to catch up nope you have the catch-up crew that you can
join and always complete stuff at your own pace we're also going to go through
a lot of stuff today yeah that's that that's the point of
today's class this class is for you to get you caught up to see all the topics
that we've covered so far and then to be
able to kind of know where you got to go and fill in the gaps
all right so you manage your frustration you're able to be consistent the last
thing is you got to take care of yourself you're talking about months of
really hard mental work you have to be taking your breaks at the
top of the hour you have to be stretching you have to be making sure
that you can go the distance to get through the trough of sorrow so many

00:51
folks will start to learn right they'll start to learn they burn out
they burn out and once you burn out it's really hard to recover
and so the way you stop yourself from burning out is by giving yourself breaks
having manageable sessions right having manageable sessions
making sure that you are letting your eyes focus on something that's not your
screen you're doing uh the exercises we posted in discord we use dr levi the
fitness doctors hand exercises you're going for walks to move around let your
back decompress right you got you got to do all these things to take care of
yourself get good sleep eat well right all these things will help you when it
comes to your learning journey you can't just sit there for eight hour
blocks of time with no breaks and expect to go the
distance and learn how to code it won't happen

00:52
imagine your frustration be consistent and take care of yourself physically but
also mentally right also mentally right make sure that you are
giving yourself grace throughout this entire process
understanding there are weeks where stuff will make sense in weeks where
there won't making sure that you're being a
you're being a baby and and not looking around and comparing yourself to others
and saying i can't do this i won't ever
learn how to walk that's [&nbsp;__&nbsp;] you will don't use that as an excuse
and finally do it just do it so just do it make your dreams come true just do it

00:53
now wiser words have ever been spoken just do it it's a lot of hard work it's
a lot of managing your time it's a lot of managing your frustrations a lot of
being consistent but folks that do it you can reach a dream that i think a lot
of folks have a good stable high-paying career
with in-demand skills that no one could ever take from you
the ability to freelance to put more food on the table whenever you need it
these are super powers that i want for every single person and so
just do it don't ever let one get in your way don't let me get in the way of
you learning don't let anyone else get in the way of your learning but do it
and the beautiful thing is you can do it with an amazing community the most
beautiful thing about 100 devs is that we have folks that are willing
to help you go on discord you ask your questions your questions gonna get
answered in our help channels you come to our networking night you're

00:54
gonna meet some amazing folks you can do a project night you're gonna work with
some amazing folks and so i think a lot of folks
one of the reasons why they don't make it through and they can't just do it
because they're doing it by themselves don't learn to code by yourself join an
amazing community of folks that want to see you be successful that are going
through the trough of sorrow at the same time
and uh that's 100 devs so if you ever want to join our community discord is
where we hang out your exclamation point discord here in chat early on noel.com
discord occ thank you for the bits appreciate you all right
you owe you last thing i'll say don't go through today and then not
build some anki cards you owe you famous words dr thomas you owe you right
um and in that video dr thomas video they said if you went to best buy you
bought something you brought it home and it didn't work it was broken it didn't

00:55
do the things that it said it would do you'd be back at best buy demanding a
refund hold yourself to that same bar right
hold yourself to that same bar if you're not doing your anki you're not doing
your active recall you're you're not putting in your consistent time each day
you got to have a refund conversation with yourself you owe you alrighty
we're gonna jump into what is the internet and then dive into some html
and dive into some css and then finish up with some javascript but we're at the
top of the hour so we're gonna be healthy we're going to take our break
right we're going to take our break i know we spent the first hour
doing all these uh kind of laying the groundwork but i think it's
really important for folks that are joining us new that they understand
active recall space repetition they understand what type of journey they're
about to go on and so hope you see some value and making sure the new folks with

00:56
us get that as well so let's go ahead and take our five minute break and then
we're gonna start jumping back into what
is the internet going through html we're
locking and loading for a full day folks
we're gonna be here for a while so let's
put that timer up there make sure you're staying hydrated
put five minutes on the clock all right have at it we back in five
truly say it hey thank you for the for the three most year three thank you

00:58

01:00
take your break i want to run ads that you actually take a break so
i got six ads you should have been taking a break you should have got no ads

01:01
should we take a break all right one second you set something up brb foreign
just start putting together a schedule for myself can't keep going like this an
hour study on the weekdays more on the weekends
yeah just make sure you don't burn out on the weekends though
oh yeah being consistent awesome all right folks come on back come on back
anything i got accepted into an apprenticeship program do you believe
it'd be difficult to do both probably probably pretty intense to do both

01:02
good thing is that we'll always be here alright folks come on back
alrighty so uh let's just take a quick look at some of these these kind of
quick questions in the slido and we're going to jump into how the internet works
i just want to do like three probably when we come back from each break
uh having problems with the navigation bar by using float only can you show us
how to do that like the bbc navigation bar i believe we did the bbc navigation
bar in class but when we get to floats i'm happy to
show a navigation bar just remind me all we do is we float everything to the
left and you got to make sure that it has width right make sure it has width
that's all you got to do why who should i reach out

01:03
to a company i like to work at someone doing the job that i like to do or
someone hire a senior even a director so the question is like you you see a
company you want to work out who do you reach out to
you want to reach out to as many folks as you can at that company whether
they're managers recruiters engineers because you're going to send out 10
different requests only one of them is probably going to get back to you yeah
so you want to make sure that you you reach out to as many folks as you can
when we get later in the program we're going to do a hit list process where we
kind of find the companies we want to work at we find the best people to talk
to each of those companies i'll do a list live so you can actually see who
i'm reaching out to i always typically start with recruiters and folks on the
engineering team and then work my way out from that uh i just want to say

01:04
thank you no worries you all put in the work not me uh
how do you keep the conversation going in a coffee chat without awkward silence
without asking a lot of questions and making it like an interview
some coffee chats flow some don't right and so the pho and so the coffee chats
that don't flow don't worry don't be afraid to ask questions
right have your list of questions ready to go if you want to right
you can you can have your like we shared like a list of like five to ten
questions if you get through the five to ten questions and it's still not jivin
say hey i really appreciate you thank you so much for your time i really get a
chance to know you a little bit and i hope you have a great rest of your day
and then cut it short you don't you don't have to become best
friends with everyone right that's why we do so many because so many of them
will be duds but then some of them will be amazing
but remember we asked you to read how to win friends and influence people if

01:05
you're having a hard time carrying conversations
definitely read that book that book gives you the cheat codes to kind of
like talking with other humans and the biggest thing you can do is get them to
talk about themselves so i ask tons of leading questions let them talk about
themselves for a half hour if half hour if the conversation is not flowing
called how to win friends and influence people by dale carnegie yep cool
alrighty let's talk about the internet folks so chat what's the internet
you all here to become software engineers specifically software
engineers that focus on full stack web development what the heck's the web oh
yeah it is a wire nice uh or a series of wires and so let's

01:06
start off with a wire and on this wire we're gonna see two kinds of devices
we're gonna see client-side devices and we're gonna see server side devices
all right let's see client-side devices and server-side devices now
client-side devices are the devices that we use to consume the internet so
whatever you're watching me on right now that's a client-side device right
whether it's a mobile phone whether it's a tablet desktop whatever you use to
consume the internet is a client-side device now
out there on this other side of the wire are servers which are computers that do

01:07
a very specific thing for us what do you think a server does server's
just another computer out there on that wire but what do you think a server does
serves exactly it serves when a website goes down that means that
the server is having issues most likely yeah a lot of times like like uh stack
overflow i think went down the other day right and so
a lot of times when when you're not getting you're trying to go to website
you're not getting data back one of the big issues is that the server might not
be on or running or something might have happened on it so it can't serve up the
stuff that you need right so when you go to a website right let's pretend it was
netflix right we go to netflix.com we hit enter and nothing happens right
maybe that maybe nothing's happened we're not getting any information back
that might mean there might be some trouble
with netflix's server it's a computer that's out there on that wire that's

01:08
trying to send you information but for some reason it can't right now now
we have those client-side devices the mobile phones the tablets the desktops the
the things we use to consume the internet and running on these devices
is typically a bunch of programs uh so running on our client-side devices
we typically have something called a browser right and that browser
enables us to open certain kinds of content right
if you were on your client-side device if you were on your laptop your desktop
right and i asked you to open a word document what program would you use
i should open a word document what program would you use
yeah you use microsoft word to open that word document if i asked

01:09
you to open a pdf what program would you use to open a pdf
yeah you might use like adobe to open a pdf
well guess what your browser is doing your browser is opening
very specific kinds of files the browsers that run on your computer like
chrome safari firefox they are opening very specific files they're opening html
they're opening css and they're opening javascript files
right and so this browser is going to be opening those files
just like microsoft word would open word documents and adobe would open pdfs
and so when we make a request from our client-side device we type

01:10
an address into our browser and hit enter that request
leaves our client side device and finds its way to a server that server
here's the request and is in charge of figuring out what to respond with
so if we typed in dominoes.com remember we're we're just
gonna we're gonna pretend here we're not gonna actually type in dominos.com we
don't want to start that right so if we were to type in dominos.com and hit
enter that request would leave our client side device
make its way all the way to domino's servers dominoes would hear that request

01:11
right they would hear that request and they would respond
with a bunch of stuff they would respond with html they were respond with css
they would spawn respond with javascript images videos they would respond with
all of this stuff all right and all that stuff would come to our browser
and our browser could open those files it could open the
html it could open the css it could open the javascript
and that's what we can see in our browser that's why we can see websites
that's why we can see stuff and interact with stuff in our browser is because we
made requests to other computers that sent us all these files now
i'm not allowed to go to dominos.com anymore it's a long story many of you
know the story let's not get into it no longer allowed to go to domino's so

01:12
we're going to pretend we're going to pretend that i went to dominos.com right
went to dominos.com pretended hit enter that request goes to domino's server
dominoes starts throwing pizza parties they're they're high fiving they know
they're gonna send all their kids to college because i'm back right
server here's that request responds with a bunch of files now domino's website
have been there in a while but it used to be glorious
right domino's website was beautiful because when you go to dominos.com
you would see a delicious pizza at the top of the page
you would see a list of ingredients going down the page all of that content
right all of that content that that pizza that you see that list of
ingredients that you see that's all powered by a technology called html

01:13
so if you've ever been to a website and you saw content you were dealing with
html now on domino's website the peppers were green
the pineapple was yellow the ham was pink all the ingredients had really
beautiful styling they had different colors it looked great
if you've ever been to a website and it didn't look like a hot dumpster fire but
actually looked good that is css so if you've ever been to website you
saw content text images that's html right but if you've ever been to a
website and it looked good right it looked good right it had it had styling
it was centered there was color that is css now the final thing
the the kudegra the the the most beautiful thing that was ever

01:14
on the internet at that time was you could drag the ingredients onto
the pizza mind-blowing revolutionary stuff here it was the best thing ever
that behavior that interaction that ability to drag
and drop stuff that was powered by javascript so html
is all the content that we see css is how we style it make it look good
and then if we ever have behavior interaction we're listening for clicks
we're dragging we're dropping that is all javascript
and whenever we type in a url into our phone or our tablet or our desktop and
we hit enter what we are doing is making a request that leaves our computer
goes to the server and then the server has a bunch of code running on it
that determines and figures out what html to respond with what css to

01:15
respond with what javascript to respond with and sends all of that back to our
device and specifically to our browser for it to be rendered for the user to see
now the cool thing is that server when it hears the request it might have to do
a lot of stuff like sometimes it's going to go to like a database
and get all my past orders right sometimes it's going to go to
sometimes it's going to like look at its files
and find the right html file to send sometimes it's going to process our
credit card information sometimes it's going to send the order to the specific
domino's restaurant so there's a lot of stuff that can happen server side right
once the once the server hears the request we
asked for dominos.com it might need to process credit cards they might need to

01:16
talk to a database it might need to do some other things
we call all of that back end code all that stuff that runs on the server
that the server needs to handle that's back end code
all the stuff that runs on the client side device that html that css that
javascript we call that front-end code now someone that works on the
client-side code the html the css the javascript
we would call them front-end web developers
someone that just works on the server side we would call them
back end web developers and someone that works on both the front end right
the front end and the back end we would call them full stack web developers so
at the end of this program you will be full stack web developers

01:17
meaning that you have the ability to write code not only on the front end but
also on the back end so so far we've covered
html css and javascript enough to make you dangerous as a front-end developer
then we'll quickly move into node which will make you dangerous as a back-end
developer combine them together and you are a full stack
web developer now since we write code and we've already written code
or if you're new you'll write code today you're already what we call a software
engineer someone that write write code that understands the tools and systems
behind the code that they write but the thing that we're specializing in as a
software engineer is full stack web development we could write code that runs on
tvs or refrigerators or your mobile applications
you would still be a software engineer but your focus would be different so
here we're software engineers unless you live in canada an engineer is a

01:18
protected word there but we're focusing on full stack web development cool
questions while we're here i know we cover this in way more depth in our
intro to html class but since this review it's the highlights questions and
joe's you thank you for the uh for the hydration cheers to you
fine well thank you for the prime is this mern stack yes
can servers run any language are they limited to javascript it's a great
question your servers can actually run a lot of different languages
php ruby javascript etc but we use javascript on

01:19
the back end to run on our server that way we have to learn really one language
right we only have to learn one language the beautiful thing about learning
javascript and why i teach it is because it'll run on the client side
and the server side you can't beat that folks imagine only
having to learn one language and getting an amazing job that's what i mean
there is a window that is open right now and i don't know how long it's going to
be open but one of the things that contributes to this window being open
is the fact you only need to know one language to build full stack web
applications you can't beat it thank you for the posture check taco fed good
there we go we are live every tuesday and thursday
at 6 30 p.m eastern time we have our lovely office hours every sunday at 1 pm

01:20
eastern time an amazing discord community 27 000
you can always do exclamation point 100 devs to learn more about the boot camp
all right will we learn react and the back end of course i got you clue alrighty
let's keep it moving then alrighty now we talked about this html the css and
this javascript and there's one really really important rule
that you have to keep in mind xavim2000a thank you for the hydration

01:21
cheers to you there's one really important rule that we have to keep in mind
and that's this idea of keeping our html our css and our javascript
separate why might we want to keep our html our css and our javascript separate
chat organization exactly organization right organization this idea that we
want to make sure just our content is in
our html just our styles and our css and just our behavior interactions our
javascript that way when we come back to our code and we're trying to make
something pink where do we go if we're trying to make something pink where will
we go chap yeah we'll go to our css remember css

01:22
handles all of our styling so we want to make something pink we'll go to our css
what if we want to add some more text for our users to see
i want to add more text for our users to see where are they
going yeah they're going to our html yep go into our html and if we want
when our users click on something to see it wiggle right
want to see something wiggle what are we going to use
yeah because we're clicking as that behaviors interaction that's javascript
awesome so we have this separation of concerns this idea html css and
javascript be all separate files they should be all in their own place that
for organization and the beautiful thing about this is that
it's something that we can all agree to that helps us when we come back to our
own code but if we're working with other developers we know where to go and they
know where to go when dealing with our code as well

01:23
throughout 100 devs they're going to be a few things that i think are
really important best practices right but we try our best
to be baddies and write bad code when you're first starting out please
don't let these best practices be the thing that holds you back from learning
or getting [&nbsp;__&nbsp;] done the only thing that
really matters is are you learning are you building are you building projects
right and so do not let these best practices get in your way it
just doesn't matter this idea of clean code this idea of having to
have perfection no it's all bs so many folks
stress over best practice so many folks stress over all these things and they
don't even know how to code yet could you imagine stressing over best
practices and you can't code yet why it makes no sense the reason you're

01:24
doing that is because somebody on the internet told you to
right and so you're holding it to yourself and what you're doing is
slowing your growth right you're slowing your growth you're
stopping yourself from actually learning you're worried about best practices you
can't code yet no best practices are for closers folks
that already know how to code folks that are weighing the options of the code
that they are writing to make it more performant to make it better but if you
can't code yet don't weigh yourself down with that be a baddie write bad code
cool so i'll share best practices but don't let me or anybody else get in your
way it makes no sense to be optimizing before you can even code alrighty
the first language we're going to touch on today is html
hypertext markup language html is whenever you've been to a

01:25
website you saw content you saw text you saw things right you saw things
on a website that was all html now to write html there is a specific
syntax you have to keep in mind and the syntax of html is all about tags
every bit of content must be wrapped in an appropriate tag so when you're
writing html there should be no loose text everything needs to be wrapped in the
appropriate tags so here we have a very simple
hello world it's a nice piece of text wrapped in a paragraph tag and you'll
notice that the paragraph tag opens and then it closes
and the only difference between this opening tag and the closing tags
are this lovely forward slash that you'll see on the closing tags each time

01:26
and that your opening tags can sometimes get these super powers that we call
attribute value pairs they just enable the tags to do a little bit extra
sometimes so when you are trying to get your
content onto website you are going to use html for all of that content
and there are going to be tags for every piece of content you want on the page
right you're gonna be tags for every bit
of content that you want on that page so you're gonna wind up with a bunch of
text you're gonna wrap all of that text in the appropriate
semantic html tag when i say semantic all i mean is that there's an
appropriate choice for each bit of content some stuff is going to be a
paragraph some stuff's going to be a heading some stuff is going to be
a containing element and so there's going to be a tag for every bit of content

01:27
so let's look at some tags together alrighty one of the most common tags
we're going to see right out the gate are our heading elements our h1s twos
threes fours fives and sixes it doesn't go past six and all these are are
headings that describe content that comes after when you see a heading think
like a headline in a newspaper that headline you see it and it
describes all the content that comes after when people think of headlines they
often think of something being bolded or bigger than the rest of the content on
the page but if we're thinking about boldness and size what is that what do
you think would handle that when it comes to front end web development

01:28
boldness and size what would handle that yeah css would handle boldness and size
so when you're picking your html elements you really have to fight the
urge to pick tags based on how they look you should be picking tags based off of
their importance and their semantic meaning meaning like the logic behind
each tag so the logic behind an h1 is to be the most
important content on the page the content that describes what that page is
about describes everything that comes after it
so the h1 is the most important topic on the page then we have twos through
sixes now these you can use as many as you want
right you can use as many as you want and typically you're going to see them
cascade and important so you'll probably have h ones then twos then threes then

01:29
fours and fives as you get further into your page and things get less important
since the h1 is supposed to be the most important thing on the page how many
should we really have yeah one i have like one h1
with html5 we got a new caveat the sections can each have their own h1 but
let's keep this idea like one one really most important thing alrighty
some other type of text that you will see
are paragraph spans and the abomination that is the pre-tang
paragraphs are for large blocks of text in my opinion like a paragraph so like a
sentence or more is a paragraph for me a span is a short piece of text
so less than a sentence and then a pre-tag it preserves all your white space so
if there are any enters tabbing characters any of that stuff all that
white space that gets carried into the browser

01:30
why do you think it's why do i think i say a pre-tag is an abomination what is
all that white space the entering the character returns the
moving of stuff around sound like that sounds an awful lot like css to me
so i don't i don't use it some other tags that i don't use are br
tags and hr tags because only nerds use them next so
br tag what it does is it puts a break some spacing between your content and an
hr puts a line across the page and that hr that line across the page
right that line across the page could be done with a border and so i call these
nerdfights because i've lost friends over the br and hr tag it is true
we were at a meet meet-up we were having some some drinks as one does had a tech
meetup we brought the idea of a br i said it
was style they didn't think it was style we had some words we haven't talked in

01:31
years now so was i right and then wrong or them wrong
and i right not really but to me that's styling and so i don't like it right
and so what you're going to have to do as an engineer is have strong opinions
held weekly meaning that you form strong opinions
you form strong decisions about the things that you're doing and why you're
doing them but if somebody presents a better argument you're willing to go hey
oh actually that argument makes sense and you change the way you do things so
for me i didn't like the argument for the br attack so i didn't change my
way cool some other elements we're going to see are m and strong tags
m and strong tags they're a little bit tricky
because when you look at them in the browser
when you look at them in the browser you see that they're getting
m tags are italicized and strong tags are bolded like you can
see them like italicize the text and make the text bold this would violate
separation of concerns so use an html tag to style stuff that's not keeping

01:32
our html and our css separate but the reason why we use m strong tags is not
because of how they look but what they can do for us when we use accessibility
devices when we use things like a screen reader em and strong tags are read
differently so they enable us to provide emphasis to individuals that might not
be able to visually see the page so we don't care what they look like we can
always change how things look like with css
some other big tags you're going to see a lot are ordered list and the sibling
which is an unordered list order lists are for lists that have to come in order
think things that you would get into trouble if they were not in order so for
me an order list is like a recipe right a recipe you have to follow specific
steps otherwise you're going to wind up with some pretty bad brownies
an unordered list is a list that doesn't
have to be in a specific order for me an unordered list would be like a grocery
list right you have your you have your milk your cheese your bread all that

01:33
stuff on your list and it doesn't really matter the order
it comes in unless you're a monster and you like
organize your list based off of where stuff are in the grocery store
i don't know and last but not least last but not least
we have our containing elements and if you're doing an older tutorial you're
going to see divs everywhere or better yeah if you're doing a tutorial and you
see divs everywhere and it's not a reactorial run
because what happens is as html matures and evolves we get new versions of html
and we're on like the fifth really big version of html and with that fifth
version of html we got all of these containing elements
and the beautiful thing about these containing elements is that they all
have more semantic meaning than a div has so the div

01:34
you could still use it it just doesn't have as much meaning as the other
elements do sections are for like content so if i had a bunch of stuff that was
like liver frosted treats um pumpkin sardine treats right those don't really
make a lot of sense but when you put them on a dog food website oh that makes
a little bit more sense to me so sections are used for grouping like content
articles are for content that can be shared think like a blog post or a
newspaper article those are things that could be shared so that'd be a good case
for an article and a side is for ancillary or extra
content things that if you remove from the page the page still makes sense
what's a really good thing for an aside it would be a really good thing to use
for an aside yeah ads are really good uses for our

01:35
sides because if we were to remove the ads from a page the page just still
makes sense headers for content the beginning of
your document and footer is for content at the end of your document beautiful
cool now these are a lot of tags that we've talked about so far
like i said if you're brand new we're going a little bit faster than we would
have done during our full html class basically spent three hours on the stuff
we just covered in like a half hour right so
know that if everything's not super boom boom making 100 sense you always come
back and watch a specific class on html that is on our youtube leondawel.com
youtube go to the cohort 2 playlist and you will see our very first class on
html cool now there are so many other tags that we
don't have on these lists and so one of the things that you're going to have to
get comfortable with it's a little bit further along on the

01:36
sides one thing you're going to get comfortable with is using a tool called the
mdn the mozilla developers network it is the best resource for looking up
html tags css styling and then even javascript once again it's the m d
n the mozilla developers network and what that'll do
is that you can look up all these html tags you can see when you can use them
when you should use them the examples tied to those tags
right and so if you're ever having trouble like i don't know what tags to
use leon the mdn is your resource i had another earthquake alrighty
let's look at some websites i have khan academy up here
i'm looking at khan academy we said the h1 was the most important
content on the page what's the h1 on this page

01:37
h1 most important content on this page what's the h1 a lot of folks are saying
for every student every classroom real results is the h1
why would that be the h1 i'm gonna throw it in chat yeah it would be the h1
because it's the most important some folks said because it's big
why don't we care if it's big why don't we care if it's bold what is
size and boldness controlled by yeah boldness and size is controlled by css

01:38
so when we're choosing our html elements we do not care
how big or bold something is this could be the tiniest thing on the page yet
still be the most important and therefore still our h1 now
we always have three different types of users that we have to worry about
we have to worry about general users accessibility users and web crawlers
general users are going to come to the site and have a better experience when
we use the appropriate tags accessibility devices will use these
heading elements to jump through the page right they can jump from important
bit to important bit if they want to so if they're using something like a screen
reader maybe they have a visual impairment that screen reader could help
them jump from from heading to heading and then google if google is going to
come to your site and crawl your site it needs to figure out what your site is
about what is google going to look at what is one of the things google might

01:39
look at to figure out what your site is about yeah google might look at your h1
if the h1 is the most important content on the page it makes a lot of sense to
go and look for the h1 to figure out what your site is about beautiful
how about this block of text what would this be chat
what html would that be yeah paragraph the settings are more so for me that's a
paragraph how about this thing here would that be
yeah be an image we haven't seen an image tag yet but there will be an image
nice and then look at this when i move my mouse over it look what happens
what is that i'm i'm i'm interacting with the site

01:40
and stuff is happening what is that yeah it's javascript exactly
that mouse entering that behavior that interaction that's
all powered by javascript now it might be triggering a css animation
but that listening for the event and doing stuff is all javascript exactly
alrighty khan academy works what would that be the tag we looking at
h2 beautiful beautiful yeah it's an h2 it's definitely
less important than the h1 that was up here but still a heading it describes
the content that comes after so it's still heading to me
how about these three things here what are each of those
yep those are all images nice how about these right here personalized

01:41
learning trusted content tools to empower teachers what could those be
yeah maybe like h3s because they they describe what comes after right they
describe like the paragraph that comes after so they're still headings but
they're definitely less important than the h2 so maybe h3 is there and then i
kind of gave this away but these big blocks of text all would be paragraphs
and we can kind of keep doing the same pattern over and over again right
another heading maybe an h3 and maybe an h3 another paragraph another image
right heading paragraph image so we kind of
see these kind of like these same bits over and over again how about this gray

01:42
box would this gray box be miriam a thank you for the stuff
yeah be a section right grouping like content together
we have like another white box here like if we were to look at this box here
that'd be another section right another section another section
another section another section right so we can see the really big building
blocks that we're going to see over and over again when it comes to to building
out with html are really gonna be like our sections our headings our paragraphs
and we're gonna sprinkle in some other elements too like images and then
eventually links which we call anchor tags so
there's maybe 10 to 20 tags you really have to know that you're gonna use over
and over and over again right even though there's probably like
hundreds of times like 100 plus tags especially now with like all the new
inputs and stuff but it's really only a handful that

01:43
you're going to use all the time and so at first html can seem pretty
overwhelming but once you learn those handful of tags the ones that are in the
slides and the ones we're about to review together today today you can
really start to build pretty much whatever you want in html so
let's go ahead and code out a brownie recipe website we've actually done this
in class before and you've had some time to do it on your own
but we're going to code this one together and then we will
talk through a bbc website and then we'll take a break so
in your starter code for today is the brownie recipes website so
if you need the starter code in our discord exclamation point discord there
is a follow along materials channel to see that channel you have to agree to
our rules at the end of our rules is an emoji you have to click

01:44
once you agree to our rules you see all the channels open up to you
so agree to the rules and then you will see a follow-along materials channel
in that channel you will see a notice for our super review today and there
will be a zip file you will need that zip file today for all the stuff that
we're going to do if you want to code along
all right so this one we're about to do you don't have to code along so when we
take our break if you need more time to go get the zip
download it and unzip it that's okay you can do that and then the other thing
you're going to see me be using is vs code vs code is a free text editor
that's v s code the free text editor is what you're going to see me be writing
my code in today if for some reason you're on a machine
that doesn't enable you to download stuff you can use a website called
glitch.com like glitch like it's like glitching right glitch.com and you can

01:45
type in all your html your css and javascript and that as well alrighty
so what i did is i downloaded my zip file i unzipped it
and now i can open up i just always open the entire folder
in the s code the way you'll see me do most of the time
is i'll just drag my entire super review folder
and i'll drag that to vs code and then once you drag it to vs code it just
opens up the entire folder and that's great to open the entire
folder because then you just have right you just have all your stuff ready to go
so down here i just have brownies.html loose and that's what i'll
be starting with today already it looks blurry to you there's two

01:46
things you can do you can refresh and then also check your quality settings
we're streaming at 1080p 60 frames per second and you can change your quality
depending on your internet speed mid mule said is this a code along
it's up to you if you're brand new to code like today's
your first class i wouldn't follow along
right now i would just pay attention but uh if you've been doing this for a
little while and you want to type along with me sure why not
alrighty let's look at this so we have a brownie recipe website
all right and so chat's going to help me here
uh i have at the very top deep dish brownies what do we think this is going
to be remember all this is loose text right all this is loose text every bit

01:47
of text must be wrapped in an html tag yeah so we're gonna wrap this in an h1
so our h1 opens and then our h1 closes so notice
the only difference between the opening and the closing tag
is that lovely forward slash you're always going to see that on your closing
tags this little bigger there we go you have that lovely opening and then
the closing tag every bit of content must be wrapped in
the tag we have an image here i'm going to save this image to the end just
because it's a little special to do something a little bit different for
that one next recipe by bis mcmahon what would that be chat
does it describe the recipe like does it describe everything that comes after
so some people are saying spam because it is a short piece of text this could
be a good candidate for a span i could see that to me it also describes the

01:48
recipe like this whole recipe is by this person right so it could also
be a heading to me now is it an important heading no
to me like i don't ever go to a recipe website and look for a specific author
right some people might some people won't be this is a rachel ray household
if it ain't rachel ray uh i i ain't i ain't doing it right
i ain't doing it right so to you it might be more or less important and
that's the beauty of front-end web development
a lot of times you're working with a lot of folks marketing
management that will dictate how important stuff is and sometimes it's
just up to you to figure out what that is so for me for me
i'm a martha and snoop household rachel ray's pisol is trash so for me um

01:49
i don't think it really matters that much i'm gonna do an h4 right h4
and it opens and closes i think it does still describe everything that comes
after it it's just not that important eventually when we get deeper into
accessibility there will be this idea of
going from one to two to three the fours but for today we're just trying to
figure out like all right based on importance what tag should it be
next we have related recipes uh and so what comes after will be
related recipes so all these are related recipes
what are we feeling for related recipes chat
why are there spaces between each line uh just for readability you don't have
to have the spaces but i think when you're first starting it's a little bit
easier to see whitespace doesn't matter in html
oh i'm seeing a lot of different stuff here i'm gonna go h2

01:50
i'm i i think related recipes is super important like if you don't like this
recipe i want you to go to my other recipes right i want you to
go to my other recipes so to me what comes below in related recipes is
like super important uh to me that's super important right like if you i want
you to stay on my website i don't want you to go to some other recipe website
so to me all the related recipes are really important all right then we have
a bunch of different recipes right we have a bunch of different
recipes so we have a bunch of different recipes what is what do you think we're
calling for here there's we would call this a what yeah [Music]
people say it's a list it's a list of recipes now does
can't tell their low-fat brownies have to come before chewyish brownies or does
but bodacious brownies come after easy fudge brownies like no

01:51
the order doesn't really matter here and so since order doesn't matter for this
list we can use a ul so here's my ul i'm gonna make sure that i open and i
make sure i close it right away come down here now my whole list is
inside this ul right now list often has something inside them we call
them if you had a grocery list what goes on a grocery list
what goes on a grocery list items exactly so the same thing
same thing we're going to do here is that since we're using a list an
unordered list each one of these values here will be a list item
or an item on this unordered list what i just did here is i held down command
and i clicked next to each line inside of my list

01:52
what this now gives me is the ability to have my cursor at each line
which enables me to do stuff like this right i can actually go ahead and type
everything out that i want to type out i'm going to explain that the anchor tag
stuff in a bit and then i'm closing up my allies beautiful right so for me
all i did is i held down command and i clicked next to each line
of code now if you're not on a mac you might need to use control
if you want some other type of operating system that you use might use alt right
and so alt or control try them on your on your different operating system right

01:53
and that's how you can you can type on multiple lines at one time it's one of
the beautiful things about using a text editor is you get features like that
where you can type multiple lines at one time you can jump around so for me i
held down command and i clicked each line and then the jump to the end
on a mac is just command and the right arrow
on windows i believe it's just the end key yeah i think it's just the end key
on windows so for me i held down command and i clicked i did
command right arrow to jump to the end you could also use
end key on windows things like that so right now i don't need you to stress
over knowing all the shortcuts you can just give give a quick vs code shortcuts
on google or just google vs code shortcuts or go on youtube and type in
vs code shortcuts and learn all the shortcuts that's not what we're going to
spend our time on today i just want you to know that shortcuts exist
and so you should spend time figuring out what they are for your text editor

01:54
of choice i'll be using vs code for this entire course
you might use something different that's okay
but i recommend that you use vs code in chrome at least for the beginning parts
of this course so that way the things you're seeing on my end are the things
that you're seeing on your end all right so you'll notice that each of
these lines are wrapped in an li right they're both right they're all
wrapped in allies which is short for list item
but you'll also notice that inside of each li is also an anchor tag
an anchor tag is a link it's going to take you somewhere
else and so when i looked at these related recipes right when i looked at
these related recipes what i saw was wait a minute oh i'm going to click on this
and it's going to take me to that recipe so if i need to go to

01:55
that recipe if i need to go from where i am to that recipe it needs to be a link
and so that's why we have these anchor tags
and instead of putting the octothorpes here we could put the link to an actual
website right we could put a link to an actual website there and then when we
clicked on choose brownies it would take us to that site cool
how about prep time what do we feel about prep time
what do you feel about prep time yeah i'm feeling a two or a three on this one
i think prep time is like one of the things that i actually care about when i
look at a recipe like how long am i gonna spend uh making this so i might be
inclined to do an h2 i might be i might be able to be
convinced that an h3 could be used here and how about how about our 60 seconds
what would our 60 mins be yeah i'm going to go with span here

01:56
short piece of text beautiful so this heading definitely describes the
stuff that comes after the 60 minutes so it's definitely a heading
and then a span i think i'm going to use the same thing here i think servings
are pretty important to most people as well but like i said you might you might
differ on that you might use a slightly different um
a slightly different tag here beautiful how about ingredients
we feel ingredients are important these might be an h3 actually i might
make those h3s but i'm getting two ingredients i'm like
greens are definitely really important yeah i think ingredients are definitely
an h2 for me so i'll do my h2 and i'll close my h2

01:57
and then i want to make sure that i have a list of ingredients so this is
probably a what i have a list of ingredients what is it
yeah it's an unordered list it doesn't matter if we put the eggs before the
vanilla or the sugar after the butter it doesn't matter the order for the
ingredients so that's a ul or unordered list i'm going to break my list
and then put the list back inside i always like to make sure that i open
and close everything always make sure that everything closes uh that we don't
get into any errors i'm typing a little slow just so folks can kind of see what
we're doing here but i'm still doing what exactly what i
would do where i kind of open it up make sure it closes because if you if
you don't right if you don't if you don't put the closing elements
you're going to run into trouble so always make sure your stuff closes

01:58
all right now each of these are going to be list items so on a mac
i can hold down command and alt or option and then use my down arrow and i
get the cursor on each line so instead of having to like click on each one like
you can hold down command and click on each one
on mac you can do command and alt and then just hold down the arrow and get
the cursor on each line and then i can just do my lovely li
command right arrow to jump to the end and then close my li's
alt control down arrow for windows cool thank you
and so like i said you have to worry about knowing the the shortcuts right
now something you probably google and watch a video on to get all of them cool

01:59
it is very convenient exactly alrighty finally we have the directions like the
the instructions for making it i think this is going to be an h2 as well
right we have a lovely h2 and for me the directions are very important like i
can't beat the eggs before i like put the stuff in the bowl
if i was to put stuff into the oven before i put everything in the bowl then
i run into trouble so since this has to be in a very
specific order i'm going to agree with chat here and do a do an ol right
all this stuff needs to go inside of the old beautiful
and then once again you're going to wrap all of these in an li

02:00
so my li will open and i'm not going to jump to the end
here i'm just going to click again because the ends are on different lines
and i will close my allies beautiful anyone else craving brownies now me too
little me too all right so we have our order list our lis right are wonderful
and right now i've made all these changes but is my file saved
i've made all these changes but is my files saved
no how can i tell that i have not saved my file yep the white dot at the top
if we look at the top there's this lovely white dot that's

02:01
letting me know that my page has not been saved so i can do my command s or um
file save right save it make sure my changes are saved beautiful
and you'll notice that i'm like not opening this in the browser like i'm not
checking to see how this looks why am i not checking to see how this looks
it doesn't matter man manny said it doesn't matter exactly it it doesn't matter
i don't care how it looks because how it looks is controlled by css and have i
written any css no i have not written any css and so since i have not written
any css i just don't care how it looks i don't actually have to open it in the
browser and see what the heck is going on right
i'm just writing html right now and it doesn't matter it could look like a hot
dumpster fire just does not matter all right how about the tip
tip for me it doesn't really matter it does describe the content that comes

02:02
after so i'll do an h4 right and then this tip aluminum foil
can be used to keep food moist cook it evenly and make it clean up
easier so that's definitely a paragraph of text so i'll open my paragraph and
i'll end my paragraph beautiful uh nutritional info is an h6 for me beautiful
h6 for me just doesn't matter and if there were this is how you know
that the headings end at six there's no seven there's no eight there's no nines
six is as low as we can go uh so that's why we we use the six here and then
the 40 cals short piece of text that's a
span for me then we'll we'll we'll close the span beautiful all right

02:03
find this recipe here it's a it's a full sentence so it's
probably another what like this line 67 is probably another what
yep chet's got it seems like another paragraph to me i'll close my paragraph
um but there's something interesting in here right it says here
here sounds an awful lot like a what an anchor tag yep an anchor tag so i'm
going to wrap here in an anchor tag and we saw this anchor tag open
and close before up top and we said that we could put an actual
like url in the anchor tag and we have this lovely url here so i'm just going
to cut this and i'm going to put it instead of

02:04
putting a placeholder i'll put the actual url so what's going to happen now
is when i click on here this is going to take me to this allrecipes.com
deep dish brownie that link will actually link me to this page
i'm gonna go ahead and save it um the last thing we have up here is
this image tag that we didn't get to and so that's gonna be img with a source
that equals brownies.jpg and then an alts that equals
brownies and then i close it so something weird with the image tag
what's what's weird about the image tag compared to every other tag that we've
seen yeah it's self closing no closing tag
it's self closing because the image is content if we look at all these other

02:05
tags we look at this h4 we look at this h2 we are opening and closing around
content we open and close open and close here's the content
the image is already content itself like it's it's just an image you don't need
to it's no text right so we don't have to open and close
around text it's just going to be an image that's going to show up
and so the source is the location of our image so right now this would only work
if i had this brownies image on my computer at the same level of this html file
which i don't so this would break we wouldn't see a brownie photo right now
and since i know it's going to break you
always want to make sure you have an alt the alt is
the alternative text that shows up in a couple different scenarios
we talked about the three kind of users we have to care about
our general users when this image breaks
because i don't actually there's nothing like if we look over here in my little
tree there's nothing there's no brownie image

02:06
over here so i know that this is not gonna work i just don't have the image
to show you right so a general user will see the word brownies and no oh
that image should have been brownies someone that's using a screen reader if
the screen reader wants to to read the image
somebody might have a visual impairment and can't see the brownies image but at
least they could be read that oh it was a brownies image and then last but not
least web crawlers like google could come and understand that that image is a
brownies image so whenever you create an image always
make sure you have an alt to serve all three of those users alrighty
power through this let's save it and i'm going to open it
in the browser just to see i'm just going to open in the browser i just want
to take a quick peek at it i don't care what it looks like because
we haven't written any css just want to take a peek
all right we'll notice is that deep dish

02:07
brownies is big bold black and beautiful much like myself but there's something
interesting about the deep dish brownies being big bold black and beautiful
what's interesting about that yeah nick something got it there's no css yet
so how the heck did this get big bold black and beautiful if we haven't
written any css well this is some of the default
style that comes inherent in the browsers so as we move to css one of the
things we have to keep in mind is that each browser has a default styling that
it wants to impart on our html and we're
gonna actually have to come up with ways to either stop it entirely or work with
it in the long run but know that that's gonna be one of our first challenges we
start writing css is to handle this default browser styling right i call

02:08
these money problems it's something that
as you start to learn more and you learn how to handle it it makes its job
security right these little things that we have the quirks we have to work
around make it so that it's a little bit harder to do what we have to do and we
have to learn how to solve them and and it helps us keep our jobs
all right we got a hydration and then we're going to take a break so uh
zim 2000 and then ms.3 both thank you for the hydrations cheers to you thank you
uh we just did we just powered through html in an hour if you are new
there is no way that you fully understand html we're gonna come back
we're gonna see some more html we're gonna introduce some css right we
literally did that across two three-hour classes so if there are things you need
to fill in and things don't make sense entirely that's okay

02:09
today is like an overview for you if you're brand new to see all the
wonderful things that you can get into and then as you need to you can go back
to individual classes and get more hands-on keyboard practice for each of
them and make sure you join the catch-up crew on our discord
once you agree to the rules you'll see all these channels open up once you
click the emojis in the join 100 dev section you're going to see a bunch of
other channels open up to you like the catch-up crew where you can go through
this at your own pace all right next up folks we're going to look at a
site and see if we can talk through some more of the html and then we're moving
on to css so let's put five minutes on the timer here five minutes on the timer
i'm gonna run ads so that way new folks that are joining us don't to sit through

02:10
ads folks that are here and don't haven't used prime or don't have a sub
they don't they get ads sometimes while we're teaching and so i like to run ads
while we're taking a break because you should be taking a break anyway you
should be getting up if you're able hydrating moving around if you're able
looking at letting your eyes focus on something that's not the screen
right then we're gonna come back in five minutes and keep pushing

02:14
alrighty folks dn5 uh the open in browser is a plugin called open in browser so
nvs code if you go to [Music] the extensions like these little blocks
here you can type in your extensions and i'm using this open in browser by tech
er and then that gives you the ability when you right click to open in browser
you can see i don't usually use that many extensions and i always recommend
my students when they first start out to not use too many of them get used to
doing stuff the hard way and then add extensions over time to make
your life easier i really i don't i don't like live
server in the beginning so i want people to actually get used to saving their
files refreshing the page because i've had so many folks go into interviews and
forget to like refresh pages like write all this code and they don't actually

02:15
refresh and then then they don't get the job
because they just haven't practiced that so
i like my students to start without it and then once you feel comfortable
saving refreshing and all that stuff then you can switch to some other things
brian thank you for the comment about the thumbnails
it's just something for now i gotta figure out how to make better ones
cool all right folks come on back come on back alrighty
i always just start off each top of the hour with some questions
i'm looking at the slider remember you can submit your questions during the
slido and then you can also upload the questions that you want me to answer the

02:16
most alrighty i have a call tonight with my first potential paid client
i know they're going to ask about seo how do you recommend we handle
conversations about seo so seo stands for search engine
optimization like getting your site to rank on the first page of google when
they type something out you want to show up in the results that's search engine
optimization the wonderful thing about search engine optimization these days
is back in the day it used to be like a dark art
you do all these weird things to rank and then google would make an update and
all your sites would tank but these days google's pretty clear
there are some things you want to do on site to make sure your site's good and
then you just want to have really good content so if you have someone that
wants seo you can make sure their site is seo
optimized meaning that you've done all the little bells and whistles on the
actual site to make sure that google approves of it and then it's just
getting good content on that site and so the wonderful thing that we've shown

02:17
before is that on any site you can right-click inspect
and then there's this lighthouse tool you can run that diagnostic and it'll
tell you what google sees in terms of seo it's not the everything you need but
it's a really really really good starting place if your site looks really
good on lighthouse it's gonna look really good to google and so when you're
talking to your client you can recommend
that hey i do everything that's required
on site to make your site worthwhile for google and then i can help you with um
making sure that you have a way to generate or a way to post content that
you generate so that google can see your great content and rank you that's about
it yeah seo is search engine optimization the showing of your like you you type
something in like you type something in like dominoes and
then domino shows up first that's search engine optimization hello

02:18
all right let's do two more and we'll jump into css
i asked the cto for some advice on getting the first job and he said keep
working on your skills contribute to open source software and the rest will
come thoughts it's pretty good advice the idea of continuing to progress your
skills build projects is what helps you get a job now open source software you
can you can replace that with one of three things getting a client
open source contributions or volunteering are all kind of
replaceable in the in that in that category as long as you're working on
projects and you're doing one of those three things where other humans have
seen your code and you've worked with others to build good code you get rid of
that stench that that new boot camp or smell
and uh yeah so if you're doing those those two things
you'll eventually get a job the only thing that i that i don't like is the

02:19
the rest will come no the rest is a hard slog it's a lot of hard work networking
your way into these opportunities um just doing open source and working on
your skills won't guarantee a job it's the networking that gets you a job
quicker cool one more uh do you have any tips on how to make
the website's online ordering and checkout section work with a pos system
and like how some restaurants have online ordering well look at any website
that you see that has online ordering you can right click inspect and see what
system they're using there are plenty off the shelf solutions for online
ordering you would not be coding that yourself you're going to find some sort
of application that you can drop into the site for your client that connects
with their pos system it's not something
you would code from scratch so do you do research on kind of different uh
ordering systems ones that you think would integrate well with their pos

02:20
system and then you just implement that for them
my dad wants me to build him a 500 site is this a good first project i have no
idea because for 500 they could be asking for a hell of a lot uh so
it's really not about price it's about what can you get done at price points
and so yeah pos is point of sale it's like the thing
that you you punch in the orders into so like when when a
a server takes your order they like type that in so the kitchen can see what's
going on all right last one before we jump into
css that mini hackathon was super fun we'll be able to do that more often
throughout the cohort absolutely we have lots of time there'll be that i'll be
budgeted for kind of working on projects as we get deeper into full stacks
specifically we'll learn how to work as engineering teams and then we'll put you
all together to work in engineering teams together

02:21
so yeah lots of other times to work together in the future alrighty
let's go ahead and let's look at the bbc so
here is a real website that a lot of you have already coded
if we're looking at the bbc and we look up top what would this logo be
would this logo be yeah be an image how about sign in yep span
right probably span for the the text to sign in maybe this is an image right the

02:22
little the little the little face uh then here
we have a list of what a list of what yeah definitely a list of links right so
at its core this is going to be at least a ul like an unordered list because
news before sports it doesn't matter if sports become before news or whatever
right um you might have a preference but it's not something you're gonna get in
trouble for so it's an unordered list and inside of that unordered list is an li
and each of those lis have anchor tags in them right like we want to be able to
click on news and go to the news page so it's a uli anchor tech now
this will be at the top of every single bbc website and so

02:23
google is going to see that they keep saying home news sports home news sports
home news sports probably across thousands if not tens of thousands or
hundreds of thousands of pages right and so how can we let google know we're not
trying to stuff right right we're not trying to stuff
for these keywords we're not we're not trying to
to to to trick you here we just know we just need this to be part of our
navigation on every single page what can we throw that in yeah
we have this lovely tag called a nav tag and so with html5 we got a new tag
called nav and all of our navigational content should go in navs so really this
is going to be a nav that has a ul in it each of those uls have an ally and he
shows lis have an anchor tag inside them beautiful uh someone said
uh why is this a span and not an anchor tag it could be an anchor tag i think

02:24
it's fair that this could be an anchor tag
if you if you're going to click on this and it take you somewhere then it's then
it's a link i don't know this is going to actually
take you anywhere though right this might just reveal a sign in right
so if you click on this and it just reveals a sign in that to me is not like
a link that's taking you somewhere right so it might not be a
actually a link depends on what happens when we click on it cool
now all this content at the top right all this content at the top
we're gonna put in a special tag called a what yeah a header
so our header we said a few slides ago is for content at the beginning of the
document so here is our content at the beginning of the document
so that's our header inside of our header

02:25
we have like our images we have our our link or our spam we also have our nav
which has our ul which has our li which has our anchor
tags for all of these right and at the end there's also inside of
our header a what what is that over here at the end
yeah i got a lovely form at the end so forms one of the things we haven't seen
yet when it comes to html a form is a is is an element
that enables the user to enter in text right so form is the containing element
just like a ul is a containing element and then inside of that we would have
inputs so you would have a form with inputs inside just like with a ul you
have lis inside you never really have lis without a ul or an ol and you would

02:26
never have inputs really without a form cool we got like a a white block here
what would that block be that whole grouping would that be yep we got two
competitors here it could be a main which is a special tag with html5 for
the main content on the page or it could be a section
so either a main or a section could be useful here um i might go with main
excuse me um but i could clearly see a section
here as well so section or main either one will go here and then inside of this

02:27
let's say main we can have two what to what yep two more sections right two more
sections inside these sections what would this be here would that that text be
i think the text is a really strong candidate for the h1 or
at very minimum in h2 i think this describes the rest of the content
right so it definitely describes like the rest of the content in maine
you might say you know what leon it doesn't really describe everything on
the page so maybe it's more in h2 you might even say like hey this this
might be really important right to the bbc them knowing that you're on bbc's
website and that's some other news website might be the most important so
that might be the h1 if they agree that that's the most important or they might
say you know what our biggest headline right our biggest headline is the most
important and that would be the h1 so as a front-end developer it might not

02:28
actually be in our control to dictate what might be the h1 in this case so to
me this is either gonna be an h1 or an h2 we got like a nice
big block of text here so what would that be
paragraph nice and then a short piece of text here at the end what would that be
nice span exactly so we got a heading either h1 or 2 depending on your opinion
there a paragraph and a span lovely inside this section on the right we have
four more what we have four more what yeah we have four more sections
i like them as sections because i think they're containing like content uh some
folks might even use a div here that would be okay but they're sections to me

02:29
inside those sections we have some sort of heading maybe like an h3
and then a span so each of these we have an h3 and a span h3 in a span h3 and a
span beautiful and then down here we have another what another what
yeah another section nice you get a lot more out of these reviews
if you're typing in chat just saying if you have the ability to type in chat you
should type in chat it's going to help you stay focused as we spend all these
hours reviewing no we're going all the way through javascript
we're in our second going into our our our third hour here and we're just
hitting css so you want to stay sharp through the whole way
definitely uh definitely be participating
especially have as we haven't gotten to hands on keyboard time yet beautiful

02:30
yeah it's another section another section beautiful
would this area here what would that be would that be what would that be
i'm answering out loud hey there you go i actually like that it's pretty cool
yeah i think that's a good candidate for an h2
super important describes the content that comes after definitely an h2
and then we have three what three what yeah three sections
and each of those sections should have a what
i think it's gonna be an h3 if this is an h2
then i think each of these headings are h3s so i would say h3s on each of these

02:31
and then these like bigger blocks of text would all be paragraphs lovely
and then spans at the bottom of each of these so really we were able to do
[Music] this entire website with mainly sections headings paragraphs and spans
we sprinkled a few extras in there we sprinkled an anchor tag for links we
sprinkled like this idea of like a nav and a header and a form
so really with just like 10 or so tags we're able to do pretty much every
single thing you see on a very popular website like a popular
news website so when you're learning html i know it could definitely seem
overwhelming at first there's a lot to learn a lot to remember make sure you're
getting your active recall in make sure you're doing your space repetition and
realize that there's really not that many tags that you need to know to be
dangerous so if you want more practice with the html
definitely go through and watch our html classes we get we build a lot of stuff

02:32
go back to the brownies that we just did the brownies that we just did
make sure you're starting fresh with just the text fill in all your html and
then compare it to the solution that we just did right
it's all divs yeah so a lot of sites that you see like if you just go and
inspect the their website you're gonna see a lot of disks because a lot of
sites use a cms or a content management system it's some system that spits out
what you see on the page right so they're not really using the best most
semantic up-to-date stuff they're using some sort of some sort of generator that
spits out what you see do you ever use dibs yeah i still use
those quite frequently i think they still have their place it's just often
there are more semantic choices to be had when to use main or section let's look

02:33
it up let's look it up mdn main html this is what i would really do if i'm
confused on when to use a tag i would type in mdn what i'm confused on and the
technology and you see the very first link here is the main tag
the main html element represents the dominant content in the body of a
document the main content area consists of content is directly to rated to or
expands upon the central topic of a document or the central functionality of
an application a document must have mustn't have more
than one main element and it doesn't have an head industry listed
uh the main content should be unique content that is repeated across a set of
documents or documents such sections such as sidebars navigation links
copyright info blah blah blah shouldn't be included
uh unless it is the main function of the

02:34
page so i think that's actually a really big hint here that a lot of like just
like all the extra stuff should not be in maine
cool all right so if we look go back and look at the bbc all of this stuff
there's no extras it's not stuff that would be like the
copyright at the bottom or like the navigational content so there's no extras
i think it all relates to the core content of the page which is the most
dominant news to me this is the most dominant news according to the bbc
so according to the mdn my interpretation would be that this is
a good candidate for maine it doesn't include any extras it's the main core
functionality of the page it's the dominant content of the page it seems
like a main to me now you might interpret that differently

02:35
and that's entirely okay right like i said if i was to give this site
to 10 different front-end developers i'm getting 10 different sets of code back
people would disagree on main or section it's about making the best
most rationalized decision that you can and remember we're baddies we write bad
code don't get hung up on this stuff just throw a main just use a section it
really won't matter in the long schema stuff don't let these little nitpicky
decisions actually hold you back from building real stuff if you're ever
sitting there stressing over a mane or section you've already messed up
slap a section move on yeah just do it exactly cool
but that's how i really do i i i look up on the mdn to help make my
decision so that's exactly what i would do all right we got two things here we
gotta hydrate pizza pretzel cheers to you and we gotta stretch
all right i'm gonna do a real good stretch you can't watch me stretch it's
not that kind of stream you know what you gotta do if you wanna see all that

02:36
good content one second oh yeah hmm oh yeah alrighty
yeah plenty of good content like that on on younowwhere alrighty let's continue
let's move into some css css is short for cascading style sheets
remember we talked about css being the style whenever you go to website if you
saw content that's html if the content looked good it was

02:37
positioned well it had color it had style that is all css so
where should our css go should we be writing css in line with our html
should we be writing css in the head of our html or should our css be in a
separate file yeah it should be in a separate file now
the the good question here is why should our css be in a separate file
long humans got it i think first organization remember we talked about
this golden rule the rule the separation of concerns
and so when it comes to separation of concerns we want our html separate from
our css our csi separate from our javascript and
if we were putting css mixed in line with our html we wouldn't have that
organization that we need if we were putting in the head we want to get that

02:38
organization there are some caveats to this rule though that we're
going to keep everything separate there is one specific scenario where we put
css in line with our html where is that yeah html5
emails when we actually write emails we write emails we
put css in line with our html emails are actually coded in html and we put the
css in line because they don't really have access to external style sheets so
you're writing email you can put css inline if you work at amazon they have
something called critical path css amazon has said for every one second
their page load speed increases they lose a million dollars a day
and so they have a very strong investment and making sure their page

02:39
loads as fast as humanly possible right and so that idea of putting it a little
bit of css in the head so just the the landing page loads a little bit faster
and specifically what we call above the fold like if we look at the bbc page
we can see that news and welcome is above the fold but sports and weekend
reads are kind of below the fold and so what what amazon does is they put a
little bit of css to make sure what is above the fold loads as fast as possible
and then the rest is put into the regular css file
when would we need to write an htm an email in html hopefully never uh
some people that's their jobs like they'll get hired as email developers
they just focus on writing html emails it is a grueling job

02:40
it's not grueling it's just it's just very tedious in my mind uh but we
actually have some folks from last cohort that that's their job they they
write html emails professionally so yeah that would be when you when you do it
most people are using some sort of email writing software like mailchimp or
something like that that comes with built-in editors that spit out the html
and css for you how does that pay it pays a lot less
um like 50k ish is what i normally see and so
there's like kind of like gradients to to the salaries i've seen at 100 devs so
of all the folks that we've gotten jobs so far like 45 to 50k is typically like
on the lower end but if you live somewhere that's like a major metro area
or you're doing something that's not not like maybe all the way full stack
you're seeing that 45 50k range and so like html developers are falling into

02:41
that that range the next bucket is like 70 to 75 a lot of folks um
without kind of like that's kind of where the the next
tranche starts so maybe maybe that's starting to dip the toes into full stack
development you're starting to kind of take on a little bit more serious role
and a lot of people fell in that 75 to 75k bucket and then
folks that really kind of broke through that six figure mark were
folks that were really competent or felt really strongly in full stack
and maybe added a little bit extra react
onto the mix and so uh those are kind of the ranges that we've seen so far like
the lower end 45 to 50 with kind of more specialized skill 70 75 when you're
first hitting that full stack and then six figures is where you feel really
confident with full stack and maybe a little bit extra stuff on top yeah

02:42
and the ranges are always dependent on where you live and things like that
stephanie yay thank you for the fight get this subs i appreciate it alrighty
so since we agree that css should be in a separate file we actually have to link
to our css so from our html we have to say hey
go find the css file and so here is the link that we put in the head
of our html this is how we're able to write our css in a separate file but
have everything connected we put this link in the head of our html and that link
tells us where to go to get the css so we can render everything in the browser

02:43
correctly alrighty css has a different syntax what the heck do i mean by syntax
what does syntax mean yeah it's the grammar the rules it's the the
way we write our different languages right so the html had a syntax
of open and closed carrots we had our open and closed tags so that
syntax is different than css in css the syntax is composed
of selecting elements to be styled and then telling how we want those
elements to be styled in css we write what are called rules
this entire thing here is called a rule a rule

02:44
is broken down into two very important parts the selector
and the declaration block the selector is the thing that we're going to
actually style so right here you can see that i'm
selecting all of the paragraphs so every single paragraph is now going
to get this style the declaration block which is
everything inside the curly braces is then broken down into declarations
and each declaration has a property and value pair
so in this case you can see that i'm going to select all of the paragraphs
then i'm going to make them color red and font weight bold
right so i'm making them red and bold now let's play a little bit of game here
chat what is this whole thing called the only thing i just circled what is it

02:45
called yeah it's called a rule about about bold would bold be value nice
about color property nice very nice very nice about about this would that be
declaration block nice how about this declaration nice
and then the paragraph not including the parentheses though color based i mean

02:46
paragraph would be our selector exactly so we select the things we want to style
then we say how we want to style them i want them to be red and
bold and so we can take if we want we can take this link
and if we wanted to we could put it at the top of our html element here our
html file here typically we have a little bit different
of a structure that we'll see later with
the template and then we could link to a style sheet that was inside of a css
folder and then called style.css but i don't have a css folder so i'm just
going to say style.css let's save this and right now it's going to look for a
file called style.css if we look over here in my tree view
do i have a file called style.css nope i don't so let's go ahead and

02:47
create that file you can do command n for new or file new it's up to you and i'm
immediately going to save this as style dot css
so i'm saving that into my super review folder
and we can see in the super review folder there's now style.css
it's on the same right the same level right
same level as my html file and so now this style that css should work cool
so let's go ahead and just take our h1 and make it color red i save that
i can open up my brownie recipe again and we see that deep dish brownies is now
red right it's now red so we can see i have linked to my style sheet

02:48
and i've written my first rule right my first rule is color red beautiful
uh someone asked what's the difference between a rule and
a declaration block the rule is the whole thing
right the rule is the whole thing the declaration block is technically just
what's inside the curly braces so it separates it separates the selector out
yeah it doesn't include the selector exactly
you're going to notice that a lot of stuff like when i asked like this order
matter a lot of times order doesn't matter in the html or css
like what let what way you put like the attribute value pairs it's just kind of
convention for a lot of this stuff but html css and even javascript is pretty

02:49
forgiving for a lot of stuff white space really doesn't matter things like that
alrighty let's keep it pushing we just played our game of what is this
we know the whole thing is a rule a rule is broken up into a selector and
a declaration block declaration block is broken up into declarations
and our declarations are broken up into properties and values properties and
values nice now css is read from top to bottom however the stuff that comes
above can be overwritten by the stuff that comes below
so here you can see that my paragraphs start off as red
but further down the cascade they become blue this is a pretty powerful bit

02:50
right it's a pretty powerful bit of how css works
poor boy thank you so much for the gifted subs thank you for being here all
right it it is a big pig deal and how css functions because
we can use this cascade to our benefit we can see that the paragraphs start off
with red and boldness but as we go down the cascade it changes to blue but it
does not lose its boldness so we're going to be able to eventually
style a bunch of stuff one way and then want to change one or two
things and have those changes just affect one or two things at a time and
not everything and so this cascade is not only the namesake of css the
cascading style sheets it's also a major bit of function that we're going to see
as we get into some examples all right chat why might we want to link our css

02:51
to a separate file yeah for organization exactly keep it organized beautiful
all right we're going to review some simple styles together
and then once we review our simple styles uh we will we will code some css
so we're gonna look at some simple styles then we're gonna take a break and
when we come back we're gonna get our fingers on the keyboard writing some
actual css alrighty so one of the most common things you're
going to want to change when it comes to css is color
right is color there's kind of like four major ways of doing color when it comes
to css you can use the color keywords like color red you can do

02:52
a hexadecimal value you can do an rgb value short for red
green blue alpha channel and you can do an hsl value hue saturation lightness
alpha there are all different ways of doing color
which one you use is really up to you the color keywords are very simple and
easy to use however you don't really get all the control because when you say
color red well what kind of red do you mean crimson red do you mean like red
red right and so the idea here is that you will use probably different color
different ways of achieving color based on your needs
the native way is normally through hexadecimal values so you'll see a lot
of people that use that i use rgba because it's easier for my
brain to think about it like if i want something to be red i know that's gonna
be 255 because it's from 0 to 255 for each category so i know that

02:53
255 0 0 means red if i want it green i could do 0 255 0 and that would give me
green right and so the idea here is that i
like rgb as it makes it easier for me to think about color
i also love this alpha channel it's anywhere between zero and one
one being a solid color and zero being like see-through or opaque like the like
how much you can see through it and so you can get that transparency by using
an alpha channel which is something pretty cool uh with css3 before he has
to do before we used to do a lot of hacks i used to create like see through
transparent pixels in photoshop and then repeat that image across my my elements
to get transparency but now it's built in with these alpha channels so
know that if you use color keywords they're great for prototyping
right they're great for prototyping because you're going to put in red and
then come back and fix the actual color later but you'll probably pick one of

02:54
these three for your color schemes going forward
one of the other things that we're going to want to change is our font family so
like what font our text is now the beautiful thing is that fonts
are actually files right so if you want a specific font you're gonna need that
font file and you're gonna need to load that font file for this to work so what
you're seeing here is in my paragraphs i'm changing the font family to my
favorite font which is source sans pro and
the way i'm going to be able to change this to source sans pro
is that i have also already linked to that font file in the head of my html
if i do not link this font file this font
will not load so remember if you want to
use special fonts you need the files for those fonts for it to work and so often
you'll see a font file a font that you're trying to use here but you're

02:55
going to follow it up with some other fonts why do we follow it up with some
other fonts here why do we have some other fonts listed here yeah
backups exactly backups for some reason if for some reason sources pro doesn't
load the browser will try and load helvetica
and then if helvetica doesn't work it'll try and load sans serif and so the idea
here is that we can have these wonderful backups that make it so that
if for some reason source sans pro doesn't load we can still have other
fonts to use now how do i get fonts i think the
easiest to start off with is by using google font so fonts.google.com
fonts.google and then the cool thing is you can
just pick a font so let's find source sans pro here's the font and then
you're going to notice that there are different weights for each font

02:56
each weight is a different file that you need so i want the regular 400
and i want the bold 700 so i have selected both of these styles and i can
come up here to this little icon and what you'll see is the link that i
can include in my head that'll give me access to those fonts
so i also still have roboto here i'm just going to remove all the robots i
just have sources pro and so now i have all of my links for source sans pro
why do they not load sometimes well it could be that this link that google
gives you is down which happens very very rarely but it does happen that's
why you need a backup what some people will do is they'll
download the fonts onto their server so that their server can always serve up
the font files so maybe you don't rely on google you rely on your own fonts but

02:57
that's a little bit slower google has these fonts all around the world on
servers that are probably really close to your users or better yet the user
might already have it installed on their machine and so google's just a little
bit faster and that's why people like to use it cool
so i would just grab this link i'd put it in actually let me copy it boom copy
and i just put at the top of my html typically in the head and we always
wanted to link it before our style sheet right
always before our style sheet why do we need to link the font before our css
file deluxe hey thank you for the raid yeah we want to link it because we
actually need that css right we need that we need it before we can load it in

02:58
our css it looks thank you so much for uh the the raid where y'all to today
we all working on welcome raiders we're doing a full review today
html css javascript we're reviewing everything so we have a
lot of folks that joined us recently so we're we're covering all the new stuff
right we're covering everything going starting
all the way from the beginning so we're we're at the end of our third hour
and we just got to css and so we're finishing up css we're
doing layout we're doing all this fun stuff and then we're getting into
javascript as well doing some character interaction and
animation work that's dope best dope for folks that don't know
uh lindalux is an amazing streamer always live always working on different

02:59
aspects of game development if you're here because you're learning how i know
a lot of you are here because you want to learn how to code so you can build
video games and so they are definitely hands down the person to watch if that's
what you're interested in from from everything from the character rigging
all the way to building the actual games i can't recommend their channel enough
i'm i'm if i'm on twitch i'm probably lurking in their channel so let me see
we can do a shout out real quick wrong place
definitely give them a follow if you haven't i know we have a lot of new
folks today you want to make sure right you want to
make sure that you're following good folks here
on on twitch right like when when we're not live you can watch somebody like
actually building stuff and and picking up some words of wisdom from them in
their chat and uh and alex is definitely the best that we got
yeah we definitely rated them in the past and yeah one of my favorite people

03:00
to raid for sure already we have a little bit let's do let's do let's
cover this last topic then we'll take our break so we have a
we have our link to our our actual font and we need that before our
css file and the reason why we need it before is because we're trying to use
that font in that css file so if we don't have the
font then we can't actually use it inside the file so that's why the order
matters ammar saeed you found the right place then welcome
could i swear i was following them but no yeah make sure you're following them
for sure absolutely 100 percent one of the best streamers definitely one
of the best dreamers in our category one of the best streamers on twitch

03:01
always live too so definitely you can somebody can check out every day great
community let me see if i can spam this a little bit there we go beautiful
give them a follow if you haven't already make my day please give them a follow
alrighty can you go back to the slide that talks about the cascade absolutely
got it alrighty so we talked about this cascade
this cascade is the idea that what comes above

03:02
can be overwritten with by what comes below
and so up here you see we have the color red but then further down we have the
color blue and with this example it's kind of hard to be like all right why
would i ever use this but imagine we had a bunch of paragraphs that we wanted to
be red and bold but then we had a few paragraphs that we wanted to be blue but
we didn't want them to lose the boldness we could target these other paragraphs
and make them blue and we'd have to change up the selector maybe we'd use a
class or an id or something to target that other paragraph specifically which
we'll get to in a second but we'd be able to use that cascade to not lose the
boldness but to be able to change the color later on
so we talked about color we talked about fonts let's talk about weight
so boldness is font weight and so if we want something to be bold we're going to

03:03
use a larger font weight so here i have a larger font weight of 700. this is
this is where most fonts become bold and so if i want my fonts to be bold
i need that specific font weight which means i also need that specific file for
that font to actually render right right and so when i was on google fonts
i asked for the regular 400 and the 700. you can actually see that
in the link i know it's really tiny it says weight 400 and 700. if i wanted the
900 i would need to include that as well if i wanted the 300 i would need to
include that as well and so if i want all those different
weights i would have to make sure i have them on my link now as you add more
weights you increase your load time so people don't go really wild and having
all these different fonts all these different weights
one of my really close designer friends they always say if you have more than
two fonts on the page you [&nbsp;__&nbsp;] up and

03:04
then if you kind of go wild with the weights you're messing up as well so
despairing already now we talked about color we talked about
weight we talked about fonts right but there's so many other things that
you might want to know how to do you might want to know how to italicize
stuff you might want to know how to bold stuff other than the way that we just
showed you how to do it we want to learn all these different things maybe you
want to review the stuff that you already feel confident in just to make a
better decision like i did with maine when i didn't know exactly what maine
was asking for i went to the mdn so always use the mdn to look up these
things right so if you need help remembering html you need help remembering css
use the mdn it's the best resource we have gives
you all the details it'll walk you through everything that you need
if you're brand new and you're trying to

03:05
get caught up on this html and css stuff we have
what four to six classes on html and css that you can go back and watch
part of the homework if you start over from the beginning with the follow along
materials is to read shayhau which breaks all this stuff down into further
detail but what we're going to do is we are going to take a break and when
we come back from that break we're going
to get our fingers on the keyboard we're
going to write some actual css and we're
going to have some fun all right so when
we come back from this break we're going
to actually start getting our fingers on the keyboard so get your vs code set up
make sure you have the the files downloaded from the follow on materials channel
if you're new here you can do exclamation point discord join our
discord agree to the rules and once you agree to the rules you will be able to
see all these extra channels that open up there's the following materials
channel grab the materials unzip it open up in vs code and then join us back
how would you copy the font family to the text editor i just copy and pasted

03:06
it so google gave me the font i just highlighted it
copy and then i pasted it in my text editor you know all right folks
get a good break in this one really take the five minutes please hydrate stretch
we're just getting started it's three hours we're just getting started folks
so we're gonna be in this one for the long haul please take your break
seriously don't keep sitting here if you're not able if you're able to please
get up move around hydrate and i'll see you all in five

03:07

03:10
i'm gonna run ads to new folks out to sit through the ads when they join us do

03:11

03:12
all right folks 30 seconds left all right folks come on back come on back
alrighty yeah what are your thoughts on css preprocessors like less than sas
i think they're great i use them uh i don't recommend learning them until you
have to for your job because each company is different you
might use something different for each one and so it's just not worth it to put
in that extra energy and then not need it on the job
it's really disrespectful how you handle bob uh we've had a conversation and he
prefers the chin lift i don't know why it's his choice maybe cousy maybe
already folks i'd like to start off each new round
each new hour with questions from the slido you always do exclamation point
asks to type in your question and to upload the ones that are already there
the top question right now is is jquery something

03:13
worth learning still or is it outdated i
think at this point it's pretty outdated uh
with the newer versions of javascript pretty much every major
benefit that jquery gave us except for a slightly
slightly easier syntax has been accomplished with just regular
javascript so cross browser compatibility is there all the really
big things that jquery helped solve when
it first came out is now kind of handled by just regular old javascript so
i think it's definitely outdated not something i would worry about picking up
unless you're on a job or with a client that has a pretty heavy jquery code base
but it's not hard to pick up though if you need to later on
jquery is still in job listings yeah you're going to see on a lot of stuff
and also job listings kind of are bs i think one of the big things you'll
notice from reading the celebrations channel from folks that got jobs is to

03:14
just straight up ignore job listings we've had students that have gotten
senior roles we've had folks that got roles where they didn't know anything
that was on the job listing it kind of just just doesn't make sense to pay
attention to them so don't we'll get there when we get to our when
we get to our applying the jobs phase we'll talk through all that
will we review get soon it seems like would be easier way to submit homework
and keep track of our portfolios and client work yeah end of this month uh we
will be covering git so i don't like covering git and github early on i think
it's one of the things that a lot of other people like when they're trying to
learn get really lost in the sauce on and it's too much and it's overwhelming
and so i don't like teaching it until later on i still think it's i don't
think it's super beneficial until you know kind of what you're doing a little
bit code wise and so uh end of this month we'll be covering git and github and
we have a fabulous sponsor that's right we're going to talk more this week on
tuesday about our sponsors that are coming up but we have a sponsor for our

03:15
class so yeah big news i guess all right let's do let's do two more
all right i still struggle with flexbox can we touch on that yeah we're going to
touch a little bit of flexbox today we're going to do a little bit of
flexbox i think a lot of people really want to do like a full flexbox class
and so once we get through javascript i'm going to do a full class on flexbox
and we'll come back and we'll all of our labs will be done in flexbox and we'll
incorporate javascript into those layouts because i think some people
it's just not something you need for a job right it's just it's just it's nice
to have you should definitely learn it we definitely covered the basics of it
and a lot of you have done some simple layouts with it that's good enough to
continue on and so we'll learn enough javascript to be dangerous and then

03:16
we'll incorporate layouts in flexbox with javascript so we'll come back to it
and we'll build full layouts with it and incorporate javascript into those
layouts too but it's like one of those things i i
don't know why but the cohorts always get real like all my students really get
hung up on it when it just doesn't it's just like not something you should be
investing super super a lot of time into know the basics not do simple layouts
with it and then move on yeah can you discuss how to deliver the site
to a client i'm confused and scared to take a client don't know how to deliver
um you just you i mean you've code out the site and then you put it on netlify
that's it just drag the site to netlify.com drop
it's live for your client and they're good to go
uh so you would code your site on your own account on your own netlify site
like show them everything as it's live on your server if they're happy with it
tell them to create a netlify account or help them create a netlify account and

03:17
then just drag the code to their server once they've paid you in full that's it
our nut device hosting servers is free and unlimited their basic stuff is free
it's not unlimited if you hit like some like ridiculous amount of traffic you
have to start paying yeah so i think like when 100 devs kind of went viral this
second like the second round i like netlify is like you got to start paying
us money now i've been on netlife for years and
they're eventually just like oh you got to pay us money now
which i'm i'm happy to pay because i've gotten so much out of them for free for
so long yeah so once you get like certain amounts of traffic stuff like
that you gotta start paying what if they don't want netlify then

03:18
they can pay and figure it out themselves q can you explain what stack we are
learning we are learning the mern stack which is we're learning
javascript or full stack javascript i don't actually like saying stack i just
like saying full stack javascript we're learning html css javascript then we'll
learn node mongodb and express and we'll put a little bit of react cherries on
top how are people finding the time to get
through all the this homework doing the networking and finding time to look for
clients am i defective no you're not defective a lot of folks this is a big time
commitment right you're putting at least six hours in for class and then a
minimum a minimum 10 hours outside of class
right minimum 10 hours outside of class some people are putting more like 20
hours outside of class so 10 to 20 hours outside of class is a pretty big time

03:19
commitment the thing that i'll say is that a lot of
folks are not effective with the time that they do have a lot of folks are not
don't and it's just it's just the human it's just human nature to not be
effective with our time when it comes to
learning to not be able to actually have strong amounts of focus for the hours
that we do have and so one of the things you have to work on is making sure that
your active recall is sharp that your space repetition is sharp make sure that
you are not going into your days like an accident do you have every day planned
out if you do not have your week planned out then you are messing up
all right if you don't know what topics you're going to try to get through on on
each day like if you if you don't know how you're
going to like wait what your goal to learn that day is or what your goal to
learn on wednesday is your goal to learn
on saturdays like if you don't know what that is at the beginning of each week
you're doomed to fail because you're going to go into the week like an
accident you're going to over invest in one area too much or or skip a day or

03:20
something like that and then be off track and then get nowhere
and so you have to make sure you're planning out your weeks you have to make
sure you know what your game plan for each day is when i like the way i do
mine is i look at my month and i figure out here's what i want to get done for
the month and then every sunday typically i plan out my week
and then every night before i go to bed i write down the three things i'm gonna
get done the next day and so i know every day the things i
have to get done and i know what my week looks like i know what my month looks
like if i do not do that it's all my mom's garbage i won't get stuff done
i i won't achieve the things i wanted to achieve and so i think a lot of folks
when they say like that they're taking time they're not they're they're going
into their days like an accident they haven't planned out their days they're
not doing their active recall they're not doing their space repetition that's
why your days aren't effective it's not that you're defective it's that a lot of
times the planning is is more important than the doing

03:21
so you got to make sure that you're planning out that you're that you're
taking you're setting yourself up to succeed and not to fail yeah
and then you got to really time box your day you got to use pomodoro
you got to be like all right i'm going to only spend 20 minutes on this topic
if it doesn't make sense you got to get help that's the last big thing is most
folks fail because they don't ask for help they don't get on discord every
single every single question on discord right now has an answer sometimes
they're not the best answers sometimes you have to ask again to get better
answers but pretty much every single question has an answer so if you're
stuck things aren't making sense you need to ask really good questions and
get better at asking questions right and so make sure you're planning out your
days you're using active recall make sure you're using space repetition make
sure you're asking questions make sure you're not spending more than 20 20
minutes on a topic that doesn't make sense without getting help if you're not
asking for help that's that's how like you're not defective you're probably not
asking for help you're probably not planning out your days you're probably

03:22
not using the best learning resources you have at your disposal which are
active recall and space repetition now doing all that and fitting it into
your time that's a whole other beast right
but that's why you have to plan out your days and your weeks to to make sure you
can fit in that time and a lot of times what a lot of a lot of my students
they have they try out for they try two hours a day that's kind of what i
recommend at least two hours a day and you're doing it every day saturdays
and sundays include it a lot of folks have to figure out where they squeeze in
those two hours some folks wake up early which i actually recommend i think
working in the morning can help a lot of folks because at the end of the day if
you're working you're too tired there's nothing's going to sink in it's not
going to it's not going to digest in your brain and so you want to make sure
that you're figuring out when your two hours makes the most sense
you recommend two hours at once i do because i think for some folks your

03:23
pomodoro like you have to find the pomodoro that works for you
some folks pomodoro is like 15 15 some is 30 30 some is 45 15 because
different people get into a flow state at different times
so for me it took me a really long time but i'm best at like 45 15 where i work
for 45 minutes straight and then i spend
i take 15 minutes off because i find for a lot of problems it takes me around 20
minutes to really get my head wrapped around it and then start writing good
code and i wouldn't want to stop at like 30 minutes and be like done so i i some
days will do 30 30 but most recently i've been doing 45 15.
i'll work for 45 minutes and then i'll take 15 off
so that's how i answer that question but remember

03:24
time is a privilege that's why i always say this might not be your time
literally because of time that's okay you also might only have an hour a day
that's okay you don't have to finish this in a
certain number of days there's always the catch-up crew
the videos always go on youtube if you need to go at your own pace that's okay
this is your career for the rest of your life
in in five years you're not gonna be like i really i'm really upset that i
took an extra extra three months to figure this stuff out
it really just won't matter right if you think about the grand
scheme of your life it taking three more months just won't
matter in the long run so don't be afraid for it to take three
more months to go at your own pace a little bit to realize that you might not
have the full privilege of time that you might need to do an hour a day instead
of two hours a day and then yeah don't don't waste time not asking for help

03:25
cool all right we got through some questions today let's keep pushing
what's the chance of us landing six-figure jobs um i don't i'm i don't like
the idea of like aiming for six-figure jobs i also don't
like the idea of aiming for fang i i i like my students to aim for
being comfortable right making money that's comfortable for them
making enough money to support themselves and their family
having a happy stable job uh not a job that stresses them out a job that meets
their needs maybe they have kids that need the work from home right i i don't
like folks to have these like arbitrary goals at the end of the day that don't
like increase their happiness or like make it so that they can actually have
something achievable the making 90k versus 100k like
it depends on who you are and where you're at in life it just doesn't matter
like that's not the the the thing i want folks to focus on i

03:26
want you to have a healthy stable career that supports you and your loved ones
where you're excited to show up for work every day that's the type of job i want
you to get and having these skills enable you to have
access to those types of jobs now do we have a lot of folks that got
six figure jobs last cohort yes we did we had dozens of them
but should that be your goal because some youtuber told you so i don't know
that's up to you alrighty we have a some basic css so let's go ahead and
if we look at the starter code we have i'm going to close these other files
here and i'm going to go to little i'm already literally on [Music]

03:27
we have this basic css and so if you open up the html and the css
you'll see here uh there are some instructions in the html
make this text blue underline and have a gold background make this text purple
bold it and have an orange border so go ahead and
actually follow these instructions and write out your basic css in your style
sheet okay so i'm going to go ahead and put let's put
i know this one is probably if you're new here this might be really hard if
you're if you're doing this review it might be really easy so we're gonna put
we're just gonna put four minutes on the clock then we're gonna go over it
together so get your fingers loose if you are if you've been doing this for
a while try and flex a little bit on yourself try and add some more stuff too
but if you're brand new this will be pretty hard
try it and then we'll go over it together the css should be blank this is called
basic css basic css is the folder and it is the

03:28
html and the css files you're writing in that css file moon
make sure you agree to our rules on discord if you do not agree to the rules
you won't see the follow along materials channel once you agree to the rules
you'll see the follow along materials channel and the zip will be there for
today's class i need defeats that it's wild how much i
struggled with this in the beginning yeah the beauty of coming back and doing
review right things do get easier with time so if

03:29
you're new look at that comment in the beginning it was hard but now bruising
i mean this is basic css what up mitch all right star give it a try you know
you're new to css star still give it a try you can look at the slides
exclamation point slides if you need it right
you can copy exactly how we did it in the slides and change it up for your

03:30
purposes hey it's greg glad to hear that week i knew nothing about programming
and i have a paid client in just three months let's go
do the work the program will work for you it's no joke underdevelop's changed
my life hey glad to hear that week but you got a client
i said i'm a starter so all i'm doing is
the color hey that's good if all you can do is color do color we'll do the rest
together we're going to go over everything and the solutions will be on
discord afterwards as well so do what you can do get your practice in and then
we'll go over it together good luck with the bathroom smith
coding man says i haven't been able to get my first clients through friends or
family what should this next steps be there it's in that class we talked about

03:31
what to do after friends and family go back to those slides go back to the
point in class and walk through it there's like
10 different things you can be doing got some dunzo's i see you avp wooden fish
logan said done i wouldn't even know how to open a css file at the beginning of
this year counting this is a w on the board hell yeah let's go
you always organize your code blocks with the same order i do but it doesn't
really matter too much waste it's up to you lots of dones right at the timer
all right let's go ahead and bring this off the page and let's go
over it together if you're still frantically typing it's time to stop

03:32
it's all right let's go over it together now
we could we could swap from our html to our css so we could like go back and
forth right um what i'm going to do is i'm just going to copy all of this stuff
and then i'm just going to put it as a comment in my css so comments are pretty
cool because what it enables you to do all right so now all this stuff is
commented out what enables me to do is i can read this stuff
but my browser won't actually read it so it won't try to run this as css you can
see it's like this like lovely green color so the way i did this is i just
highlighted it all and on max it's command forward slash uh
on windows i'm sure it's like control forward slash and just it just makes it
that we can see it but the the computer or your browser won't actually read it

03:33
now we don't have to kind of keep jumping around all right
so let's look at this first one actually i'll do it i'll do it in each
segment i'll comment on each segment just make a little bit easier
all right so i'll comment this segment and this segment
then this segment that way i can put my answers in line
do shift tab here there we go shift tab to move it to the to the left and then
comment it out beautiful all right make this text blue
underlined and have a gold background uh so since it was the h1 i can select the
h1 every princess had done so proud of myself i'm proud of you too congrats on
finishing all right make this text blue so we'll do color
blue we're going to use the color keyword here we could use hexadecimal

03:34
rgba hsla whatever we want to use but we'll just use the color keyword
underline how do i underline stuff anybody remember the the the property
value pair for underline beautiful text decoration you can see my
my editor trying to help me here text decoration and i can do
underline beautiful now if i didn't know how to underline
something where could i have gone where could i have gone where could i
have gone if i didn't know how to do text education underlying yeah i went
to the mdn now what if i gave it the good old google
what if i gave it the good old mdn try i i scoured google i've scoured mdn i
still couldn't figure it out where could i go where could i go
discord absolutely thank you that's my point discord and in discord i would say
hey i gave it to google i went to the mdn i

03:35
still can't figure out how to underline can somebody show me how and somewhat
would help you out someone said message leon directly hell no
i don't read my dms i don't read my emails
if you want you want an answer from me there's two ways there's the ask leon
channel i respond to every single message in that channel as long as it's
actually a question for me and not some like code help thing that you can use to
help channels for that or mod mail if it's too sensitive yeah alrighty
all right we can head color blue underline and have a gold
background so let's do background background attachment get out of here
background gold beautiful let's go ahead and open this up in the
browser and make sure we're actually doing what we're supposed to be doing
beautiful look at that that gold background blue text and underline

03:36
all right see the next one make this text purple bold it 25 pixels
and have an orange border all right so we're going to select our h2
notice how i always do my h2 and then i open my curly braces
right open my curly braces open and close and then i go back in and i put my
property value pairs or my declarations all right make this text purple color
purple beautiful uh font weight bold it or bold sorry and then font size
25 pixels we'll learn to use m's and rems later on today
and then an orange border so border is a little interesting uh there is an older
way of doing it where we do border size border color border type as three

03:37
separate entities but with the newer versions of css aka css3 we can all do
it on one line so we can go ahead and do two pixels solid orange beautiful
what up blah welcome welcome yeah we got color purple
we got it bolded we got 25 pixels and an orange border let's make sure
everything's looking clean beautiful looks good to me
oh the blog again i love when y'all say hi to blah when they pop in
but uh they threw down with those study communities i can't tell you how much
work they put in like that that was that was a lot of
work and they threw down for sure uh every week they're trying to make your

03:38
experience better so i i agree with bladder goat that's 100 down thank you
so much for everything you do to help us all right next we got a section
make this section a width of 50 height of 200 pixels
a background of gray a border of black and a paragraph text of white
all right so we'll make the width with 50
beautiful remember you always need your colon in between the property and the
value and you have to end your line with a semicolon it's not like javascript
where you can just get rid of the semicolon these days with css you need
it or else the next declaration won't run properly so if i forget the
semicolon here and i try to go to the next line it just it just won't work
all right height we'll do height 200 pixels beautiful

03:39
and then a background of gray cool and a border of black
we're going to do border let's do 3 pixels 30 pixels 3 pixels
solid black beautiful and this is the paragraph text of white
so maybe we can just try color white to see if it inherits
because sometimes you'll notice that the text can inherit from its container so
we'll throw white on here and see if it inherits the paragraphs but if not we'll
have to go ahead and set the paragraph out to white exactly let's go and save
it let's refresh beautiful we can see that that white did
inherit to the paragraph text at the black border uh
gray background white text and it has some width and some height you see the
width is 50 the height is 200 pixels looking good
i was struggling remember the property something just clicked and i got it

03:40
today hey good to hear chan all right last one here is the footer all right
make this footer have a black background with a light green border and this text
20 pixels white plus a font family of roboto all right let's go and do uh
black background so we'll do background black beautiful
with a light green border do 5 pixels solid and what did you all
use for light green would you all use for light green light green
beautiful light green all right and then i just want to be a
little bit more specific i want to make the h3 inside the footer so how can i

03:41
target the h3 inside the footer we're going to see this in a few seconds we're
going to get into specificity and how we
can target things based on relationships but how could i target the h3
that is inside the footer yeah two kind of ways really i could do footer
h3 or i could even do the the the direct way but we'll just do space for now
and all that's saying is target the h3 that is inside the footer we're going to
see this in detail in a few seconds here but we're saying target the h that's
inside of the footer that's what that relationship that space means
h3 inside of the footer if we go and look at our html this h3
is inside of the footer that's a relationship there relationship selector cool
and so we want to make this text a font size of 20 pixels

03:42
and we want it to be white so we can do color uh white
and then we want the font family to be roboto robot bow and then we want to
back up so we can do helvetica and then we'll just have a sans serif at the end
just just as a backup backup right in case roboto doesn't work helvetica
doesn't work uh it'll be our it'll be our follow over
and if we save this the only thing right now is that we don't have roboto as a
font like if we go to our html is it in there
no we can see that we don't have roboto as a font so we need to go get that
roboto font so let's go to google fonts i'm going to clear out the fonts that i
already have so i'm going to remove all the sources pro
let's go ahead go to fonts let's search for roboto oh it's right
here so i'm going to click on it and then i'm just going to grab the 400

03:43
because that's all i need for right now select this style
i'm going to grab the link boom copy go back to my html before the link to my
css file there we go it's the link to roboto and so now if i save all this
and i go back and we refresh boom we can even see that this text is
very different looking than the rest of the text you can see the curvature
on this t versus this t so we know this is actually roboto that's coming through

03:44
all right oh what's the difference between background and background color
with css3 we got shorthand for a lot of this stuff
you could easily do background hyphen color it's just a little old that's all
it still works it's just with css3 we got newer ways of doing all this stuff
and kind of like shortcuts almost so instead of doing font color just color
works they're doing background color background works border all on one line
yeah joe flew hey thank you so much for the
10 gifted subs i appreciate that thank you for being here that's wild
thank you so much thank you for the gift of subs
i folks got subs hey appreciate you thank you for being here
telling kind of exactly what we just said there's there's shortcuts you can

03:45
use for a lot of this stuff um and some of them that you don't
really use shortcuts for just part of the specification cool
all right let's keep pushing folks uh was there anything else left in the
css let me just double check i know i think we got everything that
was in the footer 20 pixels white font from the robot
though it looks like we're good so like i said you don't have to
to frantically type along well we'll go over all this stuff together i'll and
i'll share all the solutions after after class as well so
all the solutions will be posted on discord after we're done reviewing
all right let's keep pushing let's talk about relationships we saw that
where i said how do i get the h3 that was inside of the footer right
we wanted to be able to kind of go a little bit more deeper with how we're

03:46
targeting elements so that we can style them uniquely and
we saw that i wanted to target that h3 was inside the footer but not all the h3s
just the h3 that was inside of the footer and so
there are different ways to to build out or target these elements based on their
relationships there's a couple key relationships that you need to know when
it comes to css the first one is the direct parent child selector in this case
we have a selector here section right carrot p
whenever you see this carrot is the direct child
and what that means is we're going to try and find a paragraph
that is directly inside of a section and
that's what we see here we can see hello twitch

03:47
is a paragraph that is directly inside of a section right paragraph
is directly inside of the section so this is a direct
parent child relationship the paragraph is the child of a section and it is the
direct child there's nothing else wrapping around this paragraph
other than the section beautiful here we have
a parent-child relationship a parent child selector but it does not have to
be direct it can be any steps in between so here we have a paragraph
that is inside of a section and that's what we're looking for so here i have a
paragraph we can see that it's inside of an article and then it is inside the
section this works because it does not need to be a direct parent child
hello creation hey what's going on how you doing thanks for stopping by
you all haven't followed calo creation we rate them recently definitely give

03:48
them a follow for sure great streamer so here no carrot right no carrot
and so we want to make sure that we understand that it doesn't
matter where it's at right we can see that this paragraph is inside the
article and then it's inside the section
it still works but if we were to do this we would add this carrot this would no
longer turn red because it would no longer work because it's not a direct
child right it's not a direct child it is the child of an article so as soon as
we throw that carrot in this no longer works it's no longer a direct child cool
yeah allison ads are normal it's not a thing that we do on our end
it's a twitch thing and so when we take breaks we run ads to hopefully help

03:49
folks not get them when they join but it's not something we have in our
control it's the one of the things of being on twitch
we do put all of our stuff normally on youtube uh which is we haven't monetized
that so it's ad free cool all right so we have
direct parent child and then just plain old parent child
and then we also have direct sibling right and so here we have hello youtube
which comes immediately after hello twitch and so when we have this paragraph
plus paragraph what we are saying is find me a paragraph whose immediate
sibling like on the same level of it is is another paragraph so this paragraph
has an immediate sibling that is a paragraph so it would turn red

03:50
this hello twitch would not turn red why why would hello twitch not turn red
color creation a thank you for this up it doesn't have a sibling exactly
there's no other paragraph up here for it to be the direct sibling of so hello
twitch will not work here only hello youtube would go red because
it's the only one that has a direct sibling above it cool
let's actually code this out let's let's use let's put this in the practice it's
too hard when it's theoretical let's let's see it let's build it let's play
with it and so we have uh some relationships that we can code out and
so in our starter code we have relationship css that's the one we're
opening relationship css we have an html file and a css file and we're going to
play around with it a little bit i'm going to play around with a little
bit i'll give everybody a second to open it up i want you to try and code along

03:51
with me relationship css alrighty so i want to target all of my h2s right
i want to target all my h2s thank you snake i want to target all my h2s and
make them red so you can see i have some h2s here
and h2 here and h2 here so let's make all of them red
and then once we play around this we'll take our break so h2 make it color red
we save it and let's go ahead and open this in the browser

03:52
as we can see all the h2s are red right world zebra unicorn duck now i want
all of the h2s inside this section to be blue but i still want all the other
sections to be sorry all the other h2s to be red so i want these two to be blue
but everything else to stay red so go ahead and take 30 seconds or so to try
that out on your own i want world and zebra blue
but unicorn and duck to stay red go for it hey funny hope you're doing well
good to see you what up dan just a few more seconds just to try it
out on your own all right let's take a look at this
blue hey thank you for another 10 gifts it subs that's wild thank you so much

03:53
for being here appreciate you falling out thank you so much
all right we have the h2s right the h2s that are inside the
section if we look they're different from every other h2 because this one is
directly inside of an article and this one is directly inside of an article two
so we could say section direct child h2 and target these two
all right so let's go and try that let's go ahead and do section
direct child h2 and make it color blue if we did everything right
we should see the first two is blue and the second two is red beautiful alrighty

03:54
so if we look why why did these two s stay red
why did these two stay red why didn't they also turn blue
they're not the direct children so the cascade didn't override those two right
those two are still getting their red color from this rule here
this rule did not apply to them right this rule that gave them all red
made sure that they were all red but then two of those h2s were overridden in
the cascade to be blue so if we look these two were overwritten to be blue
in the cascade they started off as red and then they became blue
further down in the cascade now why do i need to use the direct child here why
can't i just do space what happens if i do let's save this and see what happens

03:55
section h2 huh unicorn goes blue why did unicorn go blue
in this scenario let's look at our html why did unicorn go blue when i got rid
of the direct child um exactly unicorn is still a descendant
of the section if we look h2 then an article and then a section
so when h2 is still a child this unicorn is still a child of this section it's
just not a what child it's not just a it's just not a what child
exactly it's just not a direct child this unicorn is the direct child of the
article it is a child of the section just not a direct child if we look
these two are direct children of the section look they come immediately

03:56
inside the section so these two are direct children of the section beautiful
all right so let's go back let's fix that up all right love it
now one more here and then we'll take our break how can i target
how could i target duck to be purple i'm gonna target duck to be purple
i don't want unicorn to be purple so i can't i just can't come in and do this i
just can't come in and do i just i just can't come in and do that
right if i do that and i do color purple right and i save it and i come back

03:57
you see that unicorn and duck go purple right so how do i make just
duck go purple ah yeah we can we can use everything at our
disposal we can say all right we want an article right we want an article that's
different from this article well how is this article different well
this article has a sibling that is a section this article
has no siblings there's nothing else here inside the section so i can do section
plus article h2 let's come back here let's do section
plus article h2 so what this is saying is give me an h2 it is the direct child
of an article and that article must be the direct sibling of a section and
that's what we actually see here we see all right h2

03:58
is the direct child of the article and this article is the direct
sibling of this section so it should work let's save it let's go back
let's refresh beautiful so now we can see that the world and zebra are blue
do the cascade unicorn keeps its original red from the very first rule
and then the cascade we override duck to be purple lovely first try exactly
alrighty let's go ahead and put five minutes on the clock
when we come back we're gonna spend some time looking at ids and classes we're
gonna talk about specificity and then we're gonna get into layouts we're gonna

03:59
look at some floats a little bit of flexbox so uh lots of good stuff to come
back to but let's take our five minute break if you're new around these parts
we'd like to be healthy at the top of the hour let's take a break if you're
able please get up move around hydrate and then we'll be back in five minutes
i'm also going to run ads so new folks hopefully don't see ads when they join us
and as always if you need the solutions they'll be on discord after our review

04:02

04:04
already five minutes on the clock you deserve this take a good break please do

04:05
alrighty welcome back everyone hope you had a good break we'll be able
to get a stretching if you're able to are we going to be doing alumni t-spills
this cohort yeah we had one at the beginning uh my goal is to do
two things like i want two more things that we're kind of gearing up to um we
just had 30 plus alumni sign up to be alumni mentors so
they'll be joining the study communities
uh and then my goal is to have have them kind of also host kind of like
one-on-ones on discord where you can get more help ask more questions and so
we have all them that are rolling out um we're hopefully getting them live this
week and so they've already signed up we've assigned them to different groups

04:06
and yeah so we're gonna we're gonna get them to come through and then
i i wanna have like two different spaces
i'm not sure if it's gonna be on discord or
uh twitter spaces but i wanna have like one where we bring in people once a week
probably on fridays folks that are kind of that want to help the community but
have some really interesting stuff to share so um folks
that are kind of like experts in the field we get to hear from them and then
uh sometimes it'll be like experts sometimes it'll be alumni sometimes
it'll be like a mix and so i want to have that like maybe once a week maybe
like every friday i'm planning on and then i want to have like another space
that's just kind of moderated not by myself or mods but
maybe like alumni just for like cohort to like share how things are going how
they're feeling stuff like that and so those are kind of the two bigger spaces
i want to figure out how to create and so
hopefully this this upcoming week we'll figure all that out as well yeah we kind
of had to we we did all the study communities we're kind of seeing how all
that shakes out and now we can kind of work on the next big

04:07
project which are kind of those spaces yeah different welcome back hey
i always like to start off each top of the hour with some questions
uh ms rose said i didn't know amazon gave a free sub each month whoo yeah
if you have amazon prime you get a free sub and all the subs go to supporting
the nonprofit i work at during the day uh we're getting ready to make like our
next big check to them so i'm really excited to share that hopefully like in
the next week or so we'll share where we're at for the next big like tranche
it's pretty big which is wild yeah so each time you use your amazon
prime you you make jeff bezos cry it's completely free to you if you have
if you have uh amazon prime yeah i appreciate all the other primes
you said at the beginning of the cohort that we are learning to code to make our

04:08
own product that there are easier programs to complete
what programs let me read this again if you're if we are learning to code to
make our own product there are easier programs to complete oh
i think you mean like if you're if you're here to like learn how to code to
like not get a job but to build something uh yeah there's probably like
no code platforms that probably a little bit easier like bubble or things that
can help you build an mvp so where you can make enough money to then hire
engineers so i think if you're just trying to build your own products
there's probably a way where you don't have to actually learn how to code to
get that product built but could still build an mvp to like
demonstrate your idea and get your first few customers
but i'm not sure if that's what you're talking about or not or what i was
talking about or not if we are behind and trying to catch
up are we also expected to have a contract by the end of march that's the goal
right that's the goal you you don't need any skills to get a contract

04:09
right like you you you could you could have zero coding ability and get a
contract like it has nothing to do with your ability to code because you could
always figure that stuff out once you start so you don't need to have finished
the project you just need a signed contract so
you actually could just watch that class
and call it a day and be able to get the contract
do you have any suggestions for people that are struggling to find a client
have you done everything we talked about in that class
i think a lot of folks try like one or two things and then then they kind of
give up have you tried everything have you
dialed for dollars have you done all the things that might be uncomfortable and
hard to do it's very different than if you just
posted on facebook and nothing happened yeah so make sure you watch the
freelancing class it's up on youtube uh make sure you walk through we kind of we
did step by step like do this then this then this then this if you've done all

04:10
those things that's a different problem if you've done all those things then
post an ask leon i'm happy to kind of hear what went well what didn't go well
uh sam posted kind of saying that you don't need contracts and that he doesn't
use them anymore seems like a terrible idea illegally can you weigh in
so i think folks that read that post didn't read what they
were talking like what sam was mentioning sam was talking about for like
very small like mom and pop clients they don't use contracts anymore um
so they're saying like if like they're if they're like a small like restaurant
that he won't make a client i make a contract that that that he'll just go
ahead and put all that into the proposal that's okay
um contracts for me are never about getting paid

04:11
contracts for me are never about like the only thing i'm really worried about
in a contract is indemnification so meaning that like
if their website causes them to lose orders they have a harder time suing me
and a lot of people are like no one's gonna sue over a thousand dollar website
i i don't i don't believe that um it's there to protect you and it's also there
to say what happens when things go wrong and so for me a lot of people are like
well if it's a thousand dollars they're not going to see you they can small
claims court in a lot of states is is up to 5 000 and so it even works the other
way too like if for some reason they stiff you on the last payment or
something like that you can very easily file in small claims court and if you
have a contract in place the judge almost automatically like gives you
the default judgment and without that contract in place if they sue you in
small claims then you pretty much automatically lose
and so for me i like to have a contract in place it's nothing to do with getting

04:12
paid on time because that's that's based on like me taking a deposit not doing
work without deposit it's really just there so that when things go south we
already know what to do and that indemnification clause is in place so
that if they do take me to small claims the judge will look and be like well you
sign an indemnification clause and and that's it so for me that's kind of
my thoughts on it uh and that's why i still use contracts for sure is i i want
that i want that indemnification at the end of the day
but i definitely get their point of saying
if you're working with smaller clients you don't you don't really need super
in-depth contracts there's even somebody that i know that's an angel investor
that does like 100 000 deals and doesn't use contracts
just an email and that kind of works out the same way
it's just a personal thing for me at the end of the day where i feel like i like
that comfort of knowing that if i do go to court at least it's there
it's better than not being there to me and i i don't lose

04:13
um i don't i don't lose clients in the contract phase
uh is a contract really doesn't scare my clients because my contracts are always
like in plain english and i'm the one walking them through it so that they
don't i don't i don't really like i look
at my my freelancing numbers and i never lose folks um
i never lose folks in that part of the process so for me
it's it's worth it i don't have any downside but i have potentially a lot of
upside and then of course i'm not a lawyer so
all of this is just the ramblings of someone that's been there before
judge judy always rules based on contracts if there are any exactly and a
lot of judges are the same way you'll go to small claims the judge will read the
contract and go oh well it says right here what happens done and
you just move on yeah so it's up to you i i get where they're
coming from i'm a little bit i'm a little bit different and i i've been

04:14
through the ringer a few times so i like to have it you know
let's do one more then we're going to jump into more css goodness
for those of us that are unable to freelance due to conflicts with work
restrictions religious or other reasons what are alternatives to meet the
requirements i will talk more about the alternatives like in actual class times
i know we don't have everyone here for office hours
but the alternatives are contributing to a free software or open source project
where you will join one of those projects you'll see an open ticket
you'll contribute to that ticket and then that that counts also volunteering
counts and for me volunteering is almost
exactly the same process except you just
don't get paid at the end you still have
a proposal you still have a contract you still have all that stuff right you
still have all that stuff um and so yeah volunteering or free

04:15
software is the way around it if you're not able to yeah
but you get so much out of having a paid client that don't like don't just be
like oh i don't want to do it and try doing something else it really is such a
huge win to have a paid client on your resume because it really does help blow
away the stink the the open source free software
projects and the volunteering does help but paid clients are definitely the best
yeah cool all right folks let's move on here
we got some more css to look at and then we're going to do some layouts and then
we're going to get to javascript eventually we're on what we're going into our
it's our fifth hour alrighty oh this is this is our fourth hour going

04:16
into five yeah all right ids and classes ids are used for targeting one element
and only one element the beautiful thing is we saw with our selectors with our
with our regular kind of just element selectors we can target a lot of the
elements at one time but when we want to get specific
and target only one element and only one element at a time
we can use ids so here on this paragraph you can see the very first kind of
attribute value pair that we've actually really seen we saw that's true we saw
source and alt on our images but here is an attribute of id
and its value of zebra right and so what we're doing here is we are saying
i want to target this element and only this element when you use an id
ids can only be used once per page so since i've given this
paragraph the id of zebra this paragraph cannot get another id and i cannot use

04:17
zebra anywhere else on my html document that makes it so when i come down here
and i write my selector octothorpe zebra that's how i target the id
it means i'm only ever going to target this paragraph and there's no chance to
target anything else right so when you want to target one specific right
one specific thing that's when you use the id
now when i'm styling with html so when i'm starting with my css i don't really
use ids that much ids become a lot more beneficial to me when i get to
javascript and i'm trying to attach like
event listeners to one element like just click that thing that's when ids come
back for me but when i'm styling i typically stop at classes classes
can be reused each element can have multiple classes

04:18
so right here you can see this paragraph has the class of bob it could also have
the class of dominoes could also have the class of rubber ducky so each
element can have multiple classes and the beautiful thing is you can reuse
those classes across elements so you can
see that both of these have the class of
bob so both of them would be colored red right so the idea is i can put these
classes on any element that i want and target all of those elements at the same
time beautiful so ids target one element classes can target as many elements as
you want and we can reuse that class across multiple elements the other thing
you'll notice is that an element can also have an id
and then have a whole string of classes if it wants as well alrighty

04:19
when we're talking about these elements something we have to remember
is that as we are writing out our css we notice that we started everything here
we started everything here making all of our h2s red
then in the cascade as we went further down we made some of them blue
and then one of them purple i was able to override the red to be blue
and purple because the selectors further down had the same or greater
specificity right the same or greater specificity
if i do not have the same or greater specificity i cannot override stuff as i
go down the cascade so what the heck does specificity mean what it means is
that there's actually a point value assigned to each thing in our selector right

04:20
so if we go back and look we're going to give tags
i always hit end sometimes by accident look at all the stuff we've done so far
we should be proud of ourselves look at all this that's wild all right we're
gonna go ahead and give tags one point we're gonna give classes 10 points
ids a hundred and other which we'll see in a second a thousand points of
specificity right so if we look at this selector
how many points of specificity does this rule have
how many points of specificity is does this rule have
good job chat people are saying 110 let's take a look at it
there are no tags here but there is one class we can see the dot that's how

04:21
we know it's a class so we have zero tags we have one class and we have one id
this has a hundred and ten points of specificity that means
if i ever wanted to override this color in the cascade with like a rule that
came below it i would need at least 110 points of specificity or else i
could not override right so if we go back and we look
how many points of specificity does this selector have here
yes one point of specificity exactly so if i want to override this color red
how many points of specificity do i need i would need at least one or more so
it's always the same or more right so here how many points do i have here

04:22
my point of specificity two exactly so since this is two that's
one or more points of specificity so i'm able to override the red because of
the specificity i have on line four same thing here how many points of
specificity do i have here on line seven i have three right i have age two an
article in a section that's three points three tags or three points of
specificity and so since i have three points specificity that is way more than
enough to override the red color that's in this
h2 so that's where specificity comes into play
if i was to do something wild like this let's say let's say i gave um
let's go back to [Music] let's go ahead and then all of our h2s

04:23
on all of our h2s i'm going to give them a class of make red
right so all of my h2s now have this class of make red make red make red make
red make red if i was to come back to my css and say make red instead of h2
let's see what happens let me refresh beautiful they're all red
they're all red the the the this h2 no longer becomes blue this h2
no longer becomes purple why specificity exactly

04:24
how many points of specificity is make red
it's 10 points of specificity so is is there a way for two points to override 10
no is there a way for three points to override 10 no so since this is more
specific these two rules cannot override in the cascade
they do not have the same or greater specificity
that's where this comes into play we need to have the same or greater
specificity if we want to use the cascade beautiful we change it back
you get all the stuff we had going back as well
all right let's take a look at this one how many points of specificity does this

04:25
rule have yep 121 let's see let's see people are saying 121 let's take a look
all right how many tags do we have well we have
one tag here the paragraph so one how many classes do we have we have one
two classes so two classes and we have one id
this has a 121 points of specificity beautiful
uh our points a literal measure of override meaning if i had 11 tags long
would it override the class yes if you had 10 actual elements sorry 11 10 or
more actual elements you could override a class in the cascade so that's

04:26
important to keep in mind right you could have 10 tags to override a class
10 classes to override an id and 10 ids to override another cool
beautiful so 121 when two classes are connected like
domino's bob what does it mean it means that they're on the same element so if
we look dominoes and bob there's no space here so it's
not like a parent-child relationship we're saying find me a paragraph
that has the class of domino's pizza and has the class of bob and if we look
here we go we have a paragraph that has the class of domino's pizza
and the class of bob so no space means that you're finding
something that has all of that stuff a paragraph and both of those classes so
you're trying to find a paragraph that's both of those classes that is inside is

04:27
something that has the idea of diet coke and so here's the idea of diet coke so
this paragraph is inside this section so it works
does class ordering matter not really no cool alrighty let's keep pushing
how many points of specificity does this rule have here
1200 all right let's take a look how many tags do we have zero

04:28
how many classes do we have zero how many ids do we have two
so if you said 200 you got got because there's also this bang important
which is worth a thousand so this is 1200 points of specificity
practice i'm not getting got today not today not today leon i said huzzah
so a thousand plus 200 so 1200 points of specificity now we have this other here
so bang important is for other and we would throw in that bang
important because it makes this super specific there's really only one time i
actually advocate using bang important and that is when
your client project is due in an hour and you can't get some specific css to

04:29
work so you just throw bang important on it to get it to work and you'll fix it
after the client meeting that's the only
uh that's the only time i would ever say use bang important is because it
overrides the cascade so much that you'll never be able to to create styles
that override it and so a lot of times if people are using bang important
you're sitting there like banging your head against the keyboard trying to
figure out like why your css is not working why the cascade is not working
and it's because the rule is too specific right and since it's too specific it
just you just can't override it right um there's one other really thing that
we've talked about today that gives you this a thousand points of specificity
what's the other thing that has that a thousand points of specificity
yeah inline style so like putting style in line with your html that's also a

04:30
bang important yeah let's get some specificity practice in
so we have a specificity practice inside of our code here
so if you look for specificity practice that's what we're going to work on
specificity practice there's html and css if you open up the css there are some
things that want you to do make only rhino and zebra blue make only
hufflepuff gold please select duck with the highest
level specificity and then rhino with the highest level of specificity possible
let's go ahead and put about four minutes on the clock here
try and go as much as you can into it and then we're gonna go over it together
the four minutes on the clock here this is specificity practice uh in the super

04:31
review folder if you're new all the materials are on discord and our follow
along materials channel exclamation point discord here in chat agree to the
rules you'll see the following materials
channel download it unzip it open an mvs code alrighty i've added uh
remember we'll always have the solutions on discord after class so if things are

04:32
taking a while that's okay i think we're on class 18 now yeah class 18
um but like four of those were like networking type classes so really like
14 classes do i use bam i don't personally know i have in the past
thank you bandit appreciate you there's so many uh subs and primes today
thank you everybody i really appreciate it tourboy vr chronic brent
you know sound k carms flovor geno sound a damn coconut mezro
blue what the 20 gifted sub says wild snake from state farm that's hilarious
and funny hey funny with the 17 most funny that's wild thank you for the 17

04:33
most that's huge i've been this happy about sunday school in a mad minute me too
what happens with the group projects not sure what you mean woven
i seen the obi-wan kenobi trailer no what when that come out
leon everyone i actually hate css but i love and understand it would you advise
me to look more on the ux ui side of things ui maybe not ux if you want to

04:34
still be an engineer yeah but front end sure so people enjoy it up to you
uh favorite dbz character krillin it looks good all right i'll watch the
trailer after after class off remits well hey good morning welcome
ui is the stuff that you like see and click on like the actual buttons and
stuff user experience is like how individuals move through your content

04:35
and how they experience it all right folks a few seconds left
good here grady thank you for being here all right folks come on back let's go
through this together you just use google calendar plan out
your weeks i use google calendar to plan
out my day to the hour every day if it's not on my google calendar i don't do it
at one point it was so bad i was scheduling my bathroom breaks on google
calendar yeah i have i have executive functioning
issues um that go along with my attention issues
and so i i need something that tells me where to be how to be what to be and how
to do it uh and i need that at all times or else i just don't do stuff

04:36
um so i will i will literally i will literally read wikipedia for 10
hours straight if i don't have something that tells me
to go do something so my google calendar is set up like by the hour and i get a
little chime that tells me to do the next thing and then i i do it and i
never don't do it and so that's that's what works for me
and if i didn't have that i just won't do stuff i'll just whatever my brain is
on at that moment is the only thing that that'll happen
cool all right please make only rhino and zebra blue let's take a look at
rhino and zebra all right so rhino and zebra both have
id so we could use two ids here um but they also they also have the class of
africa and four legs so let's use that class of four legs four legs

04:37
and we're gonna make them blue so we'll do color blue
i saved it you can see i don't have that
blue circle so you know i saved and then let's open this in the browser
beautiful rhino and zebra are blue please make only hufflepuff gold let's see
so we have best house as the id harry potter triwizard champ badger so i could
use all these classes but if i only ever want hufflepuff to be gold
then i would want it to use the idea of best house so i'm going to use the idea
of best house here best house and we'll do color gold sure it works beautiful

04:38
cool all right so i think we got those two
and there are many different ways that we could have made that blue there are
other things we could have done to make it gold right we could have used the
classes we could have just used the id it's up to you
why didn't you use the ids for the first one because that would have been more
work we would have had to done two ids we would have had to have done the idea
of rhino and the idea of zebra we could have done it right we could have we
could have done uh id rhino and id zebra whenever you have the comma it
means target both of these elements at the same time
but that's a little bit more work so i just did the class of 4 likes
if we did the class of top we could have done that too
because color would inherit but if you want to be actually like actually
targeting the h2 you would have done like dot top space h2 to target both of

04:39
these h2s yeah so for me just four legs or africa
probably would have been the shortest one to use top works but only because of
inheritance alrighty please select duck with the highest level of specificity
possible please select duck with the highest
level specificity possible so let's go and take a look at duck all right
here's duck duck has two classes likes to quack and fight 10 or 100 so
i'm going to take both of these first and let's start there and we know it's
an h2 i'm going to do h2 likes to quack fight 10 or 100 no spaces because it is
an h2 that has both of those classes so let's start there h2 likes the quack
and then the fight 100 or 10. that's that's the start
right and then all right what's what's next after the h2

04:40
the h2 is inside of an article that also has the class r ducks dinosaurs
let's go ahead and copy that class r ducks dinosaurs true so let's go ahead and
do article dot our ducks dinosaurs space right because
this h2 is inside of the article so we need that parent child relationship
which is controlled by the space the h2 that is inside the article beautiful
all right this article has a sibling that is the section with the class of
middle so let's do that section the class of middle and it's a sibling
remember this is this is like super super overkill you would never ever do
this it's just a fun exercise to see if you can get as specific as possible
all right so that article the article was the sibling to this section

04:41
and this section has a sibling with the id sorry with the class of top
why don't i keep going that way here we go so let's go ahead and do another
another sibling here section with the class of top and then that section
has a sibling which is the h1 with the id of high so high h1 so h1 high
it's still still a sibling and then this h1 is inside the body
and the body is the sibling of the head and the head is inside the html so let's
do body and then we'll do head plus body and then all this is inside of the html

04:42
element this is just being being wild right and let's just make this color
purple just to make sure it works let's open it
alright it works we can see duck went to purple so
i think this has the most specificity if we go back and look uh the
h2 with both the classes inside the article with the class that's
the sibling of the section with the class of middle as a sibling of the
section with the class at top there's a sibling with the h1 with the idea of
high that's inside the body which is a sibling to the head which is inside the
html element and then yes i need one more thing thank you chat bang important

04:43
second try cold version of spirit bomb [Music] i just did my dance uh so
that is i think the most specificity we could have on duck and then rhino is
kind of the same game so i'll leave that for you to figure out but duck i think
is pretty fun alrighty let's keep it moving we've actually done this last one in
class so if you need it you can go back to that class but
i think we got enough from that one alrighty next thing we have is the box
model box model so we're going to take a look at the box model we'll do some box
model practice and then we'll take a break and we'll do a longer break for
this one i think we'll do 10 minutes for this next break just because we've been
going for five hours and i want folks to
be able to have a little bit longer of a break grab some food walk the dogs do

04:44
what you got to do so we'll cover the box model and then we'll do a little bit
longer of a of a break cool and then we'll get the floats
then after floats we still got all and flexbox and we got a bunch of javascript
to do and we also got media queries so we got floats media queries um
and then we get to javascript so it's gonna be a long day folks
gotta walk a goldfish exactly all right so every element in web development is a
what everything when it comes to html and css every single element is a what
every single thing is a box exactly everything is a box
and to calculate the width of that box you include the width of the element
you include its padding on both sides and you include its border on both sides
it's how you calculate the width of an element
it's the same thing for the height you take the height of that element you

04:45
take its padding on the top and bottom and then you take its border on the top
or bottom now the margin can come in and push this box model around i don't
technically keep it as part of the box model i see it more as the bully that
pushes the box model around cool so let's go ahead and draw out
the box model one second if i pull up the whiteboard some folks like to
have some shenanigans all right so let's draw out our our
our box here so let's start off with the actual let's say we have a section

04:46
all right so we have a section and we're going to give it a height of 100 pixels
and a width of 100 pixels so here we actually see that draw out
here is our section with a height and width of 100 pixels
now we wouldn't actually be able to see this box at first
right wouldn't be able to see this but i love all the nun spin uh for folks that
are new here uh my mom is the queen of finding free stuff to do
i always have something to do every weekend and for a long time my mom would
drop me off with these nuns every saturday for a free arts program
and so my my art should be way better than it is basically because i took free
art classes for years with the nuns and so don't blame me blame the nuns if my
my art isn't pretty all right cool so we have our section we have a
height and a width of 100 pixels we won't actually be able to see it because

04:47
there's no like border or anything here but if i was to ask you how wide this
element is how wide is this element chat how wide is it at the moment
100 pixels nice let's go ahead and add some border let's add some border
let's uh add our border as sorry let's add some padding
let's add our padding as a green and let's add a padding of 20 pixels
on all sides so this would add padding on all sides
so we could do padding on all sides and if i add padding on all sides
how wide is our element now yeah it's 140 pixels wide exactly

04:48
because we have 100 pixels for the width we have 20 on the left and 20 on the
right so that means we have something that is a 140 pixels wide
let's go ahead and add some border and that border we're
going to make let's say five pixels wide so border pixels solid red beautiful
so that means i'm going to have five pixels of border on each side
and so how wide is our element now yeah 150 pixels wide because
we have 100 pixels in the middle 20 on each side for padding that's 140 already

04:49
145 150 pixels wide now this is important because let's say we had a
let's say we had a let's do a different color here let's say we had a 200 pixel
container right 200 pixel container how many of our
sections could we fit inside of that 200 pixel container one exactly
yeah only one because we only have we only have room

04:50
for 150 pixels if we put two of these that'd be 300 pixels that would be 300
pixels right 300 pixels inside of a 200 pixel container it can't
work and so we would see it break to a new line so it's important
to understand how the box model works because without it we don't know how
much stuff we can sit next to each other
right and so we would need to be able to put these two elements next to each
other if we wanted to so if let's say this container was 300 pixels wide
then we'd be able to fit two of them next to each other
right we got to fit two of them next to each other but right now if it's a 200
pixel we only get one so it's important to understand this box model
right because if we don't know the widths we don't have to sit stuff next
to each other exactly demi them mj said this is where i messed up my knobs not
paying attention to the list of everything this can get into trouble
especially with things like navigation if you don't know how much stuff each

04:51
thing is taking up in terms of space especially if you're not using things
like flexbox so important understand the box model let's take a look at some
practice with the box model one second all righty
so for our box model we drawled it out let's go ahead and code it out so there
is a box model practice box model practice and so we open up that box model
practice gonna close everything else out
in the box model practice there are some things that you have here
here we go actually i think the stuff that's in the css is wrong so in the box

04:52
model practice is not the stuff that's in the css file it's actually stuff
that's in the html file in the html file there's some things
here that should be in the style.css so in style.css it should be different
i'll just copy it from the copy it from the html
and paste it into the css that's what you want to work on
all right go ahead i'm going to put four minutes on the clock we'll go over it
together and then we'll take our extended break so you can do what you gotta do
how about it for four minutes you got this if you're new you need
materials during our discord exclamation
point discord agree to the rules there's

04:53
a following materials channel with ariel the starter code that we're doing today
this is box model practice you're doing what's in the html make the h1 30 pixels

04:54
a little bit padding practicing your box model you got this
what do you think about php it's great i mean it's so much so much of the web is
built on php wordpress laravel i don't really get the php hate
i think it's definitely evolved more and
i think laravel is kind of like industry standard i wish laravel existed for
every language thanks flicks laravel is a like a web application
framework i guess you could call it that does a lot of the heavy lifting for
building web applications like all the stuff that you need to handle like i
don't know email subscriptions like all stuff you
need to build a web application that like is not actual just like the logic

04:55
of the application but all the other stuff that just modern apps have laravel
handles for you hey civic doing good thanks for stopping by
minute 30 left we'll finish this up together and we'll take a longer break
so it's like rails ruby yeah but even better blitz and redwoods similar yeah
super mature thoughts on rust it's pretty cool one of

04:56
these days i'm going to sit down and and try and learn it get better at it
i'm really interested in web assembly and so like
rust the webassembly is something that i'd be really interested in
nick once we get through full stack javascript like once we get through the
back end yeah do you eat a snack during the breaks
normally i don't eat until the very end yeah i'm weird like that i also like
typically eat like really like one big meal a day
all right folks come on back come on back

04:57
all right let's take a look at these and we'll take our longer break
yep specific that's what i do i do intermittent fasting it helps my brain
not just like for weight loss or anything like that i think the research
is a little mixed on that at the moment but i definitely feel
my brain functions better when i intermittently fast cool alrighty
please make the h1 30 pixels a little bit of padding on the left and a thin red
border all right so h1 i'm going to select that 30 pixels so we can do font size
30 pixels beautiful a little bit of padding on the left so we can do padding
we do padding left and we can do just as little so we'll do

04:58
five pixels and then we'll do a thin red border so border and we'll keep it thin
one pixels solid red beautiful now we did padding left here there's
also something else that we can do that's pretty nifty which is
padding gets applied in a clockwise order so top right bottom left so you could
actually do something like this we could do zero on the top zero on the right
zero on the bottom and five pixels on the left that would work exactly the
same as doing padding left so just a little little trick to keep in mind but
i think this works let's save this up let's open this in the browser
gotta click over here open the browser all right

04:59
none of our css is being applied here that i can see so let's take a look
oh cause i didn't comment the rest of this stuff out
i didn't comment any of these things out so it's like what the heck is going on
in this css file it's like freaking out like doesn't know how to render the html
that's inside the css all right here we go
let's comment all these things out let's save and we should be good
there we go beautiful so we got the little bit of padding on the left
we got the red border and we can always use the inspect tool to see it second
try so let's go ahead and inspect it and let's go ahead and take a look
i'm gonna close this here if you scroll down you can actually see in the
inspector you just right click inspect in the elements tab and you scroll down
you can actually see all right here's the actual element here's the padding
and notice the five here that five that's letting us know that

05:00
there's five pixels of padding and you can actually see the little bit of green
here for the padding when i hover over it we can see that the padding is there
we can see that our border is one pixel on all sides and we can actually see the
margin that's there too did we did we write any margin where the
heck did that come from where did the margin come from we write any margin
yeah it's default from the browser exactly default from the browser all
right please make the h2 font size of 20 pixels we'll do font size 25 px
with padding on the top and bottom so we'll use that padding trick that i just
showed you padding so top right bottom left so we'll do um
how much is on the top we'll say 10 pixels and the other cool thing is we

05:01
can do 10 pixel zero and what this will do it'll it'll repeat right so it'll do
10 0 10 0. so we did 10 on the top zero on
the right 10 on the bottom zero on the left i'm going to remember all this anki
paying off exactly spidey dan exactly all right that should handle our padding
thick gold border uh 10 pixels solid gold
and margin on the top and bottom we can do the same thing that we did with the
padding it works for margin as well we'll do we'll do 30 pixels zero so
that'll give us 30 pixels on the top zero on the right
30 on the bottom and zero on the left cool let's look at this
please make spans have a thin black border span border one pixel solid black

05:02
we'll get through this then we'll take our longer break a little bit of padding
do five pixels on each side and we'll make the color blue beautiful
all right spans have a thin black border a little padding and they are blue
and this last one here section i have a width of 25 a height now 200 pixels
centered how did you all center your your section
do margin zero auto you can do text to line oh sorry it's not text so let's do

05:03
margin zero auto and then thin border we'll go ahead and do border one pixel
solid purple beautiful with 25 200 pixels tall
margin zero auto what that's saying is saying put zero on the top and bottom
and automatically figure it out on the left and right
beautiful i think all this looks good let's see how it looks in the browser
oh yeah look at us go nice and centered got the the borders
going everything looks good to me and got everything going here
beautiful all right i think we got it i'll leave this up for a second so folks
can see i know we went through that one a little fast alrighty

05:04
let's go ahead and put a longer timer on here we're going to go i think for
10 minutes so that should give you a little more
time to grab some water hydrate kiss some babies do what you got to do
and we'll be back in 10. when we come back in 10 minutes
we are going to move into uh layout so we'll look at some layouts
we'll do some floats we'll do some flexbox and then we'll do some
responsiveness with media queries and then we'll be ready to gear up for some
javascript so 10 minutes on the timer we come back we're doing layouts we'll
actually look at our starter template first and then we'll do layout so we'll
put 10 minutes on the clock here all right have some fun see in a few minutes

05:05

05:15
you don't get got we go get even five hours deep on a sunday let's go you're
i came for the replay and it's going live that's what we do we we ain't
outside we inside but we online that's what i'm talking about we online
let's go turn up b sweatshirt is so apparent i'll take it let's go beast mode
this is uh grand master maurice ashley uh chess grandmaster that's their merch
all right folks welcome back welcome back what's one of the what's the longest

05:16
stream ever did one of our reviews went nine hours
i want to say there was an 11 hour one too i can't remember if that 11 or 12 was
broken up into two i know we definitely did a nine
where's hundreds merch coming soon coming soon folks
we've been sharing some pretty good mock-ups on twitter it's been pretty
cool to see there's the one that used like the
hundred emoji with devs that was fire can you have a full website while giving
it a height yeah you can because height comes from one of two ways either comes
from the elements inside of the content or from giving it a height so you can
get height from just the stuff that's inside of your container right so a lot
of text and things like that that could give it height just as much as setting a

05:17
fixed height could be who does the thumbnails for youtube now i do
i'm just putting some placeholders for now figure out how to make them better
in the future but i've just been having fun with it
no worries miracle no worries all right let's get through some questions in the
slido and then i will jump back into the starter template and some layout
all right can we do a review of the responsive stuff yep that's coming up
m's and all that fun stuff coming up for those of us playing catch-up where
there be any way to watch the office hour videos uh yeah they're they're only
on twitch and they're only on there for 60 days it's one of the perks of paying
off doing the boot camp live there's very few things that separate the
youtube following along experience from the live experience and one of them is
office hours so i really do like to encourage folks to

05:18
participate in the community to show up even just for office hours and so even
if you're part of the ketchup crew there's no reason why you can't come to
office hours a lot of times just answering questions most of the time
it's not even like technical stuff it's just about how to get jobs how to
freelance things like that and so yeah don't don't feel like you
don't feel like you have to skip office hours if you're still in the ketchup
crew in fact office hours is probably more for you than everyone so
yeah office hours we don't really put them on youtube just because
um youtube really doesn't like them because the the like the watch time is
typically lower and so then it tanks like everyone finding the other videos
it's weird youtube is weird i don't really get the algorithm behind youtube
but if i put too much stuff that people don't watch then our videos don't get
shown to anyone which is weird so it's a game that we play but also i i
really do like it as an incentive to follow along live so
maybe one day we'll do like an unlisted i have them all so maybe we'll do like

05:19
an unlisted uh youtube playlist but for now it's an incentive to show up
the projects listed in our portfolios do employers drill down to make sure the
website projects are real companies no 99 of the time they won't ask
the one percent of the time you just chalk that up to an l and keep moving
um but yeah 99 of the time they don't care i i like blah's answer no laugh out
loud they don't care yeah nobody cares they they you got to realize that your
portfolio's just to get just to get into the first step
no one's hiring you based off your portfolio all this stuff is just to make
you pass a sniff test that means that you're worthy enough in their
eyes which is a shitty thing to say uh to interview and so all this is just to

05:20
pass that first sniff test and get you into the interview where your technical
skills or your behavioral skills shine through to get you the job
i still don't understand arrow functions we haven't covered arrow functions in
class yet we'll get there can we get a week or two off to get
ourselves in order it'd be helpful for us with mentally family stuff and beyond
our control i want to go to distance breathing room
so that's what this week was for this week was to give folks a little bit
more time to catch up and to not have new class so that's what this week was
for we'll do another week like this in the future where it's mainly just
networking uh so that's what this week was for and we'll
probably have another one soon once once we get a little bit further
through javascript we'll take uh like another week similar between this and um

05:21
back end are we going to be covering apis in this course absolutely yeah
pretty close to apis too like in two weeks or so maybe less
for homework what do we need to do in code academy
is it one through six or sections one through six overall
um the js one through six like all the javascript stuff
what are real world practical uses for loops whenever you need to do the same
thing over and over again is when you use a loop um counting use a loop uh
doing certain things x number of times you use a loop so like let's say
you want to show something to a user multiple times you would use a loop
but uh we'll get into more loops and stuff later on when we get to
when we get to objects and we're getting like data back from from like an api

05:22
like let's say we want it let's say we could ask the dominoes for
all of my orders right and domino's gives me back like 10 000 orders
i want to be able to show all those orders to you as the user of my new
domino's website and what i'll do is i'll loop through
all the orders to put the stuff into the dom for you to see
right so you would see this date i ordered that this data
ordered that to stay ordered that so i would use a loop to loop through and
show you all of my order history sometimes these songs bop oh i love them
all right getting that second wave energy so let's let's lean into it alrighty
so we have this starter template let's take a look at the starter template

05:23
together blah thank you for the hydration cheers to you thank you voice
okay look at the starter template it was in the materials for today
so we have this template and in the template are a few things i
like to point out just that they're there this template is what i recommend
folks just kind of start with for any of the projects that we do kind of going
forward that are html css and javascript related
so in the template there are some goodies that we've covered
the big thing here that i want to talk about is that there's this normalize
link here and if we look inside the css folder
right if you look in the css folder there's the reset and normalize
arnold all the materials are on our discord exclamation point discord agreed
to the rules and then the following materials channel you'll see everything

05:24
that you need so when you are kind of making that big
decision as to this is probably one of the first big decisions as a front-end
developer right you will need to determine whether or not you're going to
use normalize reset or skip them both right and so
what happens is we saw a lot today this default styling coming from the browser
right we saw that the h1 was big bold black and beautiful much like myself we
saw some margin coming in and so all of this default styling is just coming from
the browser and the the wild thing is that each browser might be slightly
different and so what normalize does is it says
you know what i like those default stylings but i want them to be the same
across every browser and so what normalize does is it
really does just normalize all of those default stylings across every browser
the other option that a lot of people will use is something called reset and

05:25
reset scorches the earth it gets rid of all of the default styling
everything goes back to zero your spans look just like your h1 and you build up
from scratch so it's up to you i've been in the html and css game for
too long i'm too used to the default styling so i use normalize just to make
sure it's consistent but a lot of my students they typically
prefer reset just because they don't think about it they start from zero
it's up to you and then we link to our normal style
sheet instead of our normal style sheet we got some of the the hacks oh this is
old i forgot to fix this uh get rid of this moz prefix if you're using this
template the one i shared in our actual class had this fixed but you don't want
that moz prefix you just want bots box sizing border box uh which will help you
uh later on today uh we have our clear fix and our clear
it's kind of all the hacks that we've gone over in class so far are all in

05:26
this template the box sizing border box comes into play when you're calculating
with do you include padding and border in
those with calculations or not if you're
using box sizing border box you won't so something to keep in mind uh we'll see
clear and clear fix in a in a in a minute cool
it's just a mistake the moz i just forgot to pull it off i used to back in
the day you had to have vendor prefixes for all of them for box sizing so that's
like really old in there the the code i shared i don't know why this one's older
and has it but the one from class doesn't have it yeah
all right so we looked at the template let's look at some layouts now
we've seen two different ways of doing layouts and we're going to see them
again today at first we're going to talk about floats
now i am an oddball when it comes to teaching floats i really like to teach

05:27
volts because i think it forces you to become intimate with the box model to
really understand how things come together in the browser and even if you
use flexbox you're going to eventually get into things like flex basis where
you still have to know your percentages anyway and so i like starting with
floats one of the most common things that i get from my students
is leon thank you for helping me thank you for making me learn floats
because they joined a company where their first job was to convert an old
code base to a new one or they got a freelancing client that had old code and
guess what it's all floats and guess what floats are way harder to learn than
flexbox so i love floats i love teaching floats and
i want all my students to learn them because guess what you're going to run
into them in the wild and when you do think of me all right with floats
you're really doing one thing and one thing only you're telling something to

05:28
go up and to a corner and so if i float something to the left like this aside
i'm telling you to go up as much as it can and to the left as much as it can
and what it winds up happening is that it winds up sticking in this corner same
thing if i was to float something to the right it would go up as much as it can
go and to the right as much as it can go trying to get into this corner
and the beautiful thing is that when you float stuff the hack
that winds up happening is as they're all trying to get into this corner
things wind up sitting next to each other right so if we had let's say three
boxes and we floated them what they would all
do would be try to get into that corner so this box would come up as far as it
could go and then to the left as far as it could go
and then this box would go up as much as it could go and to the left as much as
it can go so just by floating those boxes they wind up sitting next to each

05:29
other because they're all trying to get into that corner right beautiful
all right let's look at some simple layouts
right let's look at some simple layouts so we have everybody ganks until leon
brings out the flows exactly so here's our first layout uh we're looking at
this layout uh what we what type of html element would we use here header
how about this down here twitter how about these three sections nice
how about these two sections yeah all right build it use your template

05:30
build this layout use floats please use floats we'll do it with flex in a second
so build this layout with floats i want to put
four minutes on the clock here and then we'll go over it together if you're
brand new you've never used floats before that's okay try writing out the html
try writing out the html and then we'll go over it together four minutes on the
clock and we're gonna go over this layout together you got this
at least get the html that we just talked through
okay fox just did this homework earlier today hey glad you did
neko chats they go both the same way so both to the left are both to the right

05:31
i prefer going to the left so the order stays the same
can we use classes sure you can use glasses
we touch on grid not today but in the future
once once we learn javascript when we come back we'll go deeper on flexbox and
we'll touch a little bit of grid you know
i want us to learn enough javascript to do like drop downs and hidden menus and
all that fun stuff and then we'll come back and build real
sights with it um some real layouts and we'll use flex and we'll touch a

05:32
little bit on grid we won't go too deep into it though
i common case everything i don't care my bad yeah i write bad code
xbox is more common but folks use grid now too
forgot so much adding so much to anki today hey i'd love to hear that
it's a great day to add to anki i want you to do the html and the css

05:33
but if you're new just do the html first try nice minute left minute left
got this dig deep reese's peanut putter cup thank you for the prime
well thank you for the 13 months they are thank you for the three
i suffer what's good baby whoo i grew the three

05:34
you're rusty that's okay that's why we're here hbc
got some dunzo's coming in all right i see y'all
wasn't this 15 minutes of pain before it was look at you doing in four minutes
today used to be used to be 15 we did it in
seven now we're doing it in four that's progress baby
ruby can't believe how much faster i'm doing this compared to the first time
hey turn up all right let's go through this together
i'm just going to use my template we got
our header footer and then five sections so let's go in here
go ahead and do our header and then we're going to have our sections

05:35
and we know that we need we need five of these so i'm going to copy and
paste it four more times boom boom boom boom and then our footer beautiful
all right and the only other thing here that is that we need to realize is that
these like last two sections are different than these top three so
instead of doing like some wild relationship selector um
i'll just give them a class and i'll give the class of bottom there you go cool
so now we have our header our footer our
three sections and our two sections with the class of bottom beautiful
all right so we have our layout so we could do something like this we could do
our header give them a height of 100 pixels we
could give them a border uh one pixel solid black so we could see it and we
could repeat the same thing down here with footer
right we could read the same thing with footer
but instead of doing that i'm just gonna go ahead and put

05:36
a comma and then footer so what that does is it repeats
the same styling on both the header and the footer and this helps us stay more
dry exactly do not repeat yourself and so this helps us
not having to repeat ourselves let's save it and make sure we can see our
header and footer on the page let's go ahead and open this in the browser
wrong browser all right open in the browser there we go
all right we have our header and footer on the page we're good let's keep
pushing so now let's do our sections and let's
just get all the sections on the page as well sections
we know they're going to have a height let's get a little different let's go
ahead like 200 pixels uh let's give them a whiff to start and
we know that with if we're looking at the first like three
and we're looking at the slides we know that they're going to be at least what

05:37
size 33.33 33 repeating of course right so we could just make all the sections
33 and then we'll make these bottom two fifty percent
let's go ahead and do with oh 33.333 percent repeating of course and
let's just save this for now and see where we're at
cool we can't see them we see all the space they took up but we can't see them
because we didn't give them border let's go ahead and give them a border cool
let's go back and refresh there we go we got one two three four five we got our
five sections here we see that they're all taking up uh 33 with but they're not
sitting next to each other right they're not sitting next to each
other how can i get them to sit next to each other the old school way

05:38
yeah float left can you use the calc function you can
something newer in css where you don't have to do the calculation your head you
can do calc and then divide it by three um we gotta float them left so they sit
next to each other beautiful and now we have at least
we see the first three sitting next to each other that looks good
the last two are sitting next to each other we got some weird stuff that's
happening here but we'll come back and handle that weird stuff later
these two are still sitting next to each other but they're still not taking up
the full width so let's go ahead and change bottom to be a width of 50
and the beautiful thing about bottom is that it still inherits all the other
stuff from the sections right it still gets the height the the border the float
it's the only thing we're overriding in the cascade is the width so if we save
this and go back we can see that now the bottom two are taking up that 50

05:39
the top three are sitting next to each other but we got this weird thing that's
happening here let's inspect and see what's going on right click inspect
and if we look at the sections they look good the sections all look at the right
spot as we come down and we get to the footer we set the footer slid up
it slid up and here's what's happening here are our sections sitting
sitting next to each other right and here is my footer my footer right now
is hitting the sections and doesn't go anywhere right
but as soon as i float my sections the footer goes zoop and slides up
let's see that one more time here are the sections originally footer is
hitting them it can't go up but as soon as we float those sections

05:40
and they go off the page the footer slides on up so we can stop
that footer from sliding up by clearing it
so if we go back and we go ahead and we put a clear on the footer
we save both and we come back the footer is where it should be
because what the what the footer just did right
what the footer just did instead of sliding under when we floated the
content because we floated all of these sections we floated all them off the
page so instead of like instead of sliding underneath it looked to the left
it looked to the right and it saw all the stuff that was floating and just
stayed where it was at right it just stayed where it was at so
instead of needing to slide under it look to the left and look to the right

05:41
and stayed where it was beautiful questions about this one so far and
that's the layout folks that's the layout we got it right boom
boom i'm happy with that all right so folks are asking about clear fix
clear fix is a very specific thing clear fix is when your container
collapses so let's let's go ahead and set this up a little bit differently

05:42
let's wrap these three sections in a main and
let's wrap these two bottom sections in a section
that we'll call we'll give it the class of
let's give it a different class we'll do it like class of bot
we'll call it bottom and we'll call these bottom sec so
that'll have the class of bottom and these will be bottom sec i'm going to
change these to bottom sec as well just so we're consistent beautiful
all right so now we have main and we have the section with the class of bottom

05:43
let's take a look at this let me take the float off the sections
i take the float off the sections and we're going to look at something
so i'm going to come back here i'm going to refresh and if we look at main
look at all the space main is taking up look when i hover over our main look at
all that blue that right now is the height
of main look how big it is look how tall it is that is the height of main but
wait a minute if we look at our css do we give main any height chat do we
give main any height at all nope there's no height here main doesn't have
any height anywhere right and so if we look there's no height on
main and so we're going to run into a problem
main right now is getting its height based on the sections that are inside of
it each of these have a height of 200 pixels and so that's how mane is getting

05:44
its height right now maine is gonna get tight from the stuff that's inside of it
as soon as we float this content look what happens let's float it
i'm gonna save i'm gonna come back i'm gonna refresh
maine is in shambles do you see do you even see maine anymore look i'm hovering
over main just like i did before and if you can see i know it's really tiny
it's gonna say like zero right there ready hold on it says zero
i floated that content it says i floated the content right i
floated it and maine went boom it collapsed on itself
i floated the sections that were inside and main boom collapsed right it no
longer has stuff inside of it that's supporting it right before those

05:45
sections were holding main open but now the sections are floating
it collapsed on itself now there's a couple ways to solve this
we could give main its own height or we can use a hack right the reason
why floats are so hard and why they're weird to use is because there's a lot of
hacks to work around this stuff which is why i like to teach it because if you
don't actually learn these hacks you're you're dead in the water when it comes
to actually like actually using this stuff and actually translating it to
flex and all that fun stuff so if we look
we have this class up here called clear fix and what clear fix does
is it puts a dot that is invisible right it puts a dot that is invisible after
right it puts a dot that is invisible after so if we go back to main

05:46
what we can do is we can give this a class of clear fix
and what it's going to do is if we refresh we can see that main has height again
because what happened is that there is now a little dot that is invisible
and instead of main collapsing right instead of main collapsing
we wrap around that dot mane is wrapping around that dot and so
it doesn't matter what's happening inside doesn't matter
if it's floating it doesn't matter what's going on we've told it to wrap
around that invisible dot so it retains its height that's all clearfix does is
it stops containers from collapsing right stops containers from collapsing when

05:47
you float stuff that's all it is robodom thank you for the hydration
cheers to you that's it so that's where clearfix comes from and
so that's why floats give so much trouble because you have to learn all these
weird hacks you have to learn what clear fix does stops containers from
collapsing what clearing stops stuff from from floating
past other stuff what and so you can do layout with floats but you have to learn
all those hacks beautiful all right we had a few more layouts here
but i think if you can do this layout you can probably do these layouts right
this is just one two three sections you get one a class that makes it bigger
same thing here one two three sections or maybe this is an aside if you had
more content to go off of and you're just changing the whiffs on these so i
think if you can do these you can do these two layouts and so if

05:48
you're new you might come back and try these remember we've had a whole we have
like two classes to get to this one layout so if you're brand new
don't feel pressured that you have to understand how to do this layout right
out the right out the gate go back and watch our two classes on layout yeah all
right so we did it with floats but now it's time to do a
flexbox right we did it we did it we did it we did it with floats
let's do a flexbox cool let's take a peek let's go back we have
our header footer our sections i'm going to clear it clean out uh this
i'm going gonna clean out all this here we go all right so we got our header and

05:49
footer which are on here right they got a height they got a border it looks fine
and dandy and then i want to do the layout that we
just did so what i'm going to do is i'm going to use flex and flex works well
when your stuff is in containers and our stuff is in containers we have main and
section class bottom so what i'm going to do is i am going to target main
and section i'm going to make sure they're both display display flex
and then i'm going to target all my sections and make sure that they are
um taking up one space each and they have a border so let's try that
let's go ahead and do main and bottom and we're just going to say display flex
and then for for all of my sections i'm going to target my sections

05:50
and i'm going to say take up one space each and let's give
you a border so we can actually see it pixel solid black all right let's save it
let's go back let's refresh uh we didn't get them heights we got to
give them heights too my bad let's give them height height 200 pixels
save it we go back and boom same layout done no floating no percentages
we done did it [Laughter] let's take a peek all right
so we have our two containers main and bottom right so if we go back and look
thank you for the stunt alert we have main and bottom

05:51
we set both of those containers to be a flexible container and the way we did
that is by setting display flex and then the only other thing we had to do
was tell our sections because if we look they're all sections right these three
are sections and these two are sections the only thing we had to say to them is
hey take up one space each and we gave them the height and border
and once we did that we wound up with the same layout because
these three sections each took up one space each which winds up being that 33
and then these each took up one space each what's winds up being 50 because
there was three of them in here and two of them in here so it does all
the stuff for you right you didn't have to calculate the percentages you didn't
have to do the the floating or anything like that it just it just does it and so

05:52
that's why books are really jazzed about flexbox
you can literally change the game in like two seconds and get all of the
layout done now once you go deeper with flexbox
you're gonna see that there's some other really fun stuff you can do you can do
things like space around you can do space between so all of these things that
would enable you to to build out more custom layouts you can do very very
quickly quickly with flexbox if you have like all your elements in the nav and
you want like space around each element you just say space around those elements
and it just works without having to calculate percentages or any of that odd
stuff so that's the beauty of flex and flexbox
flex one somebody asked it's just it just tells it to take up one space each
so if we look we have two of them here so they're going to
take up one space which means 50 50. here we have three of them so that means
33.3333 repeating of course right and so it just

05:53
means to take up one each and so it'll do the math for you after that so that's
the beauty of flexbox is that very quickly you can do layout you don't have
to do floats or percentages there's less hackiness you just have to learn some
vocabulary to use it well and so uh part of the homework we did for
flexbox was a couple things there is kind of like three big resources i
recommend one is the complete guide to flexbox by css tricks and if you are um
new that's all in the follow on materials channel if you just go to if
you just like search for flex in that channel you'll see that recommendation
the complete guide to flexbox by css tricks
i recommend the traversing media video on flexbox just as a quick overview and
then there are two games that i recommend that really help solidify it
and the games are really helpful here i don't really always like games but these
ones are really helpful uh one is flexbox froggy and the other is flexbox

05:54
zombies if you go through those two tutorials and you do the two games you
are squared away on needing flexbox and so definitely
something i recommend and they're fun and you'll actually retain it all make
sure you put it into your anki flex is something that really has to be in your
ank or else you'll forget all the weird terms you need to know
yeah grade we haven't gotten to grid yet when we come back with our javascript
skills we'll touch on a little bit of grid
and all that of course is on our discord but once again it was
the the complete guide to flexbox by css tricks
travesy media the goat has a flexbox video that i really like and then
uh flexbox zombies and flexbox uh froggy are the two the two games

05:55
well what would flex two do it would take up two points two two spaces
instead of one and so there's a couple ways you can make your containers bigger
or smaller and one of them is something called flex basis and so it's kind of
like almost like using whiffs but in a flexible container so definitely go deep
with this stuff like i said i wanted to show you a
little bit show you why people love it so much but we'll come back and play
more flex and a little bit of grid once we learn our javascripts cool
so i would recommend for homework if you had not already
try doing this layout with flex try doing this layout of flex and try
doing this layout with flex you will need flex basis probably for like this
one and this one because it's different sizes thank you cloud i got it alrighty
we're at the top of the hour so i want to take our five-minute break we're
gonna do five minutes here we did a 10-minute one before but we'll do five

05:56
now when we come back from five minutes we are going to jump into responsiveness
we're gonna look at things called ms and rems and then we're going to make
content decisions with media queries so i will see you all in five minutes
please if you're able get up move around hydrate take care of
yourself and i'll see you all in five minutes
dying arrows added two minutes to the timer so we're going for uh we're going
for seven minutes thank you dying seven minutes on the clock
all right see you all in seven i'm gonna run some ads so folks don't see them

05:58

05:59

06:02
i might run like six minutes of ads [Music] um bye let's go
it's impressive this is why pomodoro is important exactly you take your breaks

06:03
you can keep going cat is wreaking havoc all right 45 seconds left
are we covering a raise in oop today no no no that's uh because we'll do another
review once we get to the end of javascript
and we'll include a raise and oop then layered kick there is yep you go back to
our original layout class on youtube exclamation point youtube
what font do you use i think it's just the default but i use a uh
like a color scheme for folks that are color blend
just to hopefully help a little bit on stream alrighty six hours let's go

06:04
come on back folks come on back all right it wouldn't let me run six minutes of
ads i was hoping that we could get like like two in and then it wouldn't like
run ads for folks for a while but it got angry so all right
it's just getting started y'all exactly alrighty let's get jump into
responsiveness so so far our sites have been what we call fixed
with meaning that no matter what we did they kind of just stayed the same size
and back in the day that's what a lot of
sites were they were fixed as opposed to responsive so here is
ups website all the way up to like 2017. so in 2017 this is still what their
website looked like where if you opened up on a larger monitor

06:05
it still had all this white space right it still had all uh
still had all that white space right and so we didn't have to
like that was just that was just wild sauce right and so what happened is
eventually the mobile explosion forced companies to really consider
making their devices work great across all different kinds of devices
boston.com is one of my favorite examples of this
boston.com had a really bad static site and then what they realized is that if i
want eyeballs on my content i need something that
looks good across devices so as the site gets smaller so this would be like a
tablet size and then this would be kind of like
mobile phone size the site just looks great across all

06:06
different sizes of screens and this is really important because
boston.com cares about ads and for it to care about ads
right it needs eyeballs and to get eyeballs they need you watching or
reading this content when most people are going to watch or read it and
for a lot of news websites that's especially in metro areas that's during
your commute and so if you're doing your commute that
means you're going to be on a phone and if the site does not look good on a
phone then they're not going to get the eyeballs because they can't sell ads and
it's a wrap so they really invest it pretty heavily and making their site
look great across every device so it looks good on tablet
and even mobile phone and every space in between
and so that's the idea of responsiveness now there are

06:07
a couple key things that enable a site to be responsive one a site is fluid
meaning that it looks good even between uh all of what will eventually come
known as our break points and the way the site looks fluid is either you're
using a flexible grid or you are using percentages and as your
site kind of gets lo as you as your browser window sorry
resizes from larger to smaller or smaller to larger it still looks good in
between and so if we look at our our flexible site here that we use flexbox on
even as it gets smaller it still looks kind of good and as it gets bigger still
looks fine as well and so that fluidity is one of the key things
that we need to have in mind right that fluidity so we need to have in mind when
it comes to building out a responsive website this fluidity is going to help
us in between our different device sizes the second thing that we need is

06:08
elasticity and elasticity typically has to deal with fonts or using
responsive units of measure and the responsive unit of measure we're going
to learn about are m's and rems and so your fonts and then even
some of your sizing could eventually be in rems and m's so that as we're
responding to the page as it's getting bigger or smaller our text can respond
as well and then the last thing are content decisions
if our site is fluid and elastic the last big thing that we have to figure
out are content decisions what should be here at this screen
size right what should be here what should what should that should that
column still be there so on desktop we have all this real estate right
but once we get to say tablet this most popular probably can go away it's a
little bit extra and then once we get to mobile phone we run out of horizontal
space right we run out horizontal space we have a lot of vertical space so

06:09
everything going to a singular column is a good idea so these are content
decisions we pair fluidity elasticity and content
decisions to make a responsive website and the way we make our content
decisions are with something called media queries so let's take a peek
at each of these step by step and then we'll we'll take a look at building a
responsive site very briefly so fluidity we've already seen if our sites
are widths and percentages or or using flex we're good the fluidity is baked in
msu rams are where some folks tend to trip up and so
let's go ahead and take a look at this together now let's say we had
hundreds of lines let's say we have thousands of lines of css right

06:10
thousands of lines of css and in these thousands of lines of css
we had all of our font sizes in pixels right so we had thousands of line of css
and all of our font sizes are in pixels you go to your client
and your client or let's say your boss says i love the site but i want i want
all the fonts to be double the size i want all the fonts to be double the size
what would you have to do to fix all those font sizes and pixels across
thousands of lines of css you'd have to go and change each one
individually exactly you'd be control effing through all of your code
finding each one once you find them you also have to do the math

06:11
all right 12 to 24 15 to 30 17 to what right and so like gonna do all that math
however if all of your fonts were in m's you could make one change and all your
fonts would double so if we look here here i have my paragraph sized as an m
sorry size as an m and an m is a responsive unit of measure in m
will look at the parent's font size right it'll look at the parent's font
size and that's what its basis for size will be so
this paragraph what is its parent real quick and chat this paragraph its

06:12
parent is what it's the section exactly this parent the parent of this
paragraph is the section and so this section right this section
right now has a font size of 20 pixels so how large
is this paragraph right now in terms of font size
what is the font size of this paragraph at the moment
yeah it's 20 pixels exactly and if i wanted to double the font size
of this paragraph what would i change if i wanted this this paragraph to go
from 20 pixels to 40 pixels right i could do two things i could make it two m's
right and now it's 40 pixels or i could leave it at 1m and make this 40 pixels

06:13
right the the m is tied to its parents font size so if i
had all of my text in ms and i wanted everything to double in size
all i had to do is change this one line and now all of my fonts that are sized
and m's are now double the size that's it that's all you got to do and so
this m is really really powerful because it enables us to not only to change all
of our sizes very quickly but we can get into some really nifty things right
we we can get into this idea of our font sizes being responsive
and what the heck do i mean by that so to get to that let me let me let me

06:14
show you one thing that's a problem devman thank you for the hydration
cheers to you let me show you one thing that's a problem when we use m's right
when we use m's what happens is that the m always takes its size
from the nearest container always takes it from the nearest
container so what's a problem that we could run into if we are using m's in
our code and let's say we're working with other developers
what's a problem we could run into yeah somebody else can come in
and throw in a slightly different container so this paragraph might get
wrapped in an article and if that article

06:15
has a font size of 100 pixels well guess what your m just went from being 20
to 100 pixels because this container changed right the container it was it was
originally in the section but now it's in an article and they put a font size
on that article so all of your m's just messed up
they it changed all of them right so this kept happening and so they
introduced what are called rems rem stand for root m
and so instead of having to like look to
the parent to get the size so instead of looking at the section for its size or
the article for its size it doesn't matter what size the containers have
it's always going to look at the html element so whatever
font size is on the html element that is the only thing a rem will look at it

06:16
will never look anywhere else for its font size it'll always look at the html
element now this is great because you get all the benefits of m's but nobody
can come along and mess it all up for you that's the beauty of ramps now
you're into something funky here i'm saying 62.5
instead of having like a default font size like like a really easy font size
to have here would be like 10 pixels right that'd be really easy because one
rem would be 10 pixels two rams would be 20 pixels three rams would be 30 pixels
right that would be really easy to keep in mind but i have this like
62.5 percent why the heck why the heck would i do that
how do we decide between when you use m and rem it's a preference i use rams all

06:17
the time yeah it's for accessibility and let me
explain why we got some folks that remember in chat here
the default font size for most browsers is 16 pixels so if you do 16 times 62.5
you wind up with 10 pixels so some quick maths to give us 10 pixels
and the reason why i like to use the percentage here
instead of hard coding 10 pixels is because some individuals that have
maybe visibility concerns they will actually change the default
sizing of their browser so they might double the sizing of all their fonts
they might they might make everything bigger so that they can see it more
clearly and if i hard code 10 pixels well guess what

06:18
it gets rid of all of their defaults and forces everything to be 10 pixels
but with the percent i can grow or shrink to accommodate
their default sizing and i can still get
all the benefits of rams so rems make it really easy to respond
not only for accessibility concerns but also for us in our speed of development
one rem is whatever we set as the base font size and we can use that throughout
our code so rems make it really easy to update all of your sizing at one go
right i could double every rem by doubling this value
and it also helps when it comes to accessibility because we could take
whatever that default browser sizing is and have rams be equivalent to that
does reset mess this up uh it can but you're going to still come

06:19
back and put this font size like oh i see why leon uses normalize
yep it's one of my reasons alrighty so that's m's and rems just one more
time i know folks get really hung up on m's and rams
if we wanted all of our paragraphs to be 10 pixels we could of course come down
here and say font size 10 pixels right we could make our
paragraphs 10 pixels and it would work right we just say 10 pixels 10 pixels 10
pixels we have a thousand lines of code where we put all of our font sizes in
pixels all right they're all in pixels what up samia we're still going

06:20
they're all in pixels right but when it comes time to double all the
font sizes because our boss asks us to double the font sizing we'd have to go
line by line and change 10 to 20 10 to 20 10 to 20 10 to 20. that's so wild
however if we were using rems we could just double this number
and then this would go from 10 to 20 10 to 20 right so you get that ability
to double we also get the ability to whatever the user has set
as their base font size we can use that as a responsive unit of measure for all
of our fonts so not only are we we're not hard coding anymore if we if we were
to say 10 pixels for this and somebody needs to see font at three times the size
right if somebody says you know what in my browser i want my fonts to be three
times the size and you force it to be 10 pixels well guess what they're going to

06:21
see 10 pixels they're not going to see they're not going to see the 30 pixels
that they want so there's some accessibility concerns
here and there's also like ease of development concerns here as well alrighty
keep pushing here folks the last thing that we the last thing that we still have
is content decisions right well most professional settings use rams
yeah rams or m's rams i think are i mean that's my preference for sure
i'll always use rams i won't i won't like switch between rams and m's
m's give you more flexibility you could have some containers that have a certain
font size and other containers that have a different one
and so some folks do use ms because they want different areas of their site to

06:22
have different base font sizes and so you would use m's but i like rims cool
the last thing it comes right the last thing that comes in terms of
response in this is content decisions right content decisions
meaning that if we're looking at say the the boston website
right the boston website they decide at a certain screen size
to get rid of their column right that's a content decision they
said at this screen size i don't want this anymore they also said at this
screen size i don't want this content anymore so when you're making a response
a website you have your fluidity which is size the percentages are a
flexible container you have your elasticity which is using
your your your your sizing in m's or rems and the last thing you have to

06:23
figure out is content decisions and you make those content decisions by using
what how can we make these content decisions how do we make content decisions
yeah we use media queries to make content decisions and so media queries
just enable us to show certain css at different screen sizes so here's a
very simple media query we're saying at media all
all that means is you can think of whenever you see these over here just
count start counting them at zero we'll explain what they mean in a second so
we're saying 0 and a max width of 600 pixels so between 0 and 600 pixels in
screen size or your viewport size this rule will take effect
but this rule will not be in fact above 600 pixels right and this all

06:24
what this means is like when do these media queries take effect you can have
media queries that happen for across all your devices you could have media
queries for like printers you could have media queries for a bunch of different
things and so if you ever like printed out something and it looked
different stylistically that was the media queries that play cool
someone said do you build mobile first and then add your media queries to get
larger the other way around it's two different schools of thought some people
start mobile first because that's all your heavy hitting content and then they
get bigger and as they get bigger they add their media queries some people take
their design they shrink it till it looks bad write their media query shrink
it again media query string again media query that's the way i do i start big to
small a lot of folks are in that mobile first
camp i think it's great but if you're already working with a designer that's
already thought through the mobile first design and is giving you all like three
different layouts like a tablet desktop and mobile i just start big and work my

06:25
way to small it's up to you though it's a preference all right
let's look at a media query let's look at one of these together i'm just going
to copy this one and we'll paste it into the code that
we're working on most recently so here is our layout that we did recently
at the end i'm going to come down here and put that media query
and instead of it being an h1 because we don't have any h1 i'm going to make the
sections and i'm going to give them a background of blue
beautiful all right so that should between 0 and 600 pixels make our
backgrounds blue so let's save and see if we get that all right let's refresh
boom so you can see if you pay attention up here i know it's really tiny

06:26
but as i'm dragging you can actually see what width i am at so i'm at 570
580 590 and then right at 600 boom it goes away
right over 600 all that all that style goes away
below 600 boom that that rule is in play above 600 below above below above below
and so the beauty here is you can set up your media queries so that
between different sizes certain rules take effect and so what you can get
really good at doing is saying all right not only can i make stylistic decisions
but i can also make content decisions so maybe at 600 i don't want the bottom
sections anymore so i can do bottom and i could do something like display
none right so if i come back here and i refresh

06:27
and i go below 600 you can see that those two bottom sections are completely
gone that's the content decision i just made there above 600 no color and the
two bottoms are there below 600 they're gone boom
and then you can keep going up too we can then do um you can do you can kind
of cascade them if you want you can also do like min and max so we could do at
media um min with it's a 601 and max with you say like 1024 which would be
like most like desktops and a lot of folks will even use m's and rems here

06:28
right m's and rams here as well instead of pixel values you'll see that pretty
commonly you'll often see people not really using min like they'll do all min
or all mac just so you kind of have it cascading which makes a little bit
easier but um we can just put something in here just so we can see it background
and let's just go ahead and do color color red cool
oh i didn't actually do my my rule i didn't say what i was coloring red
i was looking at the one above there we go i make my section color red
remember your rules go inside of the media query because here's the immediate
query opening and closing and this is the whole rule
that i put in there so don't forget that you have to put the rule inside of your
curly braces all right so let's save this and see where we're at

06:29
all right so we can see above 600 we're red below 600 we're blue and we made a
content decision if we go all the way past 10 24 the red goes away
so we're able to show different colors different sizes right
we're able to make content decisions we're able to stack remove stuff all
using these media queries and so a very common thing to do when to have at least
kind of like three main groupings right uh something that
looks really good on mobile and it looks
really good on tablet and something that
looks really good on desktop and then if your site is fluid and elastic it still
looks good in between right those those specific media queries as well alrighty
all right we looked we looked at a media query together
and we kind of saw this already kind of where i made this responsive

06:30
if i want it right if i want it to [Music] make these stack right
let's say they're floated right let's say they're floated
let's say they're floated and i want them to stack
below 768 which is like a tablet size so below tablet i want them to stack what
what could i do in my media query yeah at a certain media query we get to
say with 100 and they would stack because they would
take up 100 of the of the page right so we could put a media query that was like
between uh like i don't know 0 and 768 and then it would
with 100 meaning that they would stack and it'll be a great content decision

06:31
beautiful all right flex direction column yeah if we're
doing flex it'd be cool to do it that way too cool
all right that's kind of a quick overview of media queries like i said
we will because we're already we're already six hours into it so what
we're gonna do is once we learn more once we learn more javascript we're
going to come back and we're going to build bigger layouts
so we'll see things like the like we'll have some examples that are like kind of
like the salon websites right where we'll come back we'll use grid on those
we'll make sure they're fully responsive and they respond to javascript meaning
that like you click on things drop downs pop up all that stuff and so we'll come
back and do those um but i want to get to javascript today and so we'll we'll
save that for once a little bit more javascript but hopefully this is enough
review for the html and css so you feel a little bit better you got some review
in you got some new stuff in your anki decks and so i want to get into some

06:32
lovely lovely javascript and different hey thank you for if i get the
subs hope you're doing well thank you for being here appreciate you alrighty so
let's cover the basics of programming and then i think we'll be at the top of
the hour so we'll take a break and then we're going to spend today
covering the big four we're going to cover variables functions
conditionals and loops and we're going to get some practice in with each of
them make sure we feel comfortable with them and then that's where we'll end
today cool how long will you be here i don't know
it depends on how quickly we go through all this material
so but this one i think it'll be a lot more be a lot more interactive we'll be

06:33
doing more coding we'll be doing a little bit of coding uh but this this
portion will we'll kind of do some of the like to bring it on and bring it on
again stuff just to get our fingers on the keyboard more cool all righty
let's go ahead and do programming when it comes to programming there's one
really important rule and that is a computer will do what you tell it to do
right a computer will do what you tell it to do so
what is a program well a program is a set of instructions that you write to
tell a computer what to do computers are really good at following instructions
very very quickly and way faster than a normal human could follow them so a
program is simply a set of instructions that you follow sorry a set of
instructions that you write to tell a computer what to do and then that makes

06:34
programming the act of writing those instructions in
a language that the computer can understand and this is really important because
computers by default don't really understand javascript that javascript is
more for us as humans to understand what we're talking about
and the logic that is happening in the program but that javascript is then
broken down into something that the computer can understand and when we get
to node we're going to talk a lot more about that in detail like how it's
broken down what's doing the breaking down but for now
all you have to really keep your mind on is that we are
writing javascript which is more human readable but that is broken down into
instructions that the computer can really understand so what the heck do i
mean by that that the computer can actually understand
at a base level a computer is comprised of a few parts

06:35
you have memory so it can like store stuff and recall stuff later on you have
an arithmetic logic unit that enables it to do like basic programming like basic
basic computation you have a program counter there are some like very basic
things that make up a computer and underneath all of that are some very
very fundamental concepts and so i want to spend a few seconds talking about
those fundamental concepts building up to a larger idea as to what javascript
might be really doing for us so that we don't have to actually be in
the muck that i'm about to show right now all right here is a
light bulb and right now this light bulb is not powered right it's not powered
if we go ahead and add a battery now the light bulb is powered and it turns on
right out of battery there's enough juice

06:36
going through it the light bulb turns on now let's add a little bit more
complexity to this very very simple circuit so i am going to have
my battery still but what i'm going to do is i'm going to put a switch here
and right now the circuit is open which means that it's not complete and
the light bulb is not on as soon as i close this circuit what happens
as soon as i close that circuit what happens
in chat what do you think as soon as i close that circuit what happens yeah
it's on right let there be light exactly it is on and
it it gives enough juice to power the light bulb when the light bulb turns on
okay thank you for the hype train appreciate that all right

06:37
turns on now the really nifty thing is i can represent this circuit right i can
represent this circuit as whether the switch is open
or closed and a very simple way of saying on or off right so if it is off
i'll say zero and the circuit is open or if it is closed and on i'll say one
so at a very very simple level i can represent this circuit as either zero
meaning it is open and or off and one meaning on so on and
off at a very very base level zero and one
and once we agree to this we can start to build up some very very simple logic
give me a little bit of creative freedom here on this one uh if you're a
codeweeny but let's let's show this so here we have a circuit
battery still in the middle but now i have two switches

06:38
how could i represent this circuit as it stands right now
yeah we can represent it with zero zero right both of the circuits are open both
of them are off and so we could represent this as zero zero
i could also close both of them and how could i represent this circuit with both
of them on yeah we could do one one one one beautiful
we could do one one and as soon as we get to one one where both of them are on
we could say this one is on blank this one is on well how do we
describe the circuit right now we could say this one is on blank this one is on
what am i what am i trying to say there this one is on
blank this one is on what am i saying in there yeah i'm saying and

06:39
i'm saying this one is on and this one is on so we're in our very very
first bit of simple logic we could say one one equals and right and
from that very very simple logic we can start to build things that are called
logic gates where we could say like and or not or
or all these like more complicated bits of logic and so from this very simple
idea of on and off we can build up to very simple logic from very simple logic
to a language that the computer can understand that really wouldn't be
honestly human readable a lots of zeros and ones and simple complex logic very
rudimentary ways of accessing memory something we would call like machine
code maybe something called assembly if you've ever heard of that or did the uh
the we i shared a video of like how like a game boy works right so
we could do these very very low level languages we could all learn

06:40
assembly and and and be very close to the language that the computer can
understand but that would take a lot of time and
effort it'd be really hard to like keep that code base maintainable and
thankfully we sit on the shoulders of giants who have taken that very very
very very simple logic built it up to assembly built it up to sea built it up
to the things that we sit on top of that give us
javascript so we get the ability to write very clean
readable code that at least is somewhat human readable between us but it breaks
all the way down to the simple logic of on and off for us and we don't have to
worry about that in our day-to-day of programming that's the beauty of
javascript we get a language that we can understand that we can share
and very quickly see what the intent of our other engineers were but we don't

06:41
have to get into the muck of on and off zeros and ones and so we owe them
we do all them a lot uh for real uh and so this leads to this idea of
independence day being a true story now in independence day uh the alien
mothership comes and something really interesting happens
the the alien ship that we have from the roswell uh crash landing it starts to
get power and turns on so we know that their like power system and maybe like
their communication systems are intertwined
uh we try to we try to nuke the the ship
that's over the us it doesn't work their shields are too too powerful it blocks
our nukes and so jeff goldblum has to do something that enables
them to save the world what does jeff goldbloom do that enables
us to enables them to save the world what do they do

06:42
they upload a computer virus to the alien mothership that brings down
the shields because like their shield's communication are linked right
shields come down we nuke them america right save the world we refer to this uh
this uh well we're not going to say that yeah
give me so give me a second to get there how the heck does jeff goldblum
write a computer virus that takes down an alien mothership
everybody's keep spamming bub binary upload boom exactly now jeff goldblum
didn't understand the alien language but
they're able to reverse engineer all the way down
to the primitive values that we just talked about we assume
even if the aliens are a super advanced civilization right and they have wild
tech that in their universe there are still constants right math and physics

06:43
are still constants on and off are still con still constants they might have way
better transistors that do on and off way faster than us but at our base level
it's still on and off right and so jeff goldblum's able to
reverse engineer all the way down to these kind of base logic and then build
it all the way back up into something that can infect the alien mothership it
affects the alien mothership binary upload boom we nuked america right so
this idea that we could reverse engineer
is actually something a lot of people do i share two videos on discord that i
really really love uh the one first video was uh no no tamagotchis were
harmed in the making of this video which is a lie um
they a lot of tamagotchis were harmed making that video where we had someone
during a conference presentation reverse engineer tamagotchis which is
pretty cool and then i also shared uh scanline who for a while if you sent them
like an electronic thing they would reverse engineer it so it's like a skill

06:44
that a lot of people actually have and develop so it's actually not too too too
far-fetched and therefore independence day is a true story
if you watch either those videos they are both in the follow along materials
channel on discord alrighty so that leads us up to
javascript a human readable language that can be broken down into that base
level logic so that we don't have to we get something that's easy to read
that we can share amongst each other look at it and maybe quickly discern
whether or not it is logical what's happening we can kind of
look at it and figure out what's happening without having to know this
very very base level logic already so we're gonna jump into javascript uh but
we're gonna stop here we're gonna take our break a little a little early uh
just so that we can kind of transition easily into javascript and not have to
stop for a little bit while for a little while so let's put five minutes on the

06:45
clock please beautiful and when we come back we're jumping into
the first of our big four variables so five minutes on the clock
please if you're able get up move around stretch hydrate it's important we've
been going for a long time already see you in five folks
gonna run some ads so please really take a break
crazy 101 added two minutes to the timer so this is a seven minute timer now
thank you frazee 101 alrighty two minutes on the timer
see you in seven minutes can we have another review like this yeah we'll have

06:46
another one like this in the future all right folks cn7
yo bugaboo that's wild congrats finally got a job mad benefits great
culture they don't care about my following convictions let's go that's
what i'm talking about congrats bugaboo we're taking our brick but uh
that's amazing to hear congratulations we that's actually a good idea
i'm going to send you a dm on discord uh we are trying to do a talk with
returning citizens actually tomorrow so i would love to maybe bring you into
that talk and if the tomorrow doesn't work then we

06:47
can find a different time to bring you in because i think that'd be helpful for
folks to hear from your experience so maybe we can set up something that's a
little bit more uh long-form but hey congrats
tomorrow should be fine all right i'll hit you up on discord after we're done

06:48

06:52
streaming we don't get got we go get do all right folks come on back come on

06:53
back alrighty so we are at the beginnings of javascript but
as we were doing the top of each hour i want to answer some more questions from
the slido and then we'll get into our javascript so
i'm going to i'll get to the musical i'm going to go through the questions
once we feel that we are have a good understanding of html and css do you
have any recommendations for learning best practices um
there's so many things to focus on early on that are more impactful than
best practices so my advice is to stay current and to keep
investing and going deep and not wide but once you feel pretty good i would
say with full stack um there are some like very
i don't know and and best practices are always debated you talk to 10 different
engineers you're going to get 10 different references for best practices

06:54
the ones i follow are the martin fowler series clean code i try to incorporate
clean code into everything whether it's html css or javascript and so those are
pretty good i recommend starting with clean code and then looking at some
really good style guides so i love the airbnb style guide it tells you like
good ways to write your html your css your javascript so finding respected
style guides and like quid essential books like clean code are the the best
places to kind of to get started with that stuff
are you bringing shahao for a chat hopefully hopefully
can you upload this to youtube as an unlisted vid well like i said if we
still have the 1500 when we're done i'll
i'll put it on youtube proper looks like we'll hit that for sure
i talked about that uh if we were behind in turning an

06:55
assignment do we use the original links to turn in the projects yes
even you're part of the catch-up crew just use the same links oh good i can
see when people submit so i can see if you submitted them early or late doesn't
matter here in the catch-up crew how do we navigate a client asking for
something we don't know how to do at js additionally how do we price our
freelancing clients so i will say pretty much every client i ever had
i mixed up a youtuber with robert martin
yeah it's clean code by robert martin um there's a youtuber i watched that's
fowler i don't know why i said fowler yeah clean code by robert c martin
um that's what i recommend and then like style guides um
i would say pretty much every client i have ever had right
every client i've ever had asked me to do something that i didn't know how to do

06:56
and my job as an engineer was to figure out how to do it and so i would say i
would i would say all right well i gotta i gotta research how to do those things
and i would bake that into my proposal a lot of times there's like research time
baked into my proposals but i would talk to other engineers i
would give it a good google and i figure out best ways to go about doing the
things that they need it i would say pretty much every client i've ever had
there's been whole segments that i had no idea how i was going to do it i just
knew that i was going to be able to figure it out and i would give myself
enough room and budget to figure it out not only in terms of like time to figure
it out but also if i needed to hire someone i left enough room in the amount
they were paying me to hire someone to figure that piece out so
the way i get around not knowing how to do stuff is i'm an engineer i'm going to
figure it out and then i leave enough time and budget to get help if i need it
and then the pricing is we i don't ever price stuff
i figure out what my client needs i figure out what their budget is and then
i let them know what i can get done for that price point at that budget i don't
ever give hourly rates or prices or anything like that i think it's just a

06:57
backwards way of doing it i feel like if i tell a client i won't
finish a website for four to six months they will walk away um i just don't
think that's true depends on how you deliver that value in those four to six
months that that matters if you give them a really good schedule with the
basics being up in a month then like the the testing phase being three to six
months like there's ways you can structure it that give you that time um
but it feels like they're getting lots of value along that timeline
can you share what a project timeline will look like for creating a web
application research production debugging validation uh so
i shared some examples in our freelancing class of what like those
were real like those were real examples from real folks that got real clients

06:58
and so if you look at the breakdown in the slides it's like a real breakdown
that somebody actually got um that actually that actually someone gave
as part of their proposal right so that that's what i would take a peek
at there are also really good like examples that you can find online of
like example proposals things like that but each timeline's gonna be different
depending on what they need if somebody needs something very simple it's gonna
be a very quick timeline for me so i need something complex and very
different so you can look up examples if
you ping me in like the ask leon maybe i
can find some examples to share but some of them are already in the slides
uh what is this hackathon people are talking about uh that was we had a
project night on thursday that's what people are talking about so if you were
here thursday that's what they were talking about
will the super view be in the vod later today yes everything is always available
immediately on twitch and then uh most of our all of our classes go up on

06:59
youtube and uh office hours just stay on twitch though alrighty
let's pause there with the questions and let's get into javascripts
can we have a separate freelancing channel uh possibly let me talk to the
mods and we can think we can figure out if that makes sense
we're always apprehensive to add channels because it just increases the
moderation that we have to do um and so we're pretty slow to add channels and we
get rid of ones that people don't use just to free up some of the burdens so
i'll talk to the mods and then if we think that it people get a lot of value
out of it we'll add it alrighty boom javascript right javascript has a specific

07:00
syntax we talked about syntax already with html and css right
we have the html and the css they all had specific syntax html had
opening and closing tags css had the curly braces that open and
close selector and declaration blocks well javascript will have its own syntax
as well the spelling and grammar rules of that language and the beautiful thing
about javascript syntax is it uses a lot
of characters that you might not be that familiar with we have semicolons
brackets parentheses quotation marks all these unique characters that you can
kind of just go around the keyboard on and kind of see pop-ups i'm going to
open the inspector right i'm going to open the inspector
and i'm just going to go around and kind of talk about the different characters
you might see uh square brackets curly braces or figure brackets
depending on how cool you are uh we're going to have
question marks which are often called ternary selectors which is weird don't

07:01
worry about that for now we have a forward slash we have double
quotes single quotes we have double pipe character for or
we have the hyphen for subtraction parentheses which we'll see a lot
asterisk for multiplication double ampersand for and like the logic
we talked about earlier we have the percent sign which is the modulus or
the remainder uh dollar sign which we call bling which
comes up with our template literals or special ways of creating strings which
we'll see in a little bit octothorpe which we already saw saw in html and css
and bang for not so that means like not equals whenever you see the bang
exclamation point we call it a bang in programming
plus sign for addition equals what you've seen
you'll see the tilde a lot and ticks so a lot of these extra characters that

07:02
you'll be seeing come up in javascript and the reason why
javascript can start to be really like wreck your hands and why a lot of my
students develop pain is because your body is really
not used to hitting all those extra keys even if like you're an mmoer and like
you're constantly typing in all this stuff hitting all of those extra
accessory keys definitely drains your hands or makes them flex and
contort in ways that you're not used to so even if you're like a memer and
you're always typing it's going to be different when you get to programming
and that's why stopping taking your breaks at the top of the hour at least
letting your hands relax running them underneath some warm water doing the the
light stretches that dr levi recommend right keeping your your hands
in a good order is going to help you in the long run uh my day job i
teach a coding bootcamp called resilient coders and every single cohort we have

07:03
students that go to the hospital every single cohort i don't care how much
they've typed before they go to the we have at least one or two people go to
hospital every single cohort just because they start to develop severe
wrists and hand issues from typing so much and so please please please please
please make sure you're taking care of yourself good posture good breaks good
stretches exercise because it will come for you if you're
not taking care of all this stuff you know alrighty
exactly dr levi the fitness doctor alright the very first thing that we're
going to talk about are variables they're one of the big four the four
things you really have to understand in pretty much every programming language
and specifically in javascript so what the heck are variables
variables enable us to remember a value to use later on

07:04
the entity that we use to store a value for later on we call a variable
the way i like to remember variables is i just think of them as buckets
buckets that we can put data into data buckets and then we can carry these
buckets around and whenever we need that data
we can take the value out of the bucket that's all variables are are buckets
full of data that we can carry around and use them when we want them now
we talked about computers having memory and so we can think of memory as like a
physical space so here's our physical memory of our computer
when we're using variables there are two steps to variables the first step is
called declaration and that's where we put a space in
memory so in memory we would now have a space called age right called age

07:05
the second step we call assignment and that's where we put a value
into that space so here we put 25 into that space in memory so that
declaration created the space an assignment put a value into that space
you can also do declaration and assignment at the same
time the beautiful thing is now that we've created that space called age and
we put a value inside of it we can ask for age at any time and it'll give us 25
right now the other cool thing is that we can go ahead and add that space of
memory subtract from it so we could do something like age equals age plus 5 and
this value would go from 25 to 30. so this variables are buckets where we can
store data and we can create multiple buckets by using declaration and we can

07:06
put things into those buckets by assigning and you can do both the
declaration and assigning at the same time
when you're creating your variable names
i like to use something called camelcase
and you're going to see me use camelcase across my html my css and my javascript
just to be consistent so you can see the first word of my variable is lowercase
and then every other word is capitalized and it's just a way for me to keep be
consistent with my variable names and it makes it easier for me to read now some
people use hyphens some people use underscores it really does matter
it doesn't really matter as long as you're consistent each team each group
might do it a little bit differently how
you do it is up to you but you'll see me use camelcase everywhere
you'll also notice that i'm using a special keyword here called let

07:07
there are three really important keywords when it comes to creating
variables you're going to see let const and var
with the newer versions of javascript remember these these languages are ever
evolving and we got kind of a really big update which people call es6 plus
meaning anything after like after the the 2015 version of javascript and
forward we got all of these new things that happened in javascript and one of
them was these keywords for creating a variable let and const
we've seen them in class we've covered a little bit more detail
we actually have a command here in chat which is called exclamation point var or
bang var if you want to read about kind of the differences and the breakdowns
between let constant var it's there but you think of let as a variable that's
meant to be reassigned right that can change that can be added to that can be
subtracted from and then constant something that's going to stay what it
is we're not going to we're not going to change it it's going to stay what it is

07:08
you'll eventually get into words like immutable and immutable but that's two
advanced for right now just think of let as something that's a variable that
might get added to so maybe we'll add five
to age right or maybe each year age goes up by one
so your your age is something that would be a let something that can change over
time but maybe like your your i don't know maybe maybe maybe your
your twitch name is something that'll never change right it's set in stone
that's it it's all you get right can't change it that would be const all right
now variables we saw those spaces at your
birthday there you go birthday is a good example birthday is a good example of a
cons your birthday is never going to change right your birthday is your
birthday uh it'll never change so let me be things that you can you can modify
right and then cons for things that won't

07:09
change and then var there are still use cases for var but you can read about
those in different uh shared the link javascript info bar beautiful alrighty
now we talked about these variables as buckets that we can put data into but
what kind of data can we store in these buckets well there are there are two
major kinds of data we're going to start off with the first kind of data are
strings or pieces of text and we can create strings in three different ways
we can use double quotes single quotes or eventually ticks
with template literals but for now let's just think about
double quotes and single quotes both of these enable us to keep pieces of text
and whatever we wrap in these quotes becomes
a piece of text and we can store these pieces of text in our variables should
we choose to the odd thing about strings is that whatever quotes you use on the

07:10
outside you cannot use on the inside without doing a hack and that's because
the strings will terminate let's actually open up the console here and see that
so here i'm going to just create like a nice little string i'm going to assign
it to a variable so let let's let string equal and we're going to say um let's
go to town i'm gonna wrap town in quotes today
now if we look something weird happened here
i wanted to wrap town in double clothes because maybe we're not going to like
town maybe we're going into the city right and so i tried to wrap town in
double quotes but since i have double quotes on the

07:11
outside you can see exactly it breaks it
doesn't let me complete that full string and so to get around this we could have
used single quotes on the outside right we could have done single quotes on the
outside and then this would have worked but then we would have ran into a
problem with let's so what do we do here we have both single quotes and double
quotes how can we get around it yes we can escape it exactly so if we do this
backslash beautiful this backslash enables us to escape the
quotes and have one singular string now when i ask for a string back we get
let's go to town today you can see our single quote still there our double
quotes are still there and the string is stored in memory as a variable
what did i do right here i'm going to highlight a very specific piece right
here what what is that what i just highlight there
it was kind of hard to see let me circle it maybe a little bit easier what is

07:12
this called chat what is that called right there declaration exactly
i created a space and memory called string right there's a there's a space in
memory called str and then on this side i did what what did i do on this side
i assigned it exactly now this space and memory the space in memory has the
let's go to town today inside of it so we did both the declaration and
assignment on one step and we were able to get around this idea of having the
same quotes on the outsiders on the inside by escaping them beautiful
so that handles strings that's the first kind of data that can go into our
variables but we also have numbers this is another kind of data we

07:13
can put into our variables we have both integer values which are like whole
numbers and we have floated values which are numbers with decimal places so we
can have both whole numbers and floated values alrighty
why are the backspaces placed there why not after it's because as javascript is
reading it it no it needs to know that it has to ignore the next character so
that backslash enables you to uh make sure right to make sure that you can
you can escape the next character which is the double quotes
so with numbers we can have integer values or floated values
and we can also have sine values so positive and negative are both up for
grabs here and we can also do arithmetic in

07:14
javascript of course plus for addition uh my or the hyphen for subtraction the
asterisk for multiplication forward slash for division and then the percent
for modulus modulus this gives you the remainder so if we did 10 mod 6 what
would our remainder be yeah four exactly six goes into ten once and we have four
left over beautiful if you're having trouble with a delay
try giving it a refresh that sometimes helps alrighty
let's go ahead and code variable fun time so variable fun time let's go
ahead and take a look at that code and close out the other ones that we
have here here we have variable fun time here we go

07:15
we have an html file and then we have uh some style here some cs oh sorry not
cs i don't need css anymore i'm going to look at my javascript here beautiful so
i want you to go ahead and practice your
variables we have some easy we have some
mediums and we have some hards i'm gonna put four minutes on the timer and then
we're gonna go over them together so this is your first time with javascript
is your first time with variables that's okay
look at the slides do as best as you can and then pay attention when we go
through them together four minutes on the timer you got this dig deep go for it

07:16
no problem breaker pony if you need the code it's on our
discord agree to our rules and then in the following materials you'll see the
zip file unzip it thrown into the vs code and here you go variable fun time
url should just be the same aj depends what you're trying to do though
how do we find the slides to go over exclamation point slides here in chat

07:17
will give you the links to the slides do you think fiverr is okay to get our
first client no uh if you watch the freelancing class i
i kind of talk about my thoughts on fiverr and all those type of platforms i
think you're way better off building your own network elsewhere that you own
and not behold into those platforms but each their own having a lot of trouble
maybe then you you kind of take some time to invest in them but always gonna
be better building your own network than a network that you're locked in too
can we get an office tour ah people keep asking i gotta i gotta do

07:18
uh like a short form video on it it's a lot it's it's
pretty wild at the moment honestly we got some dunzo's nice minute 15 left
sumo says can't wait for js to become second nature me too me too
with time all good things what keyboard do i use i use the kinesis
advantage 2 it's a split keyboard what's your e-commerce platform of choice
uh i mean if it's just straight ecommerce shopify is really easy to use

07:19
if you're building something custom i recommend uh nick's used shopping cart
you can do exclamation point nick and see their code they have a free software
project that's sponsored by stripe uh to build shopping carts and things like
that yup yeah yeah so it's a really expensive keyboard
it's not something i recommend you jump into
and buy uh i got both of mine i actually
got one completely for free that's a fun story and then the other one is
work paid for yeah the cool thing is like a lot of
times i help people negotiate when you're negotiating an offer you're gonna
negotiate for a lot of stuff and one of the things you'll negotiate for is
like a work from home bonus or a pd funds bonus like professional
development funds and um that's how you can get a lot of

07:20
cool stuff like your keyboards and things like that
but yeah this is probably my favorite piece of tech but i always tell everyone
is you don't need an expensive keyboard to do well
uh you're better off investing in like sitting right typing right
typing the correct way with all your fingers taking good breaks you're going
to get 90 of the benefit with just those things and then that keyboard can help
with the last 10 yeah so i think i think i think some
people just try to jump to the keyboard and they still have trouble because they
didn't fix all the other stuff like ergonomically sitting and
and investing in typing right no i do have it i do all right let's take a
look at these together come on back folks all right create a variable and assign
it a number let num equal minus 10 from that number num
equals num minus 10 beautiful print that number to the console so it's

07:21
gonna be a console.log console.log num let's save this
let's open this in the browser and let's inspect
and if we look in the console we see zero lovely you see zero beautiful alrighty
next one medium create a variable right create a variable that holds a
value from the input at 25 to that number alert that number
so create a variable that holds the value from the input
so we can do a const we're going to add 25 numbers let's do let
and let's say num from input notice my camel casing here lowercase

07:22
capital case capital case equals and we're going to say document.queryselector
and we're going to grab it from the input let's look is there anything on
the input is there more than one input no
there's only one input but it does have an id we can use that id if we want but
there's only one input so we're going to say input for now i'll just say input
and then how do we get the value out of an input
how do we get a value out of the input what we do here
the value yeah yeah so that value beautiful that'll get the value out of
the input let's add 25 to it num from input and we saw how to like do
the equals syntax up here let's do something a little bit different down
here plus equals 25. it's the same thing as doing the value of reassigning it

07:23
minus or plus that number so we could do num from input equals
num from input plus 25. like that totally works or we could just do the
plus equals 25 both syntax work it's either just preference which one you
want to use there cool and then we want to alert that number so alert
and let's alert num from input and let's see if this this works and then we're
going to talk about it all right let's refresh all right it immediately did 25.
wait a minute it immediately did 25. let's think about that
it immediately did 25 why did it immediately do 25 it happened instantly
these three lines of code are not waiting for anything to happen

07:24
it's not waiting for a click event it's not waiting for something to happen it
is simply happening as soon as the page loads so
those three lines run it's not waiting for anything so there's no way that our
user can be fast enough right fast enough to put a value in the input
they're just not fast enough so they can't so we're taking whatever was in
that input which is zero and adding 25 to it right and that's why
we see the alert of 25 it just happens instantly it never gets a chance to put
something into uh that input now there are a couple things here that
we've talked about in class but i want to make sure we do it while we're
reviewing i say document here what the heck do i mean by document i'm
saying document query selector and then value what the heck is document mean

07:25
yeah it means the dom the document object model when we're in here like
when we're on our website and we use the inspector
a lot of people see this and they go oh this is just the html no
this is the rendering of our html files and our css files remember
we were at the very very beginning we talked today about like typing in
dominos.com and making a request to a server and then domino's responding with
files and our browser reading those files when it reads those files
it just paints a picture it takes those files and paints a
rendering of those files if i come in here and i change this from like click me
to free dominoes right like there and i hit enter
they're they're not losing it i didn't just hack dominoes right like there's

07:26
not somebody at domino's headquarters freaking out that leon got him again right
that didn't happen we've just changed the rendering that we see here
it doesn't actually affect the html files it doesn't actually affect the css
files it just affects the rendering you can think of like an artist they're
looking at their model and they're painting the model that they see you
would never say that that painting was the model it is the rendering of that
model same thing here in the browser the browser reads your html reads your css
and paints the model right it paints the model
now the cool thing is javascript can come along and mess with this model it
can add stuff it can remove stuff it can it can do wild stuff to this rendering
and then once we refresh all that stuff goes away right that's

07:27
the beauty of javascript javascript can come in here and mess with that
rendering and we call that rendering the dom or the document object model so
whenever you see document what we're referring to is that
rendering of the html and the css that's it so what we're saying is hey
look in that rendering find something that's an input and grab
whatever value is in that input that's what we're saying there cool last one
create a variable that holds the h1 add an event listener so that the
element that console logs the sum well hold on an event listener
to the element to that element oh that console locks the sum of the previous
two variables cool so we're going to create a variable that
holds the h1 this could be a cons the h1 is not going to change so we can say

07:28
const h1 equals and we'll do document.queryselector and we'll target the h1
and that's it so now the h1 like that actual dom element is stored in the
variable h1 now we can add an event listener to it
h1 dot add event listener we're going to give it a click
and then we're going to say a function that calls add to
nums now let me write this all out and we're going to talk about it
function add to nums beautiful here we go all right so here is an event listener
what this event listener is is it's going to listen for a specific event right
that specific event that it's going to listen for in this case is a click
i like to think of these as smurfs what we have done is we have found the h1

07:29
and we have placed a smurf on it so let's go back and look at
the the dom here let's go ahead and look uh let's let's refresh here
and let's look so here's this h1 of clickme what we have done is we have
just put a smurf that's just chilling on that h1
right a smurf that's chilling on that h1 right and as soon as it sees that click
as soon as it sees that click it's gonna go ayo
right it sees the click and it's gonna go hey yo i heard the click right and as
soon as it hears the click it's gonna run this set of instructions called add to
nums is smurf an acronym no i'm talking about
the little blue people that used to be on television they're little smurfs
sitting on stuff right and when it hears or sees that click

07:30
it tells this set of instructions to run
and this set of instructions is going to do two things
it's going to console oh sorry it's going to do one thing it's going to
console log the addition of the previous two numbers
so that's going to be what was the first variable num plus num from input
beautiful there we go so this smurf is chilling on this h1
chilling on this h1 just hanging out relaxing all cool shooting some b-ball
outside of school a couple of guys they were up to no good started making
trouble in their neighborhood they got one little fight and their mama got
scared and they said you're moving with your auntie and uncle in bel air
the cat pulled up there was dice in the mirror anyway home to bel air anyway so
we were talking about this smurf it's chilling

07:31
on the h1 it's just sitting here on the click me right just
sitting on the click me it hears or sees that click and it immediately says
it immediately says run this set of instructions
and here are the set of instructions don't worry about the function yet
here's the set of instructions and the one thing it says to do is just
console log the sum of these two numbers so let's see if this works
we go here we refresh the page let's go to the console here and i'm
going to click on click me three two one boom it worked
right it waited for the click the smurf saw the click and told those sets of
instructions to run and what we did is we added those two numbers together but

07:32
something weird happened what happened here chat what happened what's the error
here notice that this number is like purple and this one is white what
happened there concat nation exactly concatenation
meaning that we took a number and we added a string to it
that's what happened so if we go back and look at our code
we can see that the value that we pull from this input
what's the only thing that's going to be
inside that input remember that input we grabbed the value from it instantly the
user never got a chance to put anything into that input so what's actually in
that input before we add 25 to it yeah it's a it's an empty string
so what we're actually doing here is saying empty string
right this equals empty string boom that equals m

07:33
that equals empty string is the same exact thing and then we add 25 to the
empty string which means when we get down here we're going to be adding zero
to an to a string 25. so instead of doing 0 plus 25 we're going to do 0 plus
string 25 which gives us a string let me put that back
yeah because if we grow to grab the value out of this input since it happens
instantly there's nothing inside this input so what it grabs is actually an
empty string why that's just how javascript works it's going to grab an
empty string out of that input we add 25 to that empty string whenever you add a
string to a number you get a string in javascript it's one of the quirks so
what we wind up doing is trying to do a number 0 plus a string 25 that's why we

07:34
see 0 25 it's a string not a number cool now we can fix this
how can we fix this chat type conversion yeah
yeah we could we could wrap this in let's say um number
we can wrap this in number right number beautiful let's save it
now let's try it again all right let's click
beautiful now we can see that it's blue i'm sorry that purple again because that
they're both numbers there's no zero being appended it's not a string anymore
it's now a number and so this number right here is a set of instructions
that's built into javascript that can take strings and give us the number

07:35
value and so when we wrap this in number we don't ever get an empty string we
actually kind of just get like nothing or zero in this case yeah
why is it capitalized you're going to see that there are some rules
that when you are using built-in stuff there are going to be
certain capitalization rules that we follow
technically this is a built-in function which we call a method but we're we're
still kind of far away from that we got to get through objects first and once we
get to objects we'll understand better why it's capitalized yeah
why didn't we have to do that with num well because num wasn't coming from an
input we actually just set it to 10 here ourselves we subtracted 10 from it here
and then we console logged it at no point do we turn num into a string it
was a number and it's always going to be a number at least with the code we have
here is string the opposite yes yes it is the opposite

07:36
yup num is actually a number exactly beautiful all right let's keep pushing
we did the hard wonderful good job everyone
we want to make decisions we eventually want to be able to compare stuff we want
to be able to do stuff in certain cases but not all cases but before we can
start making decisions using things like conditionals we have to be able to make
comparisons and so to make comparisons we have to
learn how javascript compares stuff to other stuff now
we're going through this at a pretty good speed we spent four or five classes
on the stuff that we've covered so far and so if any point of this javascript
is going too fast it's too much you can always come back and watch our
individual classes on javascript this is
meant as a review and they give you like
a good overview so you can come back and just focus on the things that give you

07:37
trouble beautiful so if we look here 9 does equal 9 in javascript because
they're both numbers and they both have the same value
7 does not equal 3 because yes they're both numbers but they don't have the
same value and joshua gets a little bit weird because you can actually compare
strings to strings so this string hello actually does equal the string hello
that would give us a true value now this is where some people get hung up
because when you are trying to compare stuff in javascript there is a
difference between two equal signs and three equal signs when i see two equal
signs what am i comparing it's just what two equal signs is comparing just what
just value exactly two equal signs is just value three equal signs is what

07:38
your equal signs is value and value and type exactly value and type so
here we have uh an assignment we have one equal sign
so one equal sign is always assignment so we have a an x equaling three
all right does three equal x in value because we
just see 2 equal signs so that's a value does 3 equal 8 in value no
3 and 8 are different values so that is false
cool now this is where it gets tricky is number three and listen up for a
second is number three equal to string three in value value first
is number three equal to string three in value yes
number three and string three are the same in value

07:39
now we since it's three equal signs we have to go one step further is number
three equal to string three in type no one is a number and one is a string so
this is not equal in number and type we have three here
it's going to not be equal in number and type it's equal in sorry value and type
it's equal in value but not equal in type so we get a lovely boss
now is number three equal to number three in both value and type yes
number three is equal to number three in both value and types that would be true
here we get to see that bang syntax for the first time all that means is not
equal so is 3 not equal to 8 in value that is a true statement 3 does not
equal 8 in value beautiful last thing here does three

07:40
not equal string three in value and type this is true this is true because three
does not equal string three in type it does equal it in value right
so it doesn't equal it in value and type
it does equal to value but not value and type so when you have that not equals
that is a true statement because number three does not equal string three in
value and type only value not type so that is a true statement beautiful
folkman said i want the red robin eight and came back now and he's still going
i wish there was a not equal sign ah it's the bang

07:41
i get what you mean though it is a little confusing at first alrighty
now that we know how to do comparison we can introduce the second
of the big four which are conditionals conditionals enable us to check
if some condition is true inside the parentheses and if it is true
we do what is inside the curly braces right we do what is inside the curly
braces so let's take a look at this here we have
the kind of three things you'll see in a conditional we have the if
if what is true inside these parentheses is true we stop we do not continue we
just do what's inside the curly braces and we are done
but if what is inside the if is not true we move on to the else if
and we check what's inside those parentheses

07:42
if it is true we do what's inside the curly braces and we stop however if what
is in the if is false the else if is false then the else
auto magically runs it does not need it does not need a condition it's like a
default the default will just run if every single statement above it was
false and the beautiful thing is you can have as many
else if as you want so you can go if else if else if else if else of elsif
and you don't actually have to have an else you can leave it off if you don't
want a default case alrighty here's a good example our pizza is a variable
and i use the const keyword here to cr to declare this variable y

07:43
why do i use const here to declare this variable
it never changes pizza will always be dominoes it'll never be anything other
than dominoes and so since it's never going to change we can use const
right so pizza equals dominoes we've gone ahead and declared a space of
memory for pizza and we've assigned it to value dominoes so if we know that
pizza is dominoes what gets printed to the console
what gets printed to the console here all aboard the train the flavor town
exactly so does pizza equal papa john's hell no that's a false statement
we go into the elsif this pc gold dominoes yes so since pizza equals
dominoes we stop and we console log all aboard the train

07:44
the flavor town and then we're done we do not continue
let's say for some reason we spelled dominoes wrong and we had an e in here
right we spelled domino's wrong so there's an e in there we would see that
pizza does not equal papa john's that would be false
pizza in this case would not equal domino's because we spelled it wrong and
then the else would auto magically run and we would see princess the console
what are you even doing with your life beautiful alrighty
what's this danger that i speak of assignment versus comparison i got you gonzo
just for you what's this danger i speak of yeah one equal sign versus two or
three if i do one equal sign i am going to reassign something inside

07:45
of my conditional which will probably evaluate to true which is really weird
it's one of the quirks of javascript if i was to
chop off these two things i would wind up trying to set pizza equal to papa
john's which would give me an error because my
variables of course a const of pizza and it'll never change so if i if i dropped
these two equal signs it would try to do reassignment that reassignment can't
happen because i have a const it would be an error and a hot mess
so you always have to make sure when you're doing comparison that you're
using two or three equal signs and not one because one is assignment beautiful
now we can also do multiple conditions right what happens if there's five equal
signs it's two three or one yeah uh actually something interesting will
happen if you have more equal signs but i'll let you play around with that uh
multiple conditions right so we can we can have and where both of these have to

07:46
be true name has to be leon and status has to be ballin and so if name
is leon and status is ballin get a lovely wink
right because both of those were true so since both of those were true
so if those are true we get the wink at camera beautiful we can also do or
so if day equals sunday or sorry if they go saturday or day equals
sunday we know it's the weekend right so we do what's inside
those curly braces it is the weekend beautiful alrighty
we have an age checker code to do here so
uh if we go and look at our starter code for today we have age checker

07:47
and we have some javascripts in here and there are some conditionals that i
want you to try if you're under 16 i want it to
console.log they can't drive under 18 tell me they can't hate from outside the
club under 21 under 25 under 30 etc so we're going to speed run this a little
bit we're going to put three minutes on the clock
three minutes on the clock on this one try and get as many conditionals as you
can done if you're new look at the slide
see how the if and the lsifs are created and have at it we're gonna go over it
together three minutes go for it i've redone this exact page so many

07:48
times i'm ready let's go brooks if you can get it done three minutes
uh my drinks changed all throughout this right now i'm just drinking water cold
water cold water helps the throat but i was doing some vanilla chai
i had an energy drink at one point i had some tea i had some coffee yeah it's

07:49
mixed through all out here yeah i've tried myself try before yeah
this is the thing everyone is reviewing why we speed running it because we've
already done this example like hundreds of times a lot of folks have redone this
example like 30 times already because that was your homework like three weeks
in a row was just to repeat everything so to be fair to folks that have done the
homework and reviewed this and repeated this a
bazillion times i don't have to make them sit here for the full five minutes
so they'll do the full three and then we'll go over it together for folks that
are new a minute left we'll go over this and then we'll take our break
for this one we'll take our break and then when we come back from the break

07:50
we'll finish up our review on we'll get to our
we'll finish up our conditionals then we got to get to our loops
and we'll do some exercises that review everything together
done speedrun hurt the thingies all righty folks
let's take a look at this together and then we'll take our break
all right let me show the music here already
if under 16 tell them they cannot drive so first let's create a a a variable
called h so we'll say let age uh equal and we'll just set it off

07:51
something at like 25 i think that's what we did before
and then let's start our first conditional here actually i'm going to
come down to the bottom just do it all here if age is less than 16
we are going to console.log we're going to log to the console they
can not drive beautiful next we're going to do our elsif so we'll do elsif
and then inside of our elsif we're going to check we're going to say all right
if age is less than 18 then we can console.log and we'll say
i'm going to copy it they can't eat from
outside the club because they can't even get in beautiful
and we have some characters that we have

07:52
to escape here see how these strings are breaking so we can use the backslash
that we learned earlier to escape the the contractions there and we're good
let's do another else if for the next age bracket which is 21
and they cannot drink so we'll say if age is less than 21
and we will console.log they can not drink beautiful then we'll do our next
notice how i'm always finishing out my parentheses
and my curly braces and then going back in that's way i don't ever forget them
some people forget to close the parentheses forget to close their curly
braces and so i always want to make sure that i i don't forget them so i type
them all out and then i come back so age is less than 25.

07:53
we'll do our next console log and this one is they cannot rent cars affordably
beautiful plug that in let's do our next elsif
and we'll say age is less than 30. and this one will be
they cannot rent fancy cars affordably beautiful
and then we have another one here if under over 30
if under over 30 tell them there's nothing left to look forward to other than
100 devs there we go beautiful so we'll do our our last else if here
and we'll say if age is less than 30 well we already kind of got that controlled

07:54
and we'll say and age is greater than 30 and we'll do our console log
and we'll say there's nothing left to look forward to
other than 100 devs all right there we go i'm in my 30s by the way i always feel
like i have to say that for this one alrighty let's save it
and there we go so we had something weird it says under over 30 so as long
as it's not 30 right and so here i'm saying if it's
less than 30 and over 30 then i'll then i'll console log that but this actually
precludes them from being 30. so we could just have an else here and that
else will capture anything if they're 30
right because if they're under 30 we got it if they're over 30 we got it and all
the other ones are taken care of right so we can just say
the else and the else will grab if they're 30. and we'll just say i don't know
something cool right but the idea here is that you

07:55
don't ever need an else it's just a default if everything else is not true
oh yeah not n or yeah not and or so if they're less than
30 or over 30 right less than or over but not actually 30. so the else would
grab if they're actually 30. everything else is handled for the less ends and
over then yeah thank you for the engagement how can you be under 30 and over 30
interesting question maybe straddling a time zone there you go still got it
alrighty let's go ahead and save this that way we

07:56
have it you'll have this in the you'll have this in the uh
in the code that i shared to discord after class so you don't worry about
frantically copying you'll always have it
for the harder click on the h1 which we just did take the value from the input
we just did that place the result in the conditional in the paragraph
uh so we we basically just did these two parts the only thing that we would do
differently is instead of it being age like this it would be document
dot query selector um like your input dot value and of course we would wrap
this in number so we literally just did this so you could combine the previous
one we just did with this one and it would work right so now we have number
coming out of the value you put this inside of a click event and then it'll
work with uh these conditional down here so grab all this put it in your your

07:57
click event and you're good to go all righty we're at the top of the hour
so let's take our break uh after this five minute break we'll come back we're
gonna get into functions and then loops and that's where we'll call it today
folks so let's go and put five minutes on the clock
if you're able please get up move around hydrate kiss some babies look at
something that's in the distance and we'll be back together in five short

08:02
minutes all right folks see you soon alrighty folks welcome back welcome back
the harder problem is exactly the same one that we just did it's exactly the
same code so if you look at the past one
you can just reuse the code for that one it's literally the same problem
alrighty let's take a peek at it because folks want to see it

08:03
so on the click of the h1 right so let's go ahead and do our event listener
document.queryselector h1 add event listener so kind of exactly
what we just saw in the last problem we'll call this um age check
cool then we'll have a function called age check
and inside of that we'll get the value out of the input which we did here yoink
excuse me and then we'll do our conditional logic yoink boom and that's it
oh place the result the conditional in the paragraph that's the only thing

08:04
that's different so instead of console logging you would uh document
we might actually make a variable for this we might do uh document
let's say let p equal document dot query selector paragraph right so now this p
is holding the paragraph so we don't have to keep typing document over and
over again so we'll just do p dot inner text
equals and then that string and then we would do this for all of them so we
would just do this over and over again p dot inner text equals
and so you just go through and do it for all of them i won't repeat it but that

08:05
that's the idea go through that's it cool alrighty
let's talk about functions folks talk about functions
oh actually let's do a few questions from the
slido before we jump into our functions uh what do you put in your anki for code
you put a code snippet and guess the output or do you try to understand the
purpose of an object element of a language
i put code examples i don't actually use
like fill in the blanks or anything like that
i'll have some that are descriptive like
what is a function and the other card is a function uh i'll have one that's like
like from like an example from today i would say
declare and assign a variable and then the other side will be like let age
equal 25 so i do a mix of like actual vocabulary and code examples but i don't
really do like fill in the blanks or anything like that
how do i locate the people in companies i'm interested in working in

08:06
uh linkedin angellist their actual website
if you watch our how to get a job class we talk through how to do those to do
those things uh my plan is to keep pushing through js
but what can i do to build confidence and catch up uh is it ketchup crew is
exactly ketchup crew join the ketchup crew find a group of supportive folks
that are going through the material at the same pace that you are and make sure
that you kind of just keep in touch with that community
always ask for help on discord and you'll get through it as well
all right let's uh let's keep pushing here folks all right let's see what is
what are functions yeah the music's a bit loud for some so
here's the thing it's weird for some folks i've asked for like audio
samples from a bunch of different people uh

08:07
for for some folks it it's super loud for some folks it's not um for some
folks the sound alerts are some they can barely hear it and so it's something
that i think i'm ever gonna truly be able to figure out for everyone um
because i've even asked for audio samples from different people yeah like
some people are saying can barely hear it right so i think it's different for
each person but you know i'll keep playing with it but it's funny
because you'll see some people saying it's like deafening and some people are
saying we barely hear it yeah it's off now all right what are functions
functions are simply simply sets of instructions
functions are simply instead of just it's weird right i play music every

08:08
single break there's music playing uh and so it's odd that people can't
hear the music so here's music playing now right
it's very faint but you can turn it up a little bit bring it down a little bit
yeah so normally it's a little bit it's a little bit lower than that yeah
but it's uh it's funny because some people say it's like deafening and some
people say like oh no i hear it's crystal clear that's the music all right
functions are simple sets of instructions the idea of functions is that they are
reusable right the idea is that you can write a

08:09
set of instructions once and then reuse those instructions over and over again
so the idea here is that we write out our simple sets of instructions
and we can use those as building blocks to build up the rest of our program and
eventually we'll get to a best practice where like really our functions are
doing one thing but don't worry about that for right now
functions have a very specific syntax right a very specific syntax that syntax
without syntax sorry with the syntax we have a very specific
way that we write our functions here we have a function declaration which is the
same thing as a variable declaration we're putting these sets of instructions
in to memory right so that our program remembers those sets of instructions and
can re-use them right can reuse those sets of instructions
but to use those sets of instructions to actually get them to run

08:10
you have to call your function without calling the function you will not
you will not get that set of instructions to run now
when you call a function you can pass in
arguments the way i remember this i have a healthy relationship with my mother
but i like to say when i call my mom it's to argue i'm gonna pass in
arguments whenever i call call is just a fancy word for saying i
want that function that's in memory to run all right so here's an example
here of a function declaration it's my set of instructions and this set of
instructions does one thing it alerts something
and the beautiful thing is here i am calling
the set of instructions and i am passing in the value of string hello

08:11
so string hello falls into word wherever i see word it is actually string hello
we call this thing that we're passing into our
function call an argument we call to argue so hello is an argument
now in our function declare declaration are
variables or buckets that can hold those values and so these buckets that are
built into our function declaration we call
parameters so here we have one parameter and that parameter is word hello falls
into word and wherever i see word it's actually string hello so when i call
this function yell this set of instructions runs it takes
in hello and wherever i see word it's actually hello so this would alert hello

08:12
in the browser here we have another function declaration but this function
declaration has two what chat what are these
this function declaration is two what yeah has two parameters exactly word in
other word and this function call as to what this function call has to what
two arguments exactly remember when we call we argue when we call we argue so
two arguments now hello slides into word wherever i see word it's actually hello
and goodbye slides into other word wherever i see other word it's actually

08:13
goodbye so this function would do two things it
would alert hello and then it would alert goodbye beautiful
let's uh code some simple functions so if we go to our starter code from today
we have a practice here called what i actually call here simple functions
and if you go ahead and open that simple functions you'll see some javascript
that gives us a few functions to work through some easy some medium and some
hard so i'm gonna put four minutes on the clock here see how
far you can get in those four minutes i'll bring the music up that's been
playing this whole time it's hilarious that you'll be able to hear the music

08:14
i'll bring these up a little bit half four minutes look
got this we're doing simple simple functions simple functions

08:15
if you already have done this one a bazillion times just jump right to the heart
i'll work on the on them it's just weird to me that some people
can really hear it though some people actually complain about the music being
too loud that's so wild that some people hear it
really really loud and some people barely hear it that blows my mind they lying
i don't think so i people people have sent me different clips and i can hear
it in some of them mobile versus laptop maybe

08:16
it's louder if i change my headphones to mic input interesting um
i'll keep playing with it that's weird see a lot of people saying different
things some say it's low some say it's high say it's different setups that's
interesting never hear music during class unless the
timer is running that's the only time i play music is when you're working on
stuff i have music in the background so that's the only time that you would

08:17
actually hear music is when we're like working on stuff or taking a break
it's so weird look at other people in chat saying different things
ah i'm going to look into it more yup it's always like lo-fi playing
when i have headphones plugged in i hear music
but on if we're on bluetooth i never hear it
crispy what do you think that could be crispy i know you're here and you do
music stuff do you think there's like maybe different like outputs or something

08:18
i don't know that's weird i'll try and figure it out all right
folks let's go over it together alrighty let's create a function that subtracts
two numbers and alerts the difference create a function that subtracts two
numbers and alerts the difference all right so function sub 2
and alert that's a good name for that function uh since we're going to we're
going to subtract two numbers we know we need two numbers so we need two what
we need to what we're gonna subtract two numbers we need
two what in here yeah two parameters beautiful so i'm gonna call this num1
and num2 but you can call your parameters whatever we want we could

08:19
call this robot and unicorn it would work exactly the same
and then we're going to alert the difference so i could alert
num1 minus num2 that would work perfectly fine uh sometimes i like to
make it a little bit more readable and i would do something like uh
like a let num let uh difference equal num1 minus num2 just to have like
on a separate line and then i could alert the difference
beautiful and then we could call this function sub 2 and alert and we could
pass in two numbers like 10 and 10 and 5. beautiful now ten and five are my what
robot unicorn attack was an amazing game yes yeah ten to five for my arguments
exactly beautiful so sub tune alert ten and 5 are my arguments uh 10 goes into
num1 5 goes into num2 we wind up doing 10 minus 5. so we should alert it five

08:20
beautiful create a function that divides three
numbers and console logs the quotient division numbers in in console logs the
quotient so let's go and create a function called uh divide 3 and log beautiful
and we can pass in n1 and 2 and 3 and we're going to console.log the
quotient i'm not going to do in two steps this time i'm just going to do it
all in one line and we'll do n1 divided by n2 divided by n3 beautiful
we're gonna take in them all let's call it
divide three and log and we can pass in like 12. let's do
let's do four and three there we go so we do 12 divided by 4 which should
give us 3 3 divided by 3 would give us 1. all right
another one here create a function that multiplies three numbers and returns the

08:21
product function multi three and return beautiful and we're going to multiply
three numbers so we need three numbers i'm gonna do n one and two and n three
again right crispy said different speakers emphasize
different frequencies and eq'ing could also play a part in that subjective
also play a big part in it too i personally think your levels are fine
i've listened to your class on everything from cheap headphones tv
speakers nice audiophile devices interesting that's so weird then
i trust crispy nugget they've been doing a lot of audio stuff for us lots of fun
things yeah that's that's weird that folks have such a different experience
all right we take in three numbers and we're gonna

08:22
return the product so let's do return and we'll do n one times n two times n
three now remember what does return do what does return do in our code here
it returns the value but where does it return it to
where does it return the value to it returns it to where it was
called exactly returns it to where it was called so right now
is this function being called no so let's call it
multiply three and return let's pass in uh one two and three right and

08:23
what happens here so we're gonna call this function
it's gonna pass in one two and three so we'll do one times two times three which
will give us six is going to return six and it's gonna get six and it's gonna
return six to here and what happens when this returns six what happens to it
yeah blue mango got it it's going to disappear
it's going to poof in the thin air i haven't stored it anywhere i haven't
console logged it i haven't alerted so it's going to get returned to that
location and then poof disappear so i could do something
like storing it in a variable i could say like let um returned
num equal right and then down here i could do whatever the heck i want it
with it i could let's say uh console log it
all right i could console.log returned num beautiful and now that'll spit out

08:24
to the console right it'll spit out to the console uh the returned value because
we called it here so we call it the value gets returned to
here so six gets returned to there so return num now equals six and then i
will console.log return num which is equal to six
cool so return to spits it out to wherever it's called so if we call it here
this is where it's going to get returned to so it's as though this line does not
exist and so we just plug six in there assigning the variable to six beautiful
alrighty medium create a function that takes in three numbers
add the first numbers and return the remainder of dividing the sum of the
first two numbers by the third all right so let's create a function function sum

08:25
and remainder beautiful we need three numbers so i'm going to just do my num1
n1 and 2 and 3 again beautiful and we're going to do with it we're going to
return we'll use our return keyword and we're going to add the first two
numbers i'm going to use parentheses just to make sure that order of
operations is at play in the right way here so we're going to add the first two
numbers and then get the remainder of by dividing in the third number so
we'll do n three so order of operations please
excuse my dear on sally or whatever your your your go to lingo is
uh just make sure we do the addition first before we try and get the
remainder once again we would return it i'm not going to call it it would kind
of get the the hang of it here does it matter if there are two
different functions with n1 n2 and n3 no
no because they only the parameters only exist inside that function

08:26
right they only exist inside this function so this n1 n2 and n3 are
completely different than this n1 n2 and n3 right they're completely different
they're inside their own eventually we'll call it scope you might have heard
block scope things like that we'll get to scope later on in the course hard
creative function that takes in four numbers multiply the first two numbers
if the product is greater than 100 add the last two numbers and console log the
value if the product is less than 100 subtract the difference of the last two
numbers and console log the value if the product is a hundred multiply the first
three numbers together and alert the remainder by dividing the fourth number
i'll let you work on that one i'll let you work on that one and i'll
post the solution in in our in our discord um i'll let you work on that we
don't need to spend time on this one right now

08:27
that's too much that's too much math to be almost nine hours in
that's too much math for us right now alrighty now before we get into
more complex code there's something really important
whenever i attempt to write code i really don't
sit down and immediately start writing javascript
i sit down and i write pseudocode which is plain english for how i am going to
solve my coding challenge so i'm not just writing out mean javascript right away
i am writing out my pseudo code which for me is just plain english here's what
my program is going to do then it's going to do this then it's going to do
this then it's going to do this and so i think a lot of folks get into hot water
early on especially when we get to coding challenges next week because they

08:28
just want to jump right into i just want to jump right into the
javascripts right instead of jumping right into the javascript actually think
through what you want your program to do writing out that plain english
pseudocode can be really really impactful because not only does it
become like your comments it'll guide your code but you do the heavy lifting
first you take out of your brain the the logic and then you can kind of just go
and cherry pick from examples the things that you need your code to do so if you
need your code to be an event listener you can go and grab that if you need the
ability to grab something from the dom you can go and grab that you need to
grab a value from the input you can go and do that and so if you write out your
pseudo code first you can go back through all the examples we've done in
class and just cherry pick the code that
you need if you can't think of it on the spot and that's why i asked you all to
code and recode so much because i want those examples to be

08:29
fresh in your brain so when you write your pseudo code you can then use the
examples that you've drilled and put into anki and the puzzles just come
together so by using anki and pseudo code together you become unstoppable
your code snippet should be an anki your pseudo code should be written for
everything that you do and you'll realize that you'll just kind of unlock
some ability that you didn't know was there in your brain
alrighty so we have this idea of coding a temperature converter so let's go
ahead and open up that starter code here so we have temperature converter
and i want you to convert a value right if we look in the
index.html there's actually nothing here
in the index.html but what i want you to do is to
write a temperature converter something that would take in

08:30
a celsius value and convert it to fahrenheit celsius to fahrenheit okay
celsius to fahrenheit now if you're new i just want you to write pseudocode
if you have drilled this a bazillion times bang out your code
you have three minutes so three minutes to get this done if
you're new just pseudo code if you've already drilled this a billion times
write the actual code so you're trying to convert something from celsius to
fahrenheit how the heck would you do that write out your steps in plain
pseudo code if you finish your pseudocode try actual code good luck

08:31
three minutes on the clock ciao i do i study all the time i do anki and still
doesn't make sense to me ask good questions and discord try and articulate
what doesn't make sense to you and let somebody explain it in a way that might
unlock it for you so if you're putting in the work you're doing the repetition
make sure that you're asking good questions on discord so folks can
explain it in a slightly different way and hopefully that helps you get over
those barriers shout out everyone that's been here for

08:32
the whole stream exactly that's wild today's class has been intense reviewing
loving it yeah it's a little much but i'll be dreaming about this stuff in my
sleep tonight i do dream about coding once in a while

08:33
i'm gonna re-watch an anki hey there we go 30 seconds folks
nine hours wasn't planned in my google calendar yeah i said i didn't know how
long it would go takes us what it takes us all right let's take a look at this
together folks come on back all right so i'm gonna write my pseudo code first
if i want to convert something to fahrenheit well the first thing is i need
i need the value need the value then i need to convert the value right from c to

08:34
f and then i need to like show the value to the user right so if i had no idea
how to do anything this is a really good start i know how to get values out of
the dom or out of inputs because we've done that already today the conversion i
might need to google and then showing the value we've already done today as
well so like two out of the three we've already done uh i think i might i might
wrap this in a function just to be like a cool kid and maybe tie it to an event
listener so i might have like an event listener uh let's see so let's do
document.queryselector and we'll just say um when they click on the h1
we'll run the add event listener like our smurf that's listening for the click
and when they hear the click we will run the convert function there
we go and so then i'll just do function convert

08:35
beautiful i'm going to bring this into that function and there's nothing in my
html we'd have to go and add this stuff to the html
i like the h1 that we're clicking and things like that
but let's say we get the value from the input so let's say
let's create a variable called let um let entered val
equal and then we'll go to the document again
we'll use our query selector and we'll look at the input
and we'll get the value from that input beautiful so i'm going to get the value
from the input what's something that we learned that i should do today if i'm
getting this value out of the input and i'm expecting something specific
yeah just so we don't run into that concatenation again
we want to make sure that we wrap this in number
just to make sure that we're actually dealing with a number here uh we don't

08:36
know if we'll run into it or not but just i feel a bit better at the end of
the day all right let's convert entered valve
from celsius to fahrenheit so we'll do entered well let's actually just do
let temp equal and what's the conversion math for me
somebody give me the conversion math in chat
what's the conversion you got for me know there's an easy one i never
remember it times 1 8 1.8 plus 32 all right so we'll do entered val times 1.8
plus 32 that's it cool awesome and then we're going to show the value
to the user so we'll go to the document we'll go to our query selector

08:37
and we'll go to let's say our h2 and inside the h2 we'll use the inner text
and we'll put inside of it whatever temp is beautiful so here we have our event
listener it's listening for a click on the h1
whenever it hears the click it runs the convert function that convert function
grabs the number out of the input make sure it's a number
stores that in the variable entered value down here we create a new variable
called temp we do the conversion entered value and then we pop that answer
into the dom by selecting the h2 putting some text inside that h2 and that text

08:38
is the converted value boom let's go turn up it gives me hype gets me going
now of course you're gonna have to go and add
you're gonna have to add the uh the the h1 the h2 and the input
occ what's up hey thank you for the gifted subs i appreciate that
hope you're doing well thank you for being here you've been with us for for
the whole time almost i think so like the whole time indeed so
i appreciate you thank you for being here and thank you for the gifted subs
a lot of folks got gifted subs today you got a gifted sub today you gotta
flex those emotes you gotta gift the sub
today flex those emotes i think we're up to like i think it's wow i think it's
like 40 50 gifted subs today flex those emotes give me those micro leons
whatever you feel like spamming we go get whatever you got
a couple more streams like this and leo have to start worrying about only fans
yup start doing a few yolos here and there
it's gonna get it's gonna get wild real quick

08:39
honda civic hey thank you for the fight get the subs as well i appreciate you
thank you for being here all right let's save this up so folks
have it when they go back to discord and let's move on to the next example
all right y'all are willing thank you hi love thank you so much for the gifted
subs i appreciate you thank you for being here
alrighty chat what is the best tv show of all time answer please
beautiful beautiful cinder cinders vta thank you for that give this
subs i appreciate you thank you so much thanks for being here all right
it's of course the bachelor thank you for everyone getting the question right
occ honda tyler cinders appreciate y'all thank you
all right the answer is the bachelor and that enables us to move into our

08:40
bachelor code i'm not going to have you all spend time on these
i'm going to walk through them just so we can see them
i'm just going to just walk through so we can see them
so i'm going to close this out and i'm going to open up bachelor code
and in the bachelor code we have one two and three so let's take
a look at number one and if we look at the html we got some
stuff going on here so let's go ahead and open this in the browser
all right so here we have claire nikki and charlene all
contestants on juan pablo season of the
bachelor probably the most [&nbsp;__&nbsp;] one of
the most controversial seasons of the bachelor of all time uh mainly because
juan pablo got to the end and did not propose to the lovely uh nikki so what i
want to have happen is when you click on final rows i want claire and
unfortunately charlene to disappear and for us to only see
nikki let's go and take a look at this code we can see that

08:41
the thing that we are clicking on has the idea final rows
right the idea of final rows and then the images down here have the ids id of
clear id of nikki id of char lean and so if we go here and look at
our javascripts here we have to start our event listener so we can see we have
a function down here and we want this set of instructions to run
when there is a click on whatever has the idea final rows if we look that h1
has the idea final rule so when we click
on this we want this set of instructions to run so we're going to go ahead and
put those set of instructions in here it's going to say run the hide
instructions when you hear that click beautiful now we know we want it clear and
charlene to disappear so if we look claire and charlene
both have an id so we can use those ids claire and charlene so we'll come in

08:42
here we'll select claire using the id so we need the octoforp and we'll
unfortunately select charlene and we'll use the id again using the octoforp
and there we go so what should happen now is when we click on final rows
we should run the set of instructions hide
right run the set of instructions hide get timed out cool
uh run these set of instructions hide and then
claire and charlene will both be hidden meaning they'll set the style to display
none meaning that they will no longer be there in the dom that rendering of the
dom right beautiful so let's go and take a look at this let's refresh
let's click on final rows and there we go claire and charlene both hid

08:43
and now we just have nikki left beautiful
i agree with the guy that got timed out all right there you go join them welcome
hope you have some fun together beautiful okay there we go get got beautiful
so there we go we have the final rows uh both claire and charlene
disappeared just like our two friends that don't like the bachelor and just
lovely nikki is left all right let's take a look at the next one here
and of course remember we did this for a whole class so we're gonna go through
this one a little bit faster just because we've seen a lot of this stuff
already tonight uh but if you go and if you go through our javascript classes
you'll see this at a much lower pace we spend more time going over this stuff

08:44
alrighty all right this one's a little bit more complex let's open up the html
already so here we go we have andy clare and charlene now andy
became the next bachelorette it clearly should have been charlene
but unfortunately andy became the next bachelorette uh district attorney
assistant district attorney from atlanta but i want that power to be in your
hands right i want that power to be in your hands i want for you to click on
andy and for their image to show if you were to click on claire and want
their image to show if you were to click on charlene i would want their image to
show and so the idea here is if i click on andy the others two should disappear
and only andy should show if i click again andy should disappear and so the
idea is i won't be able to click on these names and see the different

08:45
individuals appear and disappear all right let's go and take a look
let's take a look at this stuff here it's all jokes folks it's all jokes
alrighty so we have document query selector andy document query selector
claire document query selector charlene what the heck am i doing here with these
three why why am i doing this what am i what
am i saving myself from here with these first three lines
saving my fingers exactly i'm saving time from typing so instead of having to
constantly type out document.queryselectorandy
i can just store that in andy wherever i see andy it's now this whole
document.queryselector if we look at the html we can see
that these images have the id of andy charlene and claire
and the actual things we click on have a slightly different ids andy next

08:46
clarinets and charlene next so instead of having to constantly grab the images
i just grab them once and i store them in these variables it
saves me from having to repeat that document that query selector over and
over and over and over again beautiful so
if i click on andy next i want a certain set of instructions to run and if we
look down here here's my andy next set of instructions and so this is just
going gonna be called andy next beautiful now
whenever i click on andy next i want something very specific to happen
i want claire to disappear and if we look
why are none of their images showing up by default like if we look at this page
their images are not here why are their images not showing up on

08:47
the page by default exactly they have that hidden class so if we look at our css
we can see that they have that hidden class which is making them display none
so we can actually use this to our advantage we can
hide stuff by giving that class and we can make it appear by removing
that class and that's what we get to here with this set of code we're saying
all right if we just clicked on andy we obviously want to see andy so let's make
sure that claire is hidden by adding that class of hidden
so if claire already has the class it doesn't really do anything but if claire
was visible we would add that hidden class and they would disappear so that's
what that that that that adding is doing we're saying look at claire

08:48
right remember document query selector clear find claire look at all the
classes look at all the classes on claire and add the hidden class to claire
right same thing for charlene let's go ahead and add the hidden class as well
and then on andy the one that we actually want to be seen
we're going to not just add hidden we're going to toggle hidden now toggle is
very interesting it's like a light switch if the lights are on and you hit
the button the lights go off if the lights are off and you hit the button
the lights come on it's a toggle the lights are on you hit the button
they go off if the lights are off you hit the button they come on
it's the same thing with toggle right it's the same thing with toggle so

08:49
the idea here is if andy already has hidden it'll remove it
and if it does have if it doesn't have hidden it'll add it that's the beauty of
toggle so if we save this and we actually go look in the dom we'll see
what's actually up and happening so let's go ahead i'm going to inspect on
andy next and let's actually look at the images down here so right now
we can see that claire andy and charlene all have the
hidden class so pay attention to these classes here they're about to change
ready i'm gonna click on andy three two one oh did i refresh there we go
i'm gonna come down here three two one oh i forgot we didn't
comment out the other code let's go and comment the other code
it's really not liking all the other stuff that we have here let's comment
that out let's comment these out it was getting

08:50
too many errors because of all that gibberish insert uh code here so
let's save that let's go back let's give it a refresh
beautiful all right let's do our andy next let's click
all right so when we click notice what happened claire
and charlene still have the hidden class but
notice hidden is removed from andy andy no longer has the hidden class it was
toggled off if we click on andy again we can see the hidden class come back
go away come back go away come back that's the beauty of the toggle
and as you toggle since you're adding and removing that class andy will appear
and disappear appear and disappear and the beautiful thing is we have gone
ahead and added hidden to claire and charlene
even though they already had hidden we're just covering our bases because we

08:51
don't know if we're clicking somewhere else and claire is visible if claire was
visible then we would want claire to disappear so that andy could be
shown so we always just kind of we just kind of hard coded the hidden on claire
and charlene just in case we had originally clicked on there
we don't want to have to keep track of like state and keep track of whether or
not those things have been clicked in the past so every single time we click
on andy we hide the other two and show andy no matter what
all right let's see an example of that let's let's let's um let's fix claire
and we'll leave the last one just to save some time all right so
clear next let's go ahead and call next beautiful and clear next we will target

08:52
uh let's target andy and we'll add the class hidden
beautiful let's target charlene and we'll add the class hidden
and then let's target claire and we will toggle the class hidden again beautiful
now i created these variables up here but if i
wasn't creating these variables i would wind up having to be typing this out
every single time so this is what it would look like without the variable
document that query selector andy every single time i'd be doing that over and
over and over again so to save me some time i created that variable beautiful
all right let's go back and look in the dom let's refresh
let's look at these uh images so i'm going to click on claire

08:53
did i not save let's see oh i forgot to nope everything's commented out
save let's make sure i refresh all right let's look at the error that's
in the console claire is not defined well it's a good error what happened
player is not define what happened it doesn't like it says line 18 it does
not like line 18. let's go look at line 18. line 18 is not like clear it's not
defined that means we don't have a variable named clear but wait a minute
let's go up and look oh we forgot the i so since it's missing the i
doesn't work we get that undefined there's no variable with that name
come back and refresh let's click on let's go back to elements
so we can see the images and let's click on clear

08:54
great so we can see that andy and charlene keep the hidden class
but the hidden is removed from claire now here's where it gets fun because now
i'm going to click on andy three two one we saw that claire got the hidden class
but andy had the hidden class toggled off so that's the cool thing we can jump
between contestants now because we set it up so that as we click
on the contestant uh the other two get hidden beautiful and the other thing
that we can do here is we can actually toggle claire off as well boom claire
disappears because we have that toggle on the hidden so we
toggle it off toggle it on top it off toggle it on and so we can actually jump
between people and even toggle those individuals off beautiful
i can see clearly no hey glad you're doing it like i said we went through

08:55
these ones in detail uh during class so if you need to see a little bit slower
definitely watch our class on this one all right we have one more here that i'm
just going to talk through and then we're going to
take our break at the top of the hour so number three here
all right this one gets a little wild little wild so if we look at the html
we have two contestants we have claire and we have nikki
they both have the class of contestant right we both have the class
of contestant however one also has the class of rose
which is nikki because nikki indeed had the final rows beautiful so what we want
to do is if if the contestant has rows we want to let's
go back and take a look if the contestant has a rose we want to show

08:56
their image which would be showing nikki's image but if the user is to
click on claire which does not have a rose then we would alert wrong and
there's some special stuff in here that i want you to see
so we're going to talk through it so we can select all the contestants and use
the class contestant beautiful we got to use the dot don't
forget because we're selecting all the contestants that have the class
contestant and the beautiful thing is this query selector all this enables us
to select all of the elements that have the class contestant
then here what we are doing is a special kind of built-in loop and what we are
doing is we are adding an event listener
to every single thing that was inside of contestants so
all of the contestants every person that
had the class contestant is now going to get this event listener we loop through

08:57
all the dom elements and we add the event listener now i don't need you that
to make sense right now but we're going to get to a raise in the coming week or
so and then when we get to arrays this will make more sense
what's happening here is we basically have a list of all the contestants
we're looping through that list of contestants and adding an event listener
to each one and that event listener is going to call the function check for
rows so what we just did is we added a smurf to claire
and to nikki because they both have the class of contestant beautiful so
now each of those words each of those contestants have the click event and so
what we're going to do is we're going to click on one of those contestants
we're going to say hey the contestant we just clicked on that's
the target the one we just clicked on check its classes if its classes contains

08:58
rows if it contains rows we know that we clicked on nikki and we
should toggle the hidden class on nikki if the contestant we clicked on right if
we clicked on it and it does not contain
rows like if this is false this will not run
and the else will automatically run and we'll see the alert of wrong so in this
case if the thing we clicked on has rose we know we clicked on nikki we show
nikki's image but if it does not have rows we know we clicked on claire and we
alert wrong beautiful and so we save all that let's see if it's running
you click on claire this is the wrong one i haven't even
opened up the right code here we go beautiful click on claire we get wrong

08:59
because claire did not have the class of rose we click on nikki we see their
lovely photo beautiful alrighty folks we're at the top of the
hour when we come back from our break we're hitting the home stretch which is
loops we're going to finish up our loops
we will do a review that reviews all the javascript and we'll call it for today
so top of the hour let's take our five minute breaks and then we should finish
up shortly alright five minutes on the clock here
please if you're able get up move around hydrate it's been a long session so
please take care of yourselves five minutes you got this

09:03
cn5 i'm gonna run some ads goldfish grew legs and took me for a walk a alrighty
about a minute left folks how do you feel about taking crypto as a
form of payment uh well the cool thing is that there are a lot of like the major
like the major payment processors also do crypto stripe
i believe still does crypto i think they should just rolled out like

09:04
new stuff for crypto as well i mean i wouldn't personally do it
um but i know a lot of companies are interested in it yeah
well i'm just waiting until i'm done i'm weird like that i don't know why
what should we say if someone approaches us for an interview and we don't know
the framework required yet it's going to happen pretty much for every job that
you apply to you're not going to know all the tools that they use that's
impossible if you're really interested in the job
maybe do a quick tutorial over the weekend before your interview just to
show that you can work with it but that's about it
alrighty all right let's finish this up strong folks welcome back welcome back
this will be our our last last minutes together today we'll back

09:05
at it on tuesday though don't worry all right let's talk about loops what are
loops loops are a way to repeat an action some
number of times so if you want to do something and do it again then do it
again to do it again right that's what loops are for there
are three main kinds of loops in javascript for while and do while and
they off they all just kind of offer a different way to like start and stop
your loop that's about it uh we actually know that there are more
than this just those three types of loops because we just saw one we just
saw this lovely like four each which is a method built into javascript that
enables us to loop through stuff so there are more than just the four while
and do while but those are the first three that we'll kind of emphasize in
class together for loops kind of break down having three key things the count
when we stop counting and how we increment that count they all have very
specific words like initial expression condition expression increment uh but i

09:06
just like to look at them as like hey this is the thing we're counting by
this is when we stop counting and this is how much our count goes up by each
time we're done doing something so if we were to let this for loop run
what we would wind up having is the very first time this runs
i is equal to one so we're gonna check is one less than five since that is true
we're gonna do what's inside the curly braces and we would cancel log one
slaggy a thank you for the slaggy 90 thank you so much for the gifted subs
thank you for being here all right so we'll do the we'll do the one
then we're going to add one to our counter so i would now become two
is two less than five yes that is a true statement so we do what's inside the
curly braces and we cancel log two then we go up by one so now i is three

09:07
is three less than five yes that is a true statement
we do what is inside the curly braces and we print three to the console then
our i goes up by one is four less than five yes that is a true statement so we
do what's inside the curly braces and we cancel log four then
we add one to i and now we're at five is five less than five
no that is a false statement so we are done five is not less than five it is
equal but it's not less than so we stop and so this for loop would wind up
printing one through four beautiful righteous james dan thank you so much
for the gift of subs thank you for being here cool
so it just stops uh if i wanted this to print out five what could i change like

09:08
if i wanted to do one through five what could i change about this for loop so
that would also get the number five yeah the equal sign exactly we could do
an equal sign equals five beautiful so now that would go all the way up to
five and once i was five we would say is five less than or equal to five that
would be true so then we would console log five
we'd wind up adding one to i and then it'd be six is six less than or equal to
five no that's a false statement it's actually greater so then we would stop
beautiful alrighty let's take a look at our 21 savage loop 21 21 21.
if we look at our starter code we have 21 savage loop here so in our
sir savage the 21st we have some javascripts
and i want you to create a function that has a loop

09:09
that prints 21 times the console and then call that function uh bonus if you
can print 21 21 times to the dom so i'm going to give folks i want you to
practice your for loop we just saw it on the slides i'm just going to put two
minutes on the timer here practice your for loop
see if you can get this running then we're going to go over it together
two minutes on the clock go as quickly as you can and we're going to go over it
together is this the last topic yeah this will be
our last one we're gonna do a review of kind of everything real quick and then

09:10
we'll we'll do a raid and call it a day how to negotiate ballpark budget is too
low sometimes you just gotta walk away sometimes they just don't have the
budget for you that's okay just point them to somebody else that might be able
to do their their uh their budget is about to eat dinner and sleep until
class tuesday no my resilient coders cohort starts tomorrow i'm super excited
new cohort starts tomorrow moogle hey thank you for the tier three i appreciate

09:11
that about 30 seconds left all right come on back folks come on back alrighty
let's create a function that prints 21 21 times to the console and then call
that function so we're going to call this 21 console

09:12
or let's call it console21 sorry i don't like don't start with uh variables i
start variables with our function names with the numbers so we'll call this
console 21 cool and we're going to print this 21 times
to the console so let's create a let's create a for loop in here
and in that for loop let's start our i equaling to one
and then we'll go while i is less than or equal to 21 and then we'll go up by
one each time and every single time we do this we will console log 21
the console beautiful and then let's go ahead and call this console 21 beautiful
and that should be good well i is less than or equal to 21 make sure we have an
infinite loop looks good let's save let's go ahead and open this in the browser

09:13
all right let's open up our inspector let's look at the console and there we
go 21 21 times to the console let's see if we can do the second step here
which is the make it print 21 times to the dom so let's comment out our console
log here and do we have a place we can put it in the
dom yeah we have this id that says savage says
let's put it in that h2 there's only one h2 i'm just going to use the h2 instead
of the id let's go ahead and do document dot query selector
and we're going to grab that h2 just like we've been doing all night all day and
we're going to put inside of there 21. now if we just did this
what it's going to do is it's just going to put 21
over and over and over again but we're not going to see it like add it it's
just going to say 21. so let's actually save this and see it we know that that

09:14
loop runs 21 times but at the end we just see 21 here right we just see 21
here at the end it's because we haven't like actually concatenated it we just
did something 21 times so let's go ahead and make sure we're actually doing some
concatenation here so instead of doing the equal we're just going to do plus
equals so we're going to keep adding 21 each time i'm going to put a space in
between each one and i'm going to save it and now when we refresh
we'll see 21 21 times to the dom beautiful all right
well done everyone it's a good one alrighty we also have other types of
loops while and do while but we'll see those next week all right one last
challenge and then we'll end the evening folks it's the bring it on challenge so
let's let's finish strong please so i'm going to go ahead and show you

09:15
the challenge let's bring it on we got some javascript to practice here
some variables some functions some conditionals some loops let's put five
minutes on the timer give it your all try and recall all the things we did
tonight if you need help go back and look at the other examples look at the
slides let's do this let's go through it together don't leave now you've been
here the whole time finish strong then we'll do a raid get those sweet
sweet channel points and we'll end it here

09:16
five minutes on the clock folks you got this [Music] do
got this folks four minutes left my brain left the house eh
went go-karting last night now you have a headache from getting rammed into

09:17
it's not a concussion bird laws hey i'm well versed in bird laws actually
thank you so much for the gift it subs thank you for being here
how do we set up the plus sequels in the savage loop again i'll show it while
folks are working on it more hey thank you for the for the
thousand bits appreciate you here it was it's just the plus equals here that's
all that's all the secret is to it plus equals birds aren't real yeah

09:18
just some light whiplash would you feel better though
we're working on the bring it on again two minutes 22 seconds left you got this
folks [Music] do yeah where are we at what's our uptime i even know

09:19
9 21. let's go turn up nine plus hours let's go we should just go for ten
sam squared no worries this was a this is a quick overview we got
18 classes for you locked and loaded on youtube exclamation point youtube we got
a catch-up crew on discord so you can go at your own pace and get caught up
i really think we have an 11 hour one somewhere i don't know why i think that
i know we had a niner i think there was an 11 too
maybe we broke that up in the 2 and it equaled 11 but yeah this is up there for
sure just play wordle it just turns into me playing pokemon
just to beat the long longest stream no i need to eat that's a good idea though
i've been going ham on the crosswords i'd love a pictionary stream let's do it

09:20
well let's do a pictionary stream all right 20 seconds folks this strong
hey turn up all right we're gonna make it happen
chat is full of champs heck yeah they are we don't get god we go get
well i gotta say go get became we got came we saw we got already folks
let's go ahead and uh do some variables here create a variable
and console.log the value all right let's call this let almost done
and set it equal to five and then let's console log almost done beautiful

09:21
create a variable add 10 to it alert the value let num equal 55
and we're going to add 10 to it num plus equals 10 and then alert num wonderful
create a function that subtracts four numbers and alerts the difference function
sub four and alert beautiful and so let's go ahead and take in our four numbers
and one and two and three and four and then let's go ahead and alert the
difference we'll do an alert and we'll do n one minus n 2 minus n 3 minus n
4. beautiful and we alert that difference
let's just say to call it so we'll just keep moving create a function that
divides one number by another and returns the remainder so it's not going to be
it's not going to be division what is it going to be it's going to be what not

09:22
divide not divide but what modulus exactly so let's create a function return
remainder beautiful and then let's go ahead we need to take in two numbers
do n one and two or actually you know let's get funky with it zebra
unicorn beautiful just to show that it doesn't have to be n1 or n2 some people
sometimes you'll get tripped up on that and we'll return uh zebra modulus
unicorn beautiful zebra modulus unicorn that'll be the remainder that we are
returning that should be good conditionals
function that adds two numbers that the sum is greater than 50 alerts jumanji so
we'll create a function uh sum greater than 50. [Music] let's go

09:23
let's take in two numbers uh and one and two
let's add them together so let's say let's sum
equal we could do it directly in the conditional but it's a little bit neater
n1 plus n2 and then let's go and set up our conditional we're going to say if
sum is greater than 50 we can come in and alert jumanji exactly beautiful
as two numbers the summer's green 50 alerts jumanji beautiful beautiful all
right create a function that multiplies through numbers and the
product is visible by three alert zebra so let's go and create a function here
uh multi three and alert zebra not fully descripted there but
close enough let's pass in and one and two and three and one and two and three

09:24
uh multiplies three numbers let's going to say let product equal n1
times and two times and three and if the product is divisible by three
so we can use modulus to check to see if it's divisible by three
so if beautiful and say if product mod 3 equals 0 because if 3 goes evenly
into product and we get zero back as the
remainder so if that if both zero equals zero we know that it was divisible by
three and we can go ahead and alert zebra beautiful all right we got a loop down
here create a function that takes in a word and a number
console log the word x times where x was the number that's passed in so we'll

09:25
create a function called log word x x times beautiful and we're going to take in
word and num and we're going to set up a for loop in here
and that for loop we're going to set let i equal one
and while i is less than or equal to num we're gonna keep doing our loop we'll
add one to i each time and so this will go
from one all the way to our number and each time that that runs we will
console.log no opening will comes log the word alrighty that is
we out of the logs we carried them all first try let's go easy
easy nine and a half hours easy nine and a half hours let's go alrighty folks

09:26
hope you got something out of the review i hope you had a chance to see stuff or
another time to to to to to have it wash over you again
right to make sure that you saw these things and if you're brand new to us
welcome i know this was a lot it was a lot to do in one sitting we've broken
all this stuff up into 18 different classes that you can go back through on
youtube leonardo.com youtube look at the
cohort 2 playlist it's all there for you uh if this was a review for you hope
things clicked maybe a little bit better the second time and even though we've
done review not all these concepts should be there yet remember it's a
marathon not a sprint it doesn't have to click it doesn't have to be all there
for you that's okay we're gonna keep trudging you're gonna keep putting in
more time more effort and things will come with that time that you put in so
it was an absolute blast to have you all for

09:27
for nine and a half hours together what a day
i'll share all of this code on discord in a few minutes afterwards so if you
want all the solutions we did today those will all be dis on discord in just
a few minutes uh where are we at let's see
we're over 1500 people so this will go on youtube we have to wait the day
because we're partnered on twitch and it'll go up on on youtube on on tuesday
uh so we're there let's do a raid let's spread
some love and positivity around i know we're all tired let's go let's give this
person some follows give them some love say what's up we're going to dion saga
they're they're working on some character creation it looks like they're
building some games let's go ahead let's spread some love some positivity and
then have a wonderful rest of your day rest of your night you deserve it thanks
for being champs thanks for being here the whole time i'm gonna queue up the

09:28
raid beautiful they're working on some game development so i'll see you all over
there at the raid have a wonderful rest of your day get some rest get some
hydration in i'll see you on tuesday we got a lot more stuff to get into on
tuesday folks i'm excited lots of really big news this week big news i'm super
excited to share the news on tuesday i'll see you all in the raid peace
the rest of your day you
