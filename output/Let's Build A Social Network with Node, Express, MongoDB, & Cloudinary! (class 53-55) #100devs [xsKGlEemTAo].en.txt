
00:00
yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah does this work hey good
morning good afternoon good evening hope you all are doing well
let's go Rufio Rufio Rufio Rufio with the Rays let's go
hope you all are doing well Rufio thank you for the raid if y'all not hanging
out with Rufio before the stream look look look look stream team Channel they
let you know when they're going live Rufio was live before this stream so
what were you doing here early shipping with Rufio let's go let's go on
everybody hope you all are doing well uh
we also have some fun stuff planned next
week we're gonna we're gonna we gotta we
gotta start highlighting the stream team more and we're starting that next week
so uh excited to kind of share some cool stuff with y'all next week but uh Rufio

00:01
thanks for bringing the crew along hi everybody welcome back hope you had a
good Tuesday evening a good Wednesday a good early Thursday
all right everybody uh tonight we got a few things that we got to do uh one uh
we are going to look at some Hit List Magic that's right hit list magic folks uh
because Hit List is due next week y'all uh so I I wanted to share a little
secret that I just found out about recently a little magic that might that
might actually help you and your uh your hit list so let's go ahead and talk
about that uh we're gonna share some celebrations uh I think this this is
this is definitely boardroom Worthy 15 plus jobs 15. in the last week alone
15 plus we haven't even started the hunt yet we

00:02
haven't even started the hunt yet and 15 in the last week the celebrations
channel was on fire folks are messaging me it's been wild 15 plus we're over 50.
we might be at 20 by now we don't get got in just the last week alone if you
aren't paying attention to that celebrations Channel you need to but I'm
gonna we gotta celebrate a little bit so I'm going through them the folks that
posted in the celebration they're in the slides there's actually more on
celebration channels that are in the slides uh
because they're just getting ridiculous uh so yeah congrats to everyone uh
that's gotten a job so far and I always say this uh because we're not even at
the hunt yet right so no no no no being like why am I not there yet
because you're not supposed to be there yet
we're upside down on the roller coaster some people fell out and that's how they

00:03
got the job already you know so we gotta we gotta we gotta we gotta be cool with
that but we're gonna celebrate because 15 jobs 15 jobs Community taught well
the theme you're gonna see over and over
and over again is thanking the community thanking folks that helped supported
them thanking specific channels on Discord that got them through it
I'm about to loosen my seatbelt no no no we're not ready to fall off yet don't
take yourself out the game I'm buckling the seat belt is taking yourself out the
game so super excited that you're all here uh like I said we're gonna see some
celebrations we're gonna we're gonna do some some some some Hit List magic and
then we're walking through our full stack social networking site uh I really
believe in this idea uh that I got from Gray's Anatomy right where you where you
you you you you you you you you you see one you do one you teach one right like
that that's like the old school like surgeon's way you see one

00:04
you do one you teach one and so we're gonna see one all right we're gonna see
one then you're gonna do one next week and then we're gonna hopefully teach
others later on so welcome that you're all here um
sorry for folks that are getting I don't know what's up with the ads it's so I
changed it back to one minute delay but if you're getting ads I apologize
uh trying to figure out so it works better uh for everyone but uh yeah it's
been a little while they're not the addressing now are not on my end like I
can't I can't control always when twitch runs them but for some reason they
decided to run them five minutes ago so the the downsides of unfortunately being
on Twitch Ain't Got No Control [Laughter]
all right everybody uh so let's get into
it as always I like to start off with uh some questions you got questions I got

00:05
answers hey thank you for the gift it says Ian
Douglas thank you for to get the subs thank you for being here appreciate it
uh agenda we kind of just talked through it questions you got questions I got
answers currently in class 15 went to see what
the current cohort is at we outside Zealot that's where we're at we outside
we getting jobs let's go we outside we online when we go over react uh two weeks
two weeks his mayonnaise an instrument if you know how to use it
what's your favorite ice cream uh I don't know that's a hard question
salt and straw has these like vegan ice creams that'd be that'd be balling
sometimes is okay to apply for senior rolls if

00:06
it's like hey don't ever let like don't ever let your dreams be dreams right
[Music] right so if there's a job that you really want
and it seems like it might be something you could you could fit for
um go for it we've had folks that went through the program that got senior
roles right out of the program because a lot of times stuff's all made up and it
doesn't matter anyway now what I focus my job hunt on senior rolls absolutely
not when most senior roles be a stretch for most folks just coming out of
program absolutely um but if it's your dream it's a great
job you think it might be a good fit for you why not shoot your shot of course
they say is no best you get is some good interview practice you know
uh Ivan if you send a mod mail your good will follow up
had a recruiter go through a list of different Frameworks languages asking me

00:07
my experience level uh you turn it back on them and ask them how many years of
experience they have right when somebody
starts getting into that they're they're just going through like a checklist and
um yeah going through a checklist means that that that's just a waste I don't
know it's just it's just a waste of time and so if they're going to go through a
checklist my answer is yeah since since it came out
how many years of experience do you have with it since it came out
yep I heard about it five years ago right a lot of times I'm just going to chalk
those up that ain't gonna go anywhere yeah I ain't gonna go anywhere
if they're if they're already not seeing
me for me if they're already not looking at my projects if they're already not
looking at the Merit of the application that I have put in front of them and
they're just going through that's a wrap it just move on

00:08
ain't gonna win that one uh should we focus on front of our back
end on our strengths uh no I think you should apply to any kind of like role
that's front and back in full stack uh keep your options open and like I said
it's 1-60 right so you'll start to feel out like 10 interviews in you start to
kind of get a little bit of a rhythm you start to be like all right I'm doing a
lot better in these types of interviews so I might optimize my hunt for these
specific types of roles and so I think that's something that comes up
naturally once we get into it so we're gonna have classes on like how to
negotiate we're gonna like one of the beautiful things about hunttober is like
kind of answering that question a little bit more seriously when somebody says
how many years of experience do you have with each of these things that's
something we talk about during October where
um I can kind of expand on a little bit more deeply and be like how can we
redirect and get to the thing that actually matters and so if somebody says

00:09
like Leon how many years of experience do you have with next JS right
wonderful so I've been using react for a very long time I have built lots of
wonderful applications that you can see on my portfolio that include next JS so
if you're looking for someone that has built full stack apps that has built
react apps using next.js that has ship production worthy code using next.js I
would definitely point you to the projects that are on my GitHub
right and then if they go but yeah but yeah dog but like how many hours right
then then I just know it's completely like lost like uh does that like when
the next next.js come out like like like it's I I built apps
right I have them on my GitHub you can see them you can play with them if
that's not enough right if that's not if that doesn't
matter to you then this this conversation this this isn't gonna work out
right and so how to handle those types of conversations

00:10
um how to say that a little bit more eloquently how to lead the interviewer
in a in a better direction is kind of all the stuff we go over during October
would I actually say that yeah so I would actually say like to give the
answer they have to be like uh so I've been using next JS for quite a while uh
hard to put my finger on like the exact date I started using it but I do have
projects on my GitHub I've pushed production level code that uses next.js
so if you're interested in seeing those applications I'm happy to show them to
you right and so that that that's an honest
answer right the honest answer is like I've used it I have projects that have
that I can show you right but I'm not actually answering the number
right and if they ask if they really push for the actual number then I then I
would just honestly say honestly I don't know I've been using it for a while
right so that's kind of how I answer those when they put you on this tough spot
like that if me showing you actual projects using it doesn't work or things

00:11
like that then it's a wrap and so the cool thing is that you will
all have built full stack apps that have react that have some interesting
framework some interesting libraries that have uh node all these things
that'll just be the checklist things that you can point to yeah yep cool um
we learn about Big O notation absolutely yep uh so we have like a whole class on
Big O and then we have a whole other class on data structures algorithms yep
webman if you actually have that time yeah sure absolutely
uh what do we do about the fear of being
fired after getting the job uh so that's the real this is the rub right this is

00:12
the thing people don't want to talk about the real work starts once you get
the job right like getting the job is one thing but then keeping the job as a
whole other bag of worms and it's something we're gonna have like a full
class on um but here's the thing it's gonna take
them three months like let's just say let's just say worst case scenario
right worst case scenario uh they hate your guts uh they they they just don't
like you it's still gonna take them probably like three months to fire you
right like it's the absolute worst fit they hate you you're still onboarding
it's probably still going to take them three months so I'd rather get paid to
learn for three months uh and just don't update your LinkedIn right away you
should never update your LinkedIn immediately right get get through that
first three month review get through that first whatever that first review
cycle is get through that and then update all your stuff because you could

00:13
have just been freelancing during that time nobody else needs to know and uh
one of the thing is that you need to
keep up your interview skills [&nbsp;__&nbsp;]
happens right [&nbsp;__&nbsp;] happens and so I
think people get comfortable after they get that first job and it's absolutely
not the time uh to get comfortable you got to keep up your your data structures
your algorithms you got to keep up um your your code practice on top of all
the things you're learning to be successful as you onboard at that company
um and so yeah like worst case scenario you get paid and then you find another
job cool alrighty folks thank you for the questions uh we are going to have a
wonderful review session on Sunday so if you're new around here and you're like
what is this cool thing how are people getting jobs how can I learn back in web
development come back on Sunday we're going to do a full review we're starting
at 1 p.m eastern time we're going until we get it done
all right so if you ever wanted to learn

00:14
how to code if you want to learn back in web development that's what that class
is for we'll also plenty of times to answer uh tons of other questions you
might have I like to come back from breaks and answer a few questions as we
go throughout the entire day all right if you haven't checked in please go
ahead and check in exclamation point check in get you the tweet for today go
ahead and like that retweet it for me if you haven't submitted your project
work I don't care what you got show me what you got I want you to submit it in
that form uh closes it's gonna close soon so get it in today please uh back
in review class like I said Sunday and hit list is due Tuesday uh that is that
is just in a few days folks since I remember on The Hit List I just need the
companies like I need the actual open job at the companies that you could
actually realistically apply to and so a lot of folks have been having a little
bit of trouble finding companies that they could work at have open roles like

00:15
you're digging through different sites you're digging through
um different portals and it's just it like then you find a job but it was
posted three years ago and so uh The Hit List The Hit List I went to on Tuesday
is 40 companies the final version of it will be 60 right so
40 do Tuesday 60 do by the end and so these should be companies that are in
your local area because local is always a little bit easier to get the job we do
have a lot of folks that don't live in a
large metro area that's okay expand your search to Metro areas that are close to
you because a lot of companies still aren't back in the office and you might
be able to sneak in one flight a month and still be working remotely but had a
better opportunity at getting the job because you are close to it right and

00:16
then if you don't have anything that's in a larger metro area you're going for
remote right and then if you're outside of the US you're outside of Canada
you're looking for kind of remote Global hire right so if you're in a place that
doesn't have a tech industry or doesn't have a big one you don't have any larger
Metro areas to what you can apply to then you're looking for remote
opportunities that hire globally and so this is uh a
arduous process it takes a long time uh to to find these these these
opportunities uh I've done it in the past where I've just grind it through uh
Angel list or now I think they think now they call it Angel Co I've grinded it
through Linkedin I've grinded into these different job boards and it's always a
pain in the butt to like find the actual roles find ones that are actually open
and so the other day on Tick Tock of all
places I found this and it's something I

00:17
just never thought to do I do this a lot but I never thought to do this for the
job search let me show you the magic of what this is so if you don't know Google
can take in booleans it can take in a lot of other special stuff right and it
can help you filter out the results that show up in Google so what I've done is
I've built off of this this they go by 10bv I link their Tick Tock here because
it was brilliant um I added the common job sites that I
use dice indeed Angel Co and then these ones here are the ones they that they
found that are kind of like the sites that host the job applications right uh
that host the job applications and so a lot of times like even if you're on even
if you're on um even if you're on like LinkedIn or
any like some of the other bigger job sites you like click apply and then it

00:18
takes you to where they're hosting their
job application and it's normally one of these like four sites and so what this
is saying is you're telling Google to only return results from these websites
right so only return results from these websites and you can add others if there
are other job boards um that are popular near you so like if
you're from a certain country and the job board is different for you in that
country then you would just add it to to this list right
I've seen some other folks saying so maybe we'll maybe we'll put this in a
GitHub repo and people can add the ones that are special to them that'd be cool
to do so we will do that I'll do that after class I'll set up that rebound
people want to submit PRS they can and so you put all the different sites to
have stuff in you type in the roles that you're looking for so engineer or
developer so this is like your your your your your or operator here engineer or

00:19
developer and then I'm looking for inside of that result the result must
have the word JavaScript and it must have the word remote right so these are
the sites that we're looking for these are the things that must that have to be
on the that are going to be on the page these are the things that must be on the
page and then here's all the stuff I want to filter out so if it has senior
on there get it out if it's staff get it out if it's senior get it out if it's
lead get it out if it's principal get it
out if it's angular get it out right and you can change this up to whatever you
want right like you don't have to have I'm being silly with the angular here
but it can be helpful to focus right and
so you pull all the stuff that you don't care about right and then you put and
this is the last bit of magic here you put the date so after August 1st so what
this will do is it'll search all these sites for
engineering and developer roles that have JavaScript and remote on the page

00:20
gets rid of all the senior crap gets rid of the stuff that maybe like in your
area everything is C plus plus or everything is PHP and you just don't
want those roles you can remove those roles and then after that time and you
plug all this into Google um I use DuckDuckGo so I have to do bang
G for this to work but just ignore that and here's 1200 results
almost 1300 results of like straight job listings
um that are remote JavaScript roles and so like you can you can like just look
on them and some of them are going to be bunk right like not all of them are
going to be like great roles right um and over time you'll figure out how
to like remove the stuff you don't care about maybe you keep seeing a certain
type of recruiter that keeps doing something that you don't want you can
just add them to your your nuke list there and uh boom it's the actual like
application with the right company like has everything you need and it takes you

00:21
right to like the application page so just an easy way to like find actual
roles that were posted recently right because you have that date that date uh
on the on there and then as you want you can switch things up so maybe maybe
you're not remote so maybe you're gonna do um I don't know maybe you're gonna do
New York because you're you're in New York and you don't want to be remote so
you'll do like um New York right and there you go boom 161 results uh for
JavaScript New York filtering out all of the like senior roles that were all
posted recently right there you go and so you can just plug in
your locality right you can plug in your
your location and there you go right you just start finding um

00:22
these like actual open jobs that you can apply to and over time you
you modify it for the things that you care about like if there's certain roles
or things that you care about boom you just add them and that's it
so uh these are in the slides you can do
exclamation point slides if you need the slides I'm just gonna let me post this
in chat let's see if it'll let me post it in chat yeah there you go boom
you can copy and paste that if you need it but it's also in the slides
exclamation point slides uh and there you go
and so uh like I said this this wasn't my idea I saw this on Tick Tock and then
I added some of the stuff that we might care about so this is the person that
did it as freaking genius uh and so you should be able to fill out your Hit List
pretty quickly uh with this Rule and
since I'm getting good [&nbsp;__&nbsp;] from Tick
Tock I'm actually gonna start putting more stuff on Tick Tock I know I said it
before but like I've been really working on a lot of like this short stuff like
the stuff that doesn't make sense to put anywhere else

00:23
um but I want it to be like a video so maybe not Twitter like yeah it's going
on Tick Tock so I know some of you don't want to use tick tock that's okay don't
follow me on Tick Tock that's wonderful but that's what I'm putting on there uh
because I'm actually finding a lot of really important stuff on there and it's
where the it's where the kids are you know like we gotta we gotta we got it we
gotta get the youngins or else what's our future like you know so
um I'm gonna be on there foreign let's get some celebrations going uh I
it's just it's just really too much right uh
you got to stay hip right you gotta stay hip
um and so the celebration's just been wild so many posts people have been
posting uh so these are all in the celebrations Channel you can just go to
Celebration Channel and you'll see all of these uh wonderful wonderful uh posts
and so just wanted to throw some in here that I think were that that were pretty

00:24
dope um I I love this one uh they posted on the
tech Channel first and then they posted a celebration channel uh for all of you
who think I can get this job I can't get
this job I didn't go to college for this let me tell you right now my degree to
not get me the job this community and the skills Leon taught did uh due to my
experience companies did not even want to interview me for entry level roles uh
so I think there's some a lot of bit of little bits of wisdom uh and what people
are sharing uh as they are getting these jobs right because I think there's
something really important about keeping like your pulse on the ground of what's
happening and one of the beautiful things about
what I do every day is every day I'm helping people get jobs right like my
day job is resilient coders from helping people get jobs and so when I share
things it's it's not because I like I think this is going to work it's because
I've literally helped hundreds of people do this and I really pay attention to
what people say and I really pay attention to what I see the trends are
and if the trend swings One Way guess what I'm going to start teaching all

00:25
right and so I think there's little bits of wisdom in here I love that some
people share like the things that they did that were different than what I told
them to do right I think that's huge right and so
I'm always going to say that I'm going to show you doors to open it's really up
to you which doors you open right and so open as many doors as you possibly can
because you'll be surprised um what walks through them right um
uh with the exception of knowingly code questions there's only income from
companies I don't want to work with pretty much every question I was asked

00:26
during my interviews was still in the bank or related to the bank foreign
every offer I got for an interview happened because I followed Leon's
method for the hunt the skills are necessary for the job came from this is
just this is just me this is my Victory lap right now uh thank you um
they're going to be offering coffee chats which is dope thank you for doing
that uh and I just love that this is for making this community it's Community
taught folks do the bank don't listen to me listen to them
pretty much every question I was asked during my interviews was still in the
bank or related to the bank do the bank do the bank do the bank don't listen to
me do the bank all right uh received a front end software

00:27
engineering offer can't thank Leon in this community community taught enough um
I went from an unmotivated CS student during my freshman year to grinding and
following Leon's path uh eventually landed me this job for all the Cs
students that are trying to get a job it's totally possible do not mention
you're in college do not mention you're in college this is
a lesson I had to learn uh it it actually a lot of csps have said this
before that like if you're still like on the way to graduating but you're
actively job searching telling them you're in University actually can hurt
you as you're trying to get a job before
you graduate uh especially if you're not like close to graduating if it's not
something like you'll graduate and then start and so I think that was pretty
funny to bring up because it's definitely true I've definitely seen
people once they stop mentioning it get more opportunities cool we go get

00:28
oh and I love this I'll continue to follow along with the court and bring as
many more people along with me let's go that's all I ask you all thought this
was free it ain't free you gotta turn around and bring more people with you
all right just signed a written Java developer
position good looking resume I use the template it works perks it works
Leon it's not the full ATS format it works get out of here foreign [Music] s

00:29
the buttons oh man oh man um foreign we're just gonna have a full class on
buttons button prep big part of hunttober is butt and prep
people out here getting jobs with these buttons [Laughter]
uh for 400 devs I sent out over 100 applications got nothing hold on hold on
sent out over a hundred applications and got nothing but why with 100 devs I had
offers come to me let's go hey we outside we online let's go say less foreign
all right Long Time Coming uh I only got the bag shout outs to the
community also shout out to Naya hey uh Knight's been doing some Twitter spaces
with Sean uh doing a lot of like negotiation talk

00:30
um so shout out to them and shout out to the mental health Channel let's go uh
helping them get across the Finish Line I love it alrighty this is a big one
uh can I believe my times finally come finally accepted a full stack software
engineer from a fortune 50K [Music] uh the best part about this uh I I don't
know if I I have to I'll retweet it I'll probably retweet it this weekend
um and they should somebody did a meme uh they uh they applied to Target
and uh didn't get the job like like the like the normal 15 an hour Target job I
didn't get it uh and then now they're a full stack software engineer at a

00:31
Fortune 50 company that's the whoever whoever turned you
down for that job you you got to send them something
you got to send them a thank you card or something let's go and they were on the
live stream yeah they were when we did the um the story crafting so this is
this has been this is a long time coming
I love that they thanked out everyone uh their special little group here in 100
devs uh shout out the mod shout out the mods as always uh big shout out to
divker recently if you ever see difficult in chat please just just just
like just put like like a heart on anything they ever say uh you all don't
know the work they put in to keep like the lights on and that Discord running
uh so shout out the mods I see a lot of mods here
Chris a thank you for being here uh shout out to stream team let's go uh
Mine Wolf hey love it la love it 100 deaths community community talk love it um

00:32
[Laughter] alrighty I love to see it thank you thank you thank you uh
got a non-profit client back in April and has led to a couple referrals even
though the project isn't completely done signed another client putting us over
11k 11k in client work 11 Grand let's go
let's go still a minor just believe that this is happening let's go
uh was having a hard time looking for volunteer work uh but now they found a
new volunteer opportunity to be working on real world projects collaborating
with real people love to see it uh consider it's a huge Victory me too
uh accepted an offer is entry-level software developer been involved since
beginning cohort 2. I've been through the highs and lows and uh
I love that they kind of mentioned wasn't able to land a client wasn't able

00:33
to get the the review on GitHub couldn't get past four cues I don't know if many
people get past Four Keys that's wild and um
was able to land a job by focusing on learning how to learn and learning how
to network and talk to people better hey folks that's why we push the networking
every week uh thanks to everyone who helped along the way and the community
community taught love to see it uh landed a client that's for the
foreseeable future 10 to 15 hours a week at eighty dollars an hour let's go
for reference arena being paid here is four times my currently hourly rate and

00:34
my nine to five four times the amount let's go [Laughter] uh
just signed a contract for mid-level front mid-level front engineer at a
company which was a dream goal uh believe hardest part is keeping him
believing it's not an All or Nothing deal uh
I love this I love that part open the doors that that you can open play your
strongest cards soft skills carry soft skills get jobs folks and manage your
learning time Anki Banky code challenge every day time slot I had for learning
started with those only one had extra time was I working on projects or
learning new material I agree with that thanks mods and the community can you
talk let's go you know you spend too much time on this I don't care
let me pop off for a bit uh jumbo C loved to see it we don't get got jealousy uh
set to my first offer as a front-end software engineer level two uh working

00:35
with some some hype stuff fully remote yesterday was my first day of work I
wanted to wait until the laptop arrived so I knew it was real before posting uh
I want to thanks for creating this community they were part of the first
cohort I love to see it first cohort folks grinding coming back when they
need to get in the stuff they need to get done um and
one thing I never felt discouraged because I knew it was a matter of it not
if but when it's always just to win we're all in the same roller coaster
folks sometimes you're in the back of the car and you pull in a little later
that's all right this community really helped me grow as an engineer improve my
communication skills that transferred over to my new role thank you all for
part of the community I love it special shout out to Emma B
uh Nicole L dab uh interview process they broke it down for you I love when
people do that when you get the job tell us what tell us what what happened I
need this when you post your job tell me
tell us about what happened tell us tell us the things you went through what do

00:36
we need to be preparing for what did you see on the job that got you the job you
know tools that helped me the most aside from
the community I love that aside from the community Anki do the bank once again
folks don't listen to me listen to Jimbo don't listen to me
listen to Jimbo do the bank Network building you will learn by getting stuck
getting unstuck getting stuck again yes at this point in time
you have to be building you have to be building if you're not building
you're not learning and so tonight we're gonna walk through
we're gonna walk through this full stack application
and I'm gonna ask you to build on top of
it and and it's gonna be hard it's gonna
be difficult it's gonna be something you haven't done it's gonna be weird it's
gonna you're gonna go to Discord ask a metric crap ton of questions but then
we'll go over it next week but I need to build in I need you playing with code I
don't need you to sit here listening to me I need you to actually get your

00:37
fingers on the keyboard and get [&nbsp;__&nbsp;] done said 90 days until MVP run
[Applause] all right I I love the last one uh I'm excited to
announce I've just said the offers a full-time software developer I'm pumped
love it love it just saw that once uh earlier
today in the in the in the channel so as always uh don't listen to me go to that
celebrations Channel there's even more than I put on the slides can you believe
that there's even more then when I put in the slides even more even more more
and you can go back you don't have to scroll you can just look at the PIN the
pansy 50 other ones that are pinned if you have any shredded doubt that you

00:38
can do this don't listen to me listen to them you can do this you're close
you got a lot more work to do a little bit more work to do in terms of getting
ready for the hunt the Hunt's a whole lot of work but it's doable
you're closer than you think you're in the Wiggles of false hope you went
through the trudge you went through the mud you went through the trough of
sorrow and you're so [&nbsp;__&nbsp;] close don't take yourself out the game
keep pushing you're gonna get to the promised land I promise you all right
I just need to I just need a little death session so 10 second Warden

00:39
five seconds four three two one foreign [Music] foreign do it just do it
all right buddy you can do it you really can Leon why'd you spend 45 minutes
doing this because I think there's like three of you that really
needed to hear this I think there's three of you that are
like I don't know this might be my last class I think you needed to hear it
you're closer than you think you are do the bank
that's it every like half people said the bank is what got them the job do

00:40
Bank do your code challenges do your networking right work on your MVP
for your 100 hours project right these things these things work it's not me I'm
not telling I can shut up now I can stop talking you don't have to listen to me
go to celebrations Channel and listen to them they're the ones that are getting
the jobs right now so if you need to hear it I'm gonna hope
you heard it all right these these aren't these aren't randos these are
these are folks from the community literally thanking the community for
helping them get a job you can do it all right let's point out our social
network uh we're gonna walk through the layout that we did uh on Tuesday
we'll take our top of the hour break uh and then when we're done our top of the
hour break uh we will come back and start working through the code

00:41
understanding how this social networking app is going to uh to work and so let's
go ahead let's look at our plan from Tuesday take us happy hour break and
then we'll start looking at some real code all right
so here is the application that we decided to build out
we're trying to build out an Instagram clone uh that has some really core
features uh we have users which we've already seen with our MVC local off
uh we are going to add a few new things like individual Pages or specific stuff
right uh we're gonna have individual Pages for our posts we're going to have
individual uh Pages for our our feed individual Pages for our profile right

00:42
and so how do we actually have these individual Pages how do we show specific
stuff on these pages and how does it tie to the data we're keeping track of in
our database that's the goal for today I want you to be able to see the big
picture right see the big picture see how these apps come together
hopefully have that moment where it clicks and goes oh we're using the IDS
to build the individual URLs for our Pages we're using the IDS to keep track
of our users we're using the IDS to keep
track of what user made which post we're keeping track of what
post is tied to which comment based on the IDS
were we supposed to code this out no no we're gonna we're gonna go over it
tonight right so that's the idea that is to see how a real full stack app that's
a real social media app where you can upload photos leave comments do captions
all that stuff comes together that's what we're going to try and see tonight

00:43
and so I want you to see it I want you to ask questions don't worry about like
coding along or anything like that let's
let's let's let's understand the goal is understanding C1 do one teach one
all right so let's think about our three things we talked about on twos
that we're going to try and build out we want a profile for each of our users
we want a feed of all our posts and we want a page for each individual post so
let's think about that page for each individual post
what does each in chat what does each individual post have
yeah every single post is going to have an ID right we know that we are storing

00:44
our posts in our post collection uh based on the model right that had our
schema we said that each post is going to have like an image URL it's going to
have a number of likes it's going to have a caption that'll show up as the
text we'll know who created it and whether or not we deleted it uh because
we can have like soft deleting where it doesn't actually delete RN but the users
can't see it uh and we know that whenever a post got added to our post
collection there's going to be a unique ID that is created for that document
that document that represents that post so if we are going to have a page for an
individual post would be a really easy URL to use so that we could see that
post like what's something that we could do right

00:45
yeah we could just use the ID so we could have a URL that's kind of just
like our our local host that we're normally used
to seeing we could have a route called post and then part of the URL could just
be the ID of that post we could literally just take the ID and put it
into the URL so this post right is tied to this document in our
collection and the cool thing is if we know how to get that document out of our
collection we can use all the data to build what we're seeing on the specific
post page we know that we're on post 501 so we're grabbing this specific post
from our collection and that means we can use this data to plug in what we see
this image URL gets plugged into our what this image URL is going to get

00:46
plugged into our what into our ejs it's in the game right so
we get plugged into our ejs so we're going to use that image URL
right we're going to use that image URL and we're going to use it so we can
actually load the image that will be seen uh in our page and so we're going
to take that you're going to plug it into our ejs our ejs for those that
might be new around here is our templating language that we're using to
spit out HTML so we use that image URL to build the image that we see in our
EGS we can take the number of likes and plug that into the post right we can
take the number we can take who created it and plug that into the post uh and we
can do we can take anything like caption
and plug that into the post right so all we're doing all we're doing
all we're doing is taking the information from this document in our collection

00:47
typing it into our ejs that we can have a specific page for each of our posts
cool that makes sense questions about that makes sense cool and so tonight we're
going to see the code that enables us to do that right
uh we're gonna see how we can we'll see how we can just we'll see how we can
Define the URL we'll show you how to we're gonna set up the routing so that
this actually works because it's going to come down to our API listening for
that route right so we're going to have part of our router right is listening
for a post URL and when something when we have that router that can hear the
post URL it's going to call a specific controller that helps us set up this

00:48
post page right we'll see malter today yep cool
uh the code is already shared on Discord so we already have the URLs already
there if you need it exclamation point Discord if you're not on Discord and
needed it cool all right so that's gonna be this
post page the feed page is probably a little easier why is the feed page easier
we can just do a normal find that we've been doing for the past couple of weeks
right just go find all the posts right go find all the posts in our collection
and uh we can just load them all into the feed eventually we'll do things like

00:49
lazy loading and all that fun stuff right um yeah pull all the ones except the
ones that are deleted exactly right uh we can put all those posts into the feed
and it's just easier um we could also maybe do something too
like we had talked about on Tuesday but we didn't do it maybe we add like a
created app property that whenever we create a post
right whenever we create a post uh we also store the time
right maybe we store the time that that post was mated because once we have the
time we can like now have a really easy way to show like most recent posts right
right you could show you could you could you could show the most recent 10 15
whatever it may be post cool and then for the profile page the profile page
um it's gonna be kind of the same thing as the post right where we could have a

00:50
our just our normal URL we could have a profile route and then for individual
profiles we could use this number and what's that number
where's that number coming from so we could have individual profiles where's
that number coming from yeah it's coming from the IDS for our
users remember our users are just documents in our users collection so
every single time a user is created it's going to have a unique ID and well the
cool thing is we can just use those unique IDs as our individual Pages for
each user and if we wanted to we could just have
uh like their username show up based off
of what was stored in the document right and we could show all their most recent
posts and then we could do one other really cool thing right right

00:51
we do maybe one other really cool thing which is
I want to be able to see everyone's profiles
but if it's my profile I want to be able to like upload stuff
right if it's my profile I want to be able to upload stuff how could I tell
if I was on the logged in users profile like how do I know that I'm not just on
some random person's profile how could I know that I was on my own profile that
was logged in as yeah all right remember we have that
remember each request when the user is logged in has this rec.user property
right because now they're logged in right they're authenticated we have the
session running since the session is running we have this lovely rec.user

00:52
and there's an ID property on it so if the logged in user by using this
Rec user ID if that logged in user's ID matches the ID of the profile page that
we are on and we know what about that page we know what about that page
it's mine exactly exactly giant it's their page it's the logged in users page
right it's the logged in users page if we're looking at that request and we see
that that Rec dot user dot ID of the logged in user
matches the ID of the page that we're on we know that it's we're on the the
logged in users page and we can show that upload
what would stop the upload what what what's controlling whether or not this
upload shows up what is it it's just a what simple week three

00:53
JavaScript conditional exactly just the conditional in our ejs
just a conditional in our ejs and that conditional is going to check and say hey
if if this is true right like if they're equal then we can show it boom cool
now the last thing is these comments and these comments will save and we'll
talk about when we come back from our break all right we're at the top of the
hour folks if you're new around these parts we like to be healthy we like to
to get up if you're able move around hydrate stretch uh look at something
that's not your screen and we'll be back in five minutes five minutes folks

00:54
all right so you also I'm gonna run some some ads so other folks don't have to

00:55

00:56

00:57

00:58

00:59

01:00
sit through them ignoring foreign thank you foreign
folks come on back come on back just just just Farm I wonder how people
we can get to just hang out on the stream just like
just Bob it's just Bob 24 7 Bob stream it's just oh it's just it's just a 20
there you go I love that Chris it's a Pomodoro just Bob with Pomodoro going
[Laughter] that'll be good any chance we can get a Banky voice chat
uh yeah we talked to blah I mean we can make that happen I think that'd be a

01:01
cool idea bobadoro it's babadoro time alrighty folks let's get into this
all right oh he on X Games mode I love that meme
all right so we talked about our post page we talked about the feed we talked
about the profile and I think the last thing you talk about is the comments
all right welcome Joshua uh let's talk about this right here
how many how many trips how many how many how many collections
are we using to make this happen how many trips are we making here to the DB
to the database how many how many trips are we making here what are we getting
here yeah is we're gonna use like three collections here right let's let's think

01:02
about this so for the comment to show up we need a few things uh the first
request is we load this page right we load this page
and to load this page we would need to go and get that post
from the database right we would use all that information to
start building out what we see here but to get the username
we need to go somewhere else right to get the username we saw that the
created by right we can see who it was created by but it's just the ID of that
user so to get the username we would need to go
and get the ID of 100 which is the username of Bob and then once we have
the username we can plug that or sorry the comments a little different

01:03
sorry we can rewind rewind we get the comment right
the comment enables us to build out this entire post but when we get to the
comments it's a little bit different right it's a little different
it's a little different uh we have to to load this comment we have to go and get
the comment from our database right and so which comment would this be
right here so we went to our post right we went to our post to load this
entire page with all the information but to load this area
right to load this area we need to go to our comments collection and grab

01:04
this specific comment and this specific comment has the text we need of cool
stuff and it has who made it right but the who
made it is not a username it's the ID of one of our users so we would need
another request to go and find the ID match to grab the username of stera to
plug that in so we're using all three of our collections here right
we go and load this specific post page of 501 we have to go and find that post
we grab all the data we need to start rendering out this post but when we get
to the comments well we have to go get that comment from the comments collection
we're able to grab that initial data which is like cool stuff but if we want

01:05
to show the username of the person we have to go and get their username by
querying the user's collection to find the 102
match which gives us the username of Sarah which we can plug in boom
this feels like an entire person's job yeah this is this is a back-end web
development let's go why are we only showing the poster no we
would load all the comments is there's just there's limitations on what I can
draw uh but technically we'd have all the comments like going down the page
right yeah cool so let's go ahead and figure out
how we're going to load all this and walk through right walk through how all

01:06
this would come together so now we're going to look at the actual code that is
supporting right supporting how all these different
views are going to eventually be rendered right so let's start off with um
let's start off with the feed I think the feed might be a little bit easier to
start off with and so I'm going to demo the application and then we'll look at
the feed first code wise so let me go ahead and make sure my code is running
yeah code is running so here's our binary upload Boom app uh
I think we're going to keep the name and I think most folks were hyped on it
quick pound got vetoed pretty hard if we feel like we need to change we can do a

01:07
pulled to figure out a new name all right so I'm gonna log in I created
a testy account so testy at testy.com the password is testy testy
cool and so here is my uh so the favicon is Bob's face
uh and so that's why that popped up on my LastPass you can see the favicon up
here in the tab uh the favicon is Bob cool so I have testy at testy.com and
we can see that since I am the logged in user how can you tell that I'm on my
profile who's testy no testy's not the test is
not adding to the lore here it's just my test account or is it or is it

01:08
uh I can see that I can see that my username and email is there we're big
brain in on that one yes I can see that my username and email is there for sure
uh but also what we just talked about right the the form is there if I was on
somebody else's profile uh I wouldn't see the upload form right
test is Victor's urologist [Laughter] I'm cool with that all right so we know
that we're on our profile let's take a look at the feed oh yeah
so here's the feed uh this used to be open to all 100 devs I had to shut that
down because some of y'all are Reckless we have a small contingent of
degenerates which is okay you need that for a good Community but uh so we have
we have a bunch of different posts so on
this feed right on this feed you can see
all the different posts right we have uh we have our

01:09
our lovely fairy from Neopets uh we have an event Loop we have a poem we have a
Rick Roll we got Pawn Stars which is like my that's what I fall asleep too if
you ever want to know what I fall asleep to it's Pawn Stars
um we have a frog we have a lizard on a dog these are all different users that
have made different posts on our 100 deaf social network uh and so we we just
have a lot of stuff that could upload it and so we can see all the different
posts that are in our feed uh if we click on a specific post right
we're just on slash feed if we click on a specific post uh we can go to that
specific post uh we can like it we can see the caption
and at any point in time we can return back to our profile or return back to
the feed so I go back to my profile and here we go

01:10
and um maybe go back to the feed one more time let's go ahead and just click a
different a different image here um uh we can see it we can like it if we
want we can return to the feed like it's just a it's just a pretty cool app we
can turn back to our profile um let's try uploading uh a post
so let's go ahead and try like making a new post just to make sure that it works
just so we can see it working [Music] make sure I have some photos I do all
right so let's go ahead and do we'll start off we'll start off with
Mira for obvious reasons uh and so Neopets is life
and we're going to go ahead and choose a file
we're going to go ahead Neopets fairies here we're going to go ahead and grab
Mira I'm just gonna go ahead and open that up
and then we're going to go ahead and submit it

01:11
right and so now since we're still on our profile
right since we're still on our profile we can still see our first post which is
uh mirror let's go ahead and do [Music] um Thea as well because we're just here
all right let's go ahead and upload a Thea here here we go submit there we go
uh let's not ask questions about why I have these ready to go just
just to keep it what it is just okay they know what they're doing come on
hold on Olsen come on now I mean life right they know it come on

01:12
they know what they're doing you ready there we go
they know what they they know what they're doing
don't don't put that on me they know what they're doing right so we can click
on our individual posts we can see Neopets is life
uh we can we can even like our own post which is pretty interesting uh if we
wanted to we could delete our post uh we'll notice here that this trash can is
here right we can see the trash can is here
right some of you are getting activated right now that's kind of cool
um but you can see this this trash can right here right and you can you can you
can click it because why why is this trash can showing up let's go back to
the feed let's click on like this event Loop why is there no trash can here
Rusty a thank you for the hydration cheers to you

01:13
because it's not mine right it's not my post so we know that there is some some
good stuff happening here where we can only delete the post right
we can we can only delete the post if we made it right so that that's a good
feature that we have in here uh we have the ability to like any posts we can
only delete our posts we have the ability to go to our profile and on our
profile it shows just the post that we made
right just the post that we made uh if we go to the feed
it's everyone's posts and we can kind of like click on everyone's posts
uh I don't have usernames we don't have usernames yet
um but I do like the or do we hold on let's go back let's go back to feed

01:14
oh we do boom there we go oh no that's just the the title we put
in so we don't have usernames we we should eventually put usernames in here
so we can see who made the post and be able to go to their specific profiles
that might be something hint hint for y'all to build later so let's just let's
just do it one more time I'm gonna log out I'm gonna log out we're gonna walk
through the whole thing so I'm going to log in testy oh sorry test yet testy.com
testy hey today testy testy fail there we go testy testy
all right so we logged in we log in third try when we log in we can see

01:15
uh we can see the post that I made we had the ability to add a post
yeah exactly See Clearly it was just to show that our flash notifications are
working right the the the login flash notifications are working I inputed the
wrong password it worked um we're able to go to our feed see all the
posts of the logged in users and we're able to click on individual
posts we're able to click the like button and if it's our post we'll have a
trash can and if we return to our profile there it is so we have we have a
pretty solid social network right right like it we have the ability to
make posts we have the ability to like see a feed
of all the posts we have the ability to see each individual post

01:16
and we can like them and we can Trash our own and maybe for homework you're
going to add comments and usernames on the post right we're coming from Myspace
exactly uh and so let's just take a look at this real
quick I'm going to click on this post of Mira here and
what did you notice about the URL what could you tell me by looking at this URL
yeah we know that this is working because this ID right this ID
is probably tied to this specific well it is tied to the specific post
and so when I am clicking from the feed or I'm clicking for my profile without
even looking at the code without even looking at the

01:17
ejs what do you know is in the ejs for each one of these posts
what's in the ejs without even looking at it yet
yeah it and specifically it's an anchor tag
right an anchor tag where we plugged in right
an anchor tag where you plugged in that ID so if we inspect
we can actually see it that the actual anchor tag right the actual anchor tag
is a link to the post route with the individual posts ID
so any single time that we created a like a post that's showing up in the

01:18
profile like in our ejs right in our ejs we have a for Loop right
and that for Loop is building out these lies right that have an anchor tag and
those anchor tags are links to the post route with the ID of that post and so
that way I can just click on it and get taken to that specific post based on
that post ID right so when I'm actually rendering out this page
when I'm rendering out this page and I'm grabbing my post I'm grabbing all the
data about that post right I'm grabbing all the data about
that post and what I'm doing is building
out an anchor tag right that has an href that has the value of post

01:19
slash whatever that ID is all right so that way when I click on that anchor tag
it takes me to that individual post page right and so a lot of this is going to
be all right how do we build out these Pages how do
we get the data that we need how do we plug that data right
how do we plug that data uh into the ejs so that we can make stuff that's
clickable going to the right places and all that wonderful fun stuff so we've
kind of walked through the application we've kind of seen it working
um let's go to the feed page and talk through kind of code wise what's just
happened here I went to the feed page localhost 2121 21

01:20
feed what route did I just trigger what route did I send a request to
slash feed right right we went to we went to locals 2121 slash feed so the
route we went to is Slash speed now let's go ahead and take a look at our code
um on our server.js file we have two kind of routes
we have our main routes and we have our post routes uh with Slash post
with Slash Post in our route that we just went to
no so let's go ahead and take a look at Main routes then so main routes is going
to require us to go into our routes folder and find the main routes so if we

01:21
go into our routes folder and we find the main routes we can see all right we
made what type of request to the feed route
what type of request do we we make to the to the to the feed route
thank you chat it was a get request so in our main routes we have something set
up that's listening for a get request right a get request
on the feed route so we're good so far and what do we check here
what are we checking for here on this next this next little bit here
we already we know that we have a a route to set up to here the get request
on the feed route we're making sure that they're logged in
right so if folks are not logged in they can't see the feed right we could make
it I could just remove insure off here and then anyone could be able to view
the feed they wouldn't have to log in so I think like if you go onto some social

01:22
media sites you can like scroll through without being logged in that's how we're
doing it right here but we decided I decided to say you know what they can
only see the feed if they're logged in so we check to see if we're logged in
uh same and sure off that we used with the the previous application right and
so uh I don't know if you ever like clicked like an Instagram link when
you're on your browser and you're not logged in they like make you go to sign
up that's exactly what we're doing here we're saying sign up you gotta join The
Social Network 100 Dev social network if you want to see uh all the wonderful
posts of Neopets fairies we can't be giving that away for free um
and so we we ensured that we were logged in
right and here's the controller we're going to use we're going to use the post
controller and we're going to use the get feed method post controller get feed

01:23
method so let's look at our posts controller beautiful here's our get feed
method beautiful and so our get feed method is pretty straightforward we're
going to find all of our posts right we're going to find all of our
posts and we're going to sort them whoop we're going to sort them
by the time they were created at in descending order
all right we're going to find them and sort them in descending order so that
way we can right we can see our posts in a specific order going down the page
this is all Mongoose yep it's all mongoose it's all mongoose right now

01:24
what is post it's our model right it's our model so
even if you didn't have access to my database and you wanted to see like what
data is going to be in our database right like how do I sorry how do I know
there's a created at property right if you you don't have access to my database
right now because I've I've IP locked it but
how would you know there's a credit app we can look at the schema on the model
let's take a look here's our post model we can see that every single post that's
going to be created right will have a title property an image string
a cloudinary ID which we'll get to in a little bit
a caption a number of likes a user like the person that actually made it

01:25
we're gonna have a created at right a creator that
and we can see all of this just from the model
it's just from the schema that's here on
the model and so we can see that there's
this created at and we can even see what type it is
right we can even see what type it is what type is it
don't get caught up on this stuff yet we'll get to it because it's a date type
so we know that we are storing the created at by its date right we're
storing that along with each post that we make every single post is going to
have a title an image a cloudinary idea caption a number of likes a user and a
created app and we can see that the created that's
going to be a date and what do we know about like dates that we saw with with
JavaScript and by extension now in this environment node what do we know about

01:26
our dates they're not just like it's not just like us it has has a lot to it
yeah it's long it has also has like it also has like the time right it's not
just the date it's also yeah it's a it's a UTC object hey there we go it's the
date and the time right so it gives you a bunch of all this other all this other
stuff right uh so that's how we can use it to figure out like when things were
posted right cool so we're looking at our post controller and we just said hey
go to our database go to the Post collection right that's
all stored right here go to our database because we're using Mongoose go to our
database go to the Post collection find all the posts it's the same thing

01:27
it's the same thing as going here and grabbing all the posts
right grabbing all the posts but we want the posts right when we get the
posts back when we get the post back we want them
in descending order based on the created at date right so that's how we can keep
them in order you can you can also do ascending if you want it to but we're
going to go descending so we can go down the the timeline
we get all of that data right we get all of that data all of the posts
all of the posts right all of the posts right that are sorted and we're storing
it in the variable posts and what are we going to do with that variable post
that's holding all of our posts what are we going to do with it remember this is
automatically giving us an array of posts right it's automatically giving us an

01:28
array of posts what are we going to do with it
yeah we're gonna pass it to the ejs right we're going to pass it to the ejs
right and when we pass it to the ejs what are we going to name our post
inside the ejs what are we gonna what are we gonna what are we going to
what are we going to call our post inside of our ejs I'm gonna call it close
we're gonna call it posts all right we need to change we're not we're not doing
anything wild today we're going to call it post so let's look at our ejs
we're going to look at our feed ejs file feed ejs let's take a look at it

01:29
feed ejs oh got fancy here look at this ejs folks we're using partials now
my header and my footer is going to be the same on most of my pages so I made a
partial right you can see I have this partials
folder that has my header and footer right so I don't have to constantly put
all this stuff like I don't have to constantly put all this stuff
right I don't have to put that at the top of every single file
right I don't have to link to my CSS I don't have to link to font awesome
I don't have to uh do all of that stuff that would have to be at the top
I don't have the link to bootstrap if you're noticing a lot of my stuff just
looks nice I haven't really done any style yet I haven't done any style it's
just bootstrap that I'm using so I put all of that inside a header and then I
can just use that partial on any page I don't have to constantly be retyping
yeah automatically automatically comes in I'm doing the same thing for my

01:30
footer if we look at the footer ejs I'm just putting my bootstrap I needed some
some javascripty stuff from bootstrap so
that's just so I don't have to do it for every single page right
right out to bring back every single page and so on my feed ejs you're going
to see that I'm just including my header that I already wrote and my footer that
I already wrote and um I don't have to constantly redo it pretty nifty all right
so inside the feed ejs we have our for Loop that's looping through each post
right lip looping through each post and we're building An Li for each post
and each of these allies right each of these lies is going to be an anchor tag
to a specific post route and we're just plugging in the ID of each post

01:31
right so when I went to my feed EGS let's step back for a second I went to
this page right I went to this page I tried to load this page right
I tried to go to this page right to go to this page I had to make a request
I made a git request I had the route right I had the route set up that heard
that get request on the feed route I checked to make sure I was logged in I
went to my post controller and I went to the get feed method
the get feed method said hey go to the Post collection
get all the posts in descending order went to my post collection right we can
look at it let's go ahead and look at it it's a VPN

01:32
don't worry uh went to my post collection let's browse the collections oh no
what's in my post collection right go to my post collections I
grabbed all these posts right grabbed all these posts right grabbed
all these posts all right grabbed all these posts you
can see my most recent post Neopets is life Neopets is life
Neopets live uh you can see the event Loop photo you can see the Vulgar
Display of Power that was Pawn Stars right we can see all the posts I grabbed
all those posts right grabbed all those posts
and once I had all those posts I passed all those objects right all those

01:33
objects into my ejs and then all I did is I looped through
each one of them and I grabbed the stuff
that I needed right right now I need the ID of each post right to get that first
ferry to show up right I need their ID so I grabbed the ID yoink I grab the ID
right grab the ID and I'm plugging that into my href
right logging it into my href then I want to grab the image to show the
image and the feed well I need to grab the image property from that post so I
grabbed the ID for the first bit and then I grabbed this image property and

01:34
this image property is actually the link to where my image is stored
right so where my link to my images actually stored so I grab that link to
where my images actually stored and I plug that in as the source of the image
so now I have an Li that has a link right that has a link to an individual page
and I have the image that was based on the URL that was stored in my collection
right now the interesting thing is that you'll
notice where am I actually storing my images

01:35
yeah I'm using a third-party service called cloudinary to store my images
and so when I upload an image right when I upload an image I send the image to
cloudinary and what does cloudinary send back yeah they give me a URL
they give me a URL right so I send an image to cloudinary
cloudinary stores it on their server and they give me a URL for that image so
that's what I'm storing in my database I'm not storing the image in my database
I'm storing the URL right I'm storing the URL that they have given me
right that they have given me so that I can eventually render
the images that we see in the feed I just really hope people are like
joining us live and this is all they see um right so this is this is the image

01:36
that came back from cloudinary that I plugged into my ejs to render the feed
and so if we look at these lies right if we just if we just inspect element
we're going to see that each of these is an Li that has an anchor tag that
includes the ID that came from the post document in the post collection and has
that URL that's from cloudinary because that's the information I have for that
post in my post collection I look at the next one it's the same thing it's an Li
with the ID of the post and the image from cloudinary next one same thing
right same thing we're just going all the way down looking at each of these cool

01:37
uh is cloudinary free do I ever recommend something that is not free ever
nah not what we do around here every single thing you need to become a
software engineer you can do for free right so
cloudnary is free you can create a free account I'm using a free account right
now and uh you don't even need a credit card that's the other big thing I really
try for I try really hard to find all free resources they don't even need a
credit card for um because I want everyone to be able to do this
yeah so it's free yep cool all right so that's our feeders rendering

01:38
um but interestingly interestingly enough I can click on this
image right I can click on this image right and when I click on this image
what am I using like let's not let's not overthink this clicking means that it's
a what history clicking means that this is if I'm going
to click on this what is it it's either a Smurf or it's something
else right it's a Smurf or one other thing it's an anchor tag and we know
that this is an anchor tag we just saw like look look at the inspector
we know it's an anchor tag and when I click on it it's going to take me
to slash post and then the ID of the post that came from my document in the
post collection look look we see this it's an anchor tag that's going to take

01:39
me to slash post and then the actual ID right
where the heck did Slash posts come from
where did that come from how's that part of the anchor tag
I hard coded it in the ejs take a look I know it's gonna be a route it's
eventually going to be around the application but people are like how do
you create the URL boom I hard coded it into the URL
right look I hard coded slash post and then I plug in the ID
right I could have called this zaboomafoo and then when people clicked
on it would have taken them to slash zaboomafoo and then the ID but I want

01:40
I want my posts right I want my post right I want my post to be
slash post like I went that's the route I want it to be right I want that to be
my route so I hard code it and then I plug in the ID
man this is the easiest engagement I've ever gotten in my life it's too easy
we've been doing this for too long this is this has just been uh like oh my gosh
thank you there have been people that haven't been posted in three months that
I've been posting right now thank you I appreciate it I I appreciate the
engagement uh I I'm really happy that you're back thank you for being here
it's so good to see you I'm glad you're here the fairy picks did it all right

01:41
so we have allies that are creating each of the LI that
has an actual link to a post let's let's go ahead and click that post
let's go ahead and click it boom you can see that we got taken two
slash post and then the ID so what type of request did I just make
I just made a get request right a get request on what route
a get request on what route all right all right we're starting to
think through it a little bit here slash post and then what else was part of the
route the ID right the idea is also part of it
so let's go and take a look at that that just walk through it

01:42
start the server.js was it a post route yes we're on slash post it was a post
route all right so we're going to need post routes let's go back up to the top
post routes requires us to go to the routes folder and find the post route so
here we go here are the post routes in the routes folder
now here's where it's a little tricky on slash post
was it line eight line ten line 12 or line 14 that we triggered was it slash
post slash create post was it slash post slash leg post was it
slash post slash delete post or was it just slash
yeah line eight right and so the cool thing here
is this little bit of code right here the colon ID

01:43
this is like setting up a parameter that's going to enable us to grab the
value out of the URL right it's setting up yeah a query
parameter it's a query program it's going to enable us to grab the value out
of the URL because I have this colon ID I'm going to be able to grab that value
now I'm on a specific post page I'm ensuring that I'm also what
you can't see nothing in this app without what
logging in beautiful so I know that I I just went to slash post I'm going to be
able to Joint that ID out of the URL I'm still logged in I'm going to go to the
Post controller and I'm going to use the get post method all right

01:44
post controller get post method beautiful beautiful method here all right post
find by ID what do you think this method's going to do
right what do you think this method's going to do just just by what do you
think this method does we know that post is talking to our database is going to
the post collection what do you think this method's gonna do
yeah it's going to find a specific document based on its ID now the magic here
is that since I did this colon ID I can grab whatever comes there in the URL
right I can grab that value and I can grab that value by doing Rec dot
params.id let me let me actually copy the URL so it's a little easier to see
right I'm just gonna this is gonna it's gonna

01:45
look weird but I'm just gonna paste it here right so that's the URL we went to
we know that we were on the post route so anything that came here was ID
right anything that was passed there was ID
so what it was here was this number so what I'm able to do is I am able to say
all right here's my query parameters called ID as part of this request
this request came through I am able to look at this part of the URL
right I'm able to grab it and I'm able to plop it right here so now

01:46
I am going to go to my post collection in my database I'm
going to find a specific post that has this ID
right my specific document that has this i d
right because on this line let's grab this describe this line of code here too
just so we can see it I like having it on one line in one spot so we can see it
right the route said hey you're on slash
post so it says though we had this right here right let's let's replace it
yoink it's as though we said this right that's exactly the same thing we're
saying there we're saying all right you went to this URL you made a get request
to this URL beautiful you made a get request to this URL
anything that comes after the slash we're gonna call ID right

01:47
we're going to call ID we could have called it rainbow
right but if I called it rainbow what do I have to change
I have to change this to Rainbow this is the variable
this is the variable that I am using to be able to pull the value out of the URL
it's a query parameter just like we did apis and we had query parameters plugged
into right just like when we were using apis and we had query parameters in the
URL the way we are getting the query parameters out of this URL is by saying

01:48
rec.params and whatever the heck we put after this colon right so if I call this
something else I could call it SpongeBob well then this has to be called
SpongeBob too right it's how I am grabbing it is how I am grabbing
right it is how I am grabbing this part of the Euro that's it that's it
so let's tidy it back up we gotta change this back from SpongeBob to ID

01:49
we went to localhost 2121 slash post slash with the ID right with an ID
right with an ID and so I'm going to be able to grab this value out
right I'm able to grab this value out right when we look at the route
I am going to be able to grab this value whatever is in the URL I'm going to be
able to grab it I'm going to call it i d so when I go to my post controller
and I ask for rec param's ID I'm saying hey the request that just came in
localhost 2121 slash post slash that long string give me that long string
give me that value that was part of the URL and once I have it
right once I have it I can go to my posts collection I can find a post that

01:50
has that ID we look we go to our post collection all right boom here's the ID
it matches so I'm going to grab this post once I have just that post
right once I have just that post I can send it to my post ejs
right I can send it to my post ejs right we can see it's called post here
I'm not changing it up inside the ejs I'm going to call it post and I'm also
passing something else to my ejs called user where the heck is user coming from
how do I have like this other this rec.user what the heck is that yeah
the current session since we are currently logged in we currently have a
session running we can always whenever any request comes through there's also

01:51
that user property on that request that comes through
right and as it comes through right as it comes through I can oink it so I was
able to find the individual post I was able to find the logged in user
and I passed all of that into my ejs let's look at our post ejs go to our views
post ejs you can see I'm using my partial for my header I'm using my
partial for my footer and I'm just going to start plugging in everything I need
to plug in right I'm gonna start plugging in
everything I need to plug in to build out this post page I can plug in
I can plug in the image that's from the post I can plug in the title from the
post uh I'm doing something funky here for the the delete buttons and the likes
but we'll get to that later right we also have the the delete like the trash

01:52
can here right so I'm just able to grab all of that stuff and plug it into my
ejs right so foreign to get to this page I was on the feed I clicked the link
that made a get request on the post route that also included this
string which is the ID for this specific post that we're looking at
I can use that information to go to my database and just get this specifics
post information I go and get all this post information I plug it into my ejs

01:53
and that's how I can see this specific post um questions and we'll take a break
Magic with Rec user related to cookies yeah since we have that logged in session
every request that comes through has a user property I'll show it to you
um I'll show it to you when we come back from break I'll actually console log
everything so we can see the different parts of the requests that are coming
through any reason using for Loop in the ejis versus for each engagement
uh we in past examples we've used for each yeah
connecting the dots I hope so that's the point tonight is to start trying
connecting some dots Thai love hey thank you for the gifted

01:54
Subs I appreciate that thank you for being here cool all I see is Instagram
all right how many hours should we devote to our 100 hours project uh 100 hours
uh seeking truth said I don't see any server-side JS in the sample code are
you doing all of this with anchor links and routes no event listeners I am we're
going to talk about method override uh later today let me come back oh the MVP
uh the MVP uh that's up to you probably a hundred dollars for your MVP
to be real and then you put the finishing touches on it

01:55
all right folks let's go ahead and take a break uh we will be back in five
minutes thank you everybody for being here uh if you're new around these parts
like take a break at the top of every hour make sure you're hydrating make
sure you get up walk around hydrate look at something that's not your screen and

01:56
we'll be back in five foreign [Music] your call thank you for the two extra

01:57

01:58
minutes some minutes on the timer folks foreign [Music] foreign [Music] foreign

01:59

02:00

02:01

02:02

02:03

02:04
[Music] foreign [Music] foreign [Music] foreign [Music] thank you
all right folks welcome back welcome back so uh let's go ahead and console log
kind of these requests and see them coming in so let's go back to this page here
go to our controller and let's just console log uh the request
we can see like the massive requests and then we'll console log
uh or console log Rec .params and then we'll console.log um
rec.user just so we can see everything there we go so our server restart it

02:05
uh let's refresh uh we're logged in still so that refresh
should have worked how how am I still logged in
What specifically about the session remember our sessions are also stored
right so like if I go away server goes away our sessions aren't stored on the
server they're not stored on the client they're necessary they're stored in the
database right so the the the sessions like the server can restart
um are we can we can leave the tab and come back and our sessions can still be
open because we're we're using that session storage we have that session
collection or mongodb so that we can um keep the sessions going no matter
what happens let's see if that restart was enough to console log everything

02:06
all right here we go so we can see above here is the massive
request right like all that crap every single request that we make look I just
console logged the request we gotta keep this in mind every request that we are
making is sending all of this wild data with every single request right and then
we asked for a few specific things we asked for we can actually see a part of
the request that the user object is here right we can see that part of the
request um we can even see like the route that
they're on and stuff like that so all that's part of the request all this wild
stuff comes along with the request you can see that like I was using Chrome and
all these other things that came along with the request and then I asked for
two very specific things I asked for the request Dot params and
we can see that that's just an object right the query parameters are just an

02:07
object so where the heck did this ID property come from
where did this ID property come from it came from me calling it
colon ID here in the routes let's change this it's going to break
some stuff but we should still be able to see the request let's change this to
Rainbow unicorn right we call this rainbow unicorn
I think that this will break because we're not going to actually call that in
our thing but let's let's see if the request still goes through all right
all right so the request did go through but you can see that when I changed it
to rainbow unicorn the property was called rainbow unicorn but it still

02:08
grabbed that value from the URL right we're just this right here is just
whatever we're gonna call it right and since and since we know inside
of our URL this is an ID right since we know that this is an ID
it makes sense that we call our query parameter ID but we can call it whatever
the heck we want right it's just that it probably makes sense to call it ID it's
just a label yeah it's just it's just a it's a parameter like don't don't throw
out all the hard work you did understanding functions right don't
throw out all the hard work you did
learning apis it's the same [&nbsp;__&nbsp;] same stuff right
it's just it's just a it's just a variable right it's just a variable it's
just holding a value and that specific value is just coming from the URL
right so we could lay we could leave it rainbow unicorn

02:09
um what would we have to change here for it to work
we could leave it rainbow unicorn what do we have to change what line and what
do we have to change for this to work yeah we got a change on line 26 we gotta
change this from ID to Rainbow unicorn right now rainbow unicorn knows to grab
it knows to grab the value out of the URL
and now knows to grab this value out of the URL when we see this URL we can grab
this 631a all the way to 874 this value will now be known as rainbow unicorn in
our application right it'll be known as rainbow unicorn that's saved

02:10
let's save this and let's go ahead and do our refresh and now it works
right now it works right we changed it to rainbow unicorn rainbow unicorn is
going to grab this value which we know is the ID out of the URL
we're doing it here right in the routes we're setting it up hey here's my query
parameter my query parameter is called rainbow unicorn
all right it's called rainbow unicorn when you use rainbow unicorn when you do
request.params.rainbow unicorn you're grabbing that part of the URL
and so that's what we're doing here we're saying hey look at the request
that came through look at the query parameters that came in go back to our
API class right grab the query parameters that are coming along with
that request when we look at the request right here's here's the request
right here's the request anything after that request is our query parameter so

02:11
we're saying grab that query parameter the the the variable name that we gave
the create parameters rainbow unicorn it works it's grabbing that unique ID like
that string of numbers and letters and we're plugging that string of numbers
and letters in here because we know when we go to our post collection
right when we go to our post collection in our database and we do find by ID we
can use that string the 631-874 to find this this
specific post so we can grab all the stuff right grab all the stuff
and pass it to our ejs cool let's go back I don't like calling it
rainbow unicorn I do since we know that it's an idea like calling an ID

02:12
um but I think what I want people to realize is that it's just the name we
gave it it's just the variable name that we gave we can call it whatever we want
we call it rainbow unicorn and it still works
so the idea is a query power just like we did with our apis exactly it's the
same thing it's the exact same thing with our when when we were doing
um when we were doing apis right when we were doing apis
when we were doing apis we'd have something like this like um who was one
of them we used a lot dog CP dog CEO dog CEO
dot API slat and this person is like this would be like I don't know uh breed

02:13
and then we put something in here like I don't know German Shepherd right
that's what we did when we were using apis right we had the question mark and
anything else after the question mark was our query parameter right so in this
case the query parameter equaled German Shepherd we're doing the exact same
thing here instead of it being dog CEO CEO we're doing localhost 2121
query parameter ID and then it winds up being this long Ash string all right
winds up being that long string that's it so don't you don't have to
change up your pattern it's still a query parameter in fact we can even set
it up to do like the question mark and stuff in here if we wanted to uh it's
just a it's just an easier way of doing it

02:14
right same thing query parameter of ID we could have called this rainbow unicorn
right that could have been the the query parameter same thing here then we would
have to change this to the rainbow unicorn same thing it just enables us to
grab this value out of the URL cool now that we have that value out of the URL
right once we have that value out of the URL we can use it we can use that value
which is the we know it's the ID to go to our post collection and find a post
with that specific ID and when we find it we can pass all that post information

02:15
to our post ejs so that we can get the HTML that shows up to our users here
uh it's query parameter our choice yeah it is your choice um
there's slightly different things you need to do to grab it but you can use
the question marks if you wanted to I think this just looks cleaner cool
all right so that was getting an individual post
I'm going to remove these console logs so we don't have to like go through a
sea of stuff every time so that was we saw the feed we saw the feed

02:16
we saw the post let's look at the profile let's look at the profile
let's look at the profile all right so we went to slash profile
what type of request did I just make a get request nice made it get request
uh what am I am I on a post route amount of post drought nah
let's start our server.js all right it's not a post route so it is one of
the main routes so let's go to our main routes main routes requires us to go to
the routes folder and find the main route here we go here's our main route

02:17
it was a get request on slash profile uh we are ensuring that we are logged in
right we're ensuring that we are logged in and we're going to use the post
controller right post controller and the get profile method so let's go
to our post controller let's go to the get profile method
here's the get profile method what I'm going to do
is I am going to go to my post collection and I am going to find a document
I am going to find a document right going to find a document that has a user

02:18
property that has a user property of what a user property of what
right now I'm looking at the logged in user right I'm going to look at the ID
of the logged in user so what do we know about this profile page
if we go to slash profile there's something very specific this profile
only works for what this profile only works for who
the the logged in user right we haven't set up a a part of the controller that
could load any user's profile eventually
if we were to extend this and we will if we were to extend this our individual
posts would have like their username and we could like click that username to go
to their profile that's adding a little bit more complexity but right now we can

02:19
see just by looking at the code we're going to find just the post
right because we're going to our post collection we're going to find all the
posts from the logged in user because if we go
back and we look at our post collection all right we look at our post collection
we can see that each post right each post has a user with a specific ID
and this specific ID is the ID of the user who made the post so what I can do
is I can say hey who's logged in and since they are logged in I can check
through all the posts and just grab the posts of the logged in user right so we
can see 5da 5da 5da this post here is 739 so that's not a post of the logged
in user when we do the find of the logged in user right we will only find

02:20
their posts right right you'll find only their posts
and so how am I getting the logged in user remember with every single request
that is being sent if the user is logged
in you are also sending this part of the
request the logged in user's info we can console log us console log it
rec.user let's save it um oh I didn't console log it let's console log it
let's save it and now when I load the profile page we should get that lovely
console log all right let's go back take a look all right
we can see that we console logged rec.user and a part of rec.user

02:21
right part of rec.user is the user's ID 5da
the username of testy their email and their hashed password
all right so whenever we do that rec.user we can grab any of these
properties and so I'm able to grab the ID property off of that rec.user
so that's how I'm able to find just their post we can see 5da if we go and
look in our database all right user has the idea 5da
user has the idea 5da user has the ID 739 so that's not it these the rest of
these are not our user it's just these three

02:22
right it's just it's just these three and so we're able to use that logged in
user to just show right to just show the post of the logged in user save this
now there's quite a few other things that we have to do here
right there's a few other things we have
to do here so far we haven't seen liking
we haven't done the trash cans yet but I
want to pause here for a second see some questions come through and then we'll
we'll look at this last bit and then we'll we'll end uh for the evening
uh how come ID has an underscore in front of it uh that's it's generated by
mongodb on their end we can get into things like private public variables and
all that fun stuff we kind of talked about doing our objects lecture the cool
thing is that when you are doing the rec.user you can just do ID and and if

02:23
you forget about it it's totally fine uh we haven't filtered out deleted post
yet that's not something we've implemented
uh the lean is just helping me to format
something specifically so that it's it's
like how the objects that come back from Mongoose are structured let's not Mill
people's minds a little bit more than we need to tonight we'll get into it next
week but for now it just helps you structure the data in a specific way
uh someone it doesn't matter you can use it interchangeably that's the power of

02:24
uh mongoose oh yeah EGS can be pretty powerful you can
do some pretty specific stuff um with EGS
do you have two different color eyes yes I have two different color eyes
heterochromia can we go over ejs again boy can we this Sunday
we will have a full review this Sunday come on
on through for our super review Sunday Sunday Sunday don't delay by today

02:25
Sunday super review uh can we render the profile EGS and see
what the objects post and yeah let's take a look at that so um we we handed
off all the posts for the logged in user
to the profile ejs but we haven't looked at the profile each so let's go to our
our views here running through the six all right and so
in the inside of the profile EGS you can see
um we're using the the logged in users username we're using the logged in users
email and that's how we're able to show the username and the email
we have a form for them to upload uh their images which we we haven't even
gotten to uploading images yet that's a whole that's a whole beast in of itself

02:26
so we have this whole form to upload images right
and then we have our for loop again that's looping through
and it's building the Li's for each post remember we went to the database we
found all the posts that were for that logged in user and now we're building
the Lis for each of those posts with the uh post ID that comes from the randomly
generated uh document and then we have the actual URL that's coming from
cloudinary and we're plugging that in to build the profile oh all right
uh we got like 25 minutes left I feel like we've melted enough brains for this

02:27
evening uh what we'll do is we're gonna stop here
uh what I need you to do this weekend especially if you are not coming to the
super review because we'll go into some of this during the Super review uh what
I need you to do is I need to look at this code
I need you to step through it just like we did tonight
right I need you to uh set up your EnV file which means you're going to need a
cloudinary account right you're gonna need a cloudinary account
you're going to need your [&nbsp;__&nbsp;] Atlas
account you're going to need all these kind of like the the things that are
going to go in the EnV file you can read
the readme right you can read the readme
uh to to see the things that you need to put in that EnV file step through it
I'll post the image as well of our our layout that we did and on the Whiteboard
see if you can step through the big thing here

02:28
is understanding how we're using the IDS to connect all the pieces
if you can get to the point where you understand oh we're just using IDs to
render posts we're just using IDs to render profiles we're like we're just
using the IDS to build out the app if you can get there you're good that's
that's all you need to be right now right there's a lot of other things here
that we start to go deeper into that we have to explain so on Tuesday we'll go
deeper into this we'll look at something else if we had a chance to look through
um we'll revisit some of the things that folks need to revisit and then we're
gonna actually build this from scratch so we'll be able to see everything come
together as well um at probably the next office hours and so
lots of chances to go through it uh we still have a lot of stuff to cover that
we haven't covered yet we haven't hit multi yet we haven't hit some of the big
pieces of this but I don't need you to do that yet I almost don't want you to

02:29
do that yet I want you just to focus on the things that we just covered can you
see the IDS can you see how the app is being connected and coming together
because if you can do that you're in a really really good spot
like I said this is this is kind of it folks you understand how this works and
comes together you can build whatever app you want to build
that's it and so spend time going through this code spend time looking at
the uh Pro like the actual whiteboard that we've done remember Tuesday your
Hit List is done use The Hit List magic right
use The Hit List magic finish up that hit list you want to be part of
hunttober I need that hit list done right uh you can do this I know this is
a lot especially if you um haven't had a chance to to wrestle with
this code yet had a chance to wrestle with the homework yet uh please make

02:30
sure you spend some time going through it please make sure you get in the rest
of the stuff that you need to get done for homework this weekend and use
Discord jump on Discord jump into uh voice channels ask questions there's a
lot of little stuff that we haven't we didn't really get a chance to talk about
maybe you need to learn maybe you need to understand a little bit more about
how the query parameters work ask right ask you lean on the community we're
Community taught let's go ahead and set up a raid turned on a raid in a minute
I mean I'm talking about specific people um let's go ahead get these sweet sweet
Channel points 50 sweet sweet Channel points

02:31
let's go over to CM Griffin we haven't been over there in a minute all right
be kind to yourself this weekend please go through this code work through it on
your own work through it on Discord together uh make sure you're taking time
to digest it this Sunday super review super excited to go through the full
back end the full back end tomorrow sorry on Sunday fullback and everything
you need to know to be a back-end developer coming through on Sunday tell
your friends bring a friend and uh come ready to put in some work and then next
week we're gonna keep digging into this like I said this is kind of it once we
understand this you can build whatever you want you can build your MVP for your

02:32
100 hours project and then we'll add a little bit of sprinkling react We'll add
a little bit data structures algorithms and we start the hunt baby
let's go all right everybody have a wonderful rest of your day let's raid let's
go hey yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah
hey good morning good afternoon good evening no matter where you're coming
from hope you all are doing well welcome back
let's go welcome back everybody hope you all are doing well the the dreadic
computer restart folks the dreaded computer restart I I Rue the day I had
to restart my computer everything gets messed up hope you all are doing well it
took me a second to get the music right but we can't start out the music

02:33
you can have a stream without the music let's go welcome back everybody hope you
all are doing well hope you all are here yeah all right uh we had a good week
last week we got into our social networking app or our social media app
that we're going to get into more today uh on Sunday we had a six hour super
review and we're still not done still not done
all right still not done uh we're gonna bring it back next Sunday and uh finish
up looking through off again looking through
um looking through even this app that we're gonna finish up this week so if
you need to run it back we'll be back as well uh so I actually think the Sunday
super review is actually really helpful for some of the stuff we're tackling
today like the method override that's tripping up a lot of folks now the stuff
we talked about on Sunday will revisit again today just to help those Concepts

02:34
sink in a uh there is uh two odd things uh today
uh one no newsletter uh so no newsletter
went out today and our tweet is a little bit different but we're going to talk
about that in a second so as always I like to give both a few seconds to get
here a few seconds to get here oh boy oh boy uh there is somebody in here
before chat that did gifted Subs I don't I don't
know who it was but whoever it was thank you I I didn't catch who did the the
donated Subs the gifted Subs um but thank you for doing that before
stream and uh we just had somebody else too and thank
you MJ builds for the gifted Subs I appreciate that hope you all are doing
well thanks for being here all right as always like to start off
with a few questions a few questions as folks get in here if you got

02:35
questions I possibly got some ants what's a gift that's a gift to someone
somebody can gift Subs to other people in the channel and so
um that's what MJ bills just did obviously move some stuff around here
sorry one second beautiful drink today is water in the now Gene hey what's up
[Music] um will you please see your dogs uh oh
maybe we'll see we'll see how the day goes
alrighty uh will we go over cloudinary this class we will so we're going to
talk about cloudinary we're going to walk through kind of like all the bits

02:36
of how we actually get to like uploading files uh we'll walk through cloudinary
I'll show you like the basics of it and then um it'll be on you to make sure you
have that account and that you create your own so you can run your own version
of this code uh how many recruiters for companies
should we reach out to probably just one and I like to reach out to Engineers
more than recruiters yeah I spoke to a recruiter a six-month
contract position she'll be considering contracts bought for our first jobs yes
you are considering everything everything for your first engineering
opportunity and once you have offer letters then you decide
so a lot of folks like to stop themselves from getting offers that they
probably could have gotten uh not realizing that you don't have to accept
an offer right you can always you can always just say no and you can use those
offers to leverage the authors that you really do care about and so go for

02:37
everything if it moves we go for it yeah now do I prefer contract positions
for the first roll no um just because uh when you're when you
go in as a contract role there might be slightly different onboarding it might
be slightly different expectations and you might not be seen as a fully fledged
member of the team so that can be a little bit different a little bit odd
um but I've had plenty of students do it and have success I just know that
um it's it's been a little tricky for some folks to manage some extra level of
expectations yeah how long can you think over an offer so
we're going to talk a lot about this as we get into the hunt but one of my
favorite things to tell someone is hey thank you so much for this offer this
offer is something that I'm I'm really excited about this is a company I can

02:38
really see myself growing at over the next five years like this is where I
want to be this however is a decision that impacts
myself my family my loved ones for the next five years because I I want to be
here for the Long Haul so I would love I could take a week to discuss with my
family and my loved ones and get back to you but it's really we really really
want you to know that I'm super excited this is honestly one of my dream
companies to work for and so I just want to let you know how excited I am about
the offer right if any monster says if any monster
says no you can't take a week to discuss with your loved ones and family because
you want to be here for the Long Haul and that it actually does impact your
life for the next five years they can go kick rocks right and so a lot of the a
lot of the negotiation and what to do when you get offers comes down to one

02:39
primary thing just calming any fears that they might have that you are not
interested in the opportunity right that's it and so as long as you explain that
you're excited about the offer that it's
a company that you want to that you want to work at it's a company that you want
to be at and you like really ham that part of it up you can you can take a big
chunk of time most of the time uh Hey Leon I can only afford remote
positions the income where I live is not great what should I do with a hit list
should I only include remote positions or local positions as well that that's
on you I think if you live in an area does not have a large developer presence
and there are no Metro areas like in your kind of uh time zone like your time
zone band then you would go for remote positions and the tricky thing with

02:40
remote positions is just because a position says the remote doesn't mean
that they actually hire folks outside of the US or Canada so for a lot of folks
they're looking for remote positions that also hire globally which you can
find tons of lists of these types of companies but it's something that does
make The Hit List process a little bit harder uh how do you negotiate when your
contracts up and you're offered a full-time role uh you're you negotiate
just like you negotiate any other thing right and the beautiful thing is if you
know that you have a six month Cliff right where after six months
right uh after six months you're gonna you're gonna move on to full time around
three months into that opportunity you best be interviewing at other companies

02:41
right if you know that you have a if you have a like a a a a a like a six month
period where you are going to then be evaluated and then get a full-time offer
you never want to go into that period with the only offer coming from the
company that you are currently at right that could be the difference between
just getting like a 5k bump and getting like the true salary that you deserve
right also if you are entertaining multiple offers one of the things that
you are going to discuss before you accept the offer is great I understand
that it's a six month whatever what is the salary after the conversion the full
time I often tell my students to not take opportunities where they can't
commit to what that conversion looks like after full
right so if they're if they're saying oh it's just three months and then you'll
convert the full time or it's six months and then you'll convert the full time
great in writing what does that conversion look like what is my

02:42
guaranteed salary because I I'm I need to I need to make my decision based on
real dollars not future dollars right and so I always have that in writing
always have that um always have always have them um
have that somewhere as part of your offer package yeah
and if they can't tell you what that conversion would look like
will they ever ask to see other offers from other employers uh so I've been
interviewing with lots of companies just when I say this is the company that I
really want to work at unfortunately each company has a different process
I've signed some ndas with some companies uh and I I would want to
respect their process just as like I'm respecting your process so unfortunately
I'm not really sure if I can legally share what those other offers are and I
also wouldn't want to disrespect their process just as much as I wouldn't want

02:43
to disrespect your process right that's the easy way around that and so
the uh all the stuff that we're talking about right now like all these little
Clips All These Little Things boom I got you as we get into the hunt we're gonna
have tons of classes where we talk through all this stuff
why do recruiters ask what companies you
have interviewed at because they want to
know what their competition is they want to they want to get you for as cheap as
possible as quickly as possible and so if they know what companies you're
interviewing at they know what the offers look like at those companies so
guess what their offer is going to sneakily come in just below
uh oh this is a difficult one what if I got an offer but I'm still in the

02:44
process of interviewing at other companies uh you want to make sure that
you get like that week plus time to evaluate your offer with your friends
and families and then you need to let all the other companies that you're
interviewing with know that you have another offer on the table but their
company is the company that you really want to work at and can they get your
offer ASAP uh you will be surprised the number of times when you tell a company
that you have another offer but this is where I really want to work you get your
offer to me quicker uh that almost always magically find a way to get you
the offer quicker and so they'll often ask like how long do you have to make a
decision you'll say like three days and then magically they'll come with an
offer quicker so if you know that you have a good offer that you're really
considering and you are deep in the process of other companies you just let

02:45
them know and hopefully they get the offer in quicker cool
alrighty folks thank you for being here thank you for the the quick questions in
the beginning we always let the like folks I'll get some questions is as they
roll in so let's keep moving uh today uh we're gonna be talking
through a little bit 100 Dev stuff stuff that's due uh then we're gonna be
talking through uh our social network seeing the last key bits of stuff that
we need for this binary upload boom code to work and then your homework is to
continue with your interview prep and to try and add comments to the code I know
some folks have already tried to start adding comments uh but that is your
homework after tonight's class we're probably going to end a little early
last class we did the uh the post and the gets uh tonight we're going to see
the puts and the deletes we're gonna see some things like method override we're
going to talk through some like quirks and features that people have been

02:46
asking about um what's what's one of the ones that folks
wanted to ask people ask about like lean some folks were asking about how one
that kept coming up that I was noticing was
how are collection names getting defined
stuff like that so little things uh that
keep kind of popping up as we go through this code base we're gonna take some
time to talk through we're gonna see some quirks of mongoose and have some
fun with it so that's kind of the goal for it today Space City welcome laughs
alrighty we did our questions checking in so we're at the point and program
where we're getting closer to the hunt it probably makes sense for us to slow
down on the checking in for class right but I still use Twitter as like your
attendance so especially for folks that want to contribute to October for folks

02:47
that eventually want verification down the line I still need to see that you're
here uh so instead of doing like class check-ins uh we're just gonna help
promote people that are doing good work in our field right so
um yesterday I tweeted um retweeted something from free code Camp
right now they are really focusing on localization one of the biggest problems
when people reach out to me and they say
hey Leon I want to learn how to code one of the things that comes up is that
English is not their native language and
it'd be very difficult for them to learn like really complicated Concepts not in
their native language so free code Camp is like tripling down like double double
doing down on localization and they have their full curriculum and like so many
different languages and they're really investing in like their Core Curriculum
um being in like so many other languages right and so I think that's like super
dope I think it's one of the most wonderful things I've ever heard

02:48
um they even mentioned that like most of their staff is going towards that
localization effort so that's gonna be a huge Boon to folks that want to learn
how to code and improve their material conditions in life but don't speak
English right like that that's that's huge that's a that's a huge impact act
and so uh you're checking in tonight is to like and retweet that tweet uh it
actually add it to the the check-in hold on one second I don't
know if I updated check-in uh no I did not oops rip one second
that's the old one there we go boom there you go so if you do
exclamation point check-in starting now it'll give you the actual like the 201
link is the old one um so yeah we're going to be doing that
going forward uh I'll probably still do a few 100 Dev stuff here and there but
uh for the most part it's just going to be helping us like highlight folks that

02:49
are doing good work in the space and that way your feed starts to fill out
with some stuff that isn't just class time uh so that will look good when
folks are just kind of glancing over your your Twitter but I still get the
beauty of being able to see that you checked in so that's kind of the the
idea going forward uh also I did not send out a newsletter today a little
little uh little little snap through there so no newsletter today uh and
checking in will be a little bit different uh Thursday's newsletters though
Thursday his new letter definitely want to check out Thursday's newsletter
that's all I'm gonna say so I'm gonna say I'm gonna say
all right so please go ahead please still make sure you're checking in even
though it's not strictly 100 devs um yeah you're gonna like and retweet my
tweet the one I just linked like and retweet my tweet uh and then
that way I can still see that you're checking in if you already liked it like
you were already on Twitter and saw it and liked it yesterday that that still

02:50
counts um but that's what we're gonna be doing
going forward yeah uh newsletter did not
go out today uh there's a lot of stuff I have to do to go live and I very rarely
miss it I missed the newsletter today I was really
um I was reviewing my like like my my notes for lecture and I just looked up
and I was like oh crap and it was already past the the six o'clock so it
didn't go out um but normally you can rely on the
newsletter going out so a little experiment let's see yeah it's not
automated hell no this is all manual folks the Discord messages are manual
the newsletter's manual the tweets are manual everything's like there's a lot
but yeah don't don't worry don't worry uh it'll be back tomorrow on Thursday
yeah cool I'm not a robot hey you wouldn't know
about these moves you know I'm saying oh oh okay I see you

02:51
all right submitting your work uh today your Hit List is due
right your Hit List is due uh make sure that you have done two things uh make
sure that you've actually filled out your Hit List don't submit like
incomplete stuff or blank stuff it doesn't help you it just makes it way
more work for me uh so please make sure that you've actually filled out your Hit
List we're looking for 40 40 open rolls uh eventually it'll be 60 but 40 and
then make sure if you're using the sheet that you've turned on The View
permissions for all right you turned on The View permissions
for all like not just me not just my email but for everyone right so when we
go through and we check The Hit List um we need to be able to see that you've
that you've actually filled it out and we won't be able to see it unless you've
turned the permissions on for everyone yeah cool

02:52
and so I'll leave this open for the rest of the day
all right we'll leave this open for the rest of the day
um I'll give everybody like the full like I know like I'll give everybody to
like Thursday to submit it because I know folks are in different time zones
and a lot of you right as class is over it's like three o'clock in the morning
so we'll leave it open until Thursday Thursday I need it in by Thursday so if
you're like oh I haven't done it yet use some of the magic
use some of the magic that we used last week right use some of the magic that we
uh we'd used last week where you go ahead and just plop this into Google uh
change remote to your location right find open roles that were posted since
August you can tweak some of this stuff you can you can add some things remove
some stuff but this will help you find more roles uh so you can add them to

02:53
your hit list uh kohai same link same link
try to my location and got zero results then you gotta expand to your metro area
the next largest metro area and then that doesn't work then you expand to any
Metro areas like in your time zone vertical that doesn't work you expand to
remote and then once we get into the actual hunt there will be plenty of other
secrets that I have for you to find companies
um a lot of local job boards a lot of ways to use sites like Angeles and other
stuff like that but for now you go fishing cool

02:54
uh so we had our we started our back end super review on Sunday uh the VOD is
currently on Twitch it'll move on to YouTube um we're we're one video behind on
YouTube because remember I'm like combining two classes into one video so
the local off videos will go up on YouTube soon hopefully like tomorrow
morning uh if not Thursday morning and then the back end review will go up
after that and then on Sunday we're gonna continue it
um there is a slight chance that it might not be Sunday but I'll be able to
let you know by Thursday confirmed so we're planning on this Sunday 1 p.m
eastern time again to finish up what we started on Sunday
um slight slight chance that it's not Sunday we might have to do Monday but
I'll let you all know by Thursday foreign all right next big deadline two weeks

02:55
from now client signature approved PR right so if you have not gotten a paid
client volunteered for a Grassroots organization or gotten a PR request from
an actual open source project so not like uh like a beginner's friendly type
thing but like a legitimate open source project
um those are three things that count so you have until the 27th to get that
if you do not have that that's your disqualification all right also that date
also that date uh we have our beautiful MVP due for
your 100 hours project so your whole your whole 100 hours project is not to
be done but it should be a beautiful MVP and MVP
is a minimum viable project it is the I mean a viable product it is the simplest

02:56
thing that proves your idea works right so you're going to be probably
building off the binary upload boom code you're going to be extending it to do
what your app needs and you're going to make it look great
all right that's the MVP all right so know that on the September 27th not only
do you have the things that were due a very long time ago do but you also have
your MVP due all right let's go ahead and jump into actually
let me see if there's any questions here for a second and then we're going to
jump into our social network plan we're going to see the deleting we're going to
see the updating we're going to see some
of the other quirks and then we're going to come back on
on Thursday and on Thursday we'll walk through adding comments I'm

02:57
going to want you to work on the comments at least on your own
I gotta get some more just taking my time with this one one second
I got a hoverboard I got to stretch real quick hold on I'll be right back
all right okay all right cool we're back all right all right all righty so we
yeah here's that see you got something off of that one I think it's the first
stretch you all seen I wasn't only fans freebie foreign
somebody had their hand over the screen they didn't get the only fans freebie

02:58
you missed it I'm sorry you got that alrighty this guy recorded it
all right let's talk through our social media app is it a social media app or is
it a social networking site I don't know I think social networking site just
means I'm old right I think that's what that means
all right we're gonna call this social media app now to be hip with the kids
alrighty so we built out the basics of our app we have uh kind of all of our
key pieces working so far uh we have users we have posts we have the ability
to have an individual post we have the ability to have a feed and we have a

02:59
profile where we can see the individual posts uh for the logged in user and we
have on that profile page a form that we can use right that we can use to submit
our posts so let's see this real quick let's just
kind of log in walk through each of these three areas let's quickly review
users posts let's take our top dollar break and we come back we'll add in the
deleting and the updating so let's go ahead and take a look at our
app don't log out real quick I'll only go ahead and log in here cool
all right let's go ahead and do let's go ahead and do uh testy
at testy.com testy testy cool so we're logged in
uh once we're logged in we can see that we're on our profile page and when we're

03:00
on our profile page we are only seeing our logged in photos right so we're only
seeing the post that we made because we are currently logged in
all right we can click on any individual post
we could see the number of likes on that
post we had the ability to actually like
these individual posts and we also right now have the ability to click a trash
can why do we have this trash can again like why are we able to see this trash
can yeah because it's it's since it's since
it's our post like it's where the post of the logged in user we see the trash
can but if we were not logged in uh we would not see if we weren't the person
that made this post uh we would not see the trash can let's actually go to the

03:01
feed and look at some posts made by other users
so here's a post on the event Loop made by a different user and you'll notice
that since this was made by a different user there is no trash can for me to
click cool we also saw the feed here which we can
see all of the posts made by all of the users and each post we can click on
and see the individual post where there'll be the the title
the caption the number of likes the ability to actually like the post and we
can always go back to the feed or we can go back to the profile
cool so let's talk through at a high level how all this is working together so

03:02
when I when I go to the feed let's start with the feed
what type of request am I making by going to slash feed as part of the URL
chat what type of request am I making yeah
I am making a get request and there is some code that is running on my server
that hears that get request uh what do we call that code that can hear the
requests and knows well so there's actually a little bit a little bit different
there's certain code that can hear the request but then like the whole idea of
being able to hear their Quest know what to do how to respond that's our API
exactly so our API and we've written that has everything that's going to
happen when it hears the request and knows what to do we've actually split up
our backend code using a a certain Paradigm called what

03:03
what's the Paradigm we're using on the back end
yeah we're using MVC on the back end model view controller
and actually the first thing that that request goes in through is our router
our router hands off that requests the appropriate controller the controller
then decides all right do I need to go and talk to the model to get some data
can I just go directly to the Views to generate some HTML controllers in the
middle and eventually can handle sending the response back to the client so when
we go to the feed we make a get request we know that get request is heard by the
router the router uses the appropriate controller the appropriate controller
then goes and gets every single post right right now we have set up for every
single Post in our collection all right and we take all these posts
all of these documents from the post collection and we start plugging them

03:04
into our what what do we plug all this data into so we can render our feed
what is all this post data actually go into
yeah it goes into our EJ yes it's in the game right all this data goes into our
ejs our EGS is a just a template right it's just a template and there's a
loop that's running that's taking each one of these documents right each one of
these documents and it's plugging these documents into our ejs the ejs renders
and spits out some HTML in the HTML is what's sent back to the client is what
enables us to see the feed beautiful all right same kind of things happening
here since our Loop is building out the feed it's also making each one of these
posts in the feed clickable just with like an anchor tag and when we click

03:05
that anchor tag it takes us to the individual post that we just clicked on
now how are we how are we determining what to show to
the user for the individual post it's kind of an open-ended question but what
are we using what's the key bit of information that we need to show a
specific post we need the ID of that post when each
document is created in one of our collections they have a unique ID all
right and so what we're able to do is use these IDs as part of our URL
and since we are using this ID as part of our URL we can use that information
as part of our query to our mongodb database we can say all right give me
just the data relating to 501 that's the only data I want and then

03:06
I'm going to use that data that came back from the database and be able to
pull off the uh the the the the caption be able to pull off the number of likes
we're going to pull off all the data from that post because I'm just using
the i d beautiful all right now we haven't done individual profiles
for individual users yet but let's use our imagination and we want each person
to have their own profile what could we use yet again to have unique profiles
for each of our users we could use their IDs again right
because our users are just documents in a user's collection and since they all
have their own IDs we could just use those IDs and when we try and load that
route let's say profile slash 100 it's going to go and just get the data where

03:07
the ID matches 100 so then we'd be able to plop in Bob
right and we could just grab their post now since I'm loading this profile page
just like um right just like uh I'm using that ID 100
I had the query to get my users collection
but right now what I've also had to done what other type of data do I need to
show Bob's profile yeah we would also need to go to our
post collection we need to check through each post and just find the posts that
are tied to Bob so this one has created by 100 which is Bob's ID so this post
would match and we check all right create it by 100 so this post would

03:08
match and then we have down here created by 103 so that would not match so it
would only be these two posts that would
then come into our ejs to render out the two posts in that user's profile
poor so this is something that we did not add but maybe it could be a fun
extension for your homework uh and we can go over building out kind of
individual profile pages and maybe even adding like usernames on Thursday I want
to be able to add like usernames I want to be able to add comments together once
you had a little bit more time to play with the code base now
what we are currently doing is just loading the profile for the logged in user
all right right now we are just using the logged in user so when I load slash
profile how do I know who the logged in user is I just want the locals 21 2121

03:09
and I went to slash profile how did I get the profile information for the
logged in user yeah since we have an active session
every single request has a what yeah a rec.user every single request now has a
rec.user property that we can we can yoink right we saw it last class where we
we're able to console log the request that request was a massive a massive
amount of information right max amount of information and there was a specific
user object right and there's also like the body
depending on what type of requests we're making and so we're able to pull off
that rec.user to get the current logged in users ID we can use that ID to then
just get only that user's information so if Bob was the logged in user we'd be

03:10
able to go and get just Bob's information to load into the profile we
could probably even um since we're well we'll say that we get Bob's
information and then we can query our post yet again just to find rec.user uh
their posts so the first two would be bobs cool alrighty
uh what if there are hundreds of thousands of posts would that make
Profile loading really slow depends uh we're gonna see ways to optimize

03:11
these over time uh and in fact one of the things I like to to to talk about is
there is an application called leeches which is a free chess server
um and it's it's where I play chess it's one of my favorite places I'm pretty
much on there every single day they have billions billions with a B of games uh
stored in a mongodb database and so they're able to pull out
individual games so mongodb does scale right I'm going to be scales really well
and when we get actually like once we get past the hunt we're going to talk
more about how to optimize these applications right
we're going to talk about how to optimize
um a lot of the things that we're doing because right now we're really in
learning mode uh you could build applications no problem that do this
mongodb is really at for a lot of the stuff that we're doing but as we get
deeper into it we're gonna make some changes we're gonna make some other

03:12
considerations that would make our apps more performant but we like to build
first right we're always going to build first we're always going to achieve our
100 hours project and then once we're through the hunt and we have a little
bit more time to go deeper uh with certain things we'll we'll all share
videos that compare like mongodb to like say something like postgres we'll talk
through ways to [Music] um we'll talk through ways to to optimize
your your application so that they're more performant but in the beginning
it's just not something to worry about you can build right now build MVPs and
also when you're on the job they're all going to have different ways that they
kind of do this and so you're gonna have
to pick up their strategies for doing it yeah refactoring is for closers always
mm-hmm yeah don't optimize until you need to

03:13
exactly what's once you have once you have thousands of users and they're
starting to complain a little bit then you can worry about optimizing but for
now we're still like in learning mode this is the first more complex app that
folks will be using can you explain rec.user and sessions
again uh so the wonderful thing of using passport off the shelf and these
sessions off the shelf is that once you log in
we now have a session that no matter where you go throughout the application
you can still be recognized as being logged in and we showed the way this
works is by putting a little cookie on your computer that enables us to see
that you are that user and so there's more complexity behind that but
that's at a very base level now once you're logged in every request you make

03:14
is sending your logged in user information along with that request and
so the beautiful thing is we can just yoink that information
to know who you are as the logged in user to then go query to just find your
post to load your profile things like that
uh where does the ID come from it is a unique ID that is made right it is a
unique ID that is made uh when the user document is created and when we come
back from break I'm actually going to show you something pretty neat about
mongoose that literally blew my mind the first time that I saw it a lot of folks
were asking all right so let's look at these models how are the models actually
mapping to the collections uh so we're going to see that in a few seconds as

03:15
well mm-hmm can you explain the colon ID ah the
dreadic colon ID so this is something that um I know is confusing the first
time you see it but we solve this as one of the URLs right the the the colon ID
and so what we're noticing is if we go to our application and I click on this
post how do I know which post this is I could see it's on the screen right now
which post is this chat yeah the URL shows it this is post 631
a7f39a3a56acfc 7da 286a right that you I hope you didn't expect

03:16
that's the type that whole thing I did uh this is the specific post
and what post right what post like if we had to go and find this in our mongodb
we're gonna find this post based off of the what in mongodb this right here
matches our what it matches the idea if we look in our manga DB
and we look at our posts there's gonna be a post
uh uh here we go there's gonna be a post that has that matching ID 631-286a
631-286a so we can see in our database is this document with that ID and so
what we are doing is we are throwing the IDS in our URL

03:17
right so we can identify unique IDs I if I wanted to right because
I'm a boss and I do boss things right like I can go ahead and if I wanted to I
can do Mira I can say Neopets is life and I could choose a file
uh where am I where's my fairies folders there we go there we go beautiful
fairies folder uh and I could upload this again I could submit
all right now I got two posts that are identical
all right I have two posts that are identical they have the same
the same title the same caption the same photo the same number
of likes how do I differentiate between these two documents Let me refresh my
mongodb here how do I differentiate between the two

03:18
yeah they have different IDs right if we look
this ID would be two six two eight six a h
and then this one is three six six three two seven five seven three so the
content is the same I forget I actually capitalized this right content is the
same title is the same caption is the same but the IDS are different so since
IDs are the unique bits of information here we're plugging these IDs into the
URL that's just how our app is going to work right or I was going to work by
using these unique IDs to request specific kinds of content right now
the beautiful thing is we can yoink that ID out of the URL

03:19
right but to join that ID out of the URL we need to tell it what we want and so
when we look at our code and we go to our post routes we're going to say all
right you just went to a specific route I want everything that came after that
forward slash right I went everything that came after
that fourth let's just go back and look at our URL we are on slash post and then
I want everything that came after that slash that you that that forward slash
that's what I'm saying here you have that forward slash I want everything
that comes after it everything that comes after it is what id is now going
to hold and last class we showed that we could call this rainbow we could show
this unicorn we could call this whatever the heck we want it right and now when
we go to our controllers right when we go to this post controller get post

03:20
we can use that ID and that idea is going to be stored with
rec.params.id this rec.params.id enables us to grab the values that come after
this colon that are in our route so if we call this rainbow
right then we would have to come to our post controller and call this rainbow
and by doing that we can now grab that value out of the URL and use it in our
applications that we can query our database and get that exact post and
only that post I'm not going to leave this as rainbow though
and we call it ID because it is an ID where did the IDS come from somebody
said they are automatically created when you create a document in mongodb the ID

03:21
is automatically created where does the where does the
uh logged in user ID come from well logged in users are just users and each
user has an ID that's it how does it get the ID though if it's
called rainbow it has nothing to do with the name right it has to do
with what is placed here it's it's it's it's just a name calling
we're calling it ID for convenience because that's what we care about but
whatever was after this your whatever came after the forward slash we are
going to grab if we look we can see in our URL that this comes after the slash

03:22
we're already on the post route so we're just gonna grab everything that comes
after here right we're gonna grab everything that comes after here and
we're just giving it a variable name that's it we're just giving this a
variable name we're giving this the variable name right now of dog
right then in our post controller we can use that variable name of dog and the
cool thing is we know that dog is holding that unique string and that
unique string just so happens to be a what
that unique string just so happens to be a what
it just so happens to be an ID so the cool thing is we can say find by ID
knowing that with stored in dog right now is this ID that came from the URL

03:23
right but if this was I don't know funky chicken
right if that's what was in the URL right if that was what was in the URL
and our route grabbed it dog is now holding what dog is now holding what
dog is now holding funky chicken so when we go to our post controller and we do
rec.params.dog rec.params.dog turns into what
turns into Funky Chicken exactly turns into funky whoops funky chicken

03:24
turns in the Funky Chicken right now is there anything in my mongodb
collection with the idea funky chicken no absolutely not there is nothing with
the idea of funky chicken so were we able to grab funky chicken from the URL
yes were we able to use it inside of our controller yes but would it do anything
absolutely not it is just the coincidence that well not coincidence
how he designed it that we are putting the IDS here in the URL so when we go
back now if we were to keep this as dog and we were to come back and do this
now since since dog is holding the actual idea let me just grab it right yoink

03:25
right now this URL right dog is going to grab that that that value right we can
say like boom it was just that value right it's grabbing that
is grabbing that value so wherever I see
rec.primes.dog is going to wind up being this value
and wind up being this value instead so we're just going to have this render
out to that value right so now is there when we do find by ID in
our post collection is there a post that has this ID
yeah so now we're able to find that specific post when we go to our
collection we'll be able to find that post and so this is all just really this

03:26
rec.params.dog and this this colon dog is really just fancy what it's just it's
just like a function right it's just like a function this is just like a
parameter in your function it's the same stuff you're familiar with just don't
don't let that kind of scare you this is just a parameter that's why we're
calling it rec.params it's just a parameter just like you could pass any
value into a function right like if you had a function
right if you had a function right and we'll call it function X you
can pass whatever you want into this function right we'll just call this dog
right you could pass whatever you want into this function right

03:27
this is the most important stuff most
important I'm just [&nbsp;__&nbsp;] with them I shouldn't be doing this
boom most important gonna get real active like hold on let's go big history

03:28
all right let's let's let's take our break let's take our break
all right let's take our break when we come back from our break we'll explain
that this was indeed not the most important stuff
and we'll stop I should have done that I apologize I'll apologize when I come
back all right let's go ahead and put the timer on
all right I think everyone's back I was just I was just messing I was just
messing around I wasn't saying anything
I was just [&nbsp;__&nbsp;] with y'all I wasn't
saying anything uh I did everybody was just miming I was there's I was not

03:29
literally was not saying any words uh what we were talking about was um
nothing I literally was not saying a damn thing while you're watching us uh
so yeah uh we'll we're gonna take our break when we come back from uh the
break uh we will continue with this idea of these IDs are just a function that's
it only thing I wanted to say is that it
was a function and you're just passing a
parameter and you're passing a value and actually let's do this one because
people are back that's what we do before we take our break it's just a function
right it's just a function and the parameter in this case is this right here
and why do we need right why do we need this

03:30
parameter here what is this parameter do for us exactly zero so it's not
it's not it's not hard coded this means I can use
this route for every single what I can use this route for every single what
this works for every single post every single post this works for because
the value is not hard coded just like a function can take in a value right just
like a function can take in a value and the function can do what it needs to
do with that function this is the exact same thing this is a parameter right
just like our functions have parameters this is a parameter and it was us to
pass in any value right it just so happens the values that we are passing

03:31
in just so happen to be IDs they could be the string Funky Chicken every time
that wouldn't really do much for us but since we're passing in IDs into this
parameter the beautiful thing is that we get to use that parameter so no matter
what post it is our code still works this get post will work with every
single post right because it's just a parameter just like our functions had
parameters this is a parameter we can pass in anything we want it just so
happens that we're passing in ID like the actual IDs and we're able to use
that value to then go and find a unique post cool
uh and then I that's actually a really good question the last thing before we
take our break is Leah I don't see Post in that route well it's because we've

03:32
already told it here we've already said hey if the route includes post use these
routes so any route that you see inside this routes folder is really just this
all right but to save us some some typing and have
a little bit more flexibility we've already said that we're on that we're
already on that path so we don't need to say it again yeah cool
all right and for folks that just came back from break I wasn't saying anything
I was just messing with y'all uh there was no uh there was I was just miming I
wasn't actually really even saying anything all right let's go ahead and put oh
somebody did two minute timer welcome big hamster glad you found us
all right uh Quinn Sab hey thank you for the extra two minutes seven minutes on
the clock folks seven minutes we come back we're looking at the deleting we're
looking at the updating we're looking at Malta we're looking at cloud and area
we're looking at method override we're looking at how Mongoose does really

03:33
funky things to our collection names let's go
Dion seven gonna run I think the ads already ran so we don't have to run them
again we're gonna put some tunes for you
to listen to all right if you're able to please get up move around hydrate kiss

03:34

03:35
some babies and I'll see you all at seven foreign [Music] foreign [Music]

03:36

03:37

03:38

03:39

03:40
foreign [Music] foreign all right folks come on back come on back [Music]
I don't know if you noticed but I was drawn without my iPad
not sure if with the iPad versus without the iPad really does anything different

03:41
but now I have my iPad come on back folks come on back alrighty there we go
all right let's go ahead and change this back to ID and change this back to ID
that way we don't forget it and I'm not chasing down dog routes uh as we go
through it all right uh Tony actually saw your question
before we left for break uh are we going from zero to one thousand yes we are uh
the back end goes pretty quickly and the problem with the back end is that it is
all very much so incremental right we went from core modules from core modules
to very simple back end with node from very
simple back end to something with off to

03:42
something with MVC or something with MVC
to something with uh with with even more structure to it and so the the the the
back end what's tricky about it is if you miss any portion of that or you
don't do certain of those assignments or you just get stuck on one of those
things the The Dominoes start to fall a little bit and so my advice for folks
that are feeling a little uncomfortable with the back end is to to slow down a
little bit take your time go back through the homework right seeing the
the Traverse media video that I assigned for homework is really important uh go
back and look at maybe like mine Wolf's old streams where they break down some
of this Concepts in more in depth and then go on Discord and ask folks to walk
through the code base with you but each of these pieces were fundamental a lot
of folks skipped the MVC lecture that's a mistake really solidifying the the the

03:43
MVC architecture means that you actually understand what's going on in this code
base right and so make sure that you're going through the homework and not just
moving on because we're moving on move on when you actually understand these
things right and seek out the resources that we share seek out the stream teams
for folks that are walking through this in more detail and at any point when you
get stuck and you don't think think things things are clicking get on
Discord and ask somebody to walk you through it right but the whole point of
this is that it's it's consecutive dominoes and if you missed the Domino
it's not going to fall in in the right order so definitely make sure you take
the time to go back through that mm-hmm alrighty so far we've done the
the getting and the posting but we also had liking and deleting and
those are some interesting things that were a little bit different than what we

03:44
might have seen in the past and it actually is perfect timing because the
reason why this works is actually something we covered during the
the uh super review on Sunday so the let's look at what this can do
and let's go back to our profile from our profile when we go to a post
let's just say mirror again uh we can actually let's do something that's not
mirror because we have two mirrors now let's let's do Thea here
and let's go ahead and just like Athea all right so three two one I clicked and
you can see that the number of likes is now one I can refresh the page the
number of likes is one if we go to our database and we find
um in the post collection we find atheist post

03:45
you can see that the likes is now one right the likes are down one and so the
beauty here is that we have the ability from this click to update the likes on
that specific post by one now something we've done in the past uh for
these clicks has required what what have we done in the past that enabled us to
click on something to update the likes by one
yeah we've used event listeners let's actually take a look at this um actually
let's take where can I see my client-side JavaScript
let's ask this question since since an event listener is client-side Javascript
where can I see my client-side JavaScript yep it'll be in the main JS in our

03:46
public folder so let's go to our our public folder and let's go to our main.js
our public folder me uh wait a minute public folder CSS images avocon Style
so where's the client-side JavaScript what
there's no client-side JavaScript right there's no client-side JavaScript here
uh so how are we doing these clicks now let's answer a very specific question
when I am making this likes right when when I am when I am when I am clicking

03:47
this lovely heart and I am updating the likes from zero to one what type of
request am I sending to the server what type of request am I trying to make
to the server to change the number of likes on this post from zero to one
I am trying to make a put request now here's a very specific question that can
make a little bit more sense if we backtrack to one of our early lectures
and what we did in the super review does our client natively
come with the ability to make a put request history
music is still on and had the wrong headphones in
let's think about this is a very very specific question right

03:48
do we have the ability to natively make a put request and it's no
we can make get requests very easily by like just refreshing clicking an anchor
tag right like these those are all right those are all anchor tags right those
are all get requests how can we make a post request what
what's built in that does a post request forms forms through our posts request
okay so since forms are doing our post request and our get requests are
normally simple things like refreshing the page clicking an anchor tag right
that that's that those are baked in like HTML the client-side respects
the gets and the posts now how have we been making puts

03:49
and delete requests up until this point fetch
right if we look at our previous code like the the off with local login code
right our to-do list we have been making
those requests with fetch now fetch is a what yeah fetch is a web API
and since fetch is a web API that is dependent our application right
now is dependent on what to work yeah our application right now is
dependent on the environment the browser
to have these apis or our application to work right if our client

03:50
does not have those apis available to it our application wouldn't work
fetch is not something that is native to
our application right fetch is a web API that is being provided right that is
being provided by most of the browsers where we're running our code but
eventually we can get into situations where the client doesn't have the fetch
API available to us right maybe we eventually want to start running our
code in places other than a browser I don't know right but right now there is
not a native way of doing puts and delete all right we have been using
the fetch API to do that well the wonderful thing is if we look

03:51
at our code let's let's just inspect here inspect element and we look at this
button this button is really a what this button is really part of a what
oops sorry I'm still bigly I always get hired like yeah I am big
what's going on yeah what's up what's up hey hey thank you for recognizing no
we can tell that this button is really a what call me big L.A
man that old school LL Cool J hit different
it's a form look at it would you just look at it would you look at it

03:52
it's a form and so forms by default right forms by
default are always what type of what type of requests so forms are always post
yet I'm using a form to do a put it's a post but I need it to be a put
what do I need to do for my post to be a put
I need to override the method exactly I need to override the method and what
we'll notice is that on this form the form always uses the action to know
what to do right the form uses the action to figure out what to do that
request is sent to the server and on that action that's part of the

03:53
request that comes from the server sorry
from the client you can see down here we have a what we have a what
the query parameter right it's a query parameter and that query parameter
has a method that equal to put so what's going to happen right
what's gonna happen is on our back end we are gonna see a post come in
but we're gonna check each post that comes in to see if there's a query
parameter on it called meth underscore method and if it has that underscore

03:54
method we're gonna override that post to be whatever the equal value is here
right so even though when I click this button I am technically submitting a post
right I'm technically submitting a post on our back end we will be able to
override that post to be a put all right let's look at the trash can
let's look at the trash can trash can same thing inspect we look again
trash can is really a form except at the end
we have this magical query parameter with a delete
so even though we are submitting a post right
even though you're submitting a post right we're going to overly override
that post to be a delete now this is POD racing
exactly right and so we get to we get to do this now

03:55
somebody said we should just be able to change the method of a form I agree with
you locating in fact if you look at the early specifications of HTML there were
some that included you to have the ability to do deleting to do to do
pudding to even do patching right but that was lost from the specification and
with the more recent HTML5 it was it was not ever added so we can do this method
override right we can use our forms we can use this this method that works
which is the post and on our server we can override it right we can override it
from a post to a delete we can override it from a a a post to a
put and this does not require right does not require any client-side

03:56
JavaScript which means that our code can load what
our code can load what since we have any client-side JavaScript can load faster
and we are no longer dependent on a client that exposes a fetch API
right what if we're in a browser that doesn't have a fetch API
right what if we're on like some really really old browsers right what if we're
on some really really old browser like our client does not have a fetch API our
apps just wouldn't work right they're on a really crappy browser what if if we
wanted to use something that wasn't necessarily a browser me a lot of like
Now kitchens have have clients that can consume the internet do they have a
fetch API I have no idea right but if they're loading HTML HTML supports posts

03:57
bioforms so as long as something supports HTML right as long as something
supports HTML our apps will always work all right
eventually we'll get into like different clients that we could use and all that
fun stuff but now we have a different way of handling this type of of of these
different types of requests that before needed a fetch API before that needed to
hand stuff off to the event Loop think about this before we were running
client-side JavaScript all right that client-side JavaScript
had to hear the click event The Click event then executed a function that
function then put the fetch request onto the call stack the request gets handed
off to our web apis our web apis go and do the asynchronous task the result of
that asynchronous task is put in our in our task queue once the call stack is
empty it goes to the task queue it takes it off the task you puts it on the call

03:58
stock then it executes do we have to do that anymore oh
nope we'll handle it all in our back end so we get the ability to not need
client-side JavaScript we get to kind of Escape some of these weird things we
open up our applications to working on more clients we open up our applications
to me being slightly faster right as this is something that is a pattern that
you're going to see uh quite often so how does it actually work let's take a
look at our code so we have some middleware
uh and we have this ability if we look at our server.js uh we have this ability
to have the method over ride right so we required a special npm package that's
going to handle this method overriding for us

03:59
and then we're able to put this little this little bit of code right here that
says hey use that method override package right and look for this query
parameter so all of our post requests that come in
right all of our post requests that come in we're now going to look to see if
they have this underscore method right this underscore method query parameter
uh you can change it to whatever you want this could be underscore rainbow it
doesn't matter right if you underscore that could be whatever you want right
we're calling it underscore method now every single post that comes in will
look at the underscore method and we'll treat that request based on whatever
that query parameter equals so if it's a put we'll treat it as a put if it's a
delete we'll treat it as a delete that means when we clicked that
that like button let's go ahead and right click inspect when we click that

04:00
like button yes it was a form yes it was a post request right but
when that form came through it looks at the URL
and it sees that it had this underscore method query parameter so it's going to
treat that post as a what and treat it as a put beautiful so now
we have to look for a pope a pope God damn it we're about to put look for a put
a put on the post like post route I have to look for a put on the post

04:01
like post route and then we're gonna have to grab this value to do what why
are we gonna have to grab that value what do we what are we trying to do here
yeah we're trying to find the post to update the number of likes we're trying
to change it from one to two all right so we click the heart
when we click it the form submits the form sends our request to the server the
server sees that it has this underscore method and says you know what hold up
that's not a post that's a put now that we're dealing with a put let's
go to our routes and find a post route like post
and make sure that it's a put so let's go ahead and step through that all right
we're at our server.js is it a post route chat is it a post route

04:02
yes so we're going to use our post routes our post routes requires us to go
to our routes folder and find the post file here we go our routes folder our
post file now we have to find the second part which was what what was the next
part of that URL take a look what was the next part of that URL
you can see it was like post so let's go ahead and take a look
slash that's not right create post that's not right like post boom
like post boom that's this the router we found the right route and we set up our
parameter so we can actually grab this value from the URL right since our
parameter is set up there we can grab that value from the URL so that means
we're on the right route like post we're gonna be able to grab that ID from the

04:03
URL and we're going to use the post controller and we're going to use the
like post method so let's go to our post controller let's find the like posts
method boom here's the like post method all right
we're going to use our post model and what I love right what I love is
that Mongoose is so easy find one and update we're gonna find one post and
we're going to update it well which post are we gonna find whatever post has the
ID of the ID we just had in our URL so what
we're going to do is we're going to find the post that has this ID
right that has that idea we're going to find the post that has that ID when we

04:04
find the post that has that ID what are we going to do
we're going to increment the likes property by one so
we're gonna find that post based on the ID right right based on the ID
and then we are going to increment it by one now this is something that comes
along with mongodb uh and by extension Mongoose we've seen some other ones in
the past there's increment there's like decrement there is there is set there's
a bunch of these that just come out the box you have to read the documentation
to know what it comes with right right you have to read the documentation know
what it comes with but there is a built-in increment so that we can
increment a specific property by one if we look at that post let's go find the

04:05
Athea post uh let's make sure that we're
we're here all right so here's the Athea post we can see the likes are currently
won so if we were to actually click we would find the legs property and
increment it by one so that this would go up by two this will go up to two right
so let's actually click now and we'll step through it again I'm just
going to refresh the page make sure we're in the right spot all right we're
good I'm gonna click on the likes three two one boom what just happened
was we submitted a form that form had the route of post slash
like post slash this long ass ID with the query parameter of underscore

04:06
method equals put our back end is set up to hear that
query parameter and say don't treat that post as a post treat it as a put
so now we have to hand off this to our router saying all right buy me the
router that's post slash like post and better have a query parameter in there
to grab this ID when it binds that route it also gives us the
appropriate controller to use that controller is going to say all right
yoink that ID out of the URL find the post in our database that has

04:07
that ID and increment it's like property by one
what if the users like a post more than once we're not stopping them from doing
it yet that's that's that's too much well you can worry about that later if
you want to show off and figure out how to set that up go for it that's that's
that's an extra level of stuff all right let's go ahead and right click on it so
we can see the code somebody asked about that all right we can see the code here
here's the button we're actually clicking on we can see that it has the
uh the heart class hold on let's take a look at that real quick uh let's take a

04:08
look at our CSS no God please no no no no no no so all this style
like all this style is not even coming from our CSS it's because I have these
classes on it that are supported by bootstrap right
these classes mean something in bootstrap to make it a button that has
that button primary color which is blue fa heart
um which is the uh font awesome for the heart right and so this like actual
style and stuff is not even coming from my CSS it's just it's just bootstrap
and uh eventually once we get further along we're going to swap it out with
Tailwind but for now just bootstrap yeah like our EJ it's still ejs it's
just our ejs if we look if we look at our ejs
um like if we look at the post our ejs takes in this partial that's the header

04:09
and if you look at that header partial well it loads bootstrap
right and it loads font awesome so I'm able to get those default
those default stylings from bootstrap I'm able to get those default icon fonts
from font awesome and that's it now if you want to tweak the Styles you
want to do something else then you just throw it in your in your CSS file that's
in the public folder all right so let's step through this one more time um
let's click on it we clicked on it again right so we clicked on it let's inspect
the thing we actually clicked on was this button that had the form and the
form had the action or the URL of post like post with the ID of the current

04:10
Post in it with this method override of put so the request goes to our server
our server sees that post request comes in but it sees the query parameter and
says you know what we should override this post to be a put from there our
normal code comes into play we are going to find the post router and then the
like post route start at the server.js all right
post router we're going to go to post routes
post routes find the like post drought boom we have our query parameter set out
so we can yank the ID of the post we are on out of the URL we're going to go to
our post controller and use the like post method post controller like post
method we're going to use our post model to talk to our post collection we're
going to find one of the posts or one of the documents in that collection and

04:11
update it well which one are we going to find we're going to find the one that
has the ID property that equals the ID that was in the URL as part of the query
parameter and once we find that specific document that unique document we're
going to increase the likes by one so there's a likes property whatever number
is in that Lex property we're going to go up by one how can we tell
how can we tell how can we tell if likes is actually a
number that we can increment by one you don't let's say you don't have access to
my DB how can you actually tell that legs can actually be incremented by one
what if it's a string or something weird why why won't this turn into like 11
okay let's check our schema let's go to our post model
let's check our schema and we can see that likes the property of likes is
actually a number so it makes sense that we could actually increment a number by

04:12
one cool um since we're kind of already in the
model right since we're already in the model
uh and this is all stuff that that was like in the homework video right like
this this is this uh method override this is shouldn't be the first time
you're seeing it yeah uh Sarah said is there a way to have
authentications while having these are Anonymous to me and everyone else like
just the username they choose uh yeah you just you just don't include the
email in your user model and your passport strategy
uh the travesty media video had method override in it the storybook the Google
off video and then Mine Wolf went over it as well during their stream yeah cool
all right so this actually can increment it is a number it should be able to

04:13
increment one of the weird things I wanted to show you about mongoose um was
this right here so our model is called post right our model is called posts but
what's our collection called where did it get posts from
like look it's it's called we called we called our model post here but if we
look at the uh actual collection it's called post
you want to see something really weird you want to get really funky with it can
I get can I get funky with it first can I get funky chicken with it real quick
you ready hold on hold on to your pants we're gonna call our model

04:14
we're going to give it the name of ox right our model's not going to have the
name of ox um so our model name is now Ox let me make
sure I'm on the right page before I save this hold on
um let's go to like our feed uh uh actually I'm gonna have to make a
post first I have to make a post first so let me go to the profile for this to
work I'm going to make a post all right so right now there is no collection
called Ox I'm going to save this right we're gonna call it Ox I'm gonna save it
for this to work I'm gonna have to like create a new
right a new post that would make it force it to make a new collection called ox
so let's go ahead and create a post we're going to call this test

04:15
we're going to choose a file I'm just going to use this one again
and we're going to get an error right we should get an error because our
controller is not set up to use the collection um oh did I save
oh maybe maybe only if I go to the feed would we get the error
okay there you go it's just showing in the feed just that one
that one post right there's there's no like all of our other posts are gone
right all of our other posts are gone because now we're using this new
collection called Ox right we can see that we enabled the model to be the name
Ox you ready though hold on about to blow your minds you ready

04:16
go to our mongodb let's refresh oxen foreign [Music]
when you say post that it should be plural because you're going to have
multiple documents so your collection shouldn't be post it should be posts
well if you have a collection for oxen and you call it Ox you call it your Ox
controller it knows that it's going to want to make your collection the plural
so it knows to do Ox to oxid uh somebody read the stack Overflow
article this actually comes from a stack Overflow article a long time ago but it

04:17
doesn't know to do Goose into geese like it knows some of them
uh but not all of them right you know some of them but not all of them right
uh and so it's trying to do the plural of whatever you put in and so the cool
thing with Mongoose is if you just leave it at these two it'll do the
plurification but you could actually add a third argument here that's the actual
name of your collection right like you can you can put an actual
name here and it will respect that name and it won't do any of like these like
funky like purifications or anything like that yeah so it it uh

04:18
it's smart with some things but not all of them cool
all right so I just want to show that because I thought it was pretty funny uh
so that's where the the actual collection names are coming from we're
using the post controller so so far that's the likes
we have one more to do and that's the leading uh but we are at the top of the
hour let's go ahead and take our break and we come back from break we'll talk
about our deleting I'll answer any more questions you have about this and then
your homework will be to get caught up uh and to maybe start thinking about how
you might add uh how you might add comments to the mix

04:19
all right folks let's add five minutes to the clock here put the tunes on
and if you're able to please get out move around hydrate but okay something
that's not your screen and I will be back in five and run some
ads to new folks showing us don't want to sit through them

04:20

04:21

04:22

04:23
all right buddy see you soon welcome empower foreign [Music] foreign [Music]

04:24

04:25
foreign [Music] foreign the music fades for us as we get back
can I do the worm oh yeah I can do the worm old school b-boy
I can pop it I can lock it I can drop it I can Tut it what you need got you
did I mess with the left up left right downwards for uh no it was just the the
start of the stream question uh mine was I'm always right and always down you
know what I mean there we go so that was my answer
is Bob joining the stream team I've people keep mentioning it like

04:26
there are some um like programming YouTubers that have
created like 24 7 uh like Lo-Fi channels and we used to look at 24 7 bobadoro
Channel uh I'd be down I got a lot of projects
on my on my list but I think that'd be something funny to set up
yeah it's like 24 7 just Bob adoros and people can like vote with like
Channel points like if it should be like a 25 5 30 30.
maybe we'll just start off with like a like a voice channel on Discord all right
we have to look at the delay Tang uh and then once we're done looking at the
delay Tang I'm gonna open up to some questions I know there's some like other
little quirks that are happening in this code base but I feel like we've spent
enough time going through it uh I know stream team has gone through it mine

04:27
Wolf's gone through it so I feel like there's enough here that we can kind of
work through if you still need help always Discord uh get in
stream team channels ask questions like this has to make sense but this is like
just the back of end like this is the back of the back end right this is like
the back this is the end of the back end right like once you got this it's just
building new models new controllers and that's kind of all we wrote
all right and so um yeah eventually once we get through the
hunt we'll we'll have some fun doing some optimizations We'll add testing to
this and some other fun stuff but um this is this is it you get you get this
down you can build whatever the heck you want
cool alrighty let's look this looks delay Tang
um Let me refresh to make sure I didn't mess it up with the ox stuff

04:28
uh let's go back let's look at our feed here
uh let's go to yep I'm just I'm just kind of clicking around a little bit
just to make sure that we're good all right so we're good uh let's go ahead and
uh I can't delete any of the fairies oh we got two mirrors all right we got
two mirrors we can delete one of the mirrors
all right this mirror is lowercase n and other mirror is uppercase and so we
we did kind of have slightly different versions um so we can
delete the lowercase n uh and so when we click this trash can

04:29
this trash can is only viewable right now why
because it's my post and I am logged in so how the heck does that work
um let's look at our route let's follow this would loading this link is a what
request like by hitting enter here I've made what type of request
I've made a get request right so let's start there uh making a get request on
the post route and the route just slash and then my query parameter so let's go
and take a look at our get requests start the server post route go to post
routes just forward slash and then the query
parameter so this is the route we're going to ensure that we're logged in
great so it is checking to see that we're logged in that's why one another
one of the things I keep in mind like we have to be logged in to get to this
point anyway and then we're going to use our post controller and the get post

04:30
method so go to our post controller get post method
we're going to use our post model to go to the Post collection we're going to
find the specific post that was in the ID right we're going to find the
specific post that was in the ID and we're going to hand off that post
information to our ejs and we're also handing off the user information to this
ejs so where will the logic exist for whether or not we show the trash can
interesting question where will the logic exist for whether
or not we show the trash can in the game folks exactly EJ yes right
it'll be in the ejs there's there's nothing up until this point that said
like don't or do show trash can we've just gone and found that specific post
we're sending that information to the ejs and we're sending the logged in

04:31
users remember whenever you're logged in right right whenever you're logged in
and you're making that request right that rec.user whenever you're making
that request um that user properties being sent along
with the quest of the logged user so we're sending all the post information
underneath the name post and all the logged in user information underneath
the user so we have to go and look at this post ejs
all right so we look at the post ejs let's go down to where that uh trash cam
might be and here is our conditional bit of logic all right this is interesting
so if post dot user equals user.id what are we checking here
when we check post.user equals user.id yeah we're checking to see that the

04:32
person that made that post is the person is logged in because we look at our
collections let's look at our collections real quick uh let's look at
our collections we can see it in our post collection
it has the user that made the post right
so post dot user is going to give us the person that made the post
all right post dot user is going to give us the person that made the post so
we're gonna check is we're gonna say hey the person that made the post
does it match the logged in user all right does the person that made the
post match the logged in years we have to look at the controller to see this
right we're sending in all the post information underneath the the title of
post so every single post is going to have a post dot title a post dot image a
post.cloudinary post dot caption a post.lex a post dot user post dot

04:33
created at right they're gonna have all right they're going to have all of these
things and since we are sending the users logged information underneath the word
user user is going to have the ID the email the hashed password right all the
stuff that gets sent with every logged in user's request you're logged in
you're sending that request object with the user property on every single
request so all we're going to do is inside of our ejs
we're going to say hey does the person that made the post equal the person
that's logged in because if the person that just logged in equals the person

04:34
that made the post then we can show the trash can right cool
so now since we know the person that made the post is the person that's
logged in AKA like I made the post and I'm the one that's logged in it's gonna
show this trash can and this trash can is doing the exact same thing we saw
with the likes it's on the post route with the delete
post route and then we're going to plug in the post ID
right so we're using we're using the ejs syntax to plug in the ID into the URL
the URL will eventually just have that string of numbers and letters that is
the ID and we're adding that method parameter of delete so when we submit

04:35
this form by clicking on the delete button we will be making a post request
to our server with this route including the ID of the post that we're currently
viewing and the method override of delete so that request makes
it all the way to our server our server sees the method query parameter it says
all right we see that query parameters we're going to treat this post not as a
post but as a delay today all right and so now that we know it's a
delay Tay on this route we can go back and look at our server.js all right it
was a post drought let's find the post route that had the delete post all right
here's the post route with delete post beautiful we're able to grab that ID
from the URL right we were to grab that ID from the
URL and once we do that we can use our post controller and the delete post
method so let's go to our post controller let's go to the delete post method and

04:36
here is the delete post method delete post method is going to go to our post
collection using the model it's going to find that post by the ID it's going to
say hey find the post that has the ID property that matches the query
parameter that was in that URL when we find it
right when we find it we're going to first
well we can actually kind of get around this we don't need to do this anymore we
can just we can find it we just found it here right we can delete it from our
database Right This Is Us deleting it from the database but there's one other
thing right there's one thing that we have to do we're deleting a post

04:37
and that post contains what bit of information it contains an image
and where is that image being stored well sorry it contains a URL to an image
it contains the URL to that image and that image is being stored on cloudinary
now cloudinary has a very generous free account but eventually if you have lots
of users and they're all uploading photos and each photo that people delete
if you don't actually delete it from your cloudinary account you're just
paying for storage of images that folks will never use think about that if you
delete that post but don't delete the image from
cloudinary eventually you just have all these images sitting on your cloudinary
account right that nobody will ever be able to use you deleted the post which
means there's no longer a post in your collection right

04:38
the stock Private Collection exactly right you you now have no post in your
mongodb database so there's no way to ever get that photo back or that URL
back into like your system so we want to make sure that we actually destroy that
media on cloudinary's end uh and then remove the post on our end
right you can actually you don't need this line and I forget why I have this
here um so you can we want to destroy that image off of cloudinary so we're not
just taking up space that'll never be used and then we remove the post from
our post collection cool once you remove that post we're
just redirecting them back to the profile that's all
now why did I have this here why did I do this

04:39
my day there's a reason why I did this yeah I want to make sure that that it
exists right I just want to make sure that that post exists right before I
start sending like a a very a very final
request the cloudinary like destroy this stuff let's make sure the stuff exists
first right we can always do that like that's an important bit later on is like
we want to make sure that it exists um we might use that down the line to do
some slightly other things so that's why it's there right now but the idea is we
can check see if it exists we're going to destroy it and we're going to move it
from our our database cool so that's how the deleting is
working let's run that back one more time run it back

04:40
we're clicking this lovely trash can here when we click the trash can uh and
so the thing you want to be able to get here is look I'm going to do without
without looking like being able to have this in your brain is like actually a
really good thing so we click the trash can we click the trash can it's actually
submitting a form that form has a specific route and it has the specific
ID number for this post it also has a parameter a query parameter of
underscore method set equal to delete so when this post gets sent to our server
our server overrides the post and says that it should be a delete which then we
have to go and find the route that looks for the Post
delete and it has the query parameter in the URL when we find that we find the
right controller we find the right method that method goes and finds to

04:41
make sure that post exists it destroys the media on cloudinary and then it
removes the post from our post collection so let's go ahead and click the trash
can eat right Yee and then it redirects exactly
so heated it so clicking that trash can if we were to follow it through
we can even follow through from the from the uh ejs right it would be that slash
post slash delete post and then it would have the actual string in there for the
for the you for the actual post ID with this method delete so that submits the
actual request to our server our server hears that request it overrides the post
to be the delete we see that it is on the post route so we go to our post

04:42
routes we find that it is the delete post route we also see that there is a
lovely ID query parameter there we use the post controller with the delete post
method we go to our post controller delete post method we can actually
confirm that it exists we can destroy the media on cloudinary and then we
remove the post from our post collection
very last thing we do is redirect to our profile because that post no longer
exists we shouldn't hang out on that page anymore it doesn't exist kicks us
back to the profile you can see that that we unfortunately now only have one

04:43
mirror [Music] they've come a long way since the bachelor I agree I agree
it's a lot of Little Steps it really is all right now the last thing here is
this cloudinary and uh we hadn't really talked through
how the cloudin area is working we will on Thursday when we add comments I'll
also spend some time like showing you how to set up your cloudinary um
I haven't prepped it so that I can show you without revealing my keys I know
they hide them by default in the UI like if we go to cloudinary right now
risky click of the day boom uh we can see that like some stuff is hitting like
the secrets hidden the URI URL is hidden the API key is visible but you need you
need all four of these for it to actually work
um but I haven't set up the actual adding phase to not get wrecked so let
me do that uh between now and Thursday uh then we'll we'll walk through it I
think yeah mine wolf did already do it so if you're you're you're you're

04:44
itching to get this set up right away um Mine Wolf already did it oh
all right I just don't want to bring this down
everybody's like try to use it all right so let's go ahead and add a new post
let's go ahead and say new post testing and let's choose a file
let's bring back a mirror let's do a different photo yeah we'll bring back
yeah we'll bring back mirror let's open that up now let's submit
all right now we got our double mirrors back which is what we all want in life
uh and so we can see it's our new post it's testing but we're also able to
upload an image right we're also able to upload an image

04:45
um and so if we follow this bit of code uh we are on what what page are we on
right now when we were when we uploaded the new photo what page were we on
thank you hyper we're on the profile page let's start with the profile ejs
start the profile ejs here's our profile ejs and we have a form here
for submitting the post so it is post slash create posts
and some important stuff for this to work is you're going to need the ink
type of multi-part form data uh molter which is handling our image uploading
does not work without that ink type being set so some folks when they write
it from scratch forget that and then Mulcher doesn't work so we have our form

04:46
in our form we have our input for our title our input for our caption or a
text area for a caption and then we have the file upload
and the file upload uh is just a normal input type file
right uh input type file and then we have our submit button so what's going
to happen is when we submit this form right when we submit this form it's
going to be like any other traditional post request we're just going to need
some middleware to help us handle it okay so let's go ahead and look for the
Post request on our post route with the create post route
so post on post create post all right let's go and take a look
server.js it's a post route we're going to then look for a create Post in the
post routes go to the Post routes create post here it is and then it has this

04:47
stuff before the controller we've seen this before we've seen steps
before we get to our controller literally right above is we have this
ensure off middleware right that's checking to see that we're logged in
right so we've already seen middleware that is kind of in between the route
before we get to our controller so now we have this upload middleware and if we
look the upload middleware is requiring us to use molter
all right so molter is the is the middleware it's going to actually handle
taking that file and helping us upload it and doing some checking on that file
right literally sits in the middle AKA middleware huh

04:48
all right and so we can see that the upload is actually requiring molter
and we can see that single is probably just a what on malter What can we guess
that molters probably returning let's go to middleware let's look at molter
right we can see that molter right is spitting out this like lovely
lovely little little function right technically like an object inside
of it and so the stuff that's on on molter is really just it's just it's
just methods on this bit of code here so if we look at molter there's some
bits to understand let me go back real quick one second he uh
sorry I was on the post route there we go so we're using upload which is really

04:49
just requiring molter if we look at molter what malter is going to do for us
is there's one thing that we can see but under understand that with molter
uh malter is like a pretty substantial package that we had to install
right it's a pretty substantial package so we had to install motor has a lot of
stuff that's happening underneath the hood remember packages that we installed
through npm are really just bigger collections of a lot of like functions and
methods have been built out for us so moulter is doing a lot we are not
storing it to our own disk locally so we kind of keep this
um empty if you watch some of my videos from last cohort we did have a
phase where we stored our images locally and not straight to cloudinary which is
where you might have some other storage stuff in here but what we're really
seeing here that's the only really big thing on molter that we are seeing at

04:50
the surface level is that we're checking for what
yeah we're checking the file type we're making sure that's a JPEG jpg or PNG uh
if you were to try to like upload like an SVG or something like that this would
break right because right now we're limiting it to these different things
you could change this you can do different stuff you probably want to
check with your media provider to see that it supports the media that you're
going to allow folks to upload so that's something you might have to look on
cloud and areas and say hey cloudinary can I upload svgs can I upload MP3s can
I upload uh gifs right right you'd have to read the docs to understand and then
you might change what happens on this filter right cool
so that's kind of all here molter's doing a lot of heavy lifting that we
don't see because it's deep in the package and if we go back to our routes

04:51
we know that we're using molter here it's handling the uploading of the file
and then we get to go to our post controller and the create posts so post
controller create post and what we're going to do
is we are going to use cloudinary right we're going to use cloudinary we can see
that cloudinary is another bit of middleware that we have included
if we go to our cloudinary middleware you can see that the cloudinary
middleware is just using the cloudinary V2 npm package we can see that we are
requiring our EnV files we are then pulling in all the stuff we need for us
to be able to connect to cloudinary like our Cloud name our API key our API
secret all these things are stored in our EnV files and it just exports
cloudinary so do you have to understand do you have to understand what is

04:52
happening with like any of this no I I would not know to do
cloudinary.uploader.upload.rec.file.pat like I just wouldn't remember that I
just know that I I looked at cloudinary's docs
um I looked at some other folks that were doing stuff with cloudinary and I
grabbed the pieces that I need right so I've done it for you
that's abstracted away from you uh if you don't understand these things that
are happening we know that cloudinary is a package we know that that package is
probably made up of a bunch of different
methods so uploader is probably a method right upload is probably a method on
that and it's uploading uh the file right it's uploading the file that
molter just helped us upload if we were strictly a back-end developer
how much of this would we need to know by heart you would not need to know this

04:53
by heart even if you were the best back-end developer maybe if you do this
every single day right maybe if you do this every single
day you would you just have it in memory
but you're going to be more used to just reading the documentation like
cloudinary has this in their docs I didn't get this from nowhere I got this
from culinary's docs and by looking at some examples probably on stack Overflow
right like you you start to pull in pieces but now I have this on my GitHub
if I ever need to use cloud and air I'm going to go and copy the middleware I'm
going to copy this bit of code and I'm ready to rock and roll hey Pat
tell your professor I said hello yeah I agree with Nick you don't need to
know anything by heart you just might end up happening at by its byproduct
just by doing this enough um you will you'll start to kind of

04:54
start to remember things cool all right so we are in the create posts
we're using cloudinary and we're grabbing as part of the request we
uploaded a file remember when we submitted that post request part of the
request that came along was that actual file from the form malter is helping us
get that file uploaded and we're able to use that file uh to upload the
cloudinary um you can notice that we're awaiting the
results from cloudinary because what do we need from cloudinary like for us to
have actually created a post what are we awaiting from cloudinary
yeah we need the URL we're going to hand off this image to cloudinary we need

04:55
cloudinary to give us back like to give us back the URL that we need for that
for that file so that's what we're seeing here
we're seeing here that we are going to go ahead and
um we're going to await whatever comes back from cloudinary and store it in
result and so the cool thing is if you notice when we go and create our post
right we're using our post model to create a post we have a title that came
from the form request.body.title but we have an image URL that came from
cloudinary because it's part of result we also have a cloudinary ID that came
from cloud and area because it's part of result we're going to use this ID maybe
what where where we might need this ID to delete it right we might need the ID
if we're gonna act if we're going to delete these if we're going to delete

04:56
these photos we're probably going to also not only need the URL but the ID to
help us delete it right cool the caption came from the form body we
hard coded likes at zero and we coded the logged in user as the person making
the post so we had to get all that stuff
from cloudinary the image and the ID and we're storing that with each post that
we create if we go and take a look at our mongodb we can see in the post
collection they have an image URL that came from cloudinary and a cloudinary ID
for that actual image so that when it comes time to deleting we can actually

04:57
delete it nice so it's just another database exactly
it's just another database yeah just another database
um we're just there's no such thing as the cloud it's just somebody else's
computer oh Dragon asks an interesting question are
databases objects so when we're talking about mongodb
and we're using Mongoose there's actually something I just want to
explain because people asked about it when we're using mongoose um
and we're using mongodb all of our our collections are made up of what documents

04:58
now for all intensive purposes documents are almost the exact same
thing as objects however they are not one to one documents
have all the stuff that would make it an object plus a bunch more
like five times the amount of stuff you might need uh to do your job if you were
just expecting an object so this lean that I put on my request was saying hey
just give me the stuff I actually care about like just give me the plain old
object take all your wrappings and extra
stuff take that all off just give me the raw like objects right no fat just lean

04:59
exactly right keep it lean right and so why would I include this way faster
way faster if each document that I'm getting back is no longer has like five
times the amount of stuff that's coming back from it and I'm just getting the
raw lean stuff I care about way faster so are all documents objects technically
but they have a lot of extra stuff that you don't need if you're just interested
in the objecty stuff all right that's it it just makes it faster you're getting
rid of the gunk that comes along with it
um and how how would I how would I learn about this
how could I figure out what what lean does

05:00
lean is Mongoose yeah lean is Mongoose helping us documentation
yeah you can go to mongoose's documentation and they'll break down
um I actually pulled up by default Mongoose queries require an instance of
mongoose document class documents are much heavier than the JavaScript objects
because they have a lot of internal state for change tracking enabling lean
option tells Mongoose to skip instantiating a full Mongoose document
and just give you the plain old object in the docks
sometimes you just gotta read the docs folks all right so let's just run through
deleting one more time and then we'll talk about Thursday
and uh one one other thing I just want to cover while we're here all right so

05:01
let's take a look at deleting and we are going to delete our second mirror
uh so we're going to go ahead we see that we have the trash can why do we see
the trash can the Poo I think they actually call it a
pojo just for that I think yeah yeah pojo plain old JavaScript object I think
they didn't want to call it a poo all right I'll see the trash can because
this is my post and I am logged in if I inspect it
and we'll see that it has the post delete post and the the actual post
ideas there I think some folks get a little tripped up when they're looking
in the ejs and they see in the ejs um sorry post egress we've seen the

05:02
postage they see like the the the ejs Syntax for plugging in that value but
that gets plugged in there and the result is having the actual ID in the URL
right so uh if I was to click on this button I would wind up submitting the
form which would make a post request to the post route the delete post route
with this value in the URL as a query parameter we see the as a parameter we
see the query parameter of underscore method so on our end our server set up
to override the post to be a delete so we're going to look for a delete route
on post delete post with the ability to have a parameter so let's go and take a
look foreign let's go to our server the post routes
we're going to use post routes here's our post routes we're going to look for

05:03
a delete post route there you go it has the ability to grab the parameter from
the URL we're going to use the post controller we're going to use the delete
post method we go to our post controller delete post method we make that sure
that the post is actually there we destroy the media on cloudinary we
remove the post from our post collection we kick our user back to the profile
because the post doesn't exist no mo no mo
Rando do exclamation point 100 devs and click the link
you know I said pretty simple pretty simple it only took us how many

05:04
months to get here pretty simple you know easy got it easy clap yeah
cool when we come back uh Thursday I want to figure out if we can expand
upon this code base like can we build stuff now that we have the raw materials
can we add comments and we'll do it from scratch so we'll walk
through creating the controller we'll walk through
um making sure that we're we're connecting all the bits and Bobs that we
need to connect and we'll walk through cloudinary creation we'll walk through
making sure that your mongodb is set up correctly we'll do everything from the
beginnings uh and I'll share everything live so you can kind of walk the whole
steps together and then we're we're kind
of done with the back end my folks we're going to uh have you work on a project
AKA your 100 project that uses this stuff and then we're gonna we're gonna
sprink in a different way to handle our views which is react
and then we're going to move into data structures and algorithms and go deep

05:05
with our our hunt so let's get into it all right like I said
I wanted to end early because I want you to use this time if you need it right
use this time if you need it do hey mushy unless you want to come and see
what I was doing to use this time to review the things that we did get some
active recall in right get some active recall in uh make sure that the things
are clicking maybe go on Discord ask for some stuff if you need it if you're if
you if you didn't something didn't make sense get help on Discord you're not
doing this alone right and uh let's read so you want those sweet sweet Channel

05:06
points let me get you some sweet sweet Channel points with a raid all right cool
I'm gonna go over to team Vash if they have raids turned on
I haven't seen them before but it looks like they're building up an MMO which is
pretty cool all right let's let them know that we're sending a raid by cool
alrighty folks please take the time to do some active recall if you haven't
checked in already make sure you check in uh we're retweeting and liking the
free code Camp Post have a wonderful rest of your night everybody get the
help you need I'll see you on Discord I'll see you in mine will stream
tomorrow and I will see you all on Thursday to go even a little bit deeper
with all this stuff everybody have a wonderful rest of your day evening

05:07
morning no matter where you may be and let's read yeah hey
yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah hey
hey good morning good afternoon good evening no matter we're coming from hope
you all are doing well welcome back folks welcome back to a
wonderful Thursday hope you had a good week so far I hope you had a good
Wednesday glad you're here we got some fun stuff to do
uh as we mentioned Tuesday uh we're gonna run through adding comments to our
binary upload boom our social media app and then uh we're gonna jump into some
groups and try doing it together so I'm gonna do a speed run as fast as I can go
through it uh showing the the quick and dirty way I
would add comments and then I'm gonna stop so you have seen one then you will

05:08
do one together and then once you start to understand it you're gonna teach
somebody else it so we're gonna see one do one teach one Community taught folks
all right everybody glad you're in here uh as always I like to start off with
some uh some questions let's start off with some questions so if you got some
questions I got some answers Discord clothes
two weeks is a professional software engineer and I love it hey congrats it's
huge it's going on make sure that I send out the notification ah here we go
oh no I didn't save it we don't get got or boom there you go

05:09
today's would you rather would you rather was uh would you rather
teleport or read minds and it didn't go out
it didn't go out so in chat would you rather teleport or read minds
the logs are getting heavy but I'll keep at it that's what I love to hear
whoa look at these teleports that's overwhelmingly teleport that's wild
that's not even close I was instantly teleport
and I was like if I could read minds though I could probably make a lot of
money and then I could buy the Jet and then it's not as quick as teleporting
but I'm Jet and you know what I'm saying I don't know but then I thought about
how much fuel I'd be burning and so like the teleporting came back out this is a
hard one we might need it we might need to we might need to to to think about
this one but uh y'all want to teleport real quick

05:10
although teleporting you're probably like a big business right like you could
like you could like I don't know just like teleport stuff for people around like
you teleport money around I don't know [Laughter]
I love how I can't just have fun with it I'm like how can I make the most money
with it looks like I was a good movie too I immediately go to bank heist you all
your teleport all you were teleporting just the rob banks I feel okay all right
Speed Run Uber each job that'd be that'd be funny alrighty
you got questions I got some answers let's get in here let's always give
folks a few seconds to get in here before we get started

05:11
do I need a passport no you just teleport and passed uh best Customs but
hey I'm not a lawyer so you magically get the powers to teleport don't listen
to me our part-time software engineer jobs a
thing they are they're not as common there's also like freelancing or
contract work which could be more likely part-time in some cases yeah
mvc's still okay with with react I mean there are we're gonna extend MVC to be a
slightly different Paradigm once we add react though but the core is still
similar is it reasonable to look for a remote
job and work it plus travel at the same time I mean there's plenty of people
that do it um but I think the first three months or so
are pretty difficult as you ramp up and some companies are more open to you

05:12
being in different locations than others should we have our Banky answers
memorized or should we have the key points in mind about the answer I think
having a pretty good I mean it's kind of it's up to you how you how well you're
able to spit ball um I'm pretty able I'm pretty I'm pretty
comfortable if I have some key talking points I can talk my way around it but um
for a lot of folks I think the deeper they have it memorized the more
comfortable they feel right they'll feel more comfortable and
if the talking point is already there they they feel they feel better and so
I'm definitely in the camp of memorize as much as you can but I know it's a lot
and so I feel like especially at least the behavioral questions the behavioral
questions absolutely need cold like absolutely cold because they just come

05:13
up more often the technical ones as much as you want to go
I make a music app for my 100 hours project as long as it's a full stack web
application go for it already hey happy birthday
what about a Spotify dating app that's actually not a bad idea I think you
totally do it somebody did a Spotify app for the last last cohort so if I can
remember who it is I can connect to you but how do I know if I qualify for a job
when I don't meet most of the requirements you don't click apply
that's how that's how you qualify you don't click apply if you network your
way in any of the requirements don't matter anymore
right because once you're talking to a real living breathing human being at

05:14
that company right real living breathing human being at
that company your your projects matter more your ability to show the work that
you've done matters more and so the way we get around really weird requirements
that a company really want to work for is to network our way in [Music] um
let's see uh scene group says before for tonight no it should probably be new
groups tonight just to work with more folks uh but like I said we're gonna
we're gonna take our time to get through this adding comments I want you to see
it have a rough idea of how you might approach it and then go right into uh
groups working through it with some other folks as well
and speaking of that there was a raffle today
let's go ahead and take a raffle that was in the newsletter

05:15
and I'm just gonna go ahead and copy this real quick
and do random name picker here boom 400 people before I mentioned it
normally she's up to like 800 as soon as
I say it so I grabbed before you all can run in there I took a random winner
all right AMA Alyssa uh whatever group you join on Remo I will join you and we
will work through uh adding comments together for the first half an hour or
so and then there's any other questions I'll answer them and then I'll keep my
moving around so I'm coming to your table first foreign write this name down

05:16
boom all right so tonight I want to walk through are
binary upload boom our social media app but I want to add comments and I want to
go as quickly as I can but before we jump into that we did some questions
please go ahead and check in if you haven't already checked in I can do
exclamation point check-in to get the link here tonight click on that link and
uh you'll go ahead and like and retweet that tweet so I know that you're here
that's how I do attendance and since we're getting closer to the end of
this cohort bad face uh we are going to kind of chill the class announcements
and just take some time to highlight some really amazing resources uh that
are always free of course and tonight I saw uh primes data structures

05:17
and algorithms course which is phenomenal it's one of the highest
quality uh like tutorials I've ever seen running Masters really knows what
they're doing Prime tore it up and so it's completely free
nine plus hours quality data structures and algorithm stuff uh that's wild so
what we want to do with our kind of check-ins over the next few classes as
we wrap up is slow down kind of the the hundred times
check in normal class stuff and just start highlighting some resources that
are amazing completely free and will help a lot of folks in their career so
go ahead if you haven't checked in already so I do attendance and you can
always just follow me on Twitter and see it there or it's always on Discord or
you can actually just do exclamation point check in here
all right submitting your work I said I would give you until today to get The
Hit List in right to get The Hit List in and so if you haven't submit the hit

05:18
list yet go ahead and submit it in this form for me today please uh that way it
can count towards your hunttober submission alrighty
what did you think of the Zelda announcement I actually haven't seen the
direct yet I just saw donkeys dunking on the PS5 versus the Nintendo Direct so I
did see that there was something at the end of it but I haven't actually watched
the um the thingy do you still have to pay the
for the front end Masters though no that's the cool thing
um you do not to pay for front end Masters you do not even need to enter a
credit card to get access to that data structures and algorithms course I would
never link you resources that you had to pay for and I try my hardest to never
link resources that require as credit cards so for their front end Masters you
don't need a credit card you don't even you don't need anything you just need to

05:19
create an account completely free yeah it's wild yep
yeah and they they said they're gonna make it permanent that it will always be
free which is a big deal for me yeah so it'll always be free no credit
card uh what else can you want and it's a huge like it's just a huge massive
course with really high production value um
all right uh if you need that last bit of magic to fill out the Hit List don't
forget to use it uh and that's kind of it oh sorry back in review class We're
not gonna be able to do this Sunday uh we're gonna wind up doing a uh Power
Hour and we're gonna push the back in review to the following Sunday so
we're still wrapping up the binary upload boom today so the backend review
won't be this Sunday it'll be the following and this Sunday we'll do a
Power Hour at our normal one o'clock Eastern time so I some folks still

05:20
wanted to catch up from the last one this gives me a little bit more time to
prep for the next one and so we'll do a Power Hour this Sunday at 1 pm eastern
time and then the following Sunday we'll
do probably like another six hours uh to finish it up oh
all right those are all the big announcements I wanted to talk through
what I want to do now is do a speed run through adding comments and then we'll
get in groups and you'll do it yourself C1 do one each one all right let's go
ahead and make sure that our app still works this is just the app that we've
been working through uh the code is on GitHub if you need it let's do npm start
all right my server is running I'm connected to mongodb let's just play
around and make sure that it actually works login we're logged in

05:21
we got some posts that have some likes and what I would love to make sure works
is that we can add like comments right here so
I went whoever's logged in to be able to leave a comment and I just want to be
able to see all the comments in like a list so nothing too
nothing fancy we're just gonna go for it and
go pretty quickly through it because I just want you to have a rough idea of
how to do it and then the bulk of your learning the bulk of you figuring it out
won't be me live it'll be you working in groups through it together so let's
think through uh adding our comments we have our original kind of document and
so if we're going to add comments let's just add comments on individual posts
right so I want to add all right I want to add individual
posts I want to add individual I want to add comments to individual posts and so

05:22
if I'm going to think through about my comments the thing that I'm going to
originally think through is just all right
I have my users I have my posts I think comments are going to be their own
collection and each comment will have a bit of information uh there will be
the actual comment itself there will be maybe who made the comment
and what post the comment is tied to right so
we'll probably say all right we have an individual post
how can we tie all the comments on this uh to a specific post if we look this
post has the idea 501 and then all these comments have a post
idea 501 so I am tying these three comments directly to this post by the ID
so just like we've been using the IDS with their posts our comments will be

05:23
their own collection with their own documents and we'll tie comments to a
specific post by using the IDS yet again so I'm going to start off with that I
think for me I like to start off with my data
right I like to start off with my uh like what what's going to wind up in the
database and kind of work my way backwards so where am I going to start right
oh you all thought I meant like comment the code not like add comments to it no
no we're adding comments there's like some people that probably
skip this class like I don't want a comment code [Laughter] that's funny
I'm sorry I should be more specific all right you got that um
cool all right so yeah we're gonna start with our model so let's go to our code
here um and I want to add a comments model so

05:24
first thing I'm going to do copy my posts model and then in my models folder
we can just right click new file and we'll call this comment.js
I'm going to post paste my post model and requires Mongoose I'm going to
change this to comment schema comment schema and do we need a title No
but we do need a comment that is a string we don't need an image we don't
need a cloud in there we don't need a caption maybe we keep the number of likes
um yeah maybe we keep the number of likes so I'm just gonna eat this to here
right maybe we keep the number of likes uh we could have like a user
um but we don't really we didn't really we don't really need to we don't really

05:25
need to know which user made the comment because that's just that's you could
eventually add that if you wanted to so I'm actually going to change this to
like post like what post made this uh what post does this comment come from so
the idea of what we saw over here where we had uh all three of these comments
right all three of these comments pointing to this post well how do I know
which posts these comments are supposed to point to and so I'm just going to go
ahead and leave this as a post instead of the user um
yeah this is a speed run you can name It Whatever the heck you want to name it
when you get to work through it together so I'm just going to leave it that I'll
leave created that and we'll call this comment
and we're exporting the comment schema cool so now we have our comment model
and where are we actually going to wind up seeing these comments are we trying

05:26
to code along hell no uh this is this is me trying to show you
how I might approach it and then you're going to do all the coding in your group
so you're gonna see me do it very quickly minimal minimal kind of
explanation you're going to see how it comes together and then you're going to
do it together in groups all right let's see
all right I feel comfortable with this comment comment likes posts created that
comment comment schema uh we're gonna see it under each post so where are we
actually getting the posts from let's go ahead and look at our post controller
and we have like the get post method so probably what we need to do is when we
get the post here we probably also need to get the comments so let's go ahead
and what else do we need here before we can get the comments what else do we

05:27
need yeah we're going to need to load the comment model as well
so let's go ahead and do comment and we're going to go ahead and do
models comment because that's our comment model so now we have now we'll
be able to pull in the comment model and when we go to get post not only can
we find the posts um but we can find uh specific comments
and I know that there's going to be a lot of comments and we're probably going
to want to sort the comments so we actually have right here from the feed
where we went and found all the posts I'm going to reuse that line actually to
find all the comments I'm going to call this comments
and we're going to use the comment model to find the comments
and we'll sort by descending um but there's one other thing I don't

05:28
want to find all the comments what comments do I want to find
yeah by the specific post so if we look at our comment model we actually do have
a post property for the individual post that this should be tied to so in my
controller I can just find wherever post matches and how could I how do I know
what post I'm on how do I know what post I'm on
yeah I'm lucky I already have the post ID this method is trying to render a
specific post right this method is trying to render a

05:29
specific post and so this is trying to render a specific post um
they're trying to render a specific post
I already have that actual post that I'm on inside of the
rec.params.id so I can just throw that in here
right and now I'm going to look through my com I'm going to use my comments
model to go to my comments collection I'm going to find all of my comments
that have a post property of the current post that I am actually on
right and then I can sort them to sending order and I got the lien so I'm
getting just the the pure the the pojo the pure uh the pure JavaScript object
cool and then the only thing I also have to do here is now that I have the
comments what do I need to do I grabbed the Poo exactly
I need to add them to my ejs I need to render them into my ejs so

05:30
let's go ahead and pass in comments comments
yeah there we go so inside of our ejs we're going to have a property of
comments that are equal to the comments that we found in our
collection that match the idea of the post that we're on and so
we probably have to just go ahead and modify our post ejs now to use the
comments so if we go to our post ejs um we have like the caption and
underneath the caption here is where we can probably put the uh the actual
comments like it's just we're just gonna maybe Loop through and create an Li for
each comment so I'm going to put a UL here
and now I need to Loop through all the comments that I would get back from the

05:31
database and where can I find that Loop where have we done a loop so far
yeah the feet so let's go take a look at the feed ejs
um feed EGS has the loop here for the Post like in the feed we have all the
individual posts we went to the database got all the posts and then looped
through adding each post well we can just join this
because it'll be the same thing for our for our comments so we'll just say
comments here and I'm not doing anything fancy
I'm not gonna do anything fancy so I'm just going to get rid of um
let me get rid of this get rid of this and it's just gonna be comments

05:32
and what would be the property that we need comment yeah
like if we look like if we look at our posts model
if we look at our post model we have a comment property
right we have a comment property so when we Loop through all of our comments
we're going to pull the actual comment off by the comment property right
I will put off by the actual comment property so now we should have a loop
all right we have a loop that should go through and pull off all the comments
cool now I have already been playing with this so I have already added some
comments to my my database and so you can see the comments are now showing up
for this post right my comments are already showing up for

05:33
this post if I was I was already doing this earlier right so I know that this
is working that it's pulling comments from my comments collection uh if we look
let's just run back what we did we created a comment model that has a
comment property in our post controller we said hey go to
our comments collection find all the comments tied to the post that we're
showing on the page sort them and then we're going to pass them to the post ejs
to render when we look at the post ejs we can see that we now have this for
Loop that's going to Loop through and show all the comments right show all the
comments uh in the Dom cool oh yeah I do have an extra there we go eat

05:34
let's save that and go back should I there we go got rid of the uh the extra
carrot there all right so this is only doing
something because I've already added comments to my to my database but the
next big step that we have to do is like actually have users enter in comments
right right now we're able to grab comments that are already in our
database but none of you all will have comments in your database yet
um so we need a way to insert comments what do we need if we want our users to
be able to make a comment hey Juicebox yeah we need a form uh where are we

05:35
where we where do we have a form before where have we had a form before
yeah when we created a post which is on the profile
so if we go to our profile we actually have a form here already I'm going to
grab this whole div that has the form in it
uh let's go back to our our post ejs and probably just right above our comments
I'm going to add the form and for our form we don't need any of this stuff
we'll actually change this to add a comment
um we're gonna have to change the action uh we don't need ink type multi-part
form data because we're not um we're not uploading a file and actually
if you like leave that you might run into some trouble you're gonna have to
do a workaround so I'm gonna eat that and then I will change this from title

05:36
to uh comment and we'll change the ID to comment and we'll change the name to
comment so now our form has a comment input and I don't think we need anything
else I'm going to get rid of this get rid of this [Music] um
and I don't even need the value of upload it's just a submit button now
cool so I just kind of took the form that we already had in our in our
profile took away the stuff we didn't need and now the only problem that we
have is that this action is not correct uh and so what I'm probably going to
want to do is make a route specifically for comments

05:37
right make a route specifically for comments right so I'm going to say comment
create comment and then you know what how am I gonna know
how am I going to know what post I'm on like if I add a comment to every if I
had a comment form to every single post how am I gonna know which post I'm on
yeah I'm gonna need to plug in we need to plug in the post ID so the
cool thing is we can just plug it into the form even though this is a post we
can still plug in the uh the ID um in our profile ejs where we actually
have our Loop here uh we can see that this is how we plug

05:38
something into the URL I'm just going to copy that
and I'm going to plug that into my post ejs here boom so now what this should do
is when this post page renders right when the post page renders it will now
have a form and that forms that forms action will have a new route that we
don't have a router for or a controller for yet we haven't gotten there we'll
have a new route of comment create comment but we should be plugging in the
current post ID remember remember our post controller we passed
as part of the post controller all the info about the post and all the info
about the comments right and so we passed all of that in to this

05:39
uh post render so when I look at the post ejs
I know I already have access to the ID of the current post
now it's going to get rid of the space because sometimes that causes me trouble
all right let's save this and let's see if it actually works so let's refresh
and let's see post is not defined uh post is not defined that means I
probably called it something different in my controller here
uh oh it's called post post uh so I have to change it to be post here
post all right let's save it uh let's go back uh

05:40
cannot read properties of undefined uh there's no Loop oh yeah no Loop and
what do we pass in is it just post ID yeah there's no Loop right because
there's no loop it's just the post remember when we were looking at the
profile ejs we were looping through so it was post and we needed the index to
Loop through it says now we're only passing One Singular post uh we don't
need the uh the index because there is no index
so that should be it let's save that let's go back refresh just to make sure
boom all right so now we have a comment form and if we inspect it
if we inspect look at the action look at that action
that action's pretty tight look at that so we have

05:41
comment as the base of the route create comment and we still have our ID as part
of the of the action so when I submit this post when I submit this post uh
there will be sent comment create comment and that that that ID that I can link
so now we have what we need I think to load
this post page we have the actual form we have the loop that's actually showing
us the comments right so what we need to do now is build out
the route to be able to post a comment so we have to go all the way back to our
server.js because we need to add a new route um will that post

05:42
like sorry will that comment be on our main routes our post routes or do we
need a new routes entirely yeah let's make a new one Let's uh you wink oop
I'm gonna call this comment and we'll call this comment routes cool
uh and then we need to come up here and actually require the comment routes
so we'll call this comment routes we'll just call the name of the file comments
cool and so now we need a new route file in our routes so I'm going to come down
here new file comments.js and I'll go to our post

05:43
routes I'll copy everything I'll come to our comments JS I'll paste it now we
have our routes for our comments um do we need motor now we don't need molter
um do we need our post controller we're probably going to make our own comments
controller yeah we're gonna make our own comments controller so we might as well
do it while we're here uh comments controller requires controllers comments cool
um and we can keep our middleware and then the only thing that we're so
far adding for our comment routes is what what's the only thing that we
that we need for our comments route yeah we only need a post we don't need

05:44
to get ye we don't need to put yeet we don't need a delete well
I just need the post and what is our route for the Post we're
already we're already on slash comment right we're already on slash comment so
we don't we don't need to worry about that what's our full route
for right now for right now you might you might when you get into your group
add the leading you might add um liking or something like that but for
me I'm just I just want to create comments yeah slash create comment cool
slash create comment and I need one other bit of information I need the ID
right I need the ID I don't need this upload because I'm not uploading a file
and we're going to call this comments controller

05:45
comments controller and we'll create comment not post
cool so now we have the router set up we should be now be able to when we when
we submit that form the server.js to send us to this router
this router should hear the create comment ID which is a post
it should then point us to our comments controller with the create comment
method so we have to create that controller controller controller
here's our controllers new file comment s dot Js cool
and I was going to grab my post controller copy and
I'm going to just go to my comments and paste cool this is a speed run folks

05:46
chat I am paying attention I got [&nbsp;__&nbsp;] to do
this is not in the repo yet no because you all are doing it together in just a
few minutes [Laughter] I'm going for the world record baby you
can't hold me back all right I don't need any of this except for
we're gonna call this create comment cool I don't need any of this cloudinary
stuff yeah um I don't and we could we got to clean this up too uh mine's a title
it's not a title it's a comment so I'm gonna need a comment I'm gonna need
comment from the body I'm gonna do rec.body.com and remember
if we look at the post ejs the post ejs now has an input with the

05:47
name of comment so when this form submits the input the whatever values in
this input will have the rec.body dot comment
so when you rack that body dot comment I don't need image
I don't cook I don't clean let me show you how I got this ring actually I do a
lot of cooking anyway let's go ahead and see cloudinary ID
we don't need caption either um what actually look at let's look at
our model see what we actually need uh we need comment we need likes and we
need post all right so we need comment likes and posts right
comment likes and posts and the Creator that's a default so we don't actually
need to submit anything for that comment likes post
control that so comment likes we already have hard coded and
um so we'll get rid of caption and then here we need the post

05:48
how can I grab the actual post that we want this comment tied to
we passed in the ID right if we look at our we look at the route
we passed in that idea as part of the URL if we look at the form
all right if we actually look at the form we look at the form the the the actual
post ID right the actual post ID is already in there
right the actual post ID is already in there so we can just grab that ID as
part of our query parameters so we can just do rec.params that ID
just like we grab it for any other any other place where we have seen

05:49
in the profile right like in our profile controller
would have seen that let's let's take let me write a post controller
uh let's take a look at the post controller real quick
right we grab the we grabbed the ID from the parameters that's all we're doing
here so we're gonna be able to grab that ID be able to grab that ID from the URL
right and store that as the post so now whenever we create a comment we
have the comment that came from the form we hard coded likes we pass in the ID
from the URL that is the current post that we want this comment tied to and
then it does the Creator that by default we don't need that here um
I don't think I need anything else here so get to step in boom

05:50
and I don't think I need like I don't think I need delete cool
I just need to create comment and redirect oh I want to redirect them
back to the same post I want to redirect them back to the same post um
we'll be that route we already we're already on there right so it would be post
right we need to redirect them back to post and then we'll just say uh
wreck params.id right there we go that should take them back to slash post
slash the actual ID of the post slash post actual idea of the post yep

05:51
that's the URL all right let's save this um oh and I'm using the wrong model
this should be the comment model right because I'm in the comments
controller I'm trying to create comments that requires the comment model and I
required comment I don't need Post in here and I don't need cloudinary in here
okay all right I think I think we are I think we're close comment comment
comment all right so let's step through it uh they submit the form
this form is a comment route which takes us to comment arouse which

05:52
requires us to go to the routes folder to our comments route file
um where you were requiring the comments controller we're listening for comps
comment slash create comment we're grabbing the ID of using the comments
controller in the create comment we have our comments controller with the create
comment method uh yeah that's a good idea we should we
should uh say comment has been added comment has been added
uh so I think that and then we redirect back to the same post I think that might
be able to make us make uh I think that might be making posts
I start making comments let's see I'm just going to go back to like the
beginning uh let's go here uh there's already one comment oh show

05:53
let's go hold on 10 second warning 10 second warning and five all right [Music]
foreign all right let's go let's go and actually let's we
gotta test something though let's go to a different post let's see
mirror all right cool so the you can see that the the comments aren't showing up
the comments aren't showing up for mirror right so it's only the the

05:54
comments are actually tied to the individual post we can see another one
in test or on Athea and we can see that here we have for show and Betty cool
all right stop the clock what is that under under a minute at least adding
comment speed run now there's a lot more that we could do and
I'm sure there's quite a few things that we could we could we could clean up
right I'm sure there's some things that we could clean up
um you might when you start working in your groups want to maybe add something
like likes but your goal is to do what I just did I went through this super fast
there's no way that if you've never added comments before that you should
have been able to catch everything that I just did right that's kind of the

05:55
point I want you to see one in all of its Glory very quickly and now you're
going to get into groups right you're going to get into groups and
in your groups you're going to try and build comments as well right now I will
push this code to GitHub in like a half hour right in like a half hour um
but you come together as a group get your code base working so that means
make sure everyone has able to get mongodb working uh make sure everyone is
able to get cloud in area working right and then add your comments
all right I'm gonna step through it one more time just so we can see
and then you're going to work in groups uh this will be your homework due next

05:56
Thursday is to actually add the comments so let's go ahead
and uh just step through it real quick we added a comments model
right we added a comments model where we added a comment property a Lex
property a post property and it created that property uh the Post Properties
like the post that the comment is tied to in our post controller when we go to
render a specific post we're also grabbing all the comments that are
associated with that post we're passing all that to our ejs so when they load
the post page now not only are they loading all the stuff about the posts
but they're adding the form to add a comment and then all the comments tied
to that post uh we'll notice that our form when we submit it has a new route a
comment route with a create comment and including the idea of the post that

05:57
we're currently on so for that to work we need a new route for comments in our
server.js file we're going to have a router specifically for our comments we
only did one thing with that with that route which is creating a new comment
which is a post we say all right here's the action from
the form create comment we're grabbing the ID of the actual post that we were
on and then we're going to use that comments controller right that comments
controller and we are going to go ahead and create a comment so comments
controller create comments go to our comments controller uh what we do is we
use the comment model we're going to create a new document using that model
that has a comment property that came from the form likes that were hard
coding and the specific posts that were already on that were pulling from the
URL when we're done making the comment we redirect back to the actual post page

05:58
and we should be able to see the comment that we just made um all right
let's go ahead you know what let's actually do um same groups as last time
uh which might make it a little bit easier just to kind of jump into it
because I didn't do any post pairing so let's do same groups as last time uh go
over to Remo if you don't see your group
that's okay uh go to now let's mix it up let's mix it up we went through same
groups as last time uh join Remo uh there are two Remo groups I recommend
everyone try the first Remo group first right join the first remote group first
uh join a table introduce yourself right and start trying to add comments if if
uh no one sits on your table go find a different table feel free to move around
a little bit if your table already has some folks that have done it great have

05:59
them walk you through it right the uh the beautiful part here is that no
matter where you're at technically you should still join us tonight and try and
work through it with the group if you are already got this down lock you
already attempted it for homework already your job is to teach somebody
else how to do it see one which we all just saw do one what you're about to do
together and then we want to teach one so if you finish it right if you finish
it teach the rest of the folks in your group work through it together make sure
that you're spending some time not to go deep as a general rule of
thumb as always if you can't be kind this is not the community for you please
respect the idea that not everyone is super comfortable with the back end yet
we're all here to learn we're all here to learn we're not here to add some
random wild stuff that you found on the internet into the mix we're not here to
add react to it we're here to do exactly what we just did live together we're

06:00
going to work through it together if you already are ahead great show somebody
else how to do it if you feel like you're you're struggling with the back
end great join a group and ask a ton of questions the point is to learn it is
not to produce beautiful code we're all bad as we write bad code please the
point is to walk away having a better understanding of how we might do
comments the VOD will always be immediately available so you can always
kind of come back and see how I did it in real time if you need to I'll push
the code to GitHub and a little bit once
you get into your groups Mine Wolf did a stream yesterday where they got
cloudinary and they got mongodb working so if you need that there you go
so everything you need is here on the internets now we're all going to go on
Remo Remo has been updated really try and use Remo first just because you can
be a little bit more collaborative it'll be smaller groups if for some reason re
like give it a good remote try and give it the good 100 try for some reason it

06:01
doesn't work then please go into a voice Channel but the voice channels get huge
and you're not going to get as much from it in the voice challenge you would on
Remo so try Remo first the links are on Discord they're on Discord and your
homework if you're trying to do hunt Tober your homework is to submit a pull
request with your version of comments uh on this repo by next Thursday
so yeah I won't I'm not going to push my
code I'll push it I still want you to do yours though
all right so you should probably take a break uh give yourself five minutes and
then jump on Remo right jump on Remo and
then uh start getting to it I'm gonna be on Remo for a good while I'm gonna join

06:02
um who won the thing again let's see I'm gonna join uh AMA Alyssa's table first
so you I think you might be pretty popular this evening uh we're gonna walk
through it together and then uh it always pays to open the newsletter folks
cool stuff I got a lot of really cool stuff coming for the newsletter upcoming
up soon so if you haven't opened it go ahead open the newsletter uh you never
know what you might find all right buddy this is a speed run
it's not meant for you to fully understand it that's what we're gonna do
right now in groups if you need the links let me let me just throw them in
chat while we're all still live uh but the links of course are always in
the Discord message let me just throw them in here real
quick so folks have the Remo links and then I'm we're not going to do a
raid we're just gonna we're just gonna stop because you need to take a break
and you need to go and get on Reno there we go there are the links folks in
case you need them all right I'll see you on Remo have a

06:03
good rest of your night work hard get these comments working and I'll see you
all on Sunday for a power hour and next week react folks all right let's get
into it peace
