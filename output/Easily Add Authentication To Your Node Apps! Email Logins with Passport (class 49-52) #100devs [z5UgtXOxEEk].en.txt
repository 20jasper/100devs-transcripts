
00:00
in this video I show you how to add user
authentication to your node applications if you ever want it to have users be
able to log in with an email and password this is the video for you it's
a three classes combined into one video that are part of our free 30-week
software engineering boot camp if you ever wanted to learn how to code but
didn't feel like shelling out thousands and thousands of dollars to do it this
is the place for you join 40 000 plus of
us on Discord and hundreds of folks that
have already gotten a job let's get into it it's a good night we're gonna add
some authentication to our full stack node applications and then we are
starting project week over a thousand plus people signed up to
work on projects tonight that's wild that's wild let's go

00:01
what's going on everybody get in here get in here Rascal 2 at the raid a thank
you at the raid hope you're doing well welcome in everybody
got a paid client yesterday Ty hey congrats it's huge
can we still sign up absolutely uh for folks that didn't sign up last week uh
you're gonna join Remo 2 on the fifth floor and up uh and that'll be your your
playground uh for tonight and Thursday alrighty folks welcome in welcome in
hey Sports it's in the game exactly all right
people are hearing a little bit of a an echo they're saying well let me see if I

00:02
can fix that real quick one second all right sorry about that
there's a little bit of a background noise that I uh turned off we should be
good going forward alrighty folks welcome back hope you all are doing well
good to see you all lots to get into tonight uh off
project night we're gonna come together to build something amazing so let's do
that all right let's go ahead and turn off your second stream of Leon that's
where you're here in the the double let's go all right so tonight we're
going to talk a little bit about 100 devs uh we're gonna talk about what's
due for hack uh for October almost said October

00:03
uh hunttober uh we're gonna talk through what's due today which is the
professional checklist we're gonna look through our application with off and
we're gonna jump right into building uh this this night uh so let's jump right
into it as always like to give folks a few seconds to get in here if you got
some questions got some answers give me some questions folks
give folks a chance to get in here I know they're running late coming in from
work the confirmation email to me by surprise
yeah with the checklist I made it so that it lets you know that you submitted
it that way there's no confusion as to whether or not you submitted stuff for

00:04
uh October is the mongodb thing addressed what do you mean
should ketchup folks bother with hunt Tober uh so like I said hunttober is
going to be a focused group of folks that are ready to get a job right then
and there uh so for October we're still going to have some regular streams but
that daily group that meets with the sole purpose of getting a job is only
going to be a fit if you got done all the work that we need right like going
into the hunt you need to be prepared you need to have the things that I'm
asking for done so it's not me asking for these things or setting up deadlines
just for the fun of it is these are the things that I've seen time and time
again that have felt folks get jobs so for everyone that has that stuff ready
locked and loaded ready to go we're gonna Focus all throughout October to
get the jobs that's that's the goal uh do we need to submit the checklist if
we already did it before yes uh so you're submitting everything these all

00:05
are new submissions uh it should be all your most updated stuff and that way I
have it all in one place yep you definitely if you want if you
want to be part of October you have to submit everything uh in the the the the
submissions that I'm sharing going forward yeah no matter if you already
turn stuff in because I have been asking for it since foreign but anyway
so please get it in uh the submission will be open uh tonight uh it'll be open
uh for this I'll keep it open for the full week just as little extra for folks
that are still trying to catch up for it I will leave it open until next Tuesday

00:06
and we'll talk all about that stuff as we kind of get into it
all right a lot of folks in here uh can we do daily code Wars even if
we're not part of hunting absolutely so I think we talked a lot about this on on
Monday but uh just to kind of echo it again uh nothing changes if you don't
participate in hunttober right so we have a lot of folks that are part of the
ketchup crew that obviously probably won't participate uh in the hunttober
that's absolutely okay you're you're only missing like that focused group of
individuals that are going through that that portion of program together and
what it is is it's daily data structures
and algorithm stuff and also just trying
to get listening to what folks are going through on the hunt uh how the job hunt
search is going uh how the interviews are going things that they should be

00:07
doing when they're negotiating salaries all that stuff the beautiful thing is
all that core material is already on my YouTube so uh everything's already on
YouTube we're gonna have so many classes that cover all that stuff it's really
just a group of folks coming together to focus on those things for a month but
catch-up crew and anyone that's not participating totally fine you're going
to have a wonderful experience as well cool struggling with the creative part of
starting projects especially the hundred hours any suggestions pick something
that you're passionate about something that you hate that you want to fix or
better yet something that aligns with what you've done in the past right
right lines of what we've done in the past like what you've done in the past
so uh if you were a teacher build something that would help you in the
classroom if you were a barista build something that would help you in the
coffee shop right like make sure that you're doing something that like links

00:08
your past to your present that's an easy way to kind of think of a 100 hours
project um if we submit the checklist months ago we
aren't getting confirmation no because you have to resubmit the checklist you
submitted it before it doesn't count I want it now
that way I have all of it in one spot uh sorry for streaming this kind of
anxious when filling out my hit list with mostly Junior entry level the
requirements are still very intimidating uh how much do we ignore when it comes
to years of experience at other Technologies you ignore every single
thing that's on that job requirement because you are not clicking apply
you are not clicking apply you are talking to a real living breathing human
being that works on that team or at that company and you are getting your resume

00:09
in front of them and when they ask about your requirements you can massage the
details to make it fit what they're looking for right those those
requirements especially for entry-level roles are wish list but what most
companies are looking for is someone that is going to be able to join day one
learn very quickly get up to speed on their technology their stack right work
well with others on their team wait a minute that sounds an awful lot
like what we're doing tonight new code base
stuff we might have never seen before new team we have to come together to
build something hmm oh interesting very very interesting so
yeah the the entry level requirements really don't matter uh because you're
now you're never clicking apply right you're talking to a real human that can

00:10
qualify those things for you right when you're talking to a living breathing
human being you say hey this is my this is what I've built here are the things
I've built here are the clients I've worked with here are the open source
contributions that I have here's all the code that I've committed over the last
month right when you're talking to a human those requirements kind of really
don't matter as much because they can see your your aptitude to build to learn
to grow quickly and that's what they care about most of the time now are
there some companies that are curmudgeons about having certain years
of certain experiences because they're stuck in the Dark Ages absolutely you
chalk it up you move on the numbers game it is always a numbers game right you
are always going to run into opportunities that seem cool that seemed
like something you'd want to do but for some reason there's a barrier you move

00:11
on one of 60 right one of sixty one is 60. yeah cool all right
uh including the tech stack yes if it's a company that you'd want to work at UH
most folks will leave a hundred devs and
work at a company that uses technologies that we did not cover here together
uh I think out of the last cohort a lot of them went to kind of JavaScript
focused places but a lot of them use different tools on the back end they use
different languages entirely you are not
being hired for your years of experience with a specific technology you're being
hired for your ability to pick up new things very quickly to learn to grow and
to be molded into the engineer they needed that company
DB says I'm working in Java exactly I can't tell you the like out of the
hundreds of students I've helped get jobs it's it's never what they've

00:12
learned it's it's it's more about those other skills that you can apply on the
job that's why this isn't really a coding boot camp this is a getting a job boot
camp big difference all right folks we got a lot to get into
tonight uh we're gonna spend quite a bit of time uh just talking through once
again just hunt over real quick just the things that are due uh quickly and then
we're gonna spend a chunk of time looking at that uh MVC authentication
code looking at the app together seeing the bits and Bobs that are working and
then moving into project night you're gonna play You're Gonna first understand
all that code together start building on it together then we're going to come
back Thursday and we're gonna go deeper into the authentication stuff together
once you've had a chance to get your hands on it to play with it to start
adding to it we'll have another lecture on Thursday that goes deeper with
authentication and then the projects will be due that next Tuesday um

00:13
all right checking in uh if you haven't checked in please go ahead you can do
exclamation point check-in that'll give you the link for tonight it's the Tweet
go ahead like it retweet it uh helps folks find us also lets me know that you
are here if you want to participate in October uh if you eventually want the
the verification once you graduate uh we need to know that you're actually here
for class don't put me in the awkward situation where you say hey Leon can I
get that certificate and I go and I check and you haven't checked in you
haven't submitted homework there's nothing like nothing I can really do for
you at that point right so please let me know that you're here check in uh and
make sure you're submitting things on time hmm
does check in apply to ketchup crew absolutely because ketchup crew
hopefully at the end once the uh completion as well alrighty
uh we talk a bit about on Monday I see a lot of folks asking about oh no the

00:14
heroku's have ended um yep Heroku unfortunately is
sunsetting their free plan I've been talking to a lot of other companies
recently that might be good replacements I'll have my Like official
recommendation next week I've been playing a lot with different Services
over the past weekend I'll continue that this week and continue to talk with
people and then we'll have something that we'll be using going forward lots
of great options just trying to figure out what the best for us would be
Doug welcome all right thank you for checking in uh submitting
your work I I want your checklist I need your checklist go ahead and submit your
checklist for me uh here's the form to fill it out it's also in the follow-on
materials channel on Discord uh please triple check everything uh before you
submit uh please don't submit stuff that's incomplete or fake there's always

00:15
a few of you that like just try to like submit like random stuff uh it just
makes my life more difficult and it won't help you because I'm immediately
just gonna throw you in the Sin bin uh and you'll never be seen again uh from
my eyes so please triple check before you submit don't submit incomplete or
fake stuff just to try and you know slide on through it's not gonna work I
see you cool and if you're like hey I see some people
asking about like the stuff that's on the checklist we had a full class that
walked through everything that was due on the checklist uh definitely go back
to that previous class on YouTube it has all the details for every single thing
sinbin is like um in you know like how in hockey they put you like in like they

00:16
put you like that like glass box when you've done something wrong well in
rugby the sinbin is like you go stand underneath the like you go stand in the
Tri Area like at the end of the field it's the Penalty Box yeah so sinbin is
the Penalty Box in in rugby that's where that comes from foreign
thank you for submitting your checklist uh you don't have to do it right now I'm
going to leave it open for the week to give folks a chance to get in I want you
to take your time submitting everything don't rush to do it take your time
submit it uh and you'll be good uh a lot of people reached out to me
about this upcoming Sunday being uh Labor Day weekend which is a holiday
here in the states so a lot of folks asked me to push the back in review so
we're going to push it to the um we're going to push it to the other the
next Sunday so not this Sunday the following Sunday we're going to do a

00:17
full back end review uh everything from the beginning of node all the way
through this authentication stuff that we're working on
um it's just going to be it's going to be a full review so if you're still kind
of catching up on the back end are there things that still kind of don't make
sense boom this day is for you come on through I will make sure that we spend a
lot of time make sure everyone feels super comfortable boom
uh big thank you to everyone uh it was great talking to everyone yesterday uh I
just want to lean into this idea I'm not going to review everything we talked
about but I'm just going to say leaning to this idea that we're Community taught
you have an amazing support Community that's here that wants to support you
that wants to see you win tonight we prove that once again working in
projects I'm going to ask you to be the amazing community that you already are
work well with each other support each other help each other learn as the
Paramount thing that we do today uh when we get into our groups you're going
to spend some time in the beginning just to get to know each other you're going

00:18
to spend some time getting to see where folks are at in their coding Journey we
may have some folks that are still part of the ketchup crew that haven't gotten
all the way up to where you currently are in program that's okay as you start
working on these projects do things that are accessible to everyone so if
somebody's really good at the HTML and CSS because they're on class five guess
what that's what they're working on if you're caught up guess what you're
working on the authentication stuff right so make sure that you meet each
other where you're at be kind if you can't be kind don't show up
it's not about showing out it's not about actually like getting a project
fully complete like I don't care I want you to work together I want you to build
something cool and I want you to have fun doing it you can't be kind you can't
do that you can't work well with others you want to be a flexasaurus don't show
up just just close your eyes you just go away it's okay you can come back next

00:19
week that's fine Just Close Your Eyes all right also a j a very gentle reminder
for those that are like Leon I can't slow down I gotta go fast I need to be a
flexasaurus on the go that's okay every single thing you need is on YouTube
already all of our classes that we're gonna eventually get to later on in this
cohort they're already on YouTube if I have to miss a class you have a metric
crap ton of work that has to get done and you have a community that's here to
support you to get that work done all right so all the classes already on
YouTube and you already have your marching orders for the next two months
a hundred plus hours of work that you have to be getting done right now your
100 hours project plus all these other things if for whatever reason we're not
live it's not a oh no we're not live it is this is a chance to get the work I
need to get done the work that I've been trying to get done since April for some

00:20
of us right that's the chance we need so lean into Community tonight lean into
supporting each other leaning to helping each other working through things that
don't make sense is the goal for tonight when we come back Thursday we'll dive
deeper into the off we'll see it more we'll understand it more we'll break it
down more but I want you to play I want you to practice something very very very
fundamental you are all very soon going to leave a
hundred devs and join a new company it will be a brand new code base that you
have never seen before it will be a team
that you have never worked with practice that tonight practice being kind
practice getting to know other folks in an engineering context practice getting
up to speed with a code base that might be unfamiliar to you because in a few
weeks that's what you're going to be trying to do in real life so I would be
doing you a disservice if we didn't start practicing those things a lot of

00:21
what we do going forward is just trying to get you ready so that when you get
placed into a job you don't have the shock right you're ready to go you're
ready to roll and so that's what we need
to lean in tonight we're practicing that where we're working through those ideas
and we'll do it together cool uh for hunt Tober I really want to
help you with stuff like resume portfolio job Outreach interview skills
I want to help you uh get verification letters or completion letters for things
that you might need for folks that make our way through October I want to be a
reference for you uh it's going to be a Monumental amount of work it's never
been done before at this scale we're gonna try my really hardest to get it
all done and to do it well but it'll be a lot of growing pains we're going to
work through it together to get all of this stuff to do all these wonderful
things uh I I need some stuff from you right and and I really ain't here to
play about these things I need these things done because if you have these

00:22
things done you can go about the job search
in the correct way right in the way that I've helped literally hundreds of other
people get jobs is through this pathway and so it's not because I want these
things done it's not because I want you to hit these deadlines it's because
these are the things that I have seen over my 10 years of doing this that have
actually moved the needle right right move the needle right to get stuff done
box said there's nobody at my table because we're here on Twitch chat first
we haven't gone to Remo yet uh so please if you want these cool
things if you want to be added to the special channels you want the interview
feedback you want the stuff that that'll
help in Faster these are the things that I need
um some folks have been asking like what does the verification look like so I am
going to read you a letter I read this yesterday but I'm going to read it again
just for because we have more folks here um here's a letter that I I shared with

00:23
someone uh that started their job yesterday uh so this is a letter I shared
um to whom it may concern please accept this letter as confirmation that person
has participated in the 100 Dev software
engineering Academy the 100 devs Academy
is a 30-week training program that helps individuals learn in-demand software
engineering skills and helps our digital agency develop top engineering Talent
during their time in 100 devs this person grew their engineering skill set
and even became a contributor to a popular blank framework with a
JavaScript framework uh this person shows great promise and
your company is lucky to have them if you have any questions require
information please give me a call at this number my direct line or send me an
email right this is what I want to give to you
for folks to get all this stuff together that
um kind of Meet the the requirements that we're putting here because I want
to be able to put that little extra line in there right I want to be able to say
like this is the thing that they did right this is the client that they got

00:24
this the uh organization they volunteered with here's the free
software uh community that they that they contributed to right these are all
things that I want to be able to put in these letters I got to figure out how to
automate this but these are the things that I want to to do I can't do it if
you don't do these things right like I I can't I can't give that to you or do
that if you didn't do these things right so that's why I'm asking for a lot of
this this is why I want a focused group of folks right
right you have to do these things I can't I can't do something like that you
know cool alrighty so ain't here to play here a
list of things I need done uh please check in for every class right check in
for every class uh make sure you're turning the homework in on time going
forward right um it'll always be due a week later uh
make sure you're doing your networking one coffee chat a week three connections

00:25
every week uh if you don't remember what those things are we'll go back to our
previous class on networking um and I talk through it in detail
use your sheet I'm going to eventually ask for your sheet to see that you're
adding these coffee chats you're adding these connections
make sure you're doing your coding challenges every day I'm starting to
give you like specific coding challenges
I want you to do to get us ready for the interview process to get us ready for
October where we'll be doing our daily data structures and algorithms together
and you're pushing those challenges every day right you're pushing those
challenges every day recruiters love those green squares they do they do they
do you're also working on your Banky right and here are the coding challenges
I want you working on this week so last week I asked you to do strings guess
what I'm asking you to do strings again this week five new code Wars that are
all string problems and please redo the five you did last week make sure you can

00:26
recall them make sure you can do them make sure that the methods and things
that you used you can actually use still right I was doing five a day no
just one a day one a day daily yeah cool
um what coup should we do it's up to you if you want to do eight seven sixes uh
it's up to you to where you're at I think a lot of folks should start slowly
if you're not somebody that's been doing a daily habit of code Wars yet
don't rush in and start trying to do sixes do all the eights
all right Build It Up I feel like I'm mastering the strings hey that's awesome
I do feel like I can manipulate strings now that's great that's awesome cool

00:27
alrighty checklist uh is due today uh please even
if you submitted it months and months ago uh please make sure you're submitted
today because I need it fresh I need it in this form so that I can have
everything in one place uh I'm still giving you an extra week to get it done
for folks are like trying to well it should already be done I'm giving a week
to submit it let's say so please get it in so that I have it
uh Team project will be due next Tuesday we're going to start it tonight we have
a little bit of stream we're going to start the project tonight and then we'll
have a little bit of stream on Thursday more time to work on the project and
that should be enough however the Remo will stay open all week long the Remo
will stay open from now until next Tuesday and so if your team
wants to meet up on the Remo to continue
working on stuff that you can absolutely do so
um we don't have enough voice channels on Discord to facilitate thousands of

00:28
you working in groups of six so if you need to
uh Remo will stay open all week so your group can go back and meet up you also
have your each other's Discord names um so if you need to Ping each other or
whatever you can do that uh we'll talk about the team stuff in a
bit when we get to the end of tonight uh
like what happens if folks don't show up or things like that we'll walk through
it or if you don't have a team we'll walk through that as well
uh hit list due September 13th 60 companies that you can actually apply to
60 you can actually apply to that's a it's a big undertaking don't wait don't
delay by today right cool uh client signature approved PR from an
actual open source project or volunteering for a Grassroots org do the 27th

00:29
so I mean most of you already have this done but if you don't you have a little
bit more time to get it done is that companies are job posting
company 60 companies 60 companies companies 60 companies
cool and we'll have a class on on Hit List you're it's gonna be your first
pass right this will be your first pass on The Hit List we'll have a class where
we kind of walk through refining it what if they're not hiring then they don't
count has to be 60 companies that actually are hiring
yep 60 companies that are actually hiring you start local because Locale
like being local is an advantage and then if you max out all the local
companies which is very rare for a lot of folks then you can start adding
remote opportunities things like that mm-hmm

00:30
and we'll go we'll have a deeper class on like how to actually refine The Hit
List but the idea is to have 60 companies that have open positions engineering
positions that you could actually apply to cool all right
and if you want to watch I have three full classes on YouTube three full
classes where I just did hit list right so if you're like I don't know what to
do for this Hit List boom go watch those three classes three full classes on how
to do The Hit List um and then we're going to do it together soon as well
jobs you can actually apply to right so if they're like mad old that doesn't
count yeah cool if I have a pull request from another

00:31
100 devs member does it count no like an actual open source project that's
building a real product um not there's a lot of these like repos
that are like get your first open source country no no I want I want somebody
when you're in an interview right when you're an interview you say I
contributed to this project and you can see that's a real meaningful project
like these are these things aren't just requirements to be requirements they're
things that are going to help you get the job so don't try and like curtail
them or wiggle out of them it does nothing for you does nothing for me
right it's not because I want these things because these things are going to
help you get the job so it should be something that's difficult right it
should be something that that's like hard to achieve like getting a
client getting a a volunteer organization to work with you like those
are difficult social PR it's like something that you you have to find a a
team an organization a project that's like you can work with right you can

00:32
submit something and actually get the um pull request approved yeah cool
your 100 hours project a beautiful MVP is due on the 27th right so we have
authentication this week we're going to be building your project this week and
then next week we're building an Instagram clone together quick pound
yeah we need to work on that name so we'll be building quick pound next week
then we'll be introducing a little bit of react and with those skills combined
you can build a beautiful MVP right uh so the the
look it could like so Instagram right so insta like we have to think of a
different word for insta so like quick is it not a different word for insta and
I can't say like I can't say like quick kilo because then then I'm really

00:33
getting in trouble right so like what's what's what's another like synonym for
kilo so I'm gonna say like gram like well it's already gram so pound like
it's a pound so we're gonna go a quick pound will be the name of the
application right there's not really many other options we can go with here
right cool anyway uh so we'll be building that
so by the time we get through projects this week we get through the Instagram
clone together by the time we add react to the mix you will have a full
repertoire of skills to build out your 100 hours project but you don't have to
wait right you don't have to wait you already
could start building today don't delay your 100 hours project start with your
views 21 21 21 21 Oh wrong one I was running through the six with my woes
I was running through the six with my woes I was running through the six with my

00:34
clothes right start with your views folks start with your views right like
you all can do the HTML the CSS the javascripts right start there make those
look beautiful and then add your back end if you need to all right
all right then by October 11th your 100 hours project should be done so
also premium apps should be done so don't worry about the premium Maps yet
we're gonna have a whole class on that um but these are the things that are due
and these are the things I have seen time and time
again that have been helpful for my students to get jobs so that's why I'm
asking you to do these things right now as always I'm going to show you how to
play the game it is up to you if you want to play it it's up to you to decide
what doors you want to open what doors you want to leave closed that's okay

00:35
right it's up to you but I'm going to show you how to play it it's up to you
to figure out if that's the way you want to play the game okay
um should we only have completed projects on our resume uh so I showed a
hack for this actually when we were working on our GitHub like like our our
we talked a little bit about our githubs and our readme's and I shared a readme
template for your GitHub uh there was something on that readme template that
helped with that right should we put only completed projects on our resume no
you can put unfinished projects on your on your sorry on your GitHub uh or even
sometimes on your resume because you have an optimization section where you
talk through the things that you would add if you had more time more financial
resources whatever it may be right there is a list for those optimizations a lot

00:36
of times people just want to see that you thought through the engineering
challenges that are yet to come and that
can be enough right so if you don't have
that that readme template definitely get it
definitely use it every single thing you put on GitHub you should have that
readme template that you break down everything that happens yeah and we we
did that in our um what class was that maybe I was in our
intro to freelancing class I think maybe um but yeah we went over that whole
thing yep what are my thoughts on working with recruiting agencies um
sometimes they work but most of the time it's a big waste of time
uh never sign exclusivity never ever ever ever ever sign exclusivity yep cool
all right last thing I'll say when I rattle off all these things that have to

00:37
be done all these expectations where quite a few folks they decide you know what
that's it this is where my journey ends and they take themselves out the game
I think it makes no sense to have come this far and to take yourself out the
game let the game take you out don't let the game don't don't don't let yourself
take you out the game let the game take you out right it's gonna be a long slog
it will be hard it is not easy if it was easy there'd be
so many other people being software Engineers but you're so close to the end
you've gone through the trough of Sorrow
you're getting to those Wiggles of false hope soon don't take yourself out the
game it's too early for that we got an amazing community that wants to support
you get on Discord ask questions get the support that you need right and work
through these things you get through these things you're off to the other
side it's so much sweeter on the other side all right we had a problem folks

00:38
you have a problem our applications don't have Authentication
and when I say authentication what I mean is the ability for our users to log
in sign up have their own accounts so we can build full stack web applications
right we've built the to-do list that's a full stack web application it has a
beautiful MVC architecture where you can start playing with our routes our
controllers our models our views right we can build the API of our dreams
that's listening for all these requests coming in and is doing all these
wonderful things foreign is public to everyone into all of our
users and there's no way to have individual users so you get around that we add

00:39
authentication to our applications oh that's that sounds nice hold on
we add authentication to our applications we add authentication to our
applications we add authentication to our we add A3 off we add authentication
we add authentication to our applications nice all right which all I
mean when I say that is like the ability
for users to log in right we've all used applications where we could log in once
we log in hey it's our stuff it's not everything or there's some other thing
we do once we are logged in right now sounds great Leon I'm sold we're going
to add authentication to our application right we're signed up for that um but

00:40
I got a second problem got a second problem oh
authentication means that there's like logging in there's like
usernames and and passwords and security and I got to keep my users information
secure I got to make sure that I'm not putting like plain text passwords into a
database I got to do all this stuff and and nobody's told you
I'm not a cyber security expert and I and I really don't want to be
I just want to build full stack web applications I really just want to you
know at the end of the day we add authentication to our applications like
that's just what I want to do but I I don't know how to to I have a lot

00:41
a lot of responsibility uh it's it's a lot of things that we
have to think through uh and so there's something wonderful that we can all use
because we're not cyber Security Experts
there's a warning for the next slide all right we're not cyber Security Experts
10 seconds but uh there's something that we can use
that will give us the functionality required to add that authentication to
our applications to not lose sleep at the end of the night because we have

00:42
passports [Music] is the way this is the way now whenever I bring up passport
all right whenever I bring up passport there's always only on actually I read
this blog post one time about JWT tokens and well I don't know about this
passport thing seems like it's been it seems like it's been used for a while
seems like a lot of you know very serious companies use it it seems like
it seems like it's been battle tested it seems like it's been you know the the
backbone of a lot of node applications for the past 10 years it seems like it's
you know it seems like it seems like it's handled authentication at scale it

00:43
seems like it's done a lot of these things but I read this blog post
about this newer thing and no absolutely not eat it Beat It get out of here
you're not a cyber security expert you can't differentiate between these things
get out of here no absolutely not for your first few applications
just use passport right she has she used passport
there are so many other things out in the world
there are so many other things that you could try and do they all have their
trade-offs they all have the things that they're better at the other things that
they're worse at what passport is the tried and true then around the block

00:44
by themselves and we're not cyber Security Experts
that are going to evaluate this we're going to use stuff off the shelf that's
going to handle the authentication for us
right so that we don't have to invest in learning all these wonderful cyber
security things and it's not that you won't get there in the future it's not
that you won't go deeper in how authentication works in your
applications not that you will eventually invest in really
understanding what's happening at the hood but for your first few applications
for your to-do list application or our quick pound application we're just going
to use passport the thing that works that is tried and true that people have
been using for a very long time because it just works right now please
Don't Panic learn right nobody's going to be in an interview going oh

00:45
you you implemented JWT tokens you you get a job one job for you because you
you read that blog post and didn't actually do the like you know pros and
cons of implementing that new technology but you get a job because you know
nobody's gonna do that right what somebody will give you a job for is
having a full stack web application with authentication that solves a real
problem AKA your 100 hours project the authentication piece does not matter
like it just doesn't matter it's just it's just a tool that we are using to
get the job done and the job's not yet finished right so for your first few
apps just use passport let it let it be something that's happening in the
background right that you're not worried about you just know that it works that
it's handling everything for you and then if you want to after those first
few classes right then you can move on to something else

00:46
right those first few projects move on to something else right
um so this is me uh actually embracing passport uh it's live footage uh and a
lot of folks refer to it as magic right in development there are a lot of things
that developers call Magic right and sometimes that's really scary and
sometimes you can just embrace it right so a lot of times when we start building
these bigger and bigger systems we're relying on more and more technology
right and some folks will either embrace it and build or some folks will code
weenie it out and not actually build so I want your default to be building real
right right like if you if your your default
should be to build something really good really cool

00:47
the code we're already baddies we're already right bad code like it these
decisions aren't the deal breaker for your pet passion project it is your 100
project right so embrace the magic understand that
it's sitting on top of the shoulders of giants that have spent hundreds of hours
thousands of hours tens of thousands of hours making all this work so that we
can just plop a few files into our application and get logins let's go time
to embrace some magic it's time to embrace passport for now um
and eventually you might move on to something else that's okay
I gotta engineer my own transistors at home first exactly right exactly cool
all right so we're going to take a look at our application with authentication
and then we're going to take a break um so actually you know what let's take a

00:48
break a little bit early uh so we're gonna put five minutes on the clock when
we come back from our break uh we are going to look at our application with
authentication we're going to see how it's working we're gonna walk through
the changes that I added to our code to get the authentication working and then
we will move into our project night where you will get an app with
authentication working and add to it alrighty folks
uh Miguel uh Vargas Dev added two minutes to the timer let's go seven
minutes seven minute breaks feel good all right seven minutes on the timer
come back ready to see some Authentication we add authentication to our
applications when we get back folks seven minutes on the timer here I'm
gonna run some ads that new folks I don't have to sit through let's welcome back
at the slow jams a ending with Holly a thank you for

00:49
the raid hope you all are doing well hope you all had a good night good
evening good morning no matter where you coming from hope you all are doing
well welcome we're adding we add authentication to our applications tonight
[Laughter] let's go welcome back [Laughter] uh so let's take a look at our
application with authentication okay let's take a look at our application
with authentication uh would you would you would you just look at it would you
just look at our application uh with authentication please would you just
look at it if you're not hip I got a video for you right there in the slides
all right let's take a look at our application with Authentication
uh am I already logged in did I do this all right site's not live let's make
sure I am running it all right here we go uh let's go ahead and do our npm

00:50
uh run start cool we're starting our server
our server is now running on localhost 2121 21. awesome here we are okay
so we have our to-do list application but it's not dropping us right into
uh our application in fact I have to like log in or sign up and it's small it
makes it bigger I haven't put any really CSS on this right so I have to either
log in or sign up so let me go ahead and sign up
um I didn't log out so let me log out real quick and actually let me actually
just drop everything well actually I already have a login so let's go ahead
and log in let's do Bob bob.com Bob Bob Bob Bob Bob beautiful I can log in no I
don't I don't want to reserve it and so you can see that I've logged in as Bob

00:51
and I have a first try second try uh how did I how did I know your email
and password sorry uh let me log back out let me log back in uh Bob's evil
step brother or evil twin sorry uh is John so we'll do John John
and log in and we're starting to notice some things here so we have the ability
to log in right we have the ability to log in
we have the ability to to log out we had the ability to let's sign up
let's do uh Sarah at Sarah .com oh sorry that's the what was this
username we'll say Sarah I'm gonna say Sarah at Sarah

00:52
dot com uh Sarah is the the reason why there's bad blood between Bob and John
is because of Sarah for folks that didn't know if you're keeping up with
the lore so Sarah when I try just doing a password of Sarah and Sarah
um but I get some some error notifications here that my password must be eight
characters long that my passwords don't match uh so there's a lot going on here
so let me go and try Sarah again let's try Sarah at sarah.com let's do Sarah
one two three we'll do Sarah one two three and I was able to sign up uh when I
signed up uh Sarah obviously has no to do because we just signed up I'm able to
enter into do just like I've been able to do all right

00:53
and uh I'm able to log out so that's awesome
like the ability to have our to-do list right we can log in
we were able to log in from different accounts we were able to sign up
when we were signing up if there were issues like passwords not being the
right length or um like the the password's not being the
same as I was trying to sign up it gave me alerts that things were wrong right
dizzy thank you for the hydration cheers to you
I just try to drink it from the other side sorry
and so we have a very Bare Bones application
with authentication and there's more stuff we can add like

00:54
um resetting passwords and things like that right but the the beautiful thing
here is that we now have the ability to create an app
we have the ability to log in we had the ability to sign up we have some
validation on that sign up uh that to me is like mind-blowing and
it's not that hard folks it's not that hard uh in fact here's some live footage
of me adding authentication uh it was super easy just you know Pat it the
sweat off the brow a little bit was super happy super easy to add it so
we're gonna talk through right we're able to create this application
where users are able to log in they were able to sign up they were able to log
out we were able to keep like even saw me like where I had gone back to the
main page and I went back and it kept me logged in did you all see that it kept

00:55
me logged in like I went back to the main page and back and I was still
logged in even though I was on different pages what right uh so what
authentication logged in users how well passport has strategies okay
the reason why we use passport is that off the shelf passport can do a lot of
heavy lifting for us and so passport has these different strategies for the
different types of logging and we might want to do what I just demoed to you is
something called local login I'm using emails usernames passwords we're not
using something like some other service right but you could use things like
Google off Microsoft off you could use Twitter off you use any of these other
authentication services and if you're using passport you're not doing anything

00:56
other differently I'm doing anything differently other than using a slightly
different strategy right so you can go to passports
websites you can see all these different strategies right now I just went and I
joined one of the strategies uh for local and I plugged it into my
application right it's just exactly done so it's exactly just another Lego brick
for us to play with right and once you get comfortable with passport any type
of authentication is your your oyster and it's been used so much that anything
that you'd want to do regarding authentication has already been done for
you so you want to do resetting you want to do two Factor off like all these
things right all these things that you might want to
do in the future is your application gets bigger and bigger if you start with
passport you don't have to like reinvent the wheel on any of this stuff it's

00:57
already kind of done for you and you can
you can find all that stuff and and plug it into your passport uh Magic so let's
take a quick look at passport real quick I always like to show it right off the
Jump so if we go to our config folder we
have this lovely passport JS file and so here is the local strategy for passport
you see I'm using the local strategy now it's a big file right
it's a big file there's a lot of fanciness going on there right
right a lot of fanciness going on there it's not that bad I mean it's kind of
big but it's more it looks more than it is right um

00:58
but we don't have to be disrespected here right right we don't we don't have
to feel disrespected we don't have to look at this and go
Leon what it doesn't matter you don't have to have this memorized
it's not something that you are expected to like know how to pull out your brain
this is a strategy that I grabbed from their GitHub I plopped it into my
application and I know that it works okay and so if we look at this strategy and
we kind of just like look at it a little bit you can see that we are creating
um stuff that has like emails uh you can see some other stuff that's happening
here um but really it's just it's just something that we're plugging in so we
can take our to do MVC application we can add a passport config file we can
add a few things to our server.js that makes it so that we can use the passport

00:59
file and then we can start actually using passport in our application so all
I did is I took our MVC application and updated it with a few things right added
some things right that are going to make the passport work and for any
application you have going forward you don't have to worry about you're going
to have logins you're going to have sign
ups and it's kind of all here for you so we're going to talk through some of the
big pieces of it together tonight we're going to see like how it actually works
but one of the first things I want you all to do as part of your project team
right as part of your project team is to walk through this code base
see if things make sense see if you can talk through the higher higher level
ideas right so tonight for your project right your for your project team tonight

01:00
should be more let's look at this code base let's understand what's happening
and let's come up with a game plan for Thursday
right that's your goal for tonight your goal for tonight is like to come
together as a group understand what's happening in this new code base right
right understand what's happening in this new code base
see how things are coming together and they come up with a game plan for
Thursday about how you're going to add to it like how are we going to make this
application your own what what tweaks are you going to add what little finesse
are you going to put on there to to make it your own okay so that's the goal
tonight the goal tonight understand what's happening come together as a
group this is an important like so many people I know just want to like dip when
I say this but don't if you want a job this is literally what the first three
months of your life is like this is literally the first three months

01:01
of your life is being thrown into a new code base
with Engineers that you don't know and and reading the code figuring it out
and working together right you have to get good at this part of the
process right and so that's what we're going to start practicing tonight and
then on Thursday we'll spend the first hour and a half or so really walking
through step by step everything that's happening here so that we can kind of
reinforce the work that you did tonight make sure everyone feels comfortable
with it and then you'll have more time to work on the project okay cool
you almost got me to chuckle obscara you almost got you almost Gotta Laugh
all right so we have passport passport is doing the heavy lifting we added a
passport JS file right we added some authentication middleware right that's
going to help us make sure that we're actually logged in or not I'm going to

01:02
show you this in a second and we added some stuff to our server.js that enables
us to um have sessions which are what keeps us
logged in throughout different pages right so you notice I went back to the
main page and I went back to the application and I didn't have to re-log
in we have these sessions that enable us to do it we initialize our passport
middleware which is saying hey we're going to use passport and that's that's
really it like there's like I know it seems like it can be a little
overwhelming at first but I really just added some passport stuff some stuff to
stay logged in right and I connect it to the passport file that I put in my
config it's kind of it right and so tonight you're going to
play through it there'll be some other bits and Bobs that I haven't explained
yet we're going to dig through and see what's actually happening so let's talk
about some high level stuff first before we actually jump into that
all right so users are logged in right or we have the ability to log in but why

01:03
would this matter for our to-do list app why would it like having logins matter
like what would that give us privacy I like that attention what would it give us
returning users yeah true right think about our to-do list what is
having individual logins enable us to do yeah we can have separate to-do lists
what if our users only want to see their to-do's I like I like as much as I love
y'all y'all went Reckless when I had the
the public to-do list right you all went wild adding some stuff that was
definitely not twitch appropriate right and so I can't have the riffraff mixed
in with with with the you know folks that just want to use the application
right and so and now I want to see what Leon's doing
right so we want our users to be able to

01:04
have their own to-do's right and so with authentication we can start to develop
applications where users have their own experience in that application they have
their own set of to-do's and that's the beauty of adding we add authentication
to our applications right that's the beauty of having that so let me show you
come in foreign let me show you it's all about ensure off baby that's
all it's about or just all this build up is just for ensure auth let me show you
one little bit of line of code real quick all right
so we were gonna go to our to do's right we're gonna go to our to-do's so

01:05
if we were to go to our to-do's routes we would see that our to-do's controller
was going to be called right like we tried to go
right we try to go and get R to deuced right we tried to go and get our to-do's
what we can now do is have this lovely and sure off
before the controller right what does this ensure auth going to do before our
controller it's a middleware baby it is a middleware but what's that going to
enable us to do what's that going to check for
yeah it ensures authentication it checks to make sure that you are logged in if
we look at our authentication middleware uh it's actually a very simple bit of
code this Ensure auth is really just a function

01:06
right it's just a function and that function is going to check to see if
you're authenticated if you are authenticated good move on to
the next thing go use that controller do your live your best life right but
if you're not logged in we're going to redirect you back to the
main page that you can log in right that's what ensure auth is doing
it's just a handy dandy bit of middleware something that sits in
between the request and the response right a ticket Gremlin yeah ticket
Gremlin and it's just gonna say all right is the person authenticated are they
logged in because if they're logged in keep going
if they're not logged in get redirected right like go back to the main page
let's actually see that let's actually see that at play here so I am going to

01:07
try and go to the to-do's slash to Do's boom
what happened oh let me see this again do this again to do's
hit enter what happened I got redirected I got denied I got
redirected back to the main page I'm not
logged in and so since I'm not logged in I was getting redirected back to the
main page now let's think about what I just tried to do when I typed in
slash to do's and I hit enter what type of request did
I try and make there I wanted to go to Locos 2121 slash to do's and I hit enter
what type of request did I just try and make yeah
I tried to make a get request on the to-do's route let's follow the path of

01:08
that code where do we start what's the first thing
that's going to be listening for that to
Do's route like where do we start in our MVC structure for that get request
yeah we're gonna look at the router right the route so we're gonna start
with the routes let's go back and take a look at our code let's go to our
server.js uh we know down here hey if you're making any requests on to Do's
use the to Do's routes right so we went to slash to Do's right
slash to Do's right so now we're going to go to the to-do's
routes let's go and take a look at the to do routes
the to-do routes here we are what type of request that I was was I trying to
make what type of request was I trying to make it was a get request right and it

01:09
was the root of the to-do's right slash to Do's is the root of to-do's right
it's the same thing as typing out slash to Do's slash right we're already on the
to-do's route we're just trying to go to that main to-do's page so it was a get
request on that slash of to-do's right that forward slash of to-do's and so
here is our router that here's the get request on to do's and the very first
thing it's going to do right the very first thing it's going to
do is going to run ensure off and ensure off is just a function
that's going to check if we're logged in if we were logged in
it would run this bit of code right it would go to the next thing it would run

01:10
this bit of code right if we were not logged in it would
redirect us back to the main page right it would redirect us back to the
main page now could I add insure auth to these other routes yes
but is there any way to get to these routes if I'm not logged in
like is there any way to get to the page where I'm creating the to-do's if I'm
not logged in not not really not yet we could figure out some fancy ways maybe
Postman or something like that right um but for our users not really right so
it's more of like a thinking through our application
um so there's no way to really get to it we could be hacking and getting Postman
and do it right but the beautiful thing here is that we have insurer off on this

01:11
to-do route since we're not logged in we're getting redirected we can see that
in the code if you were authenticated go on to the next thing if you're not
authenticated get redirected back to the main page now
this is authenticated is a me e bit of code that I don't have to understand
right I'm not a cyber security expert I'm going to use passport and the
strategy right right and strategy right that that's been provided to me right
I'm just using a very simple bit of code that says hey are you authenticated go
on to the next thing if not get the step and go back to the main page
so now we can use the same uh we can use the same
bit of code that we've been using right we go back to our to-do's routes this is
exactly what we were doing last week where we now have our to-do's controller

01:12
let's go ahead and take a look at our to-do's controller
and our to-do's controller looks exactly like the get to Do's that we had before
right right like we had before except we have some other interesting things now
we have as part of the request the ability to see the user that's making
the request so when somebody goes when somebody's
logged in and they go to get to Do's not only can we look at like that request
body that we could always see right not only does not only can we see that that
um the the request that we could always see but now we can see the logged in
user right we can see that logged in user and that logged in user we actually
can we can console log it right we can console log that logged in user and

01:13
we'll see everything about that logged in user
and one of the cool things is that whenever we create a new user that user
has its own ID right users have their own IDs now why would
users have their own IDs what do you think we're doing that would wind up
with users having their own IDs yeah we have a mongodb collection we
have a collection in our database of users and every single time a new user
signs up we are storing that user in a database we're storing it in our users
collection and the cool thing is that every single time we create a new user

01:14
like when the user signs up every single time we create that new user that user
in our database is going to have a unique right a unique ID
if a user has a unique ID we can use that throughout the rest of
our application to say you know what the person that made this to do was the
person that has that ID when I want to see just their to-do's I can just get to
Do's that have that matching ID right and so this is the beauty of once
you have users and they're logged in you can just start using these IDs to to
start doing some pretty cool stuff let's take a look at a few things before

01:15
we kind of go any further if I have users what else must I have added
to my application if we're having users that are going to
the database what else did I had to have ADD yeah a new model
the only thing that can talk to the database is our models right so
we look at our models I have a to-do's model so that I can actually say what's
being stored with each to do and I have a user model right that user
model has a username an email and a password so when I actually sign up and
I create these users my users are all going to have a username an email and a
password but my password uh is not just going to be

01:16
put in plain text we're going to Hash the password using bcrypt right it's
going to take our password do some cryptographic magic to it and
give us a hash that we store in our database so we're not even we're not
even worrying about this this is something that bcrypt and passport is
handling for me this is not something that I would ever write from scratch I'm
not a cyber security researcher right it's also called salting you might hear
that throwing around and eventually with all this stuff all this user model we
wind up creating a new user in our mongodb collection
right so did I need did I like this user schema right this user schema this user
model did I write any of this no when I went to passport and I looked up

01:17
the local strategy they gave me the local strategy for the passport.js file
and they gave me this user model that I could imp that I could just copy and
paste right now if I wanted to I could go in
here and I could like mess with a few things right like I could change it
instead of being usernames could be something else instead of being emails
like I can I can kind of I have control right
I have control over it but it's not something that I'm like absolutely doing
from scratch right uh a lot of this stuff was covered in
the homework so things like hashing and salting came up in the homework right
um all hashing and salting means is that we're taking let's say our password was
called password we would take password we would do some fancy math on it and
then we would get uh a string that was like 145 exclamation point 62 55 15 18
32 right and the only way to go back from what that encrypted password is to

01:18
back the plain text is through what is happening here so instead of putting our
plain text passwords right into our database right which would be a big
problem because if anybody ever got access right if anybody ever got access
to our database they could see all those passwords this bit of code is making so
that we don't have to store just plain text passwords in there we'll get into
that more on Thursday I don't want you to go worry about it too much the idea
here is that I'm pulling some stuff off the shelf right that's handling my
Authentication that's handling my ability to create
users and the really important thing that I have to learn that I have to see
is let's go to our database here let me go ahead and just refresh
what I can see is that I have created users

01:19
right if I go ahead and I look at my my my users collection we see Bob which was
created and look at this lovely hashing here right this this salted password
right that's not like this is what the password was Bob Bob right
right the password was Bob Bob Bob but this is what winds up being stored in
the database right so if we ever get hacks or this
like we the the person's password is safe right
um John was John John John right and this is what actually gets one stored up
in the uh in the database uh Sarah I believe was Sarah one two three right
and this is what model getting stored in the database so now we have these users
right we have these individual users and not only are the usernames and emails

01:20
unique but each user also has their own ID right Bob is C5 uh John is DF uh
Sarah is CA right like each user has its own ID and that's just the result of
using mongodb like whenever we put a user into our collection right we put a
user into our collection they also have this ID right all right cool
so now let's think about this let's go back to our application
Let's uh let's log in let's log in as Bob bob.com
and I believe the password was Bump Bob Bob Bob and I logged in and I only see

01:21
first try and second try but if we look at our mongodb
and we look at all of our to do's we can see that there's other try
there is heyo right there are all these other to Do's that
are in our database right but I am only seeing first try and second try
and what you can see is something that is slightly different than our last
version of the code because now when we're storing our to-do's we're also
storing a user ID property and that user ID property is the ID

01:22
of the logged in user so whenever a user is logged in
right whenever a user is logged in whenever we create the to do we take
their ID and we store it in the database along with that to do
so now stay with me one second Stay With Me when we go to this page
and we are logged in as Bob what are we searching for to just show Bob's to do's
what are we what are we going to do to do dot find
yeah but we're gonna look for where the user ID

01:23
matches Bob's ID and if the user ID matches Bob's ID we know that Bob made
that to do and we can render that into the Dom
if that's not cool I don't know what's cool
that's cool might as well call me Miles Davis right um
let's see it let's see the code all right we go to our to-do's
which means if we start by looking at our to-do's drought
we are trying to get the main page of to-do's we're logged in it's gonna be
the to-do's controller and the get to Do's method on that to-do's controller
let's look at our to-do's controller the get to Do's method is here
when we go to find our to-do's we're finding the to-do's where user ID

01:24
equals rec.user.id remember rec.user is the logged in user right
every single time the user is logged in and makes a request we get this rec.user
and it has all their info including their ID
so all I have to do is say hey find me the to-do's where the user ID matches
rec.user ID if you find that give me that to do I'll take it and then we pass
that into our ejs to render right so instead of having to go
and get all the to-do's and do weird stuff we're only asking for the to Do's
of the logged in user all right where does the user variable
come from it comes when we're using authentication like passports helping us

01:25
do all this stuff right passport's helping us do all that stuff
it's helping us log in it's helping us have logged in sessions it's helping us
have users right it's helping us create the users right with our user model but
this is the big idea the big idea is that we can create users
we can now store information regarding the logged in user we can go and get to
Do's that only match the logged in user and when we create to-do's it's the same
thing right when we create the to-do's look look here's us creating the to do
right we're gonna we're gonna take the to do item from the request body like we
did before we're going to set the completed property to false and then the
user ID that we're putting on the to do right the to do that we're putting into
our mongodb collection like the to-do that's going into our database is going

01:26
to have a user ID property with the value of the logged in user's ID
so now every single to do we create will always have the logged in user's ID
and when we go to get the to-do's we're only going to get the to Do's of the
logged in user that's pretty cool [Laughter]
that's pretty cool that that like this this is this is beautiful right cool now
is there a lot of stuff that's happening here yes is there a lot of little bits
that we have to better understand yes do are we are we 100 clear on like how

01:27
we're creating users yet are we 100 clear on like how we are like actually
like doing all these connections no but that's our job this evening
our job this evening is to get into our project teams to work through some of
this together right to see all right all right we saw that we can create
to-do's but how did we create users right when I logged in what happened
right walk through that together right walk through it together explore
right and then hopefully as you get to the end of tonight you start to feel a
little bit more comfortable with the code base you have some questions and
you have an idea of what you might want to do to tweak this code to be your own
to make the project your own not just a to-do list but something slightly
different that's your own we come back on Thursday Thursday we'll go deeper

01:28
into it we'll step through everything piece by piece right you'll have more
project time to take what you learned apply it build out something that works
for you if you have more time outside of class you keep working on it and then
you submit what you got on Tuesday this is our first taste we're going to
use this exact code base to then build our full Instagram clone from scratch
right so we will be able to right we'll be able to right be able to go from
this to an even bigger full stack web application you know
Tim Griffin I see State rate of I don't know if you actually read it I didn't
get the alert that came through uh but even if you didn't raid uh it's good
seeing you I hope you're doing well uh folks if you ever just won like a chill

01:29
stream you need to be hanging out with them I think so many of us are like in in
work mode now right like we're at the point where we need to be getting
done uh and so hanging out with some fun folks chill streams are a good look uh
so let's go ahead and put this in chat they're still live
did you did you come here and type that that's weird
I don't know how that worked but uh I'm going to just Spam it in here because I
love your channel and I hope more people watch you oh cool alrighty um
let's talk about one more thing let's talk about the sign up flow
we'll sign up flow that'll take us like another five minutes and then uh we'll

01:30
move into project time right so let's go ahead and I'm gonna log out so
we we met Bob you all know Bob we all love Bob we know John is Bob's evil twin
we know the the whole falling out revolved around Sarah but what we don't know
about Victor password will be Victor one two three right we'll log in
all right so now we're logged in as Victor now if you're like Leon who's
Victor I have to know who's Victor gotta come back Thursday folks you come back
on Thursday and uh I'll tell you all about Victor's it's a little it's a

01:31
little little teaser to get you to come back on on on on on Thursday get gotta
get the engagement up gotta boost this boost the numbers you know they come
back on Thursday you'll learn more about Victor but let's think about what just
happened I let's log out let's go back to the sign up I click
submit on this form and when I click submit on this form it plopped me onto
the to-do's page so what type of request is submitting this form
it's a post request and what's the route what's the route
let's also take a look at the inspector sign up all right so we know it's a post

01:32
and we know that it's sign up let's look at our code base let's look at our
server.js file right we have some of our main we have
like a main routes and we have to Do's well we know it's not to Do's so let's
look at Main routes main routes has all the main routes of
my application right it has the main page it has my login for like getting
the login page it has a route for posting my login like when I actually
try to log in I have the ability to like get a log out I have the ability to get
a sign up page like I can actually load the sign up page and then I also have
the posting of sign up right and so when I submitted that post on sign up
right the post on sign up I use the auth controller and the post sign up method

01:33
so let's go ahead and look at this auth controller
and let's look at the post sign up method where are we at where are we at
we outside we online here we go post sign up look at all this
look at what this post sign up is doing it's checking that we have a valid email
address it's checking that the password is at least eight characters long it's
checking to see if the passwords we entered matched and if at any time those
things are not correct it's giving us these lovely validation errors and then
once it gets through all that validation it's using the what what is new user
what do you think new user is yeah new user is our user model and
we're gonna grab the username from the form we've been grabbing stuff from

01:34
forms for months right we grab that username from the request body of the
form we grab the email from the form we grab the password from the form and we
use that to actually create our new user right there's some fancy stuff in here
um that that comes with like how we're gonna actually save users we don't have
to notice this stuff that I'm copying and pasting from passport but at the end
I wind up saving my new user and when I save my new user it uses that
user model right we're using that user Mount we go over to the top we can see
we're using the user model it uses that user model to create a new user in our
users collection and when we go and we look at our users collection and our
mongodb we'll see that we now have Victor right we now have Victor
right so it's not something that I like when people say like I'm I'm lost right

01:35
now I want you to understand that it's just a few jumps and it's the jumps that
you've already seen don't get caught up in the code that you don't have to know
how to write right don't get caught up in the code
that you don't need to know how to write it's the same thing we've been doing
with the original to-do list right it's the same thing we've been doing
with the original to-do list right let's step through it one more time
we go to our server.js file was it a to-do's route like we we submitted the
sign up form no it wasn't it wasn't a sign up sorry it
wasn't a to-do's route so we're gonna go look at the main routes router we go to
main routes we see that oh it was a post on the sign
up route that's what it was so here's the controller we need to use
and here is the post sign up method that we're going to use
right here's the post sign up method we're going to use

01:36
we just heard it's a really fancy right it is a really fancy click event
right just a really fancy click event it's just multiple steps you have to
jump through when we hear that event so we submitted a post on the sign up right
we are now going to look at the auth controller we're going to look at that
post sign up method here's our auth controller here is the post sign up and
when we look at the post sign up do you need to know how any of this
works like do you need to like know how to write this from scratch no it's part
of the templating code that I'm giving you could you get in here and do some
things right yeah we could get in here we could change this from from 8 to 10
if we want it to right we could tweak some things about the validation we went
to but we don't have to we just know that it works and we know that when this

01:37
route is triggered we create a new user using the user model right
right and when we are done when we are done saving this new user
right when we when we have created the new user we have their username we have
their password we have their their their their their their the username password
and email right we have all that we've saved the new user right we saved that
new user to our users collection what's the last thing that we do
it takes us to the to-do's right sends us to the to-do page and are we logged in
yeah we're logged in because we just signed up it's the same thing we're
logged in so it's going to take us to to Do's as that new user right boom

01:38
boom so now you can you've been able to follow two paths you've been able to
follow the path to signing up you've been able to follow the path to creating
a new to do that's tied to the logged in user and there are some other paths you
might want to explore how do you log in what are some of these extra files doing
uh can we can we understand what might be happening in these models like What's
Happening Here what's happening why is the to-do Model A little bit different
right you might look at these different controllers and see what else they might
be able to do and that's what we're going to start exploring together right
now now did we cover everything absolutely not
is there a lot of stuff that should be really fuzzy and doesn't make sense abso
freaking lutely but should you be able to by the end of
tonight tackle the main concept like all right we create users we log in we like
can make to Do's based on who's logged in we can just get the to-do's of the

01:39
logged in like that's where you want to be like the the high level stuff don't
get in the weeds don't get stuck code weeding individual lines right and walk
through it together right so we are going to move into project night
right it's very similar to travesty exactly it's it's if that's on purpose
right I want you to be able to move from
that video to this code base right so we
are going to move uh from twitch to Remo uh let me pull up that slide there's
some more slides here that we'll get to uh on Thursday like we're gonna walk
through the whole code base together on Thursday we're going to talk more about
kind of how individual pieces work we're going to talk more about how Mongoose
works on Thursday all that fun stuff but
tonight you're going to do that together right so we're going to leave twitch uh

01:40
we are going to go to Remo uh there are two Remo rooms uh there's room one and
room two and if you signed up for a project team on uh last week you are in
this form here Define your room your floor and your table all right we're
going to take a break don't worry you're going to go to your Remo room
you're going to find your floor and your table
you're going to introduce yourselves you're going to see how folks are
feeling with this code base and then you're going to tackle the code base
together can you get it running can you get it working can you
understand what's happening together right and then before you end tonight
try and brainstorm a little bit about what tweaks you're going to make to the
project on Thursday okay that way you come in Thursday with a game plan a

01:41
little bit if you do not have a group that is okay go to room two
and go to the fifth floor and up that will be for folks that don't have a
group that want to find others to work with okay all right
so that's what we're gonna do uh I encourage everyone to take five minutes
right take five minutes and then head over to Remo um
Remo is going to be the best way to do this because we don't have enough like
voice channels to support all this so really try your darnest to get Remo to
work uh try different browsers try different things
um we're gonna be using it a little bit more frequently so try and get it
working uh if in doubt you can use Discord groups but really don't use
Discord tonight try using Remo give it the old 100 devs try before you before
you um slink back the Discord all right if your group doesn't show up that's

01:42
okay if at least two of you are there you have a group work through it
together if you've if you've waited 10 minutes and nobody is there get your
butt to the fifth floor on Remo room two and find some folks to work with there
right so that'll be the goal so me introduce yourselves try working
through it remember you might have some folks that are in class one you might
have some folks that are caught up with program you're going to work together
right work through it no code weenies no trying to do other extra stuff that you
found on the internet no focus on this focus on this code base focus on this
project be kind if you can't be kind just don't show up tonight if you can't
be helpful just don't show up tonight just close your eyes go somewhere else
do something else right if you have any trouble let the mods know on Discord uh
and I'll be popping around the Remos you might see me sit at your table to see

01:43
how you're doing uh just to check in on y'all so let's go ahead and take a five
minute break right and then everyone be on Remo uh your group listing is here if
you don't have a group go to the fifth floor up in Remo room two alrighty folks
have a wonderful night good luck with this project remember the Remo rooms are
open open for the entire week so you don't have to stop right at normal class
time if you don't want to that'd be up to your group when you want to slow down
or stop have fun with this right it's not worth
it if you're not going to have fun if you're not going to be kind and and just
enjoy the process together we'll come back Thursday we're going to go deeper
into all this we'll talk about all the pieces we'll see the code more I want
you to have the first pass on yourself though so good night no raid take your
break and I'll see you all on Remo I was running through the six with my woes

01:44
21 21 21 21 21. [Applause] yeah hey hey hey hey hey hey hey hey
good morning good afternoon good evening
we're coming from hope you all are doing well welcome back
welcome back y'all project night part two
we have a lot of wonderful off to review
I wanted to go a little deeper tonight a
little bit more comfortable with the off get right back into project night have
you keep working together keep building Community taught what's going on
everybody hope you're doing well good to see you back on a Thursday let's go

01:45
comfy in the office hey yo I saw uh I just I missed the name
right at the beginning wardia was it uh congrats on the job offer that's huge
glad to hear it people people popping off Henry welcome welcome
people popping off with the jobs it's wild to see I love seeing a celebrations
Channel you you gotta be check out the celebrations Channel y'all people
posting their they're getting clients they're getting jobs it's wild hey
welcome back now everybody's here I like I should I just
spill it right away everybody's like Victor who's Victor let's just say Victor
and Sarah of a torrid pass that's all we're gonna we'll we'll leave it there

01:46
for now we'll get into it later that's it that's it people got ads we'll wait
along to the ad why are we getting ads so early they're all waiting here
they're all waiting to hear who Victor is at the ad cuts off [Laughter]
I wish I had thought of that no I wish I had thought of that uh so the the the
ads are so twitch has something new which is their incentive program which
is where if you run ads on a certain time they give you a dedicated payout
but I don't care about that what I was hoping it would do is give me control of

01:47
when the ads Ran So it's supposed to it's supposed to like prompt me that the um
the ads are going to run in three minutes right so I should get like a
three minute warning that the ads are coming and then once the three minutes
are up that's when they should run um but it looks like they ran them
immediately when the stream started so interesting
so there was a delay on it all right I get it I get it okay okay so folks folks
are almost back from the ads let's give them a second to get back foreign yeah
let's get some questions for folks that are that have the spent Jeff bezos's
money for the prime subs or whatever uh let's get some questions and when folks

01:48
come back from the ads I'll explain again oh coming back who's Victor [Laughter]
is Victor this Victor did this exactly code Victor did this exactly Victor is
the one that did this that that wasn't me it was Victor
all right so folks are coming back from the ads all right so here's what
happened twitch rolled out this incentive program where if you agree to
do ads a certain period of time for each stream uh you
like you get a certain amount of money but I don't care about that what what is
supposed to happen is that you then run ads they like run
ads on a specified time which is every hour and I get a three minute heads up

01:49
right I get a three minute heads up that the ads are going to run so my idea
right my idea is that when I see the three minute timer up I
wrap up and then we take our break the ads hit exactly when we're taking break
and so nobody in the community ever has to sit through the ads again
but they have like a thing that's supposed to be like um when the ads
first start and I thought that was it said like you
can choose when the ads first start and so I picked four minutes thinking that
normally like we have the um like the like uh normally we have like a um
like the starting screen and it takes me like four minutes before we actually
start talking and so I thought that meant that then they would delay the one
hour mark four minutes but what I'm noticing now is that that's when the

01:50
first ad drops so I'll change that back to when the stream starts and so as soon
as the stream starts the first AD should roll and then while the starting screen
is running the ads play and then we'll have an hour until the next one and so
then it should be a little bit more stable it is my first time trying it so
sorry you got got uh but we should we should be good going forward
alrighty welcome in everybody hope you're doing well if you got questions I
got answers always let's give folks some some time to get in here
oh restarting extreme be interesting it'll be a good thing to test yeah

01:51
all right what's your favorite type of milkshake um I don't know
that burger has like this vegan Maui banana that's probably the only
milkshake I've had in like a very long time
Oreo milkshake probably bomb if there's like a way to do it I could eat it
all right how many full stack apps projects should
we have on our portfolio good question you definitely want to highlight your
100 hours project and then I think it makes sense to have like a few other big
projects so your project night like your project week project is definitely
something you're probably going to have in your portfolio like a simple full
stack application that has authentication that you make look good
so the stuff that you do during tonight and uh the rest of project week uh is

01:52
something that should probably be on your portfolio your 100 hours project
should definitely be on your portfolio uh our Instagram clone which will be a
full stack application with authentication with
image hosting with like a lot of other features that make a normal site a
normal site so that should be on your portfolio and
then we're going to do a stream where we do a few kind of fun projects that use
um machine learning apis so that you have some like fancier projects on your
portfolio and then we'll have a react project so I think having like two to
three full stack projects with authentication all the goods you're
gonna make them look really good on your GitHub good readme's everything then
we're gonna have some fun like computer vision type projects so something that's
a little bit more meaty so that you have
that in your portfolio you're gonna have a react projecting portfolio so I think

01:53
like having those five or six pretty good projects in your portfolio
as long as you make them look good with the remes and everything you should be
fine like I think that's a really solid portfolio and then anything else you
build right so a lot of other folks will like take some time to build off of
their project night they'll take some time to build some of the other group
projects that we work on later on um so a lot of a lot of opportunity it's up
to you what you run with yeah then your premium apps yeah exactly so you all
will have really solid portfolios githubs and projects to show in these
interviews as long as you do these next couple of projects that we do in class
so like I said it's it's we're going to give you everything you need to be
prepared for the for the hunt and those projects are part of it but also don't
ever stop right if there's something else cool that you want to build
something else that you think would be fun to add to your portfolio or your
githubs go for it like don't don't stop but um yeah you'll have enough if that's

01:54
what you're worried about cool quick there we go quick October that's a good one
all right I finally noticed recruiters all up in
my biz yeah it gets to be like that eventually if you've done if you've done
all the things that we've been asking you to do you're gonna start to see the
the uh the the the the the interests start to come your way pretty wild
uh can I still join a group you would have to meet your group today so that
would be the the rub if you didn't get one on Tuesday you had to meet one today
Rufio thank you for the raid oh 100 plus folks let's go 100 fuzz folks coming
through the raid with the stream team let's go Rufio goes live before we go
live folks if you're if you're not uh if you're not hanging out there before
stream what are you doing what's going on uh we're gonna be doing some fun
stuff with the stream team coming up sharing a lot of really cool stuff next

01:55
week which would be really fun uh and talk about Community taught right folks
going into the stream team hanging out learning more stuff going deeper in the
same stuff that we're going to go through tonight
uh and then on Remo folks 1200 plus people on Remo you know how hard that is
you know how hard that is to get 1200 plus people to come together to work on
projects at one time we go on Remo and we have a full conference [Music]
conference on Remo every single time that's wow that blew my mind right that
blew my mind just like going from floor to floor looking at all y'all working in
groups like who else is doing this like what like what 1200 plus people sitting
at tables building stuff struggling through some code together that's wild
that is wild right you can go off and do any type of learning to code Type

01:56
experience right there are so many wonderful other programs online that we
talk about all the time I love me some free Co Camp I love me some Odin project
I love me uh some some wonderful courses that are out there
but 1200 plus people on our email just working together that's a community
that's wild to me that's huge uh so uh as always thank you for being amazing uh
thank you for all for showing up putting in the work let's go
all right if you haven't checked in please go ahead and check in exclamation
point check-in I'll give you the tweet for night for tonight uh please go ahead
and like that retweet that remember if you want to participate in October if
you want the verification at the end you
want that sweet letter that I read aloud to you you need to be checking in so
that I know you're here right if you haven't submit your checklist yet
I'm keeping it open until Tuesday and then I'm shutting it down if you have
until Tuesday to get your uh to get in your your homework can we mention that

01:57
in an interview I've worked with a team of 1200 developers yeah let's go
that's wild so please get your checklisted if you haven't gotten it in already
uh back in review uh remember this upcoming Sunday is a holiday in the U.S
so folks asked me to push the review so we're gonna push that to September 11th
um this upcoming week we're gonna start building a full stack app together uh
we're gonna be building that that quick pound the the Instagram clone together
and then uh we'll do a full review of all the back end stuff yeah oh
is there a way to get a table for more than six people technically Remo allows
it but I find that it gets buggier the bigger the tables are uh so we we keep
it at six so that we can have more groups working together um

01:58
technically admins can can get to a seventh seat
um but yeah so for now we're stuck with the sixth cool
all right folks we're we're jumping right in right we don't need to get any
buggy uh we're jumping right in uh when we'll
hit hit list Class B so you can think of next week as our full stack app that
we're doing together we'll do a review we're gonna do some react and then
everything from that point forward will be Hunt related uh so it'll be
um hit list data structures algorithms all that fun stuff remember your hit
list right now is just a first pass right
if you're if you're itching they'll know more you can go watch our three classes

01:59
on it that are already on YouTube um but we'll get to it together yeah cool
uh we had somebody I don't I don't have I didn't ask their permission to read
the whole thing but I'll just tell you what happened
they were interviewing I so I can't make this up they were interviewing
and the interviewer saw that they were doing a hundred devs and they said oh
that's great I learned something from the node classes excuse me what huh
let's go let's go let's go not only did an interviewer
know what 100 devs was they're in here with us what's up what's going on make

02:00
sure they get the job one job please let's go let's go foreign let's go
all right tonight I want to dive a little bit deeper into the
authentication the first pass through this stuff is pretty rough so I want to
make sure that all the dots are connected that everything is clear I'll
answer any questions that you have and then we're gonna jump right back into
project week so if you don't have the slides you can do
exclamation point slides to get the slides if you're new around these parts
and you don't know what we're doing we're running a free 30-week software
engineering boot camp anything you need to go from having no coding experience
to getting hired hundreds of folks have gotten jobs already it's literally
raining jobs if you're just joining us now it's not too late join the
illustrious catch-up crew and uh welcome all right making sure I have my stuff

02:01
set up we're good all right so we have an application that has
authentication users are logging in how is this stuff actually working what's
going on well last week we learned about MVC
right model view controller this complex application that we're building up over
time is still using the same pattern we are starting with a user making a
request from their client-side device that request is making it to our server
where our router hears the request and knows what controller to pass that
request off to the controller is the person in the middle that knows what to
do do I go and talk to the model so I can get some data from the database do I
just pass some stuff off to the view so that I can render some HTML to send back

02:02
to the user and so this complicated web of stuff comes together to build out our
full stack web applications and so we go from a very simple MVC to a slightly
more complicated MVC when we start introducing authentication and our
authentication code so what I want to do tonight
as I want to step through step by step right step by step from someone on their
client side shout out Christos if you're a triple OG know who Christo says uh
from someone on their client-side device how do they make a request from the
browser for it to go to our server and go
through all these steps to get something
back to the person making the request so we're going to go through it step by
step uh each piece we're going to talk about the connections we're going to see

02:03
how it comes together and then I'll answer some questions we'll look at some
other bits The Bobs in the code base and then we're jumping back into
project night which I'm super excited for 1200 plus people on Remo on Tuesday
let's go if you're new and you still need a group that's okay you can still
join us hang tight we're going to go through this and then we'll get right
into Remo all right uh one thing folks asked me a lot uh and
I saw it come up quite a bit until I I enabled it on my end and I think it's
something that'd be really helpful a lot of my file names are kind of the same
but they're in named folders so I enabled this setting where I went to nvs
code my prefaces my settings you search for workbench editor label format and
you select medium from the drop down when you select medium from the drop down

02:04
look at this all right you have the file names right but now it has the folder
where the file is coming from so you can
see oh it's in the routes folder oh it's in the middleware folder oh it's in the
controllers folder the models folder the views folder oh wow nice
all right so if you need to enable it file preferences settings uh you just
type this in and you select medium from the drop down and it'll give you this
nice little tabs so I think that's helpful if you're working through this
code and you're kind of getting lost the
file names and folder names uh it can be pretty can be pretty helpful so that's
something I think should have enabled as we go through it tonight as always if
you need the code you need the slides you can do exclamation point slides here
in chat to get the slides if you need links to the code and things like that
it's always on our Discord exclamation point Discord and chat to get yourself

02:05
there cool all right so let's start off at the very
very beginning uh let's look at our application let me make sure my
application is running let me start my server
my server is running I better go catch it and I was going to go to my
application here uh I'm gonna go straight to my login and
I'm going to log in as Bob bob.com remember we already created this account
on Tuesday I'm going to type in my password
hit enter and when I am done logging in right when I am done logging in I have
made a request I have gotten redirected to my I got redirected to low cost 2121
slash to Do's I got redirected to to Do's so when you get redirected
somewhere right when you get redirected somewhere when you get taken somewhere

02:06
what what type of request are you making
cool get request beautiful so our client went to our URL logged in
and when they logged in they wound up making a request just the act of logging
in signing up or going directly to that URL slash to Do's right your Euro might
be different we're on localhost right now if we were to put this on a server
uh like rip Heroku uh your url might be different but we're going to get taken
to that URL slash to Do's this is a request that is leaving the client-side
device going across the internet and finding its way to a server

02:07
all right finally gets way to a server now that server is set up to hear that
request right we have written some server side code that is running and
since it is running it is able to hear that request and know what to do when we
look at our server.js file we set up a bunch of stuff that's going to enable
this machine to listen to a request and know what to do
if we look at our server.js file we have some important bits up here and the
thing we have to pay attention to at first is these lines right here
these lines are what are handling that request that request that just came into
the server from the client right the client went to
slash to Do's either they logged in they signed up or they typed it indirectly

02:08
they got taken to the server slash to do's and we have some code running on
our server that can hear that request right now if we look at this line
we have two different things that we're looking for
we are saying all right the request you just made was it on the main route
or was it on the to-do's route the chat the request
that just came in when we logged in we signed up or we typed in slash to Do's
what route are we talking about we talking about the main routes are we

02:09
talking about the to-do's routes [Music] um after we log in after we sign up
where are we going after we log in after we sign up where
are we being redirected to right or if they type it in where are
they being redirected to to Do's so are we talking about the main routes no
we've already done that the main routes will be log in the main routes will be
sign up the main routes will be the home page but we're talking about what
happens after we log in what happens after we sign up or if the user is
already logged in and they type in slash to Do's well we are
on the to-do's route right we're on the to-do's route and so
our server is now set up to hear that request on the to-do's route now once it
hears that to-do's route it's going to try and run

02:10
to do routes and I think a lot of people get confused by this they're like all
right our server heard the request it was localhost 2121 slash to Do's it's
set up to hear that request how does it know
where to find the router remember the router is what's going to connect us to
the controller right so how does it know what router to use well we already have
it set up we said hey server if you hear right if you hear something making a
request on a to-do's route here is the routes I want you to use to do routes
well where the heck is the to do routes if we looked at the top of our server.js
file we're going to see where to do routes comes from
to do routes is going to require a file called to Do's that is in our

02:11
routes folder right so in our routes folder is a file called to Do's that's
going to hold all of the routes for anything on to do's
right so we heard that request come through we go and grab the to do routes
and we can see that the to do routes are telling us to go into the routes folder
and find that to-do's file if we look at our folder structure we're going to see
routes is a folder and to Do's is a file inside of it right so in our server.js
slash to Do's right go to the to do routes
where the heck the two routes come from well to do routes requires us to go to
the routes folder and find the to-do's file when we get there we see the router

02:12
for any single thing that may be on the to-do's route
right anything that's on that to-do's route is now handled by this router
right we can do anything we want now we found the right router we can listen for
all of those requests right the router hears the request that came through
all right the router here is the request that came through
what type of request came through what type of requests came through foreign
was it a post request no was it a put request no was it the other put request

02:13
no was it the delete request no it was the get request that came through
when we load this localhost 2121 slash to Do's I could even hit enter right now
it's the same request that is a get request right that is a get request
our server was set up to hear the request on to-do's to go and get the
to-do routes the to-do routes required us to go into the routes folder find the
choose file and in that to Do's file we have all the requests that we can listen
for right we can listen for the get request
we can listen for the Post request that would come from the forms we can listen
from the put request that would come from the JavaScript we can listen from
the delete request that would come from the JavaScript right but it was a get

02:14
request and since it was a get request we get to
check to see if the user is logged in right that's the next step here right
that's the next step we already confirmed that it's a get request the
next step is ensure off that's the next step we just move on to the next step
all right we move on to the next step and this Ensure auth all it is a function
right we could see it up here all right and sure off
right here we can see it is a variable so we have to find where this variable
comes from and it's literally right above here we go and sure off requires us
to go to a middleware folder and find the auth JS file right

02:15
and sure off requires us to go to the middleware folder
and find right and find the off JS file it's destructured we covered that in a
previous class but it's destructured and the reason why it's de-structured is
because right now we're just ensuring off we can do a lot of other things we
could have guest accounts we could have some other things that are going to help
us as we start to expand the different kinds of users that we're going to be
talking about right so very simply we are grabbing and sure off as a variable
right as a variable right as a variable and we are using it
and to use that variable we have to go to the middleware folder and we have to

02:16
find we have to find that off file cool beautiful so let's go ahead and look at
that file we go ahead and we look at it right we said all right
we heard the get request right we heard the get request
we're moving on to the insure off to get insure off we're required to go
to the middleware folder and find the off file all right here's the auth file
that's in our middleware folder all right we had to go to the middleware folder
and find the off file beautiful we're here now we found the file in the

02:17
middleware folder that we're using now this code is asking one really important
question all we're asking is hey when the person made the request right
when that remember this whole thing is about a request right this whole thing
is about a request so when the request comes in Timber hey
I'm streaming buddy what are you doing what's going on huh what was that

02:18
thank you but [Music] thank you all right December found Simba
um so when Simba is hungry they'll go get their bowl and bring the
bowl to us and if we don't pay attention to them uh he'll sit and he'll start
like licking the bowl clean even though there's nothing in it and so that's what
you heard is like the ding da ding ding ding ding around the bowl
and now he's just sitting here yeah all right so we managed
to make it from hearing the get request right from hearing the get request
to running a function Leon what do you mean it's a function all right well we
were required to go to the middleware folder to find the off file let's take a

02:19
look at it this off file exports an object right exports an
object that has a what what is ensure off technically
it's a method right it's a it's a function right it's a function but it's
a method because it's part of an object right so
we can see here that ensure off right right and sure off is a function
and that's why we're just telling it to run
and the only thing it's going to do is remember we're still talking about this
get request right we're still talking about this get request
right and this get requests can be looked at

02:20
and remember when we're sending requests all this crap is being sent with a
request oh all this stuff right all this stuff
is being sent with the request right and now since we have passport running on
our server right we set up all the passport stuff for us right
since passport is running when we're sending this request
we can also see things like is someone logged in
is there a session that is running for this logged in user we'll see next week
like how the sessions work like where the cookies are being stored and all
that stuff right and so we can now see on that request if the user
is authenticated that's it and when I say authenticate it all I mean

02:21
is are they logged in so this user made a get request and all
this crap had to happen right all this crap had to happen and
now we're asking one question about this request that came through and we're
saying hey the request that just came through that
get request on the to-do's route that we just heard was there a logged in user
right was there a logged in user and if there is
all right move on to the next thing you're good keep it moving right keep it
moving but if there was no one logged in kick their butt back to the main page
right the get bounce it's a bouncer exactly it's a bouncer the bouncer's
checking all right somebody made a get request to slash to do's
were they logged in because if they're logged in great move on to the next thing

02:22
but if they were not logged in with the person that was making that request was
not logged in send them back to the main page now
is authenticated is that something that I coded this and then your code
where's that magic coming from no passport and the sessions and
technically like the HTTP methods to support this stuff are doing all that
heavy lifting for us but that's not something I have to worry about I can
just use this middleware whenever I want to check if someone is logged in right
if I ever want to check if someone is logged in boom I just use this
middleware I can just throw I can just throw ensure off on any route
I can throw insure off on any route that

02:23
I want to check if the user is logged in that's it
any other time I ever want to see if a user is logged in before letting them
get to a page is simply putting that in the route before we get to our
controller that's it you want to build a members
only section of your website boom that's it
you want to only have people that are logged in able to add to Do's boom
that's it you want to sell your feet picks and you
don't want people to be able to see them before they pay boom that's it

02:24
that's how you do it you're done cool I was just uh no I was watching true's
newest video uh and so true walked through uh the really wild DMS uh that
they and uh they had two guests get uh and so that was one of the DMS so that's
why I just literally just watched it before stream
uh so that's why it's in my brain oh let me see if I can link to their video

02:25
which is good shout out true there you go may maybe that's what we should do
maybe we shouldn't build Instagram maybe we build only fans hmm
I might have to change some stuff this weekend anyway anyway uh
because none of y'all are hitting that million Channel points so yeah oh they
did they did they built that they only found the competitive
I'm out all right peace take care well the door hitch on the way out
alrighty so we have this lovely and short off
and this and sure off just makes sure before we get to
this controller we're gonna make sure that the user is logged in all right so
the user is logged in right the user is logged in
uh we had a couple people redeemed the Pokemon cards recently uh we'll get to

02:26
the Pokemon cards during uh our next kind of like office hours which will be
the review so I'll do all the drawings then cool so
we now are sure that the person is logged in and now all right now they're
logged in what controller are we going to use what control uh control the
control uh I was running through the six with my woes
I was running through the six with my I'm Gonna Leave This up here for real

02:27
quick you can get you can get hip I gotta turn off an alarm I'll be right back
and that's where the gold is buried so you just have to make those two quick

02:28
lefts and then boom free gold all right sorry that was a drake break I'm back
[Laughter] my little one has like a breathing alarm
that's on them and it went off um but it's just because my wife took it off
and didn't turn off the alarm so I just went to make sure it was okay all right
so we heard the get requests all right we heard the get request and
we make sure that that request the person that made it they're logged in so
boom here's the controller that we're going to use
all right here's the control we're going to use it's the to Do's controller
to get to the twos can to Do's controller it requires
that we go to the controllers folder and find the to-do's controller
right to find the to-do's controller and when we get there
what method are we going to use right when we get there when we get to

02:29
this controller file right this controller file has so many other methods in it
create to do uh Mark complete Mark and complete delete right so many different
methods that are tied to this controller
which one are we going to use well we've already set it in the route
right we've already said hey when there's a get request that comes through
right and it's on the to-do's route and it's the main to-do's route
and we check to make sure that they're logged in
then we can go to the to-do's controller and we can use the get to Do's method
right the get to Do's method wonderful now
once we're in the get to Do's method we can do whatever the heck we want right
we can do whatever the heck we want inside this get to this method we have a
lot of stuff that's going on but we're in full control right we're in full

02:30
control of what this get to Do's does and what I want it to do is to literally
go and get all of our to-do's right but do I want every to-do chat nope
I just want the to-do's of the user who is logged in
right and the cool thing is we can now just do
wreck dot user remember whenever a request is being made
all this stuff is being sent with the request all this crap everything about
your computer all this stuff is being sent with every single request and now

02:31
since our users are logged in and we're using passport behind the scenes we can
see a user property on that request right we can see a user property on that
request and we can grab that user property to do cool stuff with it so
let's actually see it um here we go is if we look at my terminal
that's running we can see the requests that are coming in we can see the um the
the gets that are coming in for the to Do's route and we can actually see that
when I make the get for the to-do's route I'm grabbing the rec.user and boom
here's everything about the rec.user I can see their ID
I can see their username I can see their
email I can see their encrypted password right

02:32
and I can just grab that rec.user and use it however I please cool all right
now now that I have a logged in user right I have a logged in user and I
want to only get their to-do's right right now that I have a logged in user
and I only want to get there to Do's well I can just go to my database
and find the to Do's where the user ID property matches the logged in user
whenever I created a to-do like in my database whenever I created a to-do I
had a user ID property right in my actual database each to do that I put

02:33
into my database I store that to do along with the user that made the to do
so now that I'm retrieving my to Do's I can just look through all my to-do's and
say all right the login user made this one logged user made this one or login
user made this one and I can just go through right
we can go through right and grab just the logged in users to do's cool now
if we want to go to the database if we want to talk to the database and get
some to Do's what do I have to go through what's the only thing in our MVC
architecture that enables us to talk to the database now

02:34
the model exactly the model is the only thing that enables us to talk to the
database and I have it right here I have to do
bind and then the query I'm going to make to my database however we're going
to notice that to do is capitalized and it is a variable that would require us
to go to our models folder and find the to do file and this model is the thing
that's going to enable us to talk to the database so if we want to eventually
find right if we eventually want to find if we actually went to find the to Do's
that are in the database well we have to go through our model and we're telling
us where to go find the model we're going to find the to do model by going

02:35
into our models folder and finding the to do file now once we get to that file
we're going to notice that it's using mongoose
and Mongoose is the thing saying you know what Liam I got this you want to
talk to the database I got this it's going to handle all this stuff we need
to do to talk to the database right and it's going to give us some structure
called our schema so when we get to this
file we're going to see a few key things
one we're using Mongoose which is how we know in the background we're able to
talk to the database and do all that fun stuff
we see the structure we're creating for all of our to-do's that will be created
we can see whenever a to-do is being created uh we're giving it the actual to
do that'll be a string we're going to have a completed property of whether
it's true or false and we're going to have a user ID which would be the logged

02:36
in user's ID at that time right so I can use this model to talk to the
database and Mongoose is doing all the heavy lifting Mongoose is what's
connecting us to our database it's what enabling us to use the models and it's
it's just it's just handling this for us right and so there's a little bit of um
there's a little bit of I don't say a little bit of magic here because before
we used to see it directly we used to be like all right DB was the variable
holding the connection then we say DB collection right and then we do our fine
so it was a little bit more tangible right there's like a little bit more
tangible where we would say all right we're going to go to this database we've
already connected to we're going to go to this collection Mongoose is handling
all that for us it's handling the connection to the database and it's
handling kind of where we're going to to find this stuff right so that's the

02:37
beauty of mongoose and the reason why we use Mongoose is because it gives us a
way to model our application data right what the heck does that mean
um if we take a deeper look at what Mongoose does is that
Mongoose is what's going to enable us to have a a a repeatable structure
inside of our collections right Mongoose is going to help us create all the
individual documents because remember each of the documents right each of the
documents are just what each of the documents are just what
they're just objects and since they're just objects we could really
we could really kind of do whatever the heck we want

02:38
right we could put in any values we could put in any um any structure we wanted
and as we start working together that becomes a problem
right that becomes a problem if anybody can put whatever the heck they want into
our database and anyone can like modify the documents that are going in each
collection that can get us into a lot of weird situations where we're all not
really understanding the data what's going into the database we won't even
might not even have access to the database right none of you have access
to my database right now yet by looking at my code you know exactly the
structure of my database because the schema is giving us that structure you
know by looking at this schema every document that's going to be put into our

02:39
collection will have a username an email and a password at least for our users
right and then for our to-do's we know that each to do is going to have a to do
property a completed property and a user ID property you don't have to have
access to the database to know what type of data is going into that database
what's been being stored there and really underneath the hood
the models like our to do model and our user model are just fancy Constructors
just like the Constructor functions we used when we were learning oop it's the
same thing except the object they're spitting out we're going to call a
document right so our models are really just fancy Constructors that are
spitting out objects that go into our collections of our mongodb database
right and so now we can see all right we have our mongodb database each
collection is going to hold a certain kind of documents that are described in

02:40
the model just Constructors exactly and instead of calling in an object
we're calling it a document right that's it cool
now the beautiful thing is once we add to Do's or users right to our database
we always get these unique IDs that are created for every document that is ever
created and we can use those unique IDs to build out more and more complex
applications we can use these unique IDs to figure out all right
what user made the to-do's right what users logged in right all that wonderful

02:41
stuff because each document that is created has a unique ID so when we
are gathering all this data right we're going to go to the manga DB
we're going to find all the documents but in this case
we're only going to find documents where the logged in user remember we got the
ID off the logged in user we're only going to grab the documents where that
logged in user's ID matches a user ID property on the
document every single time we created a to do
right every single time we created it to do we gave a user ID property that was
the logged in user's ID right and we could see that if we just scroll down
we can see the create to do function all
right when we create a to do is going to have a user ID property and that

02:42
property is going to be the logged in user's ID all right
the logged in user's ID what would you build or do with all the
object IDs well we're using them to know what IDs what documents to grab right
if when we create the to do we're creating a user ID property right
we can then use that user ID property to
just grab the documents of the logged in users let's take a look at it all right
let's take a look let's look at our database I'm going to have two
I'm going to have two collections in my database right I'm going to have a users

02:43
collection and I'm going to have a to-do's collection and then I also have a
session but we'll get to that next week so here's my user Bob when Bob was
created you can see that a unique ID was made right
you can see that a unique idea was made and it's it's zero C5
right so if Bob ever makes a to-do right if Bob ever makes a to do what do we
expect to see on the user ID property of that to do
if Bob ever makes a to-do what do we expect to see on the user ID property of
that to do exactly we should expect to see the zero C5 so let's go and take a
look at our to-do's and if we look at our to Do's we can see

02:44
all right zero C5 so I know Bob made first try
I can see Zero C5 and I can see second try so I know Bob made that too but then
I look down here and I start to see these other
these other user IDs so I know that these have to be other users
right you have to be other users maybe Sarah and maybe Victor all right
tell me when you all get ads because I'm not seeing anything pop up on my end if
you get ads tell me that's when we'll take our break because we should be

02:45
getting them like right now no well this was a bust I thought this
would help but uh okay alrighty folks let's take a break here
when we come back from the break we're spend a little bit more time just really
trying to hammer home like how we're able to get to Do's tie them to a
specific user we're gonna see a few other more fun things and then we'll get
right into project night cool all right let's take a break
gonna put five minutes on the clock cool five minutes on the clock
I'm gonna run the ads see you all soon oh I said it did run an ad
oh ads they did start all right let's go

02:46
if you all hear the ads have already Run for the other folks so I'll see you on
five all right folks come on back come on back mm-hmm
all right everybody come on in yeah Amazon Smiles a real thing you just do
smile.amazon.com and anything that you purchase a small percentage of it goes
to the non-profit uh so a lot of 100 devs folks put in resilient coders so
that whenever they buy something off of Amazon
um RC gets a little little chunk of it which is pretty nice it actually adds up

02:47
pretty quickly cool alrighty folks let's finish this up so we
my dogs are the best so [Music] Simba in the other room um because
they want him to come back and and try to get the Bulls again
but my other dog can open doors so the other dog went and let Simba out
the room and then Simba came back to me and got his bowl to bring back to me
again it's like during the break put the
bowl away and puts him in the other room and then as soon as I sit down my other
dog gets off the couch runs around hits the door Simba comes out gets the ball
and comes back laughs project night folks Teamwork Makes the Dream Work

02:48
that's awesome alrighty so we've talked about this idea all right
let's just let's just take a look at it we know that whenever we create a user
which is just creating a new document in the user's collection we know that that
user has a unique ID that is created and
so what we are doing is whenever a to do
is made we're just putting that ID along
with the to do that way we know who made the to-do's
excuse me why wouldn't we use like their why wouldn't we use like a username or
why wouldn't we use like uh like something else
like maybe eventually in our application
there could be people with the same name right but there can only be one user
that has that unique ID it is unique right and so it is distinct and so we

02:49
know for every to do which user made that to do so when we go and talk to our
model to get those to Do's we can find just the logged in users because
whenever a request is sent now it has the logged in users info because
passport and the sessions running in the
background to make sure every request we send has that information we can take
that information we can query our database we can get just the to-do's
they created back and I can pass that into my to Do's ejs it's in the game
right and it's just like we've seen before uh we're we're running uh oh
running through the I was running through the six with my woes
all right we run through our to-do's we pass through our views right and we're
passing each of those individual to Do's into our ejs it's in the game ejs is

02:50
spitting out An Li for each to do and then we render it
we render it and when we render it we've passed that rendered HTML as our
response so that request came in went through all these chains right went
through all these chains to render some HTML and we respond with it learning to
Dev a thank you for the gift of Subs I appreciate you thanks for being here
right all of that just to generate the response
send the to-do's back to our happy user all right so

02:51
I actually want to take a look at that image one more time
I like this image at the very beginning I'm a man I didn't put it at the end of
the slides there a lot of stuff happens right we went to localhost 2121 slash to
Do's we hit enter right since we're already logged in that is a get request
right that is a get request all right that is a get request
and that get request comes from our client side from our user right from our
user right comes from the client side that request
makes it all the way to our server our server is set up to hear those requests
right it says oh it's a to-do's request use this router file
once we get to that file we say all right it was the root to do request
check to see that they're logged in if they're logged in here's the controller

02:52
you're going to use and the method on that controller boom we go to the
controller the controller it says all right you want to use the get to Do's
method I got you go talk to your model so that we can find all the to-do's so
we go to our model the model knows what to do to talk to the database it finds
all the to-do's where the user ID matches the logged in user once it has
all those to Do's the data is passed to the Views by the controller the views
takes that data starts printing out Li's for each of the to do's and then it
decides that it's right well it's done rendering right it's done rendering that
HTML the controller has the HTML and it responds back to the client with that

02:53
HTML and if you understood 50 of that 10 second warning five four three two one

02:54
[Music] if you understand 50 of this be proud of yourself
know how many people start this journey and don't get past HTML
class one 7 400 people Class 2 5 200 people
one class what 2 000 people after one class gave up foreign class
we're on class 51 be damn proud of yourself even if all the little bits
and Bobs don't make sense even if these files are still a little scary that's
okay we're gonna go deeper with them next week
we're gonna we're gonna actually look through like all right how this how does
passport work how is it using the session how is it doing the cookies

02:55
there's time for that right but tonight's a Victory lap
Victory lap because you're still here a Victory lap because you're starting to
understand some of this and it's pretty wild right and the secret is this is it
we add like image storage with S3 or cloudinary and like whatever the hell
you want to build you can build with just this stuff this is it any app you
could ever think of you can build with just this there's nothing else extra
this is it you might add a little bit more middleware if you want to handle
like emails might add a little bit more middleware if you want to like process
credit cards but all that shit's also just Lego pieces that you cut and paste
but everything's here whatever you want to build it's just
this this is this is me revealing the curtain right
this is it this is all that's left this is if you get this you're done

02:56
you're you're you're already software Engineers you're already full stack
developers but you can build full stack web applications if you understand this
now we can add a little extra stuff we can we can make maybe making our views a
little easier with react uh maybe we can we can do a little bit different like
type of databases with like postgres but like it's all the same
and you don't need any of it you can build full stack web
applications with just this so if you understand this code base right if you
take the time to understand this code base you can build whatever the heck you
want you're fully full stack you're fully full stack we're gonna
introduce uh somebody said what about audio storage I'm going to show you
cloud and area I like cloudinary it's a little easier to use I think than S3 and
with cloud in there you can store any kind of media you want to host videos
you want to host images you want to host audio boom you want to build a podcast
website boom you got it it's it's just that it we add one more thing and like

02:57
any type of app that you want is easy to build and so
I hope that you realize how close you are and now it's just putting in the
work to build cool that's what we're gonna do
over the next few classes we're going to build cooler and cooler stuff we're
going to understand more and more what's behind this starter code right we're
going to build the Instagram clone and then we're going to build an app from
scratch so that we'll see all the pieces coming together but this is it
you're there you did it now let's do it together all right so

02:58
don't let your dreams be dreams so just do it make your dreams come true just
do it yo learning to Dev what learning to Dev
did a tier three for three months thank you and the gifted Subs uh
what day is it I see you I see you I see you learning to Dev it's September
it's September the the longest sub the more discounts you get
I see you thank you I appreciate it that's dope
no like uh twitch like discount subs and like the long use of the more it
discounts it uh so learning is splashing out that's dope thank you all right
so tonight don't let your dreams be dreams

02:59
right tonight don't let your dreams be dreams build what you want to build
so last Tuesday the the goal was to at least understand the code right all right
your goal is to at least understand some of the code right tonight
now you went through it again maybe you watched mine will stream yesterday we
went through it again right now we're going to come back together again
right to play and build on top of this code first goal
first goal is to make sure that everyone understands
right the code base make sure folks understand what's happening make sure
everyone understands how right everyone understands how

03:00
to make sure to Do's are making it into the database make sure they understand
how to Do's are tied to individual users and once everyone in your group feels
comfortable with how to Do's they're being tied to individual users you're
able to understand the app a little bit make it your own
right make it your own so you're going to go to your room floor and table
assignments right if there's no one at your table like if
your group doesn't show up that's okay go to the fifth floor on room two and
find a new group right if you didn't get a group last Tuesday
right if you didn't get a group last Tuesday on well two two days ago
go to Remo on the fifth floor and find a group right
your goal is to use this code to build something something different uh

03:01
Something Real uh something that you work together to make look good
okay uh I have shared a replit which is a version of this code it's the exact
same code from GitHub right but it's on replit and the cool thing about that is
if you Fork the replet and use it you can all collaboratively edit at the same
time so for some folks I knew they were having a little bit of trouble like
getting GitHub and like working together on GitHub and like creating a repo and
all like all that was kind of too much so if that's like being a hindrance to
you right now that's okay we'll have longer stretches of time for longer
projects where you can figure all that out but the replit might be a good place
to start because you can all just like code together pretty easily and it

03:02
doesn't matter like how decent somebody's computer is all right cool
uh Rascal said for those who have replets breaking hit the three dots show
hidden files click the replit file and change the entry point to server JS yeah
entry point server JS cool if we do want to use GitHub suggestions on how to use
it work the repo and then add everyone to your forked repo that's kind of
that's kind of it yeah then you can just add people to your to your repo
how do we manage mongodb as a group you can just whitelist the IP address of
whatever uh mongodb instance that you use so if you just pick one person to
create their mongodb instance right and then just whitelist the IP address
that's the easiest you can also add people to your mongodb instance for some
reason I always like is weird for me um yeah

03:03
glitch is Good vs code live share is decent um yeah cool
alrighty so we are going to leave the Hollywood Halls of twitch and move over
to Remo uh please go to your back to your room floor table from Tuesday if
for some reason something weird happens nobody from your group shows back up
that's okay just go get a new group fifth floor and up on uh Remo room two
all right everybody have a wonderful night working on this I'm gonna be on
Remo hanging out I'll probably stop by quite a few of your tables to say hello
and see how things are going maybe lend a hand if I can be kind if you can't be
kind don't show up remember we're all here to learn first that's the primary
goal don't use new stuff we haven't covered yet really make sure everyone at
your table understands this code base add to it and build something cool
make it look good it'll be due on Tuesday have a wonderful rest of your
night as you work on this stuff I'll be hanging out with you for a little bit uh
and then over the weekend I hope you have a good holiday weekend if you're in

03:04
the US no office hours on Sunday because it is that holiday weekend we'll do the
the super review the following week and I'll see you all back here on Tuesday to
start building bigger apps with this code base if you have more questions uh
get on Discord ask your questions in The
Help Channel make sure you're hitting up the stream team I'll share mindless
review class uh in the follow-up message to this but uh please we're Community
taught get help from the community be a community tonight work well together be
kind help each other and let's build some cool
Let's go people have a good rest tonight see you on Remo peace no raid hey

03:05
yeah hey hey does this work yeah good morning good afternoon good evening
no matter where you're coming from hope you are doing well
so Leon Raves well back in the day let's just say what's going on everybody hope
everyone's doing well welcome back hope you had a wonderful weekend a long
weekend for the folks here in the states hey welcome back
hey does this work hope it works I think I lost my other sounds though
with the move for those that follow me on Twitter you know that I uh I had a I
moved my desk if there was a problem it took me all it took me the long weekend

03:06
yeah it was pretty bad it's got roasted on Twitter about my wires it's okay they
look clean as hell now though I gotta finish a few things then I'll
post a follow-up but uh it's beautiful now it's it's it's this
is this is a this is a dream room let me let me paint the picture for you
real quick so I'm not gonna post out I'm gonna paint the picture for you while
folks get in here I still have to fix quite a few things like my lighting is
mad off right now so I'm gonna look like a tinge of green that's okay though
we'll live for one class um and I gotta fix the the lighting on
the on the green screen but uh let me paint a picture as folks get in here and
then we'll get our questions in uh beautiful computer setup right box lighting
a desk that goes up and down uh three months three monitors the the beautiful
micro XLR setup laptop PC next to it egpu behind it Nas on top of that right

03:07
then we have going up the the the the the corner of the wall
the Pokemon collection it might get replaced with plants but
for now it's the boxes we got some we got some Pokemon blue yellow Crystal
Emerald what you want I got it we got graded ungraded whatever you need
I got you and then and then it doesn't stop folks because you just keep going
to the right beautiful workbench 3D printer full soldering setup
VR ugh dream room folks stream room uh so I'll share the photos and then you
look on the floor no wires no wires no wires it's clean it's clean thank you
for everybody that gave me uh that gave me Cable Management advice like it
really helped like it really helped I got these like under desk like mounts
for like um for power strips Game Changer uh and
so yeah thank you for the help I appreciate it glad you're all here let's

03:08
get into some questions uh I ran the ads at the beginning I'll start them I mean
I forgot to start them so there's like three minutes before I should have
started them but I also going to start them like right as we start so uh do
with with what that knowledge you may uh
but we're gonna run three minutes at the beginning that way folks don't have to
sit through them during uh Stream So as always like to start off with some
questions if you got questions I got answers I wanted to let people know why
I look a little weird while like my shoulders will be lit I gotta dial in
the uh the lights proof for bam yeah it is it is it is quite the setup
I'm very proud of it and the best thing about my setup the best thing about the
setup is I didn't pay for it I didn't pay for it
when you when you have these tech jobs you you can you can negotiate
you can negotiate professional development funds and sometimes when you
negotiate for you can it could be Hardware it could be software it can be

03:09
trips to conferences do with that knowledge what you may so
we're gonna actually talk about that when we talk when we have our how to
negotiate your offer class we're going to talk about all the little things that
folks don't negotiate that they should probably should that actually have like
a real tangible benefit uh on your day-to-day yeah
so if you're working from home you should be getting working from home
stipend as something you should be negotiating for so we'll talk all about
that as we get into the hunt but yeah so that's the beautiful part foreign
all right if you got questions I got some answers
see I always like to give folks a few seconds to get in here I know we took a
little bit of time so only do a few questions here
what was the latest thing you 3D printed um anyone remember floating had Leon

03:10
yeah I gotta bring that back what was the latest thing you 3D printed uh I 3D
printed a um picture frame like a circular picture
frame it's pretty Ballin it's like a circular picture frame and um somewhere
maybe I'll grab it during break but yeah it's pretty
I needed a picture frame so I printed one you 3D print me a job I'll try
all right well people who don't make it to October
see the data structures and algorithms classes absolutely
um so the the destruction algorithm classes will all be live here on Twitch
all the things you're going to need like anything you need to be ready for the
hunt anything you need to be complete in terms of your software engineering
knowledge to get the job will be completely live and done here I think
some people are still kind of panicking over a little bit about that
everything you need will be live in fact everything that you need

03:11
is already on YouTube like last cohort like all like if you're if you're
jonesing you're ready to to just hit the ground running uh it's already it's
already on YouTube so like it's already there right so you don't have to panic
at The Freak Out like everything you need not only not only are we going to
cover it for you but it's already there for you right like
like that that's there so don't worry about that what the point of hunt Tober
is is there are quite a few folks that are ready to get serious about the
actual job search right right about the actual job search and so
since we have such a strong group of folks that are ready for the hunt I want
to have some time where I can focus on them where I can invest a lot of time to
make sure that they're successful to make sure that they get the help that
they need that we can go a little bit deeper into the things that they might

03:12
need on the hunt and be able to answer questions in real time each day right
and so that's the um that's that's the that's the idea right
it's just a month to focus on folks that
are ready to go into the hunt that way I
can provide a little bit more support on The Daily uh to make sure that we get a
little bit more practice in together but
all the core stuff you need boom will be on will be on uh twitch for sure um
last last time we did the mega month we called it Mega month or Mega summer last
time uh what it will end up being is pretty much every day we would meet at
the same time we would do a coding challenge together and the coding
challenge was just built right we started with strings and arrays right
and then we built up to all the way up to using things like hash maps and more
complicated data structures but each day kind of built right right
kind of built on top of each other right kind of built on top of each other so
that way it just gave folks a little bit more practice every day on the data
structures and algorithms and then I had

03:13
some period of time where I would answer questions that were coming up Leon how
do I negotiate this or Leon how do I um how do I how do I deal with this like
thing that's coming up in the interview or things like that so just a little bit
of focus time for folks that are ready to go on the hunt that's all it'll be um
and then also just a chance to to Really to to to to help those folks with a few
extra things they might need while they're going through the hunt uh I'm
prepared folks I'm ready uh we brought in the big guns uh we have folks helping
us with the new little one uh they're here on Tuesdays and Thursdays now to
get to get me having some extra time to be live and do this and then they're
going to be helping us throughout the week uh during October so
um I'm locked and loaded I brought in the big guns I brought in the help
so we're gonna have a a really strong time where we can focus and make sure
everybody gets the help that they need so that's the beauty of hunt over that's

03:14
what we're trying to bring to the table and I'm really excited to see everyone
working so hard to to take that month seriously but like I said we also have
the illustrious the wonderful the charismatic ketchup crew and uh
everything that they need will also always be live right so it's it's it's
not something if you can't make it for this brief period of focus if we can
figure out how to do this well I'm going to do it again right and I think that's
I think that's the mindset I've been having with 100 devs recently is like
no one's ever done this before right there's no blueprint for me to follow uh
so I'm trying things some things really work and some things really don't right
and so unfortunately you all are the guinea pigs as we go through like the
first real cohort at scale right we've done a smaller cohort but this is a
chance for me to figure out what works what doesn't work uh it's a chance for
me to figure out like all right project night what worked about it what didn't
work about it right like that's a big thing to take away from it and the next
cohort will just be better right and so thank you for helping me iterate thank

03:15
you for helping me figure out all the Kinks and uh
uh let's make it so that folks in the future have an even better experience
that's the goal right 100 guinea pigs exactly cool
all right thank you for the questions uh checking in uh if you have not checked
in please go ahead and check in exclamation point check-in we'll give
you the link right we'll give you the link uh if you click the link you still
have to like and retweet it uh there will be um there will be
nothing that like checks you in stream here you actually have to do the leg and
retweeting on Twitter I have to keep saying because people keep forgetting
all right cool uh submitting your work uh checklist was
due I want that but your project is also due
um this shouldn't say checklist this is a project

03:16
I want your project from Project night or project week right uh from Project
week I want your lovely wait did I say class 51 in the thing no it's class 52.
this project project night okay I just save it to you yeah because project
night was uh 51. so yeah I want your checklist which is your last day I'm
still bigly I'm sorry uh I want your checklist is the last day to submit the
checklist and I want your project Night Show Me What You Got
right I don't care how deep you got into
the project I don't care how far you got how many changes I don't care if your
team ghosted you or whatever I want to see where you're at show me what you got
right um not looking for Perfection I'm looking for where you got with your
project right cool uh GitHub repo or live site
um whatever you whatever you want to share uh whatever you want to share

03:17
whatever is easiest to share is okay uh do we all submit yes you should all
submit your your site yeah you should all submit even if
broken yes even if broken if it's broken probably submit your repo
learn so much from this project week also a lot of headache to deal with when
it comes to GitHub yeah that's kind of the point right these these working as
groups kind of it does a lot of different
things right it's one thing to work on a project by yourself it's also it's a
completely different thing to work on a project with others right and so the
beautiful thing is that with these project nights we learn right like we
figure out what works what doesn't work um unfortunately sometimes at project
nights you don't get like you're bringing hundreds of people together so
it doesn't always work out for everyone and that's unfortunate like you might
have had trouble finding a group or keeping a group together over the week
that's that's that's going to happen but we'll do quite a few of these and more
often than not you can wind up with a really great group so if project night

03:18
wasn't something that really worked out for you this past week that's all right
Buckle in we'll do another one where you can meet some other really cool people
but it seems like from chat a lot of people had a really good experience had
a lot of fun working with their group um and so I hope that
um you got something out of it and we're gonna do a couple more because like I
said it's really important to get used to working with others and as we learn
more stuff right as our projects get bigger and bigger we're going to start
adding some ways to manage your code right that makes it easier to work with
others and we'll start introducing some processes like agile and doing sprints
and stuff like that so we'll have some chances to do more projects in a more
like coherent matter as we get further along we learn more so just know if
that's something you want and that you enjoyed uh we'll be doing a few later on
it was scary for me I didn't want to mess things up but I learned a lot hey I

03:19
love to hear that right yeah and that that's why we do it now right we we do
the scary stuff now so that when we're on the job we're a little less scared
the brick stuff all right all right so thank you for submitting
both your checklist last day and your project night wherever you got from what
you got uh back in review will be Sunday so
we're gonna start at 1 p.m eastern time and we're gonna go until we go so we're
gonna try and review everything back end uh going all the way back to the
beginning we're talking kind of uh promises All the Way Forward uh so if
you kind of are still a little uh unsure about a few things come come ready with
lots of questions let's dig in and uh get through it cool so we'll try and
build all the way up to kind of our MVC with off class
uh hunttober we kind of already talked about this a little bit but coming up uh
things that I need you to get done with the deadlines we check in every class

03:20
you do your homework which is a week done always we do a week later uh your
net week net weekend your networking uh please bring that back into the fold at
least one coffee chat a week and at least three connections every week so
make sure that you're keeping your sheet updated exclamation point sheet if you
haven't been doing it uh I will be uh asking for your sheets in the near
future to see that you've been doing uh the networking alternatives are for
folks that have an actual issue that would prevent them from networking most
folks that have an issue that would prevent them from networking have
priority reached out to me like on mod mail or something like that but if you
actually have something that debilitates
you from networking uh you can do things
that can help you network in your way so
that could be text-based networking that could be groups things like that so we
actually in our networking class talk through Alternatives so if you're
interested in that definitely watch that class and all the Alternatives that we

03:21
presented but that's that's really just for folks that seriously have something
that would impact them from networking because it is so important to the job
hunt all right you're doing a coding challenge every day don't forget you're
pushing your challenges every day to a private repo but you have your green
squares turned on for private repos you're doing the bank
and this week we're moving on to arrays right I was raised [Laughter]
get out of here that's funny I gotta VIP them I don't know if I can VIP either
with that username [Laughter] uh this week a raise uh so last two

03:22
weeks we did strings uh this week we're doing a raise and uh in Discord I shared
I shared uh readings and a video for you
to watch about a Race So uh on Discord I
have the javascript.info arrays uh which we did when we covered arrays in in
program uh so that's a really good just refresher and all the array methods uh
there is a free code Camp um article on destructuring a lot of
folks were confused about the structuring and I forgot that we had
redone strings and I hadn't actually shared the reading with you my bad thank
you for the engagement though uh and so the the reading on destructuring is
there and then there's a video on arrays as well from web dev simplified which
has a lot of amazing who has a lot of amazing videos and so
um those are kind of your homework for this week to bring a raise back into the
fold and you're doing at least five code Wars all tagged as a raise so

03:23
make sure you are just doing array problems right all right
all right make sure you're just doing array problems and uh focus on that so
the reason why we're doing like strings and then arrays and then we're going to
do objects is that by the time we get to
hunt Tober and by the time we get to our data structures and algorithms classes
we can rely on this Bank of information that you've already been building up you
should be putting these into your Anki like all the methods should be in your
Anki this is something you're going to need for all of your interviews and then
when we get to our data structures and algorithms we understand like why some
methods are better than others we kind of understand the complexity behind them
how much time and space different things are taking up and then we build off of
that for our optimizations so if you don't already have the strings the array
the objects and all those methods kind of ingrained in your memory it's going
to be a little bit harder to build off of them in a month or so so when I

03:24
assign these These are these are some really important bits I need you to be
working on each week because it's going to help us have a nice springboard
for our data structures and algorithms class
some people are saying GitHub is down so um we'll leave we'll leave the the
homework open uh until Thursday so that if for some reason GitHub is uh
giving you some trouble uh also tonight's gonna be a little bit
different of a class we're going to talk through uh the rest of the auth code
that we haven't talked through and we're going to plan out our social network so
um we might end a little bit early so you can actually look at the code and
hopefully GitHub is up when we do that uh under does bringing down GitHub let's
go um but yeah so a race this week super important
you know what not serious enough let's go to the Border super important

03:25
that you get this array work done if you didn't do the string work this is this
is your this is your sign to do the to do the string work and then follow the
array work this is really important it's our springboard into doing well in our
technical interviews I need you to have this base level of knowledge uh so that
we can uh do well during our interviews cool foreign
if somebody asked you to use regex in an interview I would just I would just I
would get up and leave I just get up and leave
oh it's not gonna work out I'm sorry I appreciate your time
thank you for the coffee but please don't call me all right
uh last day please turn in your checklist if you want to be part of

03:26
hunttober I need your checklist today all right team project we already said
do today boom uh hit list do Tuesday next Tuesday Hit List is due folks
um and I don't need I don't need it fully filled out like I don't need all
the complex stuff that we're going to cover together when we do it in class I
just need the companies that you're going to apply to
right so I need the companies that you're going to apply to
I want at least 40 by next week 40 open positions that you're going to apply to
right 40 open positions that you're going to apply to by the end of our
October you'll have 60 and you will have built out those 60 that have at least
three people at each company that you can contact right so I need 40 at least
by next just like doing this I need 40 by next week of companies with open
roles that you could actually apply to what happens if the position close after
we selected nothing you can do about that The Hit List will be like a living

03:27
breathing document like The Hit List like I don't know how like
this is going to be like what you do every day all day is The Hit List uh
it's gonna be something that you're gonna be using every single day is
something that you're gonna be um really invested in uh by the end of
October and so get comfortable with it now start adding those companies uh and
uh yeah I'm gonna ask for that next Tuesday our three connections already be
targeted towards The Hit List I think once you have your hit list done
hint hint hint uh your networking will become focused on just those companies
right so we'll no longer be doing just kind of like General networking your
networking will be to meet Folks at those companies that could ultimately
give you a referral and uh we'll talk through all that yeah so for now I don't
need you to do anything fancier with your hit list and find the open roles
that you're going to apply to that are a decent fit and then we'll have a whole

03:28
class on how to fill out your hit list and then we're going to fill out some
folks Hit List live we had uh two folks that won uh Raffles for me to do their
Hit List live so we'll do that live together I'll show you all the tips
tricks secrets I'll even share the messages that I would send uh and you
can all do that together uh so safe to assume that our next
company you work at is on our Hit List most likely for most of you the company
you end up working at will be on your hit list so when you add these companies
to The Hit List talk about some manifesting right like come on now like
you're putting these companies on here because that's where you're going to
wind up working right there's nothing more real than that
um also a lot of you will start to have once you start the hunt and you're doing
things correctly you're actually going to have some inbound interest too and we
gotta go back to the boardroom for this uh we have the hundred devs job board

03:29
that will be launching with huntober uh met with a wonderful company that runs
software for job boards uh that is we already have it up it's already up and
running and I'm going to start reaching out to companies to get them to post
their jobs on the job board uh for folks that complete the program you'll be
invited to create a profile on the job board and my goal is to start bringing
like top tier companies to that job board to hire top to your talent uh so
that's gonna be one of the perks that we'll start with October [Music] um
we'll start small kind of with that group make sure it all works and then
kind of keep blowing it out so yeah that's uh that's the beauty of what
we're trying to work towards yeah so that was fun I did that last week
uh it looks pretty pretty crispy and so it's gonna be fun fun bringing lots of
employers on there and then uh bringing you all in there to help you get some
jobs too so yeah that's gonna be uh I think that's one of the there's like
couple big missing pieces right and I've talked

03:30
a lot I talked to some about this in the past like
I want ways for folks to make money while they're going through this
experience I think that's important I think that's actually what Equity is is
not just offering free education but a way to like support yourself while
you're doing it I think the agency could
be that piece and then one of the bigger pieces is like getting you a job and
before it's kind of just been like hey go out there get the job which I think
you should always 100 do but I have so many companies that ask and want to
Target you all specifically they see how successful the past cohort has been and
so bringing employer Partners into the mix to help you ease into that job
transition is I think one of the last big pieces and I'm going to say full
stop I can't do it by myself I'm gonna be asking for a lot of help as we kind
of keep going forward um and so if that's something you're
excited about talk about 100 maintainers
and fun stuff like that uh it's gonna be something that we're we're gonna be
trying to push um and then we're going to take some

03:31
time to get it right like I think folks keep asking for another cohort and I
wouldn't feel comfortable with another cohort until we kind of get those things
like hammered down right like I want I want folks to have like the complete
experience and I think that's part of it you know cool
all right 27th client signature approved PR on an actual open source project
um I love all of the open source projects that are like
come learn how to contribute to open source but I want it to be like a real
project um something that is a real like organization that's real code like a
real Library real framework real like something real something that when
somebody says oh that's pretty dope like that's what you did wonderful right uh
or volunteering for a Grassroots organization uh so that's due the 27th your MVP
holy crap this is this this is this is pretty close

03:32
you're a beautiful MVP for your 100 hours project is due the 27th do you
need both no you just need one you just need one of these things either you got
your either you got a paid client you volunteer for a Grassroots org or you
got a pull request at an actual like free software open source project
like a real project your MVP remember MVP is just the bare
bones like proof of concept for your application um
21 days to MVP hell yeah let's go and the beautiful thing is if we get through
what we need to get through tonight and we get through what we need to get
through tomorrow you have the full template for your MVP already like by
the end of tomorrow as long as GitHub stays up I'm Sorry by the end of
Thursday as long as GitHub stays up you'll have the template for your MVP
it's just figuring out what you're going to do to add to it change it what

03:33
features you're going to add stuff like that yeah and then
the 11th your 100 hours project is due October 1100 hours project is due and
then your premium Mass which we haven't talked about yet will be due as well
uh and we're gonna be sharing a lot of stuff that I think is how to play the
game it's up to you to figure out how and what you want to do to play the game
right so that's coming through and then my last little device I know this is a
lot so whenever I say all these things that are doing all the things I need you
to be working on I always want to follow
up with don't take yourself out the game
let the game take you out it's not going to put in all this work you put in all
this energy right don't take yourself out the game you got this all right
so uh tonight I want to wrap up off I want to walk through the code base I
want to answer any questions that you might have I want to look at a few
quirks and features that we haven't had a chance to talk about yet and then uh

03:34
we'll take our top of the hour break and when we come back we're going to plan
out our social network so I think a lot of folks are still having a little bit
of trouble figuring out how like a really like an app with a lot of
features would come together right and how we might actually build something
real so our goal is to build a social network for a hundred devs uh an
Instagram clone was what we'll kind of start off with and we might add some
stuff that goes our different ways [Music] um
we can't call it Instagram we couldn't call it quick kilo so we want a quick
pound but uh your question of the day is what should we rename it last cohort
decides to rename quick pound to Binary upload boom because you were like
uploading photos uh but we're going to lay that out we're going to talk through
it together we're going to scaffold how the application can come together we're
going to talk through all the bits and Bobs that we might need and then uh your
homework will be to look at the binary upload boom code set it on Thursday we
can walk through it fully understand everything comes together and then

03:35
extend it add some new features things that that might not already be there cool
devgram only Bob's devs United ooh photo show
only but I like only Bobs that's pretty cool rapid snap ooh rapid snap
slowgram only devs only devs is actually pretty good I'm
sure somebody's done that already peekaboo show
oh boy all right we're gonna do like a poll or something keep sharing them
we'll go back and pick the best ones we'll do a poll before the end
all right uh let's go ahead and wrap this off up I am looking at the to do
MVC off with local authentication code that's where we're starting today uh

03:36
right now I already have it running and so uh on Port 2121
did you all hear that did you all hear anything when I press this but do you
hear anything no oh no hold on anything or anything
hey does this work or anything twenty one twenty one twenty one or anything
we lost our our sound board with the move no God no God please no no no no no
no all right rip was a good run it was a good run uh we'll have to
re-record them I have the first one I don't know I

03:37
don't have the 2121 and not the application one all right
let's take a look at this code so uh there are some things that we haven't
had a chance to actually talk through uh and so we've kind of taken a process
here right like like I showed one right you built one and then you work
together to build another right so there you've kind of had a chance to work in
this code base you heard the 2121 I think y'all playing with me you did hear
it I just don't hear it huh all right I'll have to watch back
the VOD all right that's really reassuring all right beautiful I just
don't hear it in my headphones for some reason I hear all the other ones I don't
hear those all right cool we're good okay yeah I did get caught
I did all right so let's walk through this we're gonna look through the bits
and Bobs that folks have been asking for I'm gonna talk a little bit in detail

03:38
about sessions which are really important uh folks have asked a lot
about Flash sessions uh folks have asked a little bit more about the the models
and how those are working and so uh so we're gonna walk through these
right right we're gonna talk through these and then we are going to take our
top of the hour break so uh just kind of
going from top to bottom here uh Express obviously is what we're using to build
out our API uh it is everything that helps us handle everything between like
the requests and the response so we hear these requests coming in and what the
heck do we do and it stops us from having the hard hand code all of those
things like we started from the mud right we started at the very beginning
coding raw HTTP raw FS right and build an app with just that and now we use
express to actually build out a more Rich API instead of having to hard code

03:39
all of that stuff and then instead of having to constantly say Express we wrap
all of that in app which is pretty common now
to handle us talking and interacting with our mongodb database when we first
started off we were just using raw and the raw client right now we're
using Mongoose which helps us do a lot of fancier stuff to interact with our
database it's going to help us do um a lot of things when we're just using
like our models and it's going to help us connect a little bit easier so
Mongoose is doing the heavy lifting for anything that has to do and interact
with our database passport we talked about over the last two classes is the
package that's helping us handle our authentication and the beautiful thing

03:40
about passport is passport has what chat what does passport have
it does have authentication it has strategies exactly so passport is
handling our authentication but it has strategies and once you have an
application you can swap out those strategies to do different stuff so we
are using a local strategy but if we wanted to um let's do passport Js
if we wanted to we can go to passport js's website and then you can see right
on their main site they have these lovely strategies and their strategies
for whatever the heck you want uh so Google off right so if you wanted to
authenticate with Google if you wanted to use any of the fancier like oauth
type stuff if you wanted to authenticate with
Twitter right so maybe your 100 project is a a Twitter app of some sort right

03:41
well boom you can authenticate with Twitter if you wanted to um
just a lot of different stuff and these are all just different strategies for
any type of login access that you'd want to do and so that's the beauty of using
passport you have one type of like just use our code template and then any type
of login or authentication that you want to do
it's very easy to add and the other cool thing is that you can even add to what
we have here so folks could do local or Google or things like that and so if
you're really interested in um adding other types of authentication to
your applications we saw the Google auth in the Traverse media that was assigned
for homework and if you go on my YouTube I used Microsoft auth as well so just
different types of sign up should you want them and kind of talking through
some of the benefits you might get if you use those types of off versus local

03:42
and some of the things you might give up so if you're curious about other
authentications that you could do with passport I have a video using Microsoft
off on my YouTube and then also just the homework that we did boom where do you
add that strategy so we have the passport JS file in our config right so
you can see that this is requiring passport which is our actual package
like the npm package but down here you can see us requiring our actual passport
JS file we're saying we require you to go to the config folder and find the
passport file and when we look in this passport JS file you can see that we're
using a local strategy right and we are we're using that local strategy we could
replace this local strategy with any of the other strategies that we find on

03:43
this website so if we wanted Twitter boom uh it's gonna have everything that you
would need for the Twitter strategy and normally they link right to GitHub
um so you would probably install this npm passport installed Twitter and then
there would be the code that you could grab right here right you grab that code
you plop it into the template that we already have and it's pretty much it the
doc suck some of the some of the docs are pretty rough because they have over
500 different strategies that we're all pretty much done by different people and
maintained to different levels so sometimes the um
some of the more obscure stuff is a little rough and some of the more
commonly used stuff is a little bit better and so that's that's the the rub
uh you got to find the one that you want to use yeah the great thing is that
passport is so ubiquitous that you can typically find a tutorial or things like

03:44
that that walk through different strategies can you do multiple strategies yes
um uh you can in fact the start up uh let's see if we can find the
hackathon starter uh as an example I showed on on stream before I'll put this
in chat just for folks that are curious I haven't used this in a little while
I'm not sure how up to date this is it looks like the last commit was in March
um so I'm not sure if it's the the best thing I've used it in the past uh but
it's been a while since I've used it the cool thing is you can see in their
config probably that their passport JS is using it has all the strategies
it has all the strategies look look Instagram local Facebook Snapchat
Twitter twitch GitHub Google LinkedIn open ID like it has all the strategies

03:45
and so when you go into their login page which I think they have a um
yeah I think this is like the hosted version
cool when you go to create an account or sorry login you see how they have all
the different logins here that's because they have all the strategies already
implemented uh so something that you might do is if you're like hey Leon I'm
really interested in Snapchat authentication right I'm really
interested in Snapchat authentication you could go to like passports website
and find it or you could just go straight to the hackathon starter look
at their actual code base and see how they implemented the
um the Snapchat uh strategy right and then you could just come down here
um you they kind of have it really well commented sign in with Snapchat you
could just literally yoink this all right you link it

03:46
put that inside of your passport JS file and make sure you have the require up
here and then you'll probably have to install an npm package for it so there's
kind of like three steps you need to do you would need to one install the npm
package tied to it probably like passport Snapchat or passport Twitter
but you can always find that on the site or look at their um their package.json
right make sure you have the package installed grab the requiring of the
strategy and then just grab the strategy from here plop it in and then you have
Snapchat auth right and there's a little bit of things you have to
get comfortable with with how different authentications work but once you
understand that like you're passing tokens back and forth
um or other fancy stuff it becomes a little bit easier I'll link my video on
Microsoft off in the follow-up materials just in case you wanted to use any of

03:47
these other strategies you could watch that video to have a better
understanding of how different non-local authentication strategies actually work
yeah cool but that's the beauty right the beauty is we have
built our authentication on top of passport passport and since we have
built our authentication on top of passport we can swap in and out or even
use these different strategies whenever we really want and so
super I know it seems like you know it's a lot of code it's it's not you're
really grabbing three things and none of this just to reiterate because people
always kind of get a little scared when I put this big file on here none of this
is anything right none of this is anything that you would ever have
memorized right this is literally all right I know I'm going to use passport
somebody has put in the time and energy to make this work to handle all the
heavy lifting when it comes to authentication I'm going to use their

03:48
hard work and their Brilliance to build this out right unless you're like a
cyber security researcher is this something you're really interested in or
there's some weird authentication that you want to use that they don't support
and you want to build it out that's the only time you would ever really kind of
mess with this and build it out right uh local strategy just means you're
logging in yeah you're creating an account you're having in this case email
and password like your your authentication is local to this
application it's not being authenticated by some other provider
um someone said are any other authentications better than another not really
but when you use certain authentication strategies you get some stuff built in
right now is there anything stopping people from
creating accounts on our application right
like we could build out some more robust stuff but right now
there's nothing stopping somebody from creating a bazillion accounts which

03:49
could be a problem um there's nothing that's really helping us with
authenticating if they're like real people or not and so some of the
off-the-shelf authentications like the Google off the Microsoft off they kind
of handle that for you right it's it's a little bit more difficult to create a
Google account a little more difficult to create a a Microsoft account than it
would be to just create a local account on your application so you if you use
these kind of like third-party authentication Services you get some of
that stuff built in uh you also can get some
you can also get some support when it comes to storing information about your
users right the original don't get got we go get comes from me implementing the
Microsoft off because with local strategies we're handling all
that stuff the usernames the passwords all that stuff it's something that we're
handling but when you use a third party off they're handling that for you and

03:50
often they have teams of cyber Security Experts that are like employed to make
sure that that's robust it's secure can handle things like um
text message verifications to factor off right all that stuff you're going to
wind up using maybe like a third-party provider to help you with right and so
some folks instead of saying you know what instead of me trying to we call it
rolling our own two-factor authentication rolling our own um
email and phone verification right instead of just setting all that up
which we can set up with twilio and a bunch of other stuff instead of sending
all that stuff up on our end we can use these third-party services that handle
all that for us and that's kind of it mm-hmm so it's up to you whether or not
you feel like that is something you need and in the beginning the answer is no
when you're building out your MVPs for your 100 hours project and probably when
you're building out your 100 hours project you're probably just going to

03:51
use local off because that's not the meat and potatoes no one's going to look
at your application and go damn that's some good off code right there right
right no one's gonna say like ooh oh yeah yeah that that that's some good
that's some good off nobody's ever going to look at that and be like damn that's
great off right they're gonna care about the application that you built they're
going to care about what your application does so it's something I
don't really want people to stress about early on just use this and move on
right just use it and move on if you find that it can be cooler to add
something at it later once you have your application built cool
so that is our passport now these next two this session and this store
these are both there to help us have logged in users right so there's
something really special about our application that's happening where our

03:52
users are able to say logged in so let me actually demonstrate some of this and
then we'll talk through it so let me go to my app here uh I am running
cool I'm going to log in and I'm going to do Bob at bob.com and
I'm going to do Bob is the password and now I'm logged in right not anything
that we haven't seen before right I think we haven't seen before but here's
something special so we're currently on our to-do's page logged in if I go back
to the main page right if I go back to the main page
and I click login what's going to happen if I click login right now what's going
to happen yeah it's going to redirect me straight to the to do's

03:53
boom I'm going straight to the to do's how the heck did my application no to
send me straight to the to do's and more importantly how did my application know
right how did my application know that I was logged in
right we could understand the redirecting right like we might be able
to look at our code right we won't be able to look at our code and be like all
right since they're logged in right we know like the insure auth is a thing we
know that we can redirect based off if somebody's locked in but how do we
actually know that the user was logged in and yes chat it was session we have a
logged in session we have a session that
was created uh when this user originally logged in or signed up now
the session is not magic it's actually something called a cookie

03:54
and what we are doing is we are leaving a cookie on our users computer that
matches the session stored in our database and at first it seems pretty
complex but know that these two packages are the ones that are handling the
cookie and sessions it's not something I ever really have to think about it's a
few bits of code that we'll walk through and then you'll see all right oh that's
how the cookies being applied this is how the cookie matches what we have in
our database and once these are linked the users can stay logged in so before
we dive into the code and before we dive
into the browser where I'm going to show you these cookies I'm going to show you
how we're able to have our users stay logged in we're
gonna take our top of the hour break so if you're new around these parts where
they take a break at the top of every hour please if you're able get up move
around hydrate stretch take care of yourself look at something that's not

03:55
your screen for a few minutes and we come back we're gonna dive deep into
these sessions dive deep into these cookies see how they work and I'm gonna
run some ads that folks to join us don't
have to sit through them all right buddy
see you in let's put five minutes on the timer
are you drinking mud the mushroom tea no but they are all up in my ads they know
they they're like we're getting you Leon I know that you're gonna they're gonna
get got they're trying to get me all right I'm into the clock see you on
five let's jump back into it so we're gonna talk through right
um we're gonna talk through the cookies so what I want to do is I want to go
ahead and I want to open up my inspector
and one of the things I want to go to is we have all these other things that are
in the inspector that we haven't really used yet

03:56
um we're gonna use even even funkier ones when we get to react but we have
this application section and in this application section you can
see a lot of stuff we have like the local storage
excuse me which we've seen in the past right we say this local Source we've
seen in the past uh we have session storage which unfortunately is not
actually session storage is like the local storage that ends when you uh
close your browser or or go away for a bit right
um it's the it's kind of like the local storage that's not persistent
um and then down here we have cookies and so these cookies you could think of
them as like a little text font I'm going to simplify things here you can
definitely nerd out on this stuff right um if you think of these as like little
text files that we're putting on our client's computer that just has a tiny
bit of information and what we're doing whenever we have an

03:57
open session right whenever we have an open session is we're matching the text
that's on their machine that little text file that we call a cookie we're
matching it with the session that we've logged on our own back end
right and so if we look we have these two lines of code that are going to help
us set up the session and then down here we have set up our session saying
app.use the session we have a secret which I'll talk about in a second and
some other stuff that are just saying like like that helps us set up the
session and then the last little bit here that's important is this
store uh we're actually going to store our session info in our database
right so if we look at our mongodb we're going to see
that we have users collection we have a to-do's collection from our to-do app

03:58
and we have a sessions collection and in this session we have all the sessions
that I have done whenever I've logged in right whenever I've logged in we have
created a new document right a new document in this sessions collection and
so uh right now you can see that for some reason it thinks that that's
today's date um I'm just gonna let that be for a
second uh we have the the the day that we started it the time that we started
it and then kind of like what we're storing but we'll notice that this has a
you like a an ID UB s4li if we go back and we look on the
client side you can see that here ubs4li we can see right we can see that
part of that cookie matches the information that is stored
in our database now you don't actually have to store the sessions if you don't

03:59
want to it's just an extra perk that enables folks to like come back to your
application much later right to come to your application much later and still
have like this information and still be able to use those cookies
it's the expiration date sorry yeah um you'll be hey thank you for the gift of
Subs hope you're doing well thank you for being here yeah uh we have the
expiration date going in here not the start date sorry it says expires right
next to it rip right and so the idea here is that we have a match in our
database and we have a match stored on our users computer right and
the beautiful thing about this right the beautiful thing about this is that now
as we move across our pages right as we move across our Pages we can see that

04:00
the Cookie's still there like that file is still there so even though I've gone
back to a different page when I go to log in every single time I send a
request I can send that cookie along with the request or the information
along with that request and I can check right I can check that session and see
if it matches right and so the idea here is that I can have these little cookies
that enable me to have open sessions and I can move around my application and
even though we're going to different pages as long as you stay logged in and
as long as you have that cookie I know that you're still logged in that you're
still the same user that is still the same session and I can let you move
across my entire application right now the cool thing is if I like log out

04:01
and I clear my cookies I try to like log back in you can see that now I'm trying
to create a I'm trying to log in but it's a different cookie and since it
says it's a different cookie it knows that I'm not logged in so I didn't get
redirected back to the to Do's right that that that that session is different
that cookie is different so it's not the
same session right I'm no longer logging as soon as I click log out it destroyed
that session right and when we went back
to the main page and tried to log in you can see that we didn't get redirected
this time we got taken to the login page right got taken to the login page
um so when I log back in so let's go ahead and do something interesting
somebody asked a really interesting question so let me go ahead and log in
Bob bob.com let's go and do Bob Bob Bob all right so I'm logged in we can say

04:02
acot GG if we look in our Let me refresh we look at our session
you can see that we have our cot GG as the new session right now the cool thing
is let me uh let me close my document here
let me go to localhost 2121 let me log in y'all see that yeah
y'all see that all right even though we like completely left the app we closed
we closed the page we still went back right the reason this works like the
reason even though we were able to come back is exactly the cookies are stored

04:03
locally on our machine and our sessions are stored where
in the DB right we could we could create our application without the store
all right we could create our application without the store
however if somebody like closed the browser or closed their window and came
back they would have to log back in right we wouldn't have like that
persistent session so by storing our sessions in the DB we have this other
ability that we just kind of take for granted all the time that we know when
the users come back we can find the session that they had previously because
they still have the same cookie and that cookie still stored as part of the
session right so we have the ability right we have the ability to have

04:04
repeat users that have been logged in go away come back and they're still logged
in right what is creating the cookies on the
client side so everything that has to do with this
all the all the all the stuff that has to do with the session and storing the
sessions comes from these two packages and the little bit of uh a little bit of
code that we're writing here to tell it to use those packages to handle the
session now let's think about this for a second we're creating these cookies
and we are creating these like unique ways for each session to be unique right

04:05
like we need a unique cookie for each user right and so
how can we create a unique cookie for each user that would be hard to kind of
like reverse engineer right and to then like figure out how to maybe trick the
system into thinking that you're already the logged in user right there there
could be some things that we'd have to think around that the secret makes that
a little bit harder the secret means that it's not just like it's not a um
it's just not like a generic thing that we're using it's uh yeah you can think
of I like that gentle giant you could think of it as like math.random times
keyboard cat right like where we're kind
of like randomizing by using that secret to make our stuff a little bit more
unique like to make our strengths a little bit more unique and that kind of
does get into like the salting and hashing that we'll talk about in a second
um but it's just a way of kind of making these these cookies that we're seeing

04:06
when we kind of look in the inspector a little bit more unique
mm-hmm so that this is kind of being randomized a little bit more
and so like I said you could nerd out about this this whole pipeline you could
nerd out about like how the cookies are generated and how they're stored on the
client machine how we're storing that session in the DB but like
right now that's probably not the thing we should nerd out over right right
uh we we should probably say all right I'm using this off the shelf right I'm
using this off the shelf it's going to handle sessions for me if I was on the
job and this was a real application and this was something that I really needed
to [Music] um I really need it to like get right then
maybe spend a little bit more time on it but for right now you're gonna use it

04:07
off the shelf yeah uh Rascal 2. hey Rascal suit with the raid today
uh Express session creates the cookie yup mongoddy store stores the
session objects in the database yep and one coming back to the browser gives the
server the cookie store finds the session for that cookie and gives it
back uh so yeah exactly so what's happening here right is when we show up
when we show up and we go we're just kind of like here like we're back on
localhost 2121 right when we show up and we click this login
we have made a request to the server right and that server what it's going to
do it's going to take that request and part of that request is now our what
part of that request that's being sent to the server is now our what
yeah it's that information that's coming from the cookie right and what we're

04:08
going to do is since our session data is stored in the database we're looking
through our database to see all right does that match does that cookie match
any of the IDS that we have here if so we can we can bring that session back to
the user we can send that back so the client can skip the login and go right
back to their previous session and so like I said
it's a lot we can nerd out over all the little bits and Bobs but the only thing
you really need to know is that on the client is start a cookie and right now
in our mongodb we're storing the sessions with each request we're
checking for that cookie to see if there's a user that should be logged in
that should be ready to rock and roll and if we find that information then we

04:09
just log them right in they keep up that session all right
can the secret be anything yep you can make up whatever you want there
I think keyboard cat is like the default that a lot of like
um either the docs used or tutorial used yeah cool
all right so now we have sessions so our users can stay logged in we're storing
those sessions in our database right we're storing their sessions in our
database and um we now have the ability to have users
logged in right we can they can log in they can stay logged in since we're
storing the sessions in our database they can straight up close out our
application come back later and still have all that information
uh should the secret be in our EnV file uh actually yeah so when we get to our
our application our social network we're actually going to do that our secret
will be in the EnV file uh is it super is it super new to have that happen

04:10
right now no um but yeah we'll actually put it in there
yep all right you'll see that in our in our social network code that will use it
as an environment variable uh do these sessions eventually get
deleted yep they have an export you can put in an expiration date um
and you can even see that we kind of see the expiration of this the session uh
here in the DB at the moment and you can set any type of expiration
that you want um there have been some apps that have
like used this like not maybe the best way you should have done it but like
there are some apps that have like put like really silly expirations on it so
you get kicked out every once in a while
or something like that like you can play with it cool all right so
we have talked through sessions right that keep our users logged in

04:11
uh the express flash this was something very particular uh let's actually show
that so let's go to our application here I'm going to log out
Bank apps do that right exactly yeah Bank apps will like kick you out they'll
close your session uh so that if you like walk away from your computer
somebody else can't come up and like have access to your banking information
so if you've ever been on your bank's website and you've like not been on
there for a while and you get kicked out that's the Bank closing your session
really great example thank you for that raise
all right so let's go ahead and log in right and we're going to put in Bob
at bob.com I'm going to put in the wrong password
all right so this invalid email or password that we have on the login that
like flash notification that's what flash is helping us do right if we go to
our sign up and we do something silly let's go ahead

04:12
and um so let's go ahead and do um rank frank.com
uh and we do sorry that should be frank.com over here we do Frank
at Frank right and we just put in password of Frank and we try to submit
we kind of get all these different don't
get me started I don't think you already know who Frank is
I don't know if you're ready for that yet cool so if we look we got this please
enter a valid email address because I didn't put a real email address uh we
have our password set to eight characters long which obviously Frank
was not eight characters long and then I
didn't put in the actual confirmation so it didn't match so the flash these
messages right here that's the flashes uh coming for
so Frank all right so we the lore continues so we have Bob

04:13
and we have Bob's evil twin chat who's Bob's evil twin John thank you
somebody said Victor I gotta ban them real quick hold on sorry it's gonna time
them out for a few seconds um John is Bob's evil twin right and then
and then we had Sarah Sarah is kind of the reason that Bob and
John don't get along very interesting past Victor is the The
Suitor that came along and sweeps Sarah away from both Bob and John so long

04:14
story there too and then Frank Frank is Bob's dog
cool so Bob has a dog named Frank and so uh uh Frank is Bob stock all right so
[Laughter] so Frank has an email by the way too uh
so anyway so we have Frank and so so it gets deeper right you're like Leon why
why I introduce a dog well let's just say that Frank was the reason Victor met
Sarah that's all we're gonna say Frank was the reason Victor metzer so it
gets it gets a little tumultuous all right so uh all these kind of like messages
that are popping up uh that are flashing up to let us know something went wrong
kind of like our validation that's what uh flash is handling uh it just enables

04:15
us to kind of have these messages that kind of pop up when we need them and so
there's like a package that helps that you could do other things there are
other ways to do verification um but this is a pretty standard kind of
nodie express way of doing something like that and so I just used it because
it's gonna be in a lot of apps uh Morgan is our logger or
very very simple kind of debugger and what it's showing us
is our log here right it's keeping the log so every single request that I'm
making you can see like when I make these get requests when I log in when I
sign up like all of these events that are happening uh that's Morgan so Morgan
just helps us log all the stuff that's happening it's just a good logger so
it's very common to have Morgan running on your application because you can see
all the requests that are coming through
and the cool thing is you don't actually have to like code these right you don't
you don't have to like code um these individual requests like in our

04:16
previous applications I've coded those console logs right like I console log
saying that there was a get request a post request a delete request right and so
um it was all console logs and wild I don't you don't have to do that anymore
when we use Morgan cool uh you can see that we're requiring
our database so we have this lovely database.js file and in this database.js
file is US connecting to our mongodb database with the newer updates to
mongodb uh we actually don't really need
a lot of this stuff anymore it's kind of just baked in now so if somebody wants
to submit a pull request to update this I improve it um
so that's kind of the changes that are there now and then we just have linking
to our routes which we've covered in the past two classes right where where if a
if a route comes into one of the main routes we're going to use this route
file and if any of the to do routes come in like slash to Do's any of the

04:17
creating uh getting or deleting or updating of the to-do's are all going to
use these routes cool then since we are using environment
variables throughout our application we actually have to tell Express uh to use
the environment variables and we kind of talked about this um
I talked about this I think the very first time we went through this but this
is something that like is not built into
node which is pretty silly at this point that environment variables is still an
external package for something so important uh it's kind of like the flock
like you can kind of see some of the philosophies come through and how node
is organized and how it can lean on npm and things like that for for a lot of
the key stuff and so we have these other environments that are creeping up like
bun right and so one of the things that bun came out with is like hey
environment variables are built right in you don't need external packages to do
this stuff and so um just know that if you're using good

04:18
old node here you have to like tell it to not only use your environment
variables but where to go find the environment variables and I like to put
my environment variables in my config folder my config folder eventually uh
does not get pushed up to GitHub my eventually my whole config folder
probably just goes in my I get ignore um
for us a lot of the key stuff will go in my git like anything that's eventually
going to make its way into the git ignore can often find its way into my
config folder uh there's gonna be some stuff I don't want in the git ignore but
a lot of times it's a lot of the thought of the secrets and stuff like that'll
wind up in my config things are going to help me set up or configure my
application that's where they're going so we need our database to be configured
we need passport to actually do authentication so a lot of stuff that's
going to help us configure application that's what my config folder is for
since we're going to be using passport for authentication we actually need to
tell our application to use passport the server.js is still the place where we

04:19
set up our entire application right uh why why am I not using bun uh because
it's not battle tested yet it's it's still too new and no one's using it yet
and so one of the things that you have to be really careful of doing I don't
think they're at version one yet um and so
you often don't want to use the latest and greatest uh until it's been used for
a little while uh because especially as newer developers you're gonna run into
some weird edge cases and you want those edge cases to have stack Overflow
articles right you want somebody else to have run into the pain so that you're
not having to be the one that um to be the one that has to figure out the
pain right and so a lot of times I I I I I'd never for new folks tell new folks

04:20
to chase the latest and greatest because you're going to run into some weird
stuff and you might not be equipped to handle that weird stuff
um and so especially we also have like like the naming of stuff and so
um you'll notice that people are saying buns at one zero one eleven
right most of the time applications are not ready for you to be used until
they're at one zero zero right that's when they're saying like hey you can use
this in production but until they hit that version one release it's not ready
for production at all so they're doing a lot of really cool and creative stuff
but it's not something that's ready for production it's something that you would
use in your actual applications yet play with it figure out what it does right
now let's bring the cool thing about bun right now is it's it's asking a lot of
really interesting questions about how we can do things better faster what's
what should be what should be a like first class stuff like what should be

04:21
built into um built into something like no that's been
around for forever and so I think right now instead of actually trying to use it
you should be participating in those conversations about what is it bringing
to the table what might be missing from the environments that we're using and um
I think that's really that's really key right now
cool uh we need to connect to our database right now we can see connectdb
is holding our database file we know that our database file exports well
let's let's do without even looking if connect DB is holding what was
required from our database file in our config folder what do you know about
connectdb just by looking at line 18 what do you know about connectdb

04:22
yeah you can tell that it's a function right like
might be a method because it might be tied to an object but it's a function
right we can see that it's using the parentheses so that we know that it's
calling something it is a function awesome uh then we have kind of our
normal run-of-the-mill stuff we're using ejs for our views
I was running through the text with my wolves all right
uh we have our public folder that we're still using when we get to our social
our social networking app uh we're going to need to put more stuff in our public
folder our apps are ugly we don't have any CSS we don't have anything like that
so we're gonna need some more stuff going into our public
um these next two lines enable us to kind of look at the requests that are
coming through right enables us to look at kind of like what body parts we used
to do if you've been around the block a little bit it enables us to look at any
of the requests and pull the stuff we need out of the request so we can pull

04:23
all the stuff that came from the forms or things like that out of our requests
and then this is just us setting up Morgan to run and log everything so with
line 24 Morgan now runs and all of your requests get logged without having to um
without having to um to put console logs into or anything
like that sessions we kind of already talked about this is just kind of
letting our app use the session you don't really need to do anything other
than maybe change the secret if you wanted to and then we have our
middleware uh which is set up to let us know that we're using passport so when
we have these two lines we're letting it know that password's gonna be handling
our authentication and that we're going to be using sessions along with passport
as well and then we have our lovely flash which is
setting up those flash alerts that we saw from when things don't go wrong with
our login or sign up then we have our route set up so that our app knows how
to handle the requests that are coming in any of the requests on the root route

04:24
go to main routes any of the requests that come in on to-do's go to the to-do
routes and then finally we kick off our server uh and we have the process.env
port so that if we do uh if we do push our code uh to
something like Roku or the new Challengers that have approached uh we
don't have to worry about having a fixed port
actually possible hey thank you for the raid hope you're doing well
welcome everybody hope you had a good stream from Argentina hey let's go welcome
well hope you had a good stream thanks for bringing the crew along hope you've
been well good to see you in a minute welcome everybody
come on in come on in get get comfy we're working through a full stack
application that we've been building it's a full stack to-do list with

04:25
authentication and all the goodies uh We've we've worked through it
we built it and then folks over the past
week have been building projects with it and so we're just kind of cleaning up
some of the Loose Ends some of the things we didn't get a chance to cover
yet to make sure we're really good before we build out a full stack uh
social networking site so we're going to try and build an Instagram clone
together using all the stuff that we've been learning so far welcome all right
see here all right so let's walk through the server.js file uh any questions
while we're here about the server.js stuff I know it's a little bit of extra
stuff that we hadn't covered yet so I just want to make sure we went through it

04:26
uh the Euro encoded so this stuff right here is just so that we can take a peek
at the requests that are coming through we can grab every single part of the
request that's being made to the server right so we can we can right
right we can make any type of requests we can make a get request a post request
whatever we're making the requests right this part of the code enables us to
actually look at different parts of the requests that are coming through right
we can we can we can pull the stuff out of the forms that were submitted
anything that was sent with that request these two lines enable us to pull those
things out cool uh uh in the server.js considered part of the controller
so you can think of the server.js as like setting up the entire application
uh it sets up everything that we are going to need right so the server.js

04:27
tells us hey we're going to be using all these packages it sets up our
environment variables it sets up our passport connects us to our database
sets up our view engine it sets up all the things that we're going to need and
then Express is doing a lot of the heavier lifting right Express is using a
lot more of the heavy lifting that enables us to then build out stuff like
our controllers our models and it kind of is the glue that brings it all
together oh what is the thing we don't need anymore
uh so or sorry Mongoose kind of updated and a lot of these kind of these
like these these like new URL parser unified topology a lot of this stuff's
kind of like you don't really need it anymore because it's kind of just baked
in now um before as Mongoose so like the thing

04:28
you have to realize that a lot of this has been around for a while and all of
these different packages they go through Cycles where they try to improve or
bring new stuff to the table and a lot of the stuff that they first introduced
is experimental right where you can use it if you want right right you can use
it if you want but some things might I don't know not
work that well so you can turn on these flags so that the experimental stuff you
get and then once that's been proven for a while it's been it's been a a year or
two that everything's been working they roll that in to an updated version of of
the code right so one of the things that that I had to do today
was I didn't realize in our in our social networking code there is
something there's a package I was using called multer and

04:29
you can see that I pushed the change here today there was there was there is
a downstream so when I sit Downstream it's like you
can think of all these packages as depending on other stuff right
click hey thank you for the posture check let me get posture check
here we go nice so you can think of all the packages that we're using as
dependent on other stuff and so one of the packages I was using for our image
uploading called multer they were using a package Downstream like their
application was built on other packages called dicer and dicer has a
bug right now that's a security vulnerability
and it's like actually a pretty serious one and they haven't fixed it yet so
molter that was requiring that package was like wait a minute we can't we can't

04:30
use this because that Downstream thing has some problems and so molter went
from one four four two one four five and in that five they introduced a fixed
that circumvented the issue that was happening right
uh circumvented the issue that was happening right and so that fix got rid
of that Downstream dependency and I had to update the code to go from 144 to 145
so that we wouldn't the code wouldn't break right so that's kind of something
that can happen where these updates have to happen every once in a while
um because things break or things break Downstream and all these things build up
on top of each other so these packages are typically always kind of evolving
and fixing and growing and sometimes these fixes are so great that instead of

04:31
having like a minor update or uh an update to like say 5.0 eventually they
get to the point where they have a full update that's like it might as well be a
whole new set of software and so you'll notice that we have minor we have
patches right so this one for do one four five was a patch right like
they patched something it was a quick fix and then eventually they'll have
like a minor update that includes all the fixes that'll be like one five zero
and then eventually you have so many minor fixes that you might as well make
it a new version and then that be version 2.00
how do you keep up with all the packages there's actually an mpm command
um that will tell you um that'll tell you what needs to be
updated if you want and when you do that's a good idea clutch when you do go

04:32
ahead and do mpm install something that you all are probably going to see quite
a bit is it'll tell you that there's broken stuff
and you can do npm audit and then npm audit will look at all that broken stuff
and try and update it and fix it for you A lot of times you have to do npm audit
hyphen hyphen Force which means hey I don't care if this breaks something just
update the stuff for me right and so a lot of times you'll do npm audit fix
force and that will update all the packages for you and sometimes something
sometimes things just don't work after right and so that's something you have
to worry about uh there's actually a command that you can run in npm that will
um that will show you like what version everything is at I know I just did it so
I just did it recently I think I did it with this code base

04:33
no this is a different it was a different folder a different file
actually it might be in this one let me see
blanking on the command for some reason outdated there you go npm outdated uh so
you can do npm outdated I'm kind of embarrassed to run that on the code base
that we have over here let's try it though uh oh
there you go so when you do npm outdated uh it'll show you uh kind of what like
where you're currently at and uh what the latest is so rip rip

04:34
these ones are kind of okay rip yeah and so that's something you can do and
then npm update will help you fix a lot of this stuff
uh but it's just not important and for for like your your like learning
projects but if you're gonna build something from scratch maybe 300 project
maybe update everything and sometimes there are things that are
great that'll break and then you have to like figure out
um how to fix them like the the update to 145 is not straightforward for malter
um I like when I when I try to do the npm audit fix it wasn't actually
updating 2145 so what I did is I actually I went to actually show you what I did

04:35
um I went to multer on GitHub I went to molter on GitHub
and I was having this error updating wasn't actually working right like
updating updating the motor package wasn't working so since moulter wasn't
working and npm audit fix Force wasn't working I was like all right there has
to be something wrong here with malter um because even the update's not working
so I went to their issues and security vulnerability due to dicer
that was the error I was getting so I went to
um like the issue and I read through what people are talking about and
somebody at the end uh says that the changes have been pushed as one four
five uh and so what I did is I just like there's better ways to do this but just
because I was trying to be quick and I was trying to do it before class started

04:36
I just went to my package.json and I know this is a lot I'm just
showing it because it's something I did recently I went to my package.json and
uh it's not sorry it's the wrong I went to my package.json
and in my package.json I just uh ripped out molter this one eat
I eated it and I did npm install multi save and it just it downloaded the
newest version of molter it saved it and that's it so like I just I just
literally deleted this line did npm did the npm
install uh malter or npm npm install motor save and
um yeah what that'll do is it'll download the latest version for you and
save it in your package.json and that's it yeah and so you can see that this is
kind of like a weird version like it updated it's like the LTS right now and

04:37
then that fixed all the issues so a lot of what I had to do was like all right I
have this weird bug right I have this weird bug uh even like my npm update
audit fix Force isn't working and so I went to the actual packages space on
GitHub like their actual repo on GitHub I read through the issue that I was
having it's like oh it's been fixed or been updated in this newer version all I
have to do is um update to this latest version that's it
all right so that's a little bit of uh a
little bit of a wander away from what we were talking about but I wanted to show
it because it's something that is going to come up uh next week or sorry on
Thursday all right uh so that was the server.js we kind of talked through that
one of the things that folks had some trouble with that I just want to talk

04:38
through uh was the user model and this user model is a user model that
I got from just passport right [Music] um like I said that wasn't like the best
way to do it I was just trying to be quick yeah
yeah it does leave two in the package lock
um but I wasn't sure if I was gonna roll
back to it or not or anything weird like
that so I prefer actually to have both I know it's weird it's not probably best
practice but that's it that's what I did am I proud of it no
all right uh so the other thing I feel kind of had some trouble with that I
just wanted to talk through is the user model and this user model is not
something that um like once again you would ever have

04:39
like committed to to memory uh what it enables you to do is to create a user in
this case um my user schema for creating a new
user has a username email and password so that is the result of a new user will
be a document right right will be a document that has a username an email
and a password right so that's the schema here remember schemas for
Mongoose are just Constructor functions right think about a Constructor that
spit out an object right we've all built Constructors don't let schemas get in
your head or make you feel like um or feel like it's uh something that you
haven't seen before it's just a Constructor function and that
Constructor function is going to spit out an object right and that object is
going to have a username email and password property right and then where

04:40
do these objects that get spit out of the schema or mongoose uh go where do
they wind up the database exactly wind up in our
database the very last thing that we have here is we export the model user uh
and we export the user schema if we look user schema here is the thing we're
exporting so this new schema is the thing that we're exporting and we gave
it the name of user so if we look at our mongodb
um we're eventually going to be able to have in our database here
these objects that have the username the email and the password
username email and password right coming from our user schema now the thing that

04:41
we are storing in here is a password could we have just whatever password
they typed in Bob Bob could we have stored that in the database absolutely
you could have absolutely just stored Bob Bob Bob into the database and and
that would have been there in plain text but we don't want to store passwords in
plain text if someone ever got access to
our database they would then have access to all of the passwords and that
wouldn't be good right that wouldn't be good because if somebody would just take
that password and try logging into everybody all their other accounts they
would use their email that they have here and they would try logging it to
their Gmail they would try logging into their bank they would try logging into
all these different things that would have that same password so every once in
a while a company gets hacked and you find out
that they were storing your passwords in plain text and you get so mad because

04:42
you know that it's what line 13 through 33. so 20 lines of code
20 lines of code would have stopped them from having plain text passwords right
literally less than 20 lines of code because we got like comments and stuff
so under 20 lines of code uh to not store passwords in plain text and so how
do we store passwords not in plain text well we we encrypt the password
and so you could think of the way that we're doing this we're going to hear it
called uh hashing you'll hear it called salting you'll hear different variations
on these different words but all we're doing is we're trying to take something
like Bob and turn it into something that does not represent
Bob right so we have the word Bob but in

04:43
our database it's going to wind up being bullying to V
right there we're taking our plain text right and we're turning it into
something else and we are using a b Crypt which is the
package that enables us to take this word and turn it into a hashed version
of that word now theoretically you could reverse it right you could
reverse it if you knew exactly how this was happening if you knew exactly kind
of the the the generator that was using it you
could Bruce force it you could do all these different things to kind of like
try and reverse engineer it um but it would just probably take a
really really long time like if you had a super computer and it was just running

04:44
for years maybe you could figure it out but all bcrypt is doing is taking our
passwords and turning it into something else that's not that and then when we
need to use the password we can take that really weird encrypted string and
get the password back right and so you you you can't like you can't reverse a
hash true yeah right so the idea here is that we are
we are turning into something else right that's not going to be used as plain
text into our database that's all we're doing here now are we doing it are we
doing any of this heavy lifting no right right we're not doing any of this heavy
lifting we're just using bcrypt to do it for us
right that's the idea and so we use this so that we don't wind up storing those
plain text passwords uh into our database can we do it more than password

04:45
you could you could but bcrypt is handling all of that for us so that's it
if you want to you could go super deep into how bcrpt works you can go super
deep into how hashing works and all that fun stuff but like I said we're just
using off the shelf we don't have to go deep into it if you want to knock
yourself out but for when you are using local authentication boom just use
vcrypt you're using passport it just works cool
yeah pjz said it correctly here hashes cannot be reversed password comparison
works by hashing the attempt and comparing it with the stored hash
right so what's going to wind up happening is let's say you put in your password
right let's say you put in your password we put in Bob

04:46
right we put in Bob Bob gets hashed to dollar sign to V right Bob gets hashed
into two dollar sign 2v the next time we log in and the user types in
I don't know they type in John instead well that hash
is going to be different that hash might be like Bang
three x right so then we would look in our database and be like all right wait
a minute we were expecting this but we got this
right we got this so that that password is not correct
if they were to instead turn it type in Bob that would get hashed to
pulling to V which we would see in our database we go oh this bling 2v right
matches the bling 2v that we have stored in our database so it has to be the

04:47
correct password that's it right that's it cool alrighty let's take a break here
we're going to go ahead and take a break uh we're at the top of the hour if
you're new around here let's go ahead and I feel so stupid
let's go ahead and take our break here uh if you're new around these parts
please get up move around hydrate and we will be back in five minutes ready so
let's let's talk through the two things that we just covered uh to make sure
that we're all on the same page boom all right let's go to a sign up

04:48
uh let's actually sign up Frank let me run my server here all right
uh it's hard to get help with the CSS and the homework help area uh don't
don't use homework help use HTML and CSS help if you know you
need CSS help you know and also use the search if you're if
you're doing homework I'm guaranteeing people have already like most of the
questions have already been answered so always make sure you're doing search
because a lot of times a lot of those those questions have been answered
yeah especially especially specifically with the homeworks yeah so make sure
you're using the right Channel and then make sure that you're definitely using
search a lot of times somebody's answered answered the question like 10 times

04:49
they're probably not going to answer it again right yeah
cool and then also don't be afraid to ask your question like if you ask it in
the morning and nobody's answered it then go ahead and ask again in the
evening because different folks are up at different times and they're willing
to help at different points in time so make sure they see it cool
yeah and then also yeah and also change how you ask sometimes too A lot of times
um a lot of times it's hard to understand
certain people's questions and so taking a second to to rephrase things can
actually be really helpful a lot of times when the questions don't get
answered it's because the question itself was really um
it's really gets is asked in an odd way and it's really hard for folks to to
answer it or you'd include your code things like that but yeah most most
folks are scrolling through those channels every day to answer questions

04:50
um so yeah definitely don't be definitely definitely be afraid to ask again
um but I would say the bulk if not all the questions get answered so just make
sure you're rephrasing it yeah all right so let's sign up
and we're going to create uh Frank's account for real this time frank.com
but oh sorry let's keep doing the first emails to email so do Frank we do Frank
at Frank .com password will be Frank Frank and I'm going to submit all right as
soon as I click submit uh what are some things that have
happened when I click submit uh what are some things that had to
happen as I clicked submit let's talk big level here

04:51
based on the two things we just talked about kind of what's Happening
all right a request was made nice specifically a post request was made uh
that post request right Was Heard and a user was created and
what helped us create the the user what how what did we use to create the user
the user model right which had a schema that helped us build out that user nice
and when we created that user uh we didn't
store their password in plain text what did we do
yeah we hashed the password and when we hashed the password uh what did we use

04:52
to help us hash the password decrypt beautiful thank you so uh be
Crypt we put we typed in I typed in Frank Frank
Frank Frank was the password I entered in and let's see what B gave us uh
for that password let's take a look there we go so we typed in Frank Frank
and our hash because they're hashing why she's trying to get in here uh
b-crypt hashed it to be this long Ash string
right and uh the beautiful thing is we can't

04:53
go backwards even if we have this hashed this hash string we can't use that oh
I wish I could show you this is the cutest thing ever so in the new room I have
right in this new room I have the door and then to get further in the roommate
to go down a hallway at the end of the hallway is a huge like it's just a huge
blanket basically and the blanket helps muffle some of the sounds that are
coming into the room so not only did did Moshi open the door to get into the
hallway they came all the way pushed past this huge ass like sound dampening
blanket and into the room I'll just like I just thought that was quite amusing
uh all right so they typed in Frank Frank Frank Frank uh B turned it

04:54
into this long string right now right now there is no like
mathematical proof that would show that we can go from a hash back to what the
original the original value was right so the way that this will work going
forward is whenever someone types in Frank Frank as the password what will
bcrypt always turn that into no matter what the user is or what they or like
when they do it what will bcrypt always turn Frank Frank into
yeah this hash string so when the user logs in and they type in Frank Frank
what we're going to do is turn Frank Frank into its hash and then we're going
to check to see if the hash in our database matches the hash that would
have came from Frank Frank if the hashes match what do we know the user typed in

04:55
the correct what I typed in the right password all right they typed in the right
password so um it can get a little more complicated
than that you can do a little bit extra things here but that's kind of the gist
of it cool so now we have the ability to create users we have the ability to
create passwords uh we have our server set up I think those are kind of like
the big things that we hadn't really talked about uh so far in this
application we talked through our major controllers we talk through some of our
middleware we looked at our models uh yeah so I feel pretty good about where
we're at with this one you saw us build out the app you saw that you built it
out with your group to add more stuff to it and we're going to keep building on
top of it right uh The Flash oh yeah use the flash so inside of our

04:56
if we go ahead and we so we're going to look at a few different places here but
if we look inside of all right [Music] there we go sorry our auth controller
here right when we look inside of our auth
controller which is helping us with kind of creating our different users right
it's the thing that's actually using the user model we're going to have this
wonderful little bit of code in here that's going to be doing the validation
and so we have like our validator and the validator is going to have all these
little things that were that were checking right so
um we're gonna see like is there like an email
um if there isn't a like actual email you can see that we're gonna push enter
a valid email address into our errors uh

04:57
we don't put in a password in you'll see password cannot be blank
um so in here you can see a couple different things that eventually could
be used as flash messages and so we're going to use these kind of messages all
throughout our application and so you're going to see them pop up whenever you
have like a message that we're using right we can use those as like our flash
messages and so we have them pop up a few places in our application but that's
kind of the idea um as folks are are logging in
um as folks are signing up there might be some errors that we need to show and
those errors will eventually be handled by The Flash

04:58
can we style The Flash messages yes you can
how do they show so let's take a look at our views let's look at the login and
sign up pages and so if we look at our login and our sign up Pages you can see
that we have as part of our ejs a place for those messages to show up
right so as those messages are happening
and you're like refreshing the page with those requests right like when you
submit the form you send a request part of the ejs that spits out the HTML that
comes back to you now has those messages that were passed into this conditional
here so when you didn't put in a long enough password or
you didn't put in a correct email or you
didn't put in any of these little things that um that that
are like the errors in our application right the right now theirs are getting

04:59
passed into the div right right passed into the div and that's
where these messages will show up now you're also seeing here that I have
alert and alert danger anybody would know where those came from
yeah those are bootstrap classes so on Thursday we'll use bootstrap and some
of the projects that we'll work on probably later on we'll have Tailwind
but they're just different ways of kind of adding some default style so a lot of
apps right I do the same stuff over and over again and so you can use things
like bootstrap or Tailwind to like make styling very very easy and quick and so
this alert and alert danger is actually me using bootstrap and so if I wanted to

05:00
and I loaded bootstrap which you'll see on Thursday um
I now have like these would show up as like red whenever something happened
like you would get like that it would be like like a like a Red Box showing you
the error yeah learn bootstrap for the group project that's awesome
yeah it's an easy way to kind of style out your application cool
beautiful all right so we kind of walked
through we've seen this application what I want to do with the rest of our time
tonight is start to think through our social media application right the think
through our social media application are
our social networking the 100 Dev social network will think up uh we'll think up
some some a better name I saw some good ones

05:01
today uh for now it's quick pound last cohort named a binary upload boom we'll
do a poll on Thursday to name it but we want to build a social network and a
social network that has a lot of the core features of something like Instagram
are you going to teach us a framework like next.js no because that's something
you might learn on the job however if you contribute to a lot of the 100
Dev stuff a lot of the 100 death stuff that I've been working on uses next.js
so if you wanted to like help our like landing pages and stuff like that you
would pick some of that stuff up cool alrighty so
let's think through some stuff that we would need if we were going to build a
basic social networking application where we can say like upload photos and
have just some normal social media S type
things what are some features that we're
going to need for this application let's talk like features first and then we'll

05:02
kind of break down like the data that we're going to need and like the things
we might store in our database and all that fun stuff so we're going to need an
account yeah I agree we need some sort of like some sort of authentication
which is wonderful what we've been just learning what else are we going to need
um profile pages I like that what else uh a feed okay I like a feed um
the ability to post okay let me look post like buttons okay like buttons
comments comments could be good friends oh friends would be a cool
feature maybe that's let's we can think about friends or

05:03
DMS things like that DMS okay so we have a lot of different things
that we could do uh Delete like the ability to like to delete a post okay um
no dislikes no dislikes reporting that could be good
no updating posts we're gonna go full Twitter on this one um
cool all right let's think about like what some of the core stuff would be so
authentication we're going to need individual user profiles makes a lot of
sense like a feed where we can see all the posts make sense
our post we should probably be able to delete our post like our post not
everyone's post but like we'd be able to probably delete our post we should
probably be able to like posts right maybe we should be able to leave
comments on posts and maybe we'll save friends and DMS for maybe something that
you would add on top of it I think the way we build this out we probably

05:04
wouldn't um would it be too hard to add um but I think we start here we're in a
good spot so I'm gonna add these things uh here to the top just so we have like
a nice little list where did my like a little normally there's like a
little widget that tells me that I can like do other stuff
where'd that go one second here we go all right so I'm just going to add some
text here just so we have it at the top we're going to have off profiles feed
posts and our posts we should be able to delete them
we should be able to like them uh and then comments let's do comments
as well and I think we'll start here and we can add all the stuff that we need

05:05
probably after that cool alrighty so if we're going to have Authentication
we probably need what if we're going to have authentication we
probably need what we need to use passport and password is
going to help us create what password is going to help us create what
yeah users so I think one of the first bits of data that we're gonna need to
keep track of are our users so I'm gonna make a collection for our users and I'm
going to put that over here so probably the first collection that I'm going to
keep track of will be our users collection and let's just go ahead and put some
text here I'm just going to say our users

05:06
beautiful and our users will be made up of a bunch of documents that come from
our where were our documents get their structure from the model
that has our schema and our scheme is going to enable us to create a bunch of
different users and our different users will all have
a few key things what are our users going to have to have a username cool
they're going to have email cool password and what else do we know
what do we know about any document that we create in mongodb it's all going to

05:07
have what an ID nice they're all going to have an
ID you're going to make this a little bit smaller just that we can actually
write some stuff next to it cool so let's say let's say our first user
will have the ID I'm just going to make it easy for us to keep track of the IDS
have the idea of 100 they have the username of Bob and they have the email of
b.com and then they have the password which is our lovely hash password of
some some random right just some random password right that was hash cool
so we're gonna have a bunch of these different users so let's see if I can

05:08
just make a quick Copy of both of these so each user that signs up
we're gonna have a different document for each of those users all right
a different document for each of those users
and each user is going to be slightly different right like the IDS will be
different uh 101 for John and it'll just be J j.com and this is
something I do for kind of like any app that I'm going to build out right
where I'm going to kind of just plan out my data and my different views so if I
can plan out my data and My Views I have a pretty good handle on what my
application is going to look like cool um we're gonna have Sarah here as well

05:09
we'll just do Sarah oh nice and then we'll also have screw
Victor we'll just go straight to Frank I'm just gonna do f atf.com
cool all right so brings there into this
is this an example of whiteboarding yeah I'm kind of like whiteboarding through
my application I'm gonna keep track of like the major data I need to keep track
of and the the major views and then from that I can figure out kind of a lot of
stuff all right so we know that each time somebody logs in or sorry every time
somebody signs up we wind up creating a user
but if we were to Think Through like profiles a feed posts where should we start
um let's start with a post we should have an individual

05:10
right we should have an individual post okay so let's think about an
individual posts I'm just going to do a view here for a post
so it's gonna this will be like our our post View
I'm just going to put post view here at the top cool
what do we need for our post like what should the user what should our user
sorry what should our post actually contain like what should what should an
individual post on our social network contain
text in an image I actually like that so maybe we have uh maybe we have an image
right so let's let's say we have an image all right boom we have our image that

05:11
shows up right that'll be our image cool and then maybe we have like a caption
so the caption can be whatever right so we have like our caption all right
and then maybe we have I'm seeing some folks
saying likes yeah maybe we have like the number of likes so maybe we have likes
and like a number so we'll just say like I mean if it's me it's just like
thousands right but if it's like everybody else maybe like one or two
like what do people get in these days like three I don't know cool so we'll
say like likes we'll have like a caption we'll have the number of likes um
and then what else what else does a post actually need if we're trying to like

05:12
a date like a time stamp let's keep it simple let's keep it simple I think a
date could work a timestamp could work uh maybe a delete button maybe if it's
our post there should be a delete button right like if if it's our posts maybe
there's like a there's a trash can and that there'll be some sort of logic
to figure out like that would wind up being like a trash can or delete
cool I think that's where we could start eventually we would want to have like
comments but I think there's gonna be some I think for now I'm going to think
of that as as separate data for now so to make a post a post gonna have these
different things so what do we know that we're going to need in our in our

05:13
database if this is what posts have like what are we gonna We have a user's
collection what else are we going to need yeah like a post collection
um oh the user like oh we didn't put that on here maybe like we have like the
username too I mean we have like the person actually
made the post that's probably pretty helpful cool
um so we'll have the username we'll have likes we'll have a caption and we'll
have a delete button beautiful all right so let's go ahead and build out our
users collection sorry our post collection now that we kind of have
fleshed out what our posts might look like and the things we might want to
keep track of we'll save comments we might come back to that but I think this
is like we're thinking we're talking like MVP right our minimal viable
product right like the simplest thing that we could
um that we could that we could build out so we're going to just keep it simple

05:14
keep it keep it keep it clean MVP uh posts we're gonna need some posts so
let's go ahead and build out our post collection oh I don't want that
I want a different shape my friend here we go all right a different shape here
all right here we go all right so we're gonna have our posts collection
and inside of our post collection we're gonna have a document for each of our
posts so our we're going to wind up having
we have a post collection that means we also have a what
yeah post model and that post model will have a schema and the schema will
dictate uh the structure of each of our documents so the structure of each of

05:15
our documents let's figure out what we're going to have in each of them
uh so each of our documents in our post collection will have to have off the rip
an ID too big too small there we go has to have an ID
and that ID will be created at random for every single post that's made and so
we can just go ahead and give that an ID let's just say it's it's five
hundred right just a random ID we'll start it up 500. what else should each
post have ah okay folks throwing it in chat already um so we're gonna have the
let's say we know there's stuff already here so

05:16
we're gonna have to have the image which will be a URL of the image
which we'll talk through in a second uh we're gonna have to have the number of
likes which will be a number in this case it's three
uh we're gonna have a caption which will be a string and let's let's
actually let's say I'm putting real data in here but in like our schema we would
have like a value so we're just going to say
um a string for now but like if we were thinking our schema we say like string
Boolean number things like that um so we have an ID we have an image URL
we have the number of likes we're gonna have a caption which is a string
um let's think through some other stuff oh let's have a create it
bye I saw that in chat I created by right and let's think about this
if we have a post how do we know who made the post

05:17
like how am I going to tie my individual posts to a specific user
yeah the ID so if Bob made this post I'm going to put a created by 100.
I'll do a create it by 100. if we look Bob had the idea of 100 so I'm gonna
have a created by property that matches Bob's ID
why wouldn't I use Bob's username maybe there's more than one person that
names themself Bob what if Bob renamed like what if Bob like renamed their like
what if they change their username right that's pretty common on apps that that

05:18
people can rename their usernames and so we would still want to have all these
posts tied to Bob even if they change their username so instead of having to
like go through and edit every single post right so I'm going to go through
and edit every single post to have the updated username right we can just
always use the ID so even if Bob was to change his name it'd always have the
same created by and so maybe maybe Bob's made a few posts so let's go ahead and
copy this and this actually maybe it's a little bit smaller
all right maybe Bob's made a few posts already so balance made a few posts
let's go and copy this boom right and so this other post would have
a unique ID uh maybe has a different number of likes different string and

05:19
it's still created by Bob right it's still created by Bob right so we still
have the ID of 100. now do we think do we think these apps are actually
deleting anything we said we have to have this delete
button are they deleting anything oh I don't think so let's go ahead and say
delete it and for right now we'll just say that both of these are false
right but eventually what we could do is we could change the deleted property to
true and uh just not show it if it's true so when our users when our users
click the delete button we're not actually going to delete it
we're just gonna change the deleted property to true so we still have all
the data on our back end uh but it's we just won't show it to them when it's

05:20
when it switches and if there's going to be a squeaky clean site
that sucked exactly foreign all right cool so Bob's been creating
some posts we now know that whenever we create a post the ID is going to match
the create it by right the ID is going to match the
created by so if I ever want it to build out something like um
a post page right if I ever wanted to build out a post page uh I could say
that let's say this is the URL I could have something like my let's say we're
on localhost uh 2121 right slash post how could I have a
unique URL just for this post like what would be my unique URL just for an

05:21
individual post yeah we could just grab the ID so this could be like slash
this could be slash 500 right this could be slash 500 and the cool thing about
this being slash 500 is that eventually in my API I could yoink the 500 and then
know which posts to go find to render this View
right so we can just use these IDs to know which posts we're rendering so if
if the uh if the page was instead 501 that would grab this post instead so
now we can have unique URLs for each of our posts and when we go and render
these posts we can grab the image we can grab the number of legs we can grab the

05:22
caption we can grab the person that created it but for that to work if we if
we just have the created by what are we also going to have to do
yeah we're gonna have to figure out which user has the ID of 100 so we would
require we would we would make a request to our post collection to get all the
information about the post but then we wind up making another request to our
users collection to find out who has the ID of a hundred so we could plop in Bob
here right and this is like a very very kind of
we're we're taking our time here we're easing into the idea of how we might
build out a um a full stack application here would be
doing all this to production probably not but this is a good way to get an MVP
going is to think about how all this data is interconnected and how we might

05:23
build out our app going forward so uh the cool thing here is that we have
the ability to have unique posts that now all have unique users let's build
one more post that has a different user so let's say let's say Frank made a post
uh let's say Frank made a post right Frank made a post it went really
viral so it has like uh like a thousand likes uh what would the created buy be
here for Frank's post B103 exactly because Frank has the ID of
103. so whenever we make a post we can store that ID so we know who made this
post all right we wanted to make a feed page
um so let's let's make a view for our feed page I think that's an easy next
steps since we already have kind of like this stuff going
we went to make a feed page that has a bunch of different posts on

05:24
it right maybe maybe we're just scrolling here all right we're just scrolling
right we have a bunch of different posts that are on our feed
right there we go how would the feed page work if we were like say we were at
a URL like let me just copy this one here let's say our localhost 2121 slash
speed how would that work like we just we just want to show all
the posts what could we do yeah we could just make a request right
to find all of our posts we could grab them all right and then we just passed

05:25
all these posts to our ejs and our feed is just every single post that's in our
collection eventually we might want to only grab a
few at a time right maybe we'll grab the
most recent 500 or the most recent three that are in our database right
so we don't have to grab all of them but
we can just go and grab the post that we care about right from our post
collection to build out our feed so our feed is pretty pretty simple if it's
like a let's think of it as like a like a like a for you page on Tick Tock right
like it it doesn't matter if they're our friend or not right it's just anything
that's ever been posted right all right cool yeah we can Implement friends later
on for now let's keep it simple so for now our feed is just going to be all the
posts um maybe we'll only grab a few at a time just so that it's not completely
Reckless but eventually we can get in other things like lazy loading and all

05:26
that fun stuff Progressive rendering all that fun stuff um but for now we're
going to grab them all because we're building an MVP right building MVP we're
going to grab the most recent five and that'll be our feed all right
uh oh yeah all the posts that that don't have a deleted property of true they've
had a deleted property of true it wouldn't show up in the feed or or an
individual post that's a good good call all right so we have our feed we have
our post I think like an extension of the feed might be our
so we have profiles so we we have feed we have post I think the other big one
is our profile so let's let's give this a little bit more room hmm

05:27
let's do our profile here oh no there we go let's do our profile here
um what does our profile need username maybe like a pick for their bio yeah bio
do we have bios or pictures yet for our users if we're
gonna have if we're gonna have like user like we're gonna have like bios and
profile pictures what do we have to change
what would have to update for us to have like profile photos and yeah our users
model right we need a new user schema that would include profile photos that
would include uh that would include bios very easy not hard to do right we

05:28
just we go to our user model and we make space for the photo we make space for
the um for the bio right totally totally something we could do but let's keep it
simple for now uh I think our my profile
what I really want is like an individual profile for each user
and so I'm going to do just like what our what our what our URL might look
like localhost 2121 slash profile and what would be a what would be a
possible URL for one of our profiles like what would Bob's profile be
what do you think what do you think Bob's profile URL would be yeah 100.
100 right because what we're going to do is we're
going to say all right if somebody goes to localhost 2121 profile slash 100

05:29
right that means they want all the stuff relating to Bob
right so maybe at the very top we have our username
right and then what do we want probably on that profile
yeah all all of all of Bob's posts so probably on this profile
we're gonna have a few posts here all right let's let's copy this all right
and maybe for now it's not like the full
post but maybe it's just the image maybe it's just like the image of each post

05:30
and Bob right now Bob really only has how many posts right now
Bob only has two posts right now so we'd only wind up having two posts on our
profile at the moment but we can imagine there'd be like posts going down the
page but Bob only has two posts we can see Bob's ideas 100 and this has a
creative buy of 100 and a created by a 100 so both of these were created by Bob
all right cool so when we're loading Bob's profile page we're able to grab
based off of the ID that we're using all of the posts
that have that idea of 100 we're able to grab those the plug into our ejs right
cool so we're able to say all right we want the profile of this user we're then

05:31
going to use this ID they go find all of their posts and plug that into the ejs
we've also made a request the users collection to get that ID's username as well
cool so when we loaded the profile we actually went and got data from to what
when we loaded the profile we actually went and got data from to what thrown in
chat we went and got data from two collections we went to the users collection
to find the username and we went to the post collection to find uh Bob's posts
cool and there's probably one other thing that we let's put let's put one other
thing on the profile page um let's put a form right let's put a form

05:32
uh for Bob to make new posts right and so this form
would probably only show up when we probably have this in some sort of
conditional and this form would only show up when
yeah if Bob is the logged in user right if the person that is currently logged
in is Bob then we know that they're on their profile page and if they're on
their profile page right if you are on their profile page uh then
we can show the form and the form would be everything that we need to make a
post so we would have like a form and that form let's just say this is the form

05:33
the form would ask for a couple of the key things there the form would ask for
we already kind of know what the form would ask for
we already know what the posts they're going to need uh it's going to need a
caption it's going to need a image so we're going to say a file upload
cool star form is pretty pretty tight at
the moment uh we just kind of need those two key bits of information
all right we need a caption and we need a file upload because
the ID will be randomly generated the number of likes that that'll that'll
go up right that'll go up as we actually
like stuff and we do all that caption is what we need when they actually create
it all this other stuff is just filled in um when they submit right so when we

05:34
submit this form right when we submit this form
we are going to make a post request that
post request is going to be heard by our server and that post request will go
ahead and make the post and that post will wind up having a unique ID it'll
have the image that we uploaded here it'll start off with the likes of zero
but eventually if people like stuff in our application that number can go up
it'll have the caption that we just entered it'll have whoever was logged in
when they made it so in this case Bob with the ID of 100 and then it'll have
if it was deleted or not but when it's first created it'll just be false right
yeah cool so the file uploading is the tricky
bit here and so are we going to write custom code right

05:35
are we going to write custom code to to to to upload our files no way not me
I'm not maybe you I'm not uh so we're going to use packages that do that for
us so we're going to use a package called multer that's going to enable us
to upload photos now one of the hard thing about photos or
media in general is that they're heavier what do I mean by that photos and
certain types of media are heavier yeah like the file size like they're
just bigger files like they're they're they're they're they're they're like
when you think about like like they're more Megabytes they're they could be
gigabytes they could be it's going to take out more space right it's gonna
need more storage so what we could do is we could take our files
and just upload them directly to our server right like we could take our

05:36
images and just upload them and have a folder on our server called images
however if people start to use this social network the requests for those
images is going to be a really taxing on our server right and so everyone that
needs all these photos will keep hitting our server keep hitting our server keep
hitting our server uh and that would that would make our server Bill get
pretty big pretty quickly um but also since they're heavier are bigger files
it's going to take longer for them to download and if my server is sitting in
Dallas or Chicago we're not getting any benefits that uh
like something like a CDN could provide for us where our images are on servers
around the world right so what people do is they use things like Amazon S3
to store their images for them so we kind of just send our images to Amazon

05:37
and Amazon gives us back a what what would Amazon give us back
we would send all of our images to Amazon and and Amazon's just going to
give us a what a URL right a URL so we're not actually
storing the images ourself Amazon's doing all the heavy lifting for us
eventually we could use like cool stuff like CDN so that our images are all over
the place for other folks to get and download easier right and they just give
us a URL so what are we going to store what are we gonna store
in our post document yeah we're we're not going to store the
actual image we're going to store the URL to that image right and we're
actually going to use something that makes this easier we're gonna use
something called cloudinary cloudinary is really developer friendly and what
cloudinary is going to do is we're going to send our photos to cloudinary and

05:38
then cloudinary is going to give us back a URL that we could store
in our in our document right and so we're not actually storing any images
we're just storing the URLs to the images
what about thumbnails the cool thing is that once we send our stuff to
cloudinary they can actually give us thumbnail URLs and stuff like that too
they can give us a lot of stuff back that'll make us make our lives pretty easy
and the reason why I like cloudinary good thing you brought that up gonski is
that they actually do lots of other media so you don't we're not limited to just
images uh going forward if we're using cloudinary
um so that's that's the beautiful part here too
all right so we have right now the very basics of our application we have the
ability to have individual post we have the ability to have a feed that shows

05:39
kind of like all the posts we could have individual profile Pages where when our
when we go to an individual profile and they're not logged in we'll just see all
the photos from that user and if they are logged in we'll see all their photos
but we'll also have the ability to upload um upload other posts
pool so this is like a very very simple social network
um if we wanted to we could add some other stuff too we could add
um we could add comments so if we were gonna add comments let's say that we had
uh underneath our our images would be comets and so what

05:40
could we do here if we wanted to show comments we probably need another what
probably another collection I feel more comfortable this was in another
collection uh so let's say like uh let's put a comment here um
a Doyle I don't spell a Doyle a Doyle oh Doyle rules um
cool stuff we're just gonna say cool stuff
all right so the comment was cool stuff um and maybe we have the user that made
the comment in this case uh oh wow it's Sarah it's Sarah posting on Bob's
on Bob's on Bob's post we're gonna have some stuff to talk
about on Thursday so Sarah just left a comment on Bob's post saying cool stuff

05:41
right I don't know why what are these games right Victor's
gonna be mad uh so Sarah just posted cool stuff we need to add a block button
unfriend all right so now we have a comment so let's think about what we
might need for comments um so let's go ahead and build out a new collection
I want the rounded one there we go let's build up comments
so now we have our comments collection and let's go ahead and just give this a
title real quick comments beautiful so here's our comments and we're gonna
have an individual documents for each of our comments it means we have a new
model we have a new model that has a new schema

05:42
and whenever we create a comment right there's there's going to have to be some
sort of like form here or something for us to enter a comment so let's just
imagine right now there's a form here that Sarah used right so what type of
information we're going to need to store in the comments uh created by comment
and yeah likes could be a good thing here I like that created that could be
eventually too if we need like time so let's go ahead and say that we're going
to need inside of our comments we're going to have our
ID that's gonna be randomly generated uh so in this it'll just say seven
twenty right uh we're gonna need the actual comment
which in this case is cool stuff we're gonna have um
let's just call it something slightly different just so we can keep track of
it but we probably still have created by

05:43
made by in this case it was made by what would we put here for made by this
comment was made by what yeah 102. it was made by 102 because 102
is Sarah Sarah has the idea of 102 so be 102. nice so ID comet made by um
I think we could probably get away with that for now oh and maybe if we if we
wanted likes on individual comments we could have that like we could have likes
for individual comments but I don't want to do that for now let's just keep it
simple we'll have um the individual ID for the comment we'll have
um cool stuff made by we need one other we needed one other really important bit
of information we're missing one important bit of information
yeah the post ID so we need the post ID so where where was this comment made on

05:44
which post was this comment made on well
this post was made on the comment of 501 right so this individual post
right this individual post was this post here which had the idea 501
so all my comments that are left right all my comments that are left on this
post will have that post idea 501 so if we kind of keep with the lore here and
we kind of copy this and we make a new comment
let me bring it down we might we might see something like this happen uh so
this will be a new a new ID for this this comment we might see what the

05:45
uh and that's going to be made by who would that have been made by
yeah that's going to be made by 101 which is John right we don't have Victor
here yet but but John's just live it Victor's gonna come in Victor Victor's
gonna wind up needing a comment too so let's go ahead and make another comment
here and so this will be another comment
uh it'll be made by uh 104. we can't see 104 because that's Victor down here we
can just imagine that Victor is is 104. right
and so uh it's still in the 501 uh but it's gonna be made by Victor and it's
going to be just like what's like the crying emoji

05:46
just like upset there's a sad face sad face just like they're not even mad
we're not even mad they're just they're just sad right they're just sad
cool uh and then what if there was like what if there was like a post
what if there was a comment on a different post
what if there was like a comment on um on this post here
right there there is a comment on a different post
should be five of two right there's a different post right let's say there's a
comment on uh This original post up here
the the other posts by Bob right there's another post by Bob right
and there's another comment on that post well it would have its own ID right

05:47
Neato uh it could be made by let's say it was
made by Frank good old frank right and it was on post 500. so
while we can't see it because we don't have that post pulled up right
we don't have that post pulled up we can see that
Bob's original post right the post that has the idea 500. uh actually now has a
comment uh of Neato that was made by Frank
and we know that this comment goes along with this post because the post ID
matches the ID boom you need to build a social network
right you just built a social network and so we can build out full-blown
applications just with these kind of simple concepts of all right well we
know that every document that gets created has its own ID

05:48
right has its own ID so we can use those IDs to our advantage right every single
post needs a created by and we can just go ahead and say all right we know who
created it by the user that was logged in we just grabbed their ID and we plop
it in then we know that each post right each post uh can have comments and we
can tie the comments to an individual post by all of them having the same post
ID so the idea here is that we can literally start building out
applications that do anything that we want them to do by simply keeping this
concept in mind of all right every document has an ID I can have different
collections for the different kinds of data and I can connect all these
different bits of data together just by using those IDs
that's pretty neat right this is pretty cool like this is this is what I said

05:49
like once you understand some basic stuff we can start to build whatever we
want and so the idea here is that on Thursday we have to learn a few things
right we have to learn a few things like wait
a minute like how do I like grab these IDs right how do I like
use these IDs to make requests to the different collections like I know the
logged in user has an ID but how do I use it to get their post or how do I use
it to get their comments so on Thursday um
we will explore that deeper right we're going to take a look at all right how am
I using all these different IDs how am I using these different IDs to get these
different collections the posts the comments uh and then once we know that
we can put all this together to build this application together oh
literally all making sense and so whatever you wanted to add like whatever

05:50
stuff you wanted to add you're probably just updating these few things right
you're you're gonna if we want it to add friends
right we wanted to add friends uh friends could be simply an array right
like like real quick just before we leave tonight let's say we wanted to add
friends to our users right we could just have an array called friends
and inside that array we could put the different users that we're friends with
right no they only got it's only 103. it's
only Frank John and Sarah aren't friends
with with Bob so long story right but we let's say Sarah slid in right there you
go right now now we have 103 and 102 as the friends of Bob right so we can
really just extend off of this to add any of the functionality that we want

05:51
we'll keep it simple to build our air MVP but once we have this
and we can build whatever the heck we want
right it's just figuring out all right do I need a new collection for that kind
of data what do I need to keep track of and so when we come back on Thursday
we'll take a look at these IDs we'll take a look at how all this gets
connected so we can build our social network cool how do you update the database
schema after you've already been created
uh we're not there yet let's let's build
something basic really first and you can always run stuff you can always run
queries that like update stuff there's ways of handling that in production

05:52
we're just we're just not there cool alrighty let's go ahead and do a raid
uh ending with Ali let's go over there they're doing some leak code uh we're
gonna be getting into leak code pretty soon uh so let's go ahead
and give them a raid get those sweet sweet Channel points wonderful all right
everybody's already warned them so I feel good as always send some love their
way give them some follows uh hang out in the chat for a while say what's up
say hello and I will see you all on Thursday thank you for a wonderful class
uh really excited to build out this application together like all your hard
work becomes real like you can build real now that's so cool and so

05:53
let's get all that through on Thursday let's build this out and start building
the apps of our dreams all right buddy have a wonderful rest of your night or
day morning wherever it may be for you let's read
